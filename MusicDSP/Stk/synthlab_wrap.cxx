/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_GlideInfo swig_types[0]
#define SWIGTYPE_p_MIDINoteEvent swig_types[1]
#define SWIGTYPE_p_ModuleCoreData swig_types[2]
#define SWIGTYPE_p_SynthLab__AnalogEGCore swig_types[3]
#define SWIGTYPE_p_SynthLab__AudioBuffer swig_types[4]
#define SWIGTYPE_p_SynthLab__AudioDelay swig_types[5]
#define SWIGTYPE_p_SynthLab__AudioDelayParameters swig_types[6]
#define SWIGTYPE_p_SynthLab__BQAudioFilter swig_types[7]
#define SWIGTYPE_p_SynthLab__BQCoeffs swig_types[8]
#define SWIGTYPE_p_SynthLab__BQFilterCore swig_types[9]
#define SWIGTYPE_p_SynthLab__BasicLookupTables swig_types[10]
#define SWIGTYPE_p_SynthLab__ClassicWTCore swig_types[11]
#define SWIGTYPE_p_SynthLab__CoreProcData swig_types[12]
#define SWIGTYPE_p_SynthLab__DCA swig_types[13]
#define SWIGTYPE_p_SynthLab__DCAParameters swig_types[14]
#define SWIGTYPE_p_SynthLab__DCRemovalFilter swig_types[15]
#define SWIGTYPE_p_SynthLab__DMConfig swig_types[16]
#define SWIGTYPE_p_SynthLab__DXEG swig_types[17]
#define SWIGTYPE_p_SynthLab__DXEGCore swig_types[18]
#define SWIGTYPE_p_SynthLab__DelayLine swig_types[19]
#define SWIGTYPE_p_SynthLab__DrumWTCore swig_types[20]
#define SWIGTYPE_p_SynthLab__DrumWTSource swig_types[21]
#define SWIGTYPE_p_SynthLab__DynamicTableSource swig_types[22]
#define SWIGTYPE_p_SynthLab__DynamicWavetable swig_types[23]
#define SWIGTYPE_p_SynthLab__EGParameters swig_types[24]
#define SWIGTYPE_p_SynthLab__EnvelopeGenerator swig_types[25]
#define SWIGTYPE_p_SynthLab__Exciter swig_types[26]
#define SWIGTYPE_p_SynthLab__ExciterEG swig_types[27]
#define SWIGTYPE_p_SynthLab__ExciterParameters swig_types[28]
#define SWIGTYPE_p_SynthLab__FMLFOCore swig_types[29]
#define SWIGTYPE_p_SynthLab__FMOCore swig_types[30]
#define SWIGTYPE_p_SynthLab__FMOperator swig_types[31]
#define SWIGTYPE_p_SynthLab__FMOperatorParameters swig_types[32]
#define SWIGTYPE_p_SynthLab__FilterOutput swig_types[33]
#define SWIGTYPE_p_SynthLab__FilterParameters swig_types[34]
#define SWIGTYPE_p_SynthLab__FourierWTCore swig_types[35]
#define SWIGTYPE_p_SynthLab__FracDelayAPF swig_types[36]
#define SWIGTYPE_p_SynthLab__GlideInfo swig_types[37]
#define SWIGTYPE_p_SynthLab__GlideModulator swig_types[38]
#define SWIGTYPE_p_SynthLab__HP2Filter swig_types[39]
#define SWIGTYPE_p_SynthLab__HighShelfFilter swig_types[40]
#define SWIGTYPE_p_SynthLab__IFilterBase swig_types[41]
#define SWIGTYPE_p_SynthLab__IMidiInputData swig_types[42]
#define SWIGTYPE_p_SynthLab__IModulator swig_types[43]
#define SWIGTYPE_p_SynthLab__IPCMSampleDatabase swig_types[44]
#define SWIGTYPE_p_SynthLab__IPCMSampleSource swig_types[45]
#define SWIGTYPE_p_SynthLab__IWavetableDatabase swig_types[46]
#define SWIGTYPE_p_SynthLab__IWavetableSource swig_types[47]
#define SWIGTYPE_p_SynthLab__KSOCore swig_types[48]
#define SWIGTYPE_p_SynthLab__KSOscParameters swig_types[49]
#define SWIGTYPE_p_SynthLab__KSOscillator swig_types[50]
#define SWIGTYPE_p_SynthLab__LFOCore swig_types[51]
#define SWIGTYPE_p_SynthLab__LFOParameters swig_types[52]
#define SWIGTYPE_p_SynthLab__LP1PFilter swig_types[53]
#define SWIGTYPE_p_SynthLab__LP2Filter swig_types[54]
#define SWIGTYPE_p_SynthLab__Lane swig_types[55]
#define SWIGTYPE_p_SynthLab__LaneStep swig_types[56]
#define SWIGTYPE_p_SynthLab__LegacyPCMCore swig_types[57]
#define SWIGTYPE_p_SynthLab__Limiter swig_types[58]
#define SWIGTYPE_p_SynthLab__LinPeakDetector swig_types[59]
#define SWIGTYPE_p_SynthLab__LinearEGCore swig_types[60]
#define SWIGTYPE_p_SynthLab__LogPeakDetector swig_types[61]
#define SWIGTYPE_p_SynthLab__LookUpTable swig_types[62]
#define SWIGTYPE_p_SynthLab__LowShelfFilter swig_types[63]
#define SWIGTYPE_p_SynthLab__MIDINoteEvent swig_types[64]
#define SWIGTYPE_p_SynthLab__MellotronCore swig_types[65]
#define SWIGTYPE_p_SynthLab__MidiInputData swig_types[66]
#define SWIGTYPE_p_SynthLab__MidiOutputData swig_types[67]
#define SWIGTYPE_p_SynthLab__ModDestination swig_types[68]
#define SWIGTYPE_p_SynthLab__ModMatrix swig_types[69]
#define SWIGTYPE_p_SynthLab__ModMatrixParameters swig_types[70]
#define SWIGTYPE_p_SynthLab__ModSource swig_types[71]
#define SWIGTYPE_p_SynthLab__Modulators swig_types[72]
#define SWIGTYPE_p_SynthLab__ModuleCore swig_types[73]
#define SWIGTYPE_p_SynthLab__ModuleCoreData swig_types[74]
#define SWIGTYPE_p_SynthLab__MorphBankData swig_types[75]
#define SWIGTYPE_p_SynthLab__MorphWTCore swig_types[76]
#define SWIGTYPE_p_SynthLab__NoiseGenerator swig_types[77]
#define SWIGTYPE_p_SynthLab__NoiseOscillator swig_types[78]
#define SWIGTYPE_p_SynthLab__NoiseOscillatorParameters swig_types[79]
#define SWIGTYPE_p_SynthLab__OscParameters swig_types[80]
#define SWIGTYPE_p_SynthLab__Oscillator swig_types[81]
#define SWIGTYPE_p_SynthLab__PCMOscParameters swig_types[82]
#define SWIGTYPE_p_SynthLab__PCMOscillator swig_types[83]
#define SWIGTYPE_p_SynthLab__PCMSample swig_types[84]
#define SWIGTYPE_p_SynthLab__PCMSampleDatabase swig_types[85]
#define SWIGTYPE_p_SynthLab__PCMSampleOutput swig_types[86]
#define SWIGTYPE_p_SynthLab__ParametricFilter swig_types[87]
#define SWIGTYPE_p_SynthLab__PluckPosFilter swig_types[88]
#define SWIGTYPE_p_SynthLab__PluginInfo swig_types[89]
#define SWIGTYPE_p_SynthLab__RIFF_CHUNK swig_types[90]
#define SWIGTYPE_p_SynthLab__RampModulator swig_types[91]
#define SWIGTYPE_p_SynthLab__ResLoopFilter swig_types[92]
#define SWIGTYPE_p_SynthLab__Resonator swig_types[93]
#define SWIGTYPE_p_SynthLab__SFXWTCore swig_types[94]
#define SWIGTYPE_p_SynthLab__SimpleLPF swig_types[95]
#define SWIGTYPE_p_SynthLab__SineTableSource swig_types[96]
#define SWIGTYPE_p_SynthLab__SlewLimiter swig_types[97]
#define SWIGTYPE_p_SynthLab__StaticTableSource swig_types[98]
#define SWIGTYPE_p_SynthLab__StaticWavetable swig_types[99]
#define SWIGTYPE_p_SynthLab__Synchronizer swig_types[100]
#define SWIGTYPE_p_SynthLab__SynthClock swig_types[101]
#define SWIGTYPE_p_SynthLab__SynthEngine swig_types[102]
#define SWIGTYPE_p_SynthLab__SynthEngineParameters swig_types[103]
#define SWIGTYPE_p_SynthLab__SynthFilter swig_types[104]
#define SWIGTYPE_p_SynthLab__SynthLFO swig_types[105]
#define SWIGTYPE_p_SynthLab__SynthLabBankSet swig_types[106]
#define SWIGTYPE_p_SynthLab__SynthLabPCMSource swig_types[107]
#define SWIGTYPE_p_SynthLab__SynthLabTableSet swig_types[108]
#define SWIGTYPE_p_SynthLab__SynthModule swig_types[109]
#define SWIGTYPE_p_SynthLab__SynthProcessInfo swig_types[110]
#define SWIGTYPE_p_SynthLab__SynthVoice swig_types[111]
#define SWIGTYPE_p_SynthLab__SynthVoiceParameters swig_types[112]
#define SWIGTYPE_p_SynthLab__Timer swig_types[113]
#define SWIGTYPE_p_SynthLab__TinyBPF swig_types[114]
#define SWIGTYPE_p_SynthLab__TinyReson swig_types[115]
#define SWIGTYPE_p_SynthLab__UWaveData swig_types[116]
#define SWIGTYPE_p_SynthLab__VA1Coeffs swig_types[117]
#define SWIGTYPE_p_SynthLab__VAFilterCore swig_types[118]
#define SWIGTYPE_p_SynthLab__VAOCore swig_types[119]
#define SWIGTYPE_p_SynthLab__VAOscParameters swig_types[120]
#define SWIGTYPE_p_SynthLab__VAOscillator swig_types[121]
#define SWIGTYPE_p_SynthLab__VectorXFadeData swig_types[122]
#define SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP swig_types[123]
#define SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER swig_types[124]
#define SWIGTYPE_p_SynthLab__WAVE_SAMPLE swig_types[125]
#define SWIGTYPE_p_SynthLab__WSOscParameters swig_types[126]
#define SWIGTYPE_p_SynthLab__WSOscillator swig_types[127]
#define SWIGTYPE_p_SynthLab__WTOscParameters swig_types[128]
#define SWIGTYPE_p_SynthLab__WTOscillator swig_types[129]
#define SWIGTYPE_p_SynthLab__WaveFolder swig_types[130]
#define SWIGTYPE_p_SynthLab__WaveSequencer swig_types[131]
#define SWIGTYPE_p_SynthLab__WaveSequencerParameters swig_types[132]
#define SWIGTYPE_p_SynthLab__WaveSequencerStatusMeters swig_types[133]
#define SWIGTYPE_p_SynthLab__WaveSliceCore swig_types[134]
#define SWIGTYPE_p_SynthLab__WaveStringData swig_types[135]
#define SWIGTYPE_p_SynthLab__WavetableDatabase swig_types[136]
#define SWIGTYPE_p_SynthLab__WavetableSource swig_types[137]
#define SWIGTYPE_p_SynthLab__XFadeData swig_types[138]
#define SWIGTYPE_p_SynthLab__XFader swig_types[139]
#define SWIGTYPE_p_SynthLab__XHoldFader swig_types[140]
#define SWIGTYPE_p_SynthLab__convertUpper swig_types[141]
#define SWIGTYPE_p_SynthLab__midiEvent swig_types[142]
#define SWIGTYPE_p_Wavetable swig_types[143]
#define SWIGTYPE_p_XFadeData swig_types[144]
#define SWIGTYPE_p_XFadeType swig_types[145]
#define SWIGTYPE_p_bool swig_types[146]
#define SWIGTYPE_p_char swig_types[147]
#define SWIGTYPE_p_double swig_types[148]
#define SWIGTYPE_p_f_float__float swig_types[149]
#define SWIGTYPE_p_f_r_q_const__float__float swig_types[150]
#define SWIGTYPE_p_fenv_t swig_types[151]
#define SWIGTYPE_p_fexcept_t swig_types[152]
#define SWIGTYPE_p_float swig_types[153]
#define SWIGTYPE_p_int swig_types[154]
#define SWIGTYPE_p_int32_t swig_types[155]
#define SWIGTYPE_p_long swig_types[156]
#define SWIGTYPE_p_long_long swig_types[157]
#define SWIGTYPE_p_midiEvent swig_types[158]
#define SWIGTYPE_p_p_SynthLab__PCMSample swig_types[159]
#define SWIGTYPE_p_p_SynthLab__SynthLabTableSet swig_types[160]
#define SWIGTYPE_p_p_char swig_types[161]
#define SWIGTYPE_p_p_float swig_types[162]
#define SWIGTYPE_p_p_uint64_t swig_types[163]
#define SWIGTYPE_p_short swig_types[164]
#define SWIGTYPE_p_signed_char swig_types[165]
#define SWIGTYPE_p_std__complexT_double_t swig_types[166]
#define SWIGTYPE_p_std__complexT_float_t swig_types[167]
#define SWIGTYPE_p_std__default_random_engine swig_types[168]
#define SWIGTYPE_p_std__gslice swig_types[169]
#define SWIGTYPE_p_std__gslice_arrayT_float_t swig_types[170]
#define SWIGTYPE_p_std__indirect_arrayT_float_t swig_types[171]
#define SWIGTYPE_p_std__mapT_int_std__string_t swig_types[172]
#define SWIGTYPE_p_std__mask_arrayT_float_t swig_types[173]
#define SWIGTYPE_p_std__numeric_limitsT_double_t swig_types[174]
#define SWIGTYPE_p_std__numeric_limitsT_float_t swig_types[175]
#define SWIGTYPE_p_std__numeric_limitsT_int_t swig_types[176]
#define SWIGTYPE_p_std__numeric_limitsT_long_long_t swig_types[177]
#define SWIGTYPE_p_std__numeric_limitsT_long_t swig_types[178]
#define SWIGTYPE_p_std__numeric_limitsT_short_t swig_types[179]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t swig_types[180]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t swig_types[181]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t swig_types[182]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t swig_types[183]
#define SWIGTYPE_p_std__shared_ptrT_FilterParameters_t swig_types[184]
#define SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t swig_types[185]
#define SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioDelayParameters_t swig_types[186]
#define SWIGTYPE_p_std__shared_ptrT_SynthLab__DCAParameters_t swig_types[187]
#define SWIGTYPE_p_std__shared_ptrT_SynthLab__EGParameters_t swig_types[188]
#define SWIGTYPE_p_std__shared_ptrT_SynthLab__FMOperatorParameters_t swig_types[189]
#define SWIGTYPE_p_std__shared_ptrT_SynthLab__LFOParameters_t swig_types[190]
#define SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiInputData_t swig_types[191]
#define SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiOutputData_t swig_types[192]
#define SWIGTYPE_p_std__shared_ptrT_SynthLab__ModMatrixParameters_t swig_types[193]
#define SWIGTYPE_p_std__shared_ptrT_SynthLab__Modulators_t swig_types[194]
#define SWIGTYPE_p_std__shared_ptrT_SynthLab__ModuleCore_t swig_types[195]
#define SWIGTYPE_p_std__shared_ptrT_SynthLab__NoiseOscillatorParameters_t swig_types[196]
#define SWIGTYPE_p_std__shared_ptrT_SynthLab__OscParameters_t swig_types[197]
#define SWIGTYPE_p_std__shared_ptrT_SynthLab__PCMOscParameters_t swig_types[198]
#define SWIGTYPE_p_std__shared_ptrT_SynthLab__PCMSampleDatabase_t swig_types[199]
#define SWIGTYPE_p_std__shared_ptrT_SynthLab__SynthEngineParameters_t swig_types[200]
#define SWIGTYPE_p_std__shared_ptrT_SynthLab__SynthVoiceParameters_t swig_types[201]
#define SWIGTYPE_p_std__shared_ptrT_SynthLab__VAOscParameters_t swig_types[202]
#define SWIGTYPE_p_std__shared_ptrT_SynthLab__WTOscParameters_t swig_types[203]
#define SWIGTYPE_p_std__shared_ptrT_SynthLab__WavetableDatabase_t swig_types[204]
#define SWIGTYPE_p_std__shared_ptrT_SynthVoiceParameters_t swig_types[205]
#define SWIGTYPE_p_std__shared_ptrT_WTOscillator_t swig_types[206]
#define SWIGTYPE_p_std__shared_ptrT_double_t swig_types[207]
#define SWIGTYPE_p_std__shared_ptrT_std__arrayT_SynthLab__ModDestination_SynthLab__kNumberModDestinations_t_t swig_types[208]
#define SWIGTYPE_p_std__shared_ptrT_std__arrayT_SynthLab__ModSource_SynthLab__kNumberModSources_t_t swig_types[209]
#define SWIGTYPE_p_std__slice swig_types[210]
#define SWIGTYPE_p_std__slice_arrayT_float_t swig_types[211]
#define SWIGTYPE_p_std__string swig_types[212]
#define SWIGTYPE_p_std__valarrayT_float_t swig_types[213]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[214]
#define SWIGTYPE_p_std__vectorT_float_t swig_types[215]
#define SWIGTYPE_p_std__vectorT_std__complexT_double_t_t swig_types[216]
#define SWIGTYPE_p_std__vectorT_std__complexT_float_t_t swig_types[217]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[218]
#define SWIGTYPE_p_std__vector_iteratorT_double_t swig_types[219]
#define SWIGTYPE_p_std__vector_iteratorT_float_t swig_types[220]
#define SWIGTYPE_p_std__vector_iteratorT_std__complexT_double_t_t swig_types[221]
#define SWIGTYPE_p_std__vector_iteratorT_std__complexT_float_t_t swig_types[222]
#define SWIGTYPE_p_uint16_t swig_types[223]
#define SWIGTYPE_p_uint32_t swig_types[224]
#define SWIGTYPE_p_uint64_t swig_types[225]
#define SWIGTYPE_p_unsigned_char swig_types[226]
#define SWIGTYPE_p_unsigned_int swig_types[227]
#define SWIGTYPE_p_unsigned_long swig_types[228]
#define SWIGTYPE_p_unsigned_long_long swig_types[229]
#define SWIGTYPE_p_unsigned_short swig_types[230]
#define SWIGTYPE_p_void swig_types[231]
static swig_type_info *swig_types[233];
static swig_module_info swig_module = {swig_types, 232, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "synthlab"
#define SWIG_init      luaopen_synthlab
#define SWIG_init_user luaopen_synthlab_user

#define SWIG_LUACODE   luaopen_synthlab_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#define FLT_EPSILON_PLUS      1.192092896e-07        ///< /* smallest such that 1.0+FLT_EPSILON != 1.0 */
														/** \ingroup Constants-Enums */
#define FLT_EPSILON_MINUS    -1.192092896e-07        ///< /* smallest such that 1.0-FLT_EPSILON != 1.0 */
														/** \ingroup Constants-Enums */
#define FLT_MIN_PLUS          1.175494351e-38        ///< /* min positive value */
														/** \ingroup Constants-Enums */
#define FLT_MIN_MINUS        -1.175494351e-38        ///< /* min negative value */

#include "synthbase.h"
#include "synthconstants.h"
#include "synthengine.h"
#include "synthfilter.h"
#include "synthfunctions.h"
#include "synthlabparams.h"
#include "synthlabpcmsource.h"
#include "synthlabwtsource.h"
#include "synthstructures.h"
#include "synthvoice.h"

#include "analogegcore.h"
#include "audiodelay.h"
#include "basiclookuptables.h"
#include "bleptables.h"
#include "bqfiltercore.h"
#include "classicwtcore.h"
#include "dca.h"
#include "drumwtcore.h"
#include "dx_eg.h"
#include "dxegcore.h"
#include "dynamictablesource.h"
#include "envelopegenerator.h"
#include "exciter.h"
#include "fmlfocore.h"
#include "fmocore.h"
#include "fmoperator.h"
#include "fourierwtcore.h"
#include "guiconstants.h"
#include "ksocore.h"
#include "ksoscillator.h"
#include "lfo.h"
#include "lfocore.h"
#include "limiter.h"
#include "linearegcore.h"
#include "mellotroncore.h"
#include "modmatrix.h"
#include "morphwtcore.h"
#include "noiseoscillator.h"
#include "oscillator.h"
#include "pcmlegacycore.h"
#include "pcmoscillator.h"
#include "pcmsample.h"
#include "readerwriterqueue.h"
#include "resonator.h"
#include "sequencer.h"
#include "sfxwtcore.h"
#include "sinetablesource.h"
#include "trace.h"
#include "vafiltercore.h"
//#include "vafilters.h"
#include "vaocore.h"
#include "vaoscillator.h"
#include "waveslicecore.h"
#include "wsoscillator.h"
#include "wtoscillator.h"
#include "wtsource.h"


#include <complex>
#include <valarray>
#include <fenv.h>


#include <complex>


#include <valarray>
#include <algorithm>

SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____add____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self + b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____sub____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self - b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____div____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self / b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____mul____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self * b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____pow____SWIG_0(std::complex< float > *self,std::complex< float > const &b){ return std::pow(*self,b); }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____pow____SWIG_1(std::complex< float > *self,float const &b){ return std::pow(*self,b); }
SWIGINTERN bool std_complex_Sl_float_Sg____eq____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self == b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____add____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self + b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____sub____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self - b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____div____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self / b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____mul____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self * b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____pow____SWIG_0(std::complex< double > *self,std::complex< double > const &b){ return std::pow(*self,b); }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____pow____SWIG_1(std::complex< double > *self,double const &b){ return std::pow(*self,b); }
SWIGINTERN bool std_complex_Sl_double_Sg____eq____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self == b; }
SWIGINTERN float std_valarray_Sl_float_Sg____getitem____SWIG_0(std::valarray< float > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_valarray_Sl_float_Sg____setitem____SWIG_0(std::valarray< float > *self,size_t i,float const &v){ (*self)[i-1] = v; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____getitem____SWIG_1(std::valarray< float > *self,std::gslice const &i){ return (*self)[i]; }
SWIGINTERN void std_valarray_Sl_float_Sg____setitem____SWIG_1(std::valarray< float > *self,std::gslice const &i,float const &v){ (*self)[i] = v; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____getitem____SWIG_2(std::valarray< float > *self,std::slice const &i){ return (*self)[i]; }
SWIGINTERN void std_valarray_Sl_float_Sg____setitem____SWIG_2(std::valarray< float > *self,std::slice const &i,float const &v){ (*self)[i] = v; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____add____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return *self + b; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____sub____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return *self - b; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____mul____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return *self * b; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____div____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return *self / b; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____unm____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return -*self; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____pow____SWIG_0(std::valarray< float > *self,std::valarray< float > const &b){ return std::pow(*self,b); }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____pow____SWIG_1(std::valarray< float > *self,float const &b){ return std::pow(*self,b); }

#include <limits>



    typedef float f32;
    typedef double f64;
    typedef signed char i8;
    typedef unsigned char u8;
    typedef signed short i16;
    typedef unsigned short u16;
    typedef signed int i32;
    typedef unsigned int u32;
    typedef signed long ilong;
    typedef unsigned long ulong;
    typedef signed long long i64;
    typedef unsigned long long u64;
    
    
    
    
    template<typename T> T abs(const T& x) { return std::abs(x); }
    template<typename T> T fabs(const T& x) { return std::fabs(x); }
    template<typename T> T acos(const T& x) { return std::acos(x); }
    template<typename T> T acosh(const T& x) { return std::acosh(x); }
    template<typename T> T asinh(const T& x) { return std::asinh(x); }
    template<typename T> T asin(const T& x) { return std::asinh(x); }
    template<typename T> T atan(const T& x) { return std::atan(x); }
    template<typename T> T atan2(const T& x,const T& y) { return std::atan2(x,y); }
    template<typename T> T atanh(const T& x) { return std::atanh(x); }
    template<typename T> T cbrt(const T& x) { return std::cbrt(x); }
    template<typename T> T ceil(const T& x) { return std::ceil(x); }    
    template<typename T> T copysign(const T& x, const T& y) { return std::copysign(x,y); }
    template<typename T> T cos(const T& x) { return std::cos(x); }
    template<typename T> T cosh(const T& x) { return std::cosh(x); }
    template<typename T> T erf(const T& x) { return std::erf(x); }
    template<typename T> T erfc(const T& x) { return std::erfc(x); }
    template<typename T> T exp(const T& x) { return std::exp(x); }
    template<typename T> T exp2(const T& x) { return std::exp2(x); }
    template<typename T> T expm1(const T& x) { return std::expm1(x); }
    template<typename T> T fdim(const T & x, const T & y) { return std::fdim(x,y); }
    template<typename T> T floor(const T & x) { return std::floor(x); }
    template<typename T> T fma(const T & x, const T & y, const T& z) { return std::fma(x,y,z); }
    template<typename T> T fmax(const T & x, const T & y) { return std::fmax(x,y); }
    template<typename T> T fmin(const T & x, const T & y) { return std::fmax(x,y); }
    template<typename T> T fmod(const T & x, const T & y) { return std::fmod(x,y); }
    template<typename T> int fpclassify(const T & x) { return std::fpclassify(x); }
    template<typename T> T hypot(const T & x, const T & y) { return std::hypot(x,y); }
    template<typename T> int ilogb(const T & x) { return std::ilogb(x); }
    template<typename T> bool isfinite(const T & x) { return std::isfinite(x); }
    template<typename T> bool isgreater(const T & x, const T & y) { return std::isgreater(x,y); }
    template<typename T> bool isgreaterequal(const T & x, const T & y) { return std::isgreaterequal(x,y); }
    template<typename T> bool isinf(const T & x) { return std::isinf(x); }
    template<typename T> bool isless(const T & x, const T & y) { return std::isless(x,y); }
    template<typename T> bool islessequal(const T & x, const T & y) { return std::islessequal(x,y); }
    template<typename T> bool islessgreater(const T & x, const T & y) { return std::islessgreater(x,y); }
    template<typename T> bool isnan(const T & x) { return std::isnan(x); }
    template<typename T> bool isnormal(const T & x) { return std::isnormal(x); }
    template<typename T> bool isunordered(const T & x, const T& y) { return std::isunordered(x,y); }
    template<typename T> T ldexp(const T & x, int exp) { return std::ldexp(x,exp); }
    template<typename T> T lgamma(const T & x) { return std::lgamma(x); }
    template<typename T> T llrint(const T & x) { return std::llrint(x); }
    template<typename T> T llround(const T & x) { return std::llround(x); }
    template<typename T> T log(const T & x) { return std::log(x); }
    template<typename T> T log10(const T & x) { return std::log10(x); }
    template<typename T> T log1p(const T & x) { return std::log1p(x); }
    template<typename T> T log2(const T & x) { return std::log2(x); }
    template<typename T> T logb(const T & x) { return std::logb(x); }
    template<typename T> T lrint(const T & x) { return std::lrint(x); }
    template<typename T> T lround(const T & x) { return std::lround(x); }
    template<typename T> T nan(const char *tagp) { return std::nan(tagp);}
    template<typename T> T nanf(const char *tagp) { return std::nanf(tagp);}
    template<typename T> T nanl(const char *tagp) { return std::nanl(tagp);}
    template<typename T> T nearbyint(const T &x) { return std::nearbyint(x); }
    template<typename T> T nextafter(const T & x, const T & y) { return std::nextafter(x,y); }
    template<typename T> T nexttoward(const T & x, const T & y) { return std::nexttoward(x,y); }
    template<typename T> T pow(const T & b, const T & e) { return std::pow(b,e); }
    template<typename T> T remainder(const T & n, const T & d) { return std::remainder(n,d); }
    template<typename T> T rint(const T& x) { return std::rint(x); }
    template<typename T> T round(const T& x) { return std::round(x); }
    template<typename T> T scalbln(const T& x, long int n) { return std::scalbln(x,n);}
    template<typename T> T scalbn(const T& x, int n) { return std::scalbln(x,n);}
    template<typename T> bool signbit(const T & x) { return signbit(x); }
    template<typename T> T sin(const T& x) { return std::sin(x); }
    template<typename T> T sinh(const T& x) { return std::sinh(x); }    
    template<typename T> T sqrt(const T& x) { return std::sqrt(x); }
    template<typename T> T square(const T& x) { return x*x; }
    template<typename T> T cube(const T& x) { return x*x*x; }
    template<typename T> T tan(const T& x) { return std::tan(x); }
    template<typename T> T tanh(const T& x) { return std::tanh(x); }        
    template<typename T> T tgamma(const T& x) { return std::tgamma(x); }    
    template<typename T> T trunc(const T& x) { return std::trunc(x); }
    double Huge() { return HUGE_VAL; }
    float Hugef() { return HUGE_VALF; }
    double Infinity() { return INFINITY; }
    double NaN() { return NAN; }

    


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <algorithm>
#include <vector>
#include <map>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cassert>
#include <iostream>
#include <random>
#include <memory>


namespace std {
    template<typename T>
    struct vector_iterator
    {
        typename std::vector<T>::iterator iter;
        std::vector<T> v;

        vector_iterator(const std::vector<T> & vec) {
            v = vec;
        }   
        vector_iterator(const std::vector<T> & vec, const typename std::vector<T>::iterator & i) {
            iter = i;
            v = vec;
        }

        vector_iterator<T>& operator = (const T& val) {
            *iter = val;
            return *this;
        }
        vector_iterator<T>& operator = (const vector_iterator<T>& val) {
            iter = val.iter;
            v    = val.v;
            return *this;;
        }
                
        void next() {
            if(iter != v.end()) iter++;
        }
        void prev() {
            if(iter != v.begin()) iter--;
        }
        void forward(size_t i) {
            iter += i;
        }
        void backward(size_t i) {
            iter -= i;
        }
        void jump(size_t i) {
            iter = i;
        }
        
        T value() { return *iter; }
        void set_value(const T& val) { *iter = val; }
    };
}

#include <list>


  namespace std {
    template<typename T>
        struct list_iterator 
        {
            typename std::list<T>::iterator _iter;
            std::list<T> _list;;

            list_iterator(const std::list<T> & l, const typename std::list<T>::iterator & i) {
                _list = l;
                _iter = i;
            }

            void next() { if(_iter != _list.end()) _iter++; }
            void prev() { if(_iter != _list.begin()) _iter--; }
            T& get() { return *_iter;}

            //void insert(const Data& value) { _map.insert(_iter,value); }
            //bool find(const Key& key) { return _map.find(key) != _map.end(); }   
            
        };
    }


#include <map>


  namespace std {
    template<typename Key,  typename Data>
        struct map_iterator 
        {
            typename std::map<Key,Data>::iterator _iter;
            std::map<Key,Data> _map;

            map_iterator(const std::map<Key,Data> & m, const typename std::map<Key,Data>::iterator & i) {
                _map = m;
                _iter = i;
            }

            void next() { if(_iter != _map.end()) _iter++; }
            void prev() { if(_iter != _map.begin()) _iter--; }
            Data& get() { return *_iter;}

            void insert(const Data& value) { _map.insert(_iter,value); }
            bool find(const Key& key) { return _map.find(key) != _map.end(); }   
            
        };
    }


typedef struct{
  lua_State* L; /* the state */
  int idx;      /* the index on the stack */
}SWIGLUA_FN;

#define SWIGLUA_FN_GET(fn) {lua_pushvalue(fn.L,fn.idx);}


typedef struct{
  lua_State* L; /* the state */
  int ref;      /* a ref in the lua global index */
}SWIGLUA_REF;


void swiglua_ref_clear(SWIGLUA_REF* pref){
 	if (pref->L!=0 && pref->ref!=LUA_NOREF && pref->ref!=LUA_REFNIL){
		luaL_unref(pref->L,LUA_REGISTRYINDEX,pref->ref);
	}
	pref->L=0; pref->ref=0;
}

void swiglua_ref_set(SWIGLUA_REF* pref,lua_State* L,int idx){
	pref->L=L;
	lua_pushvalue(L,idx);                 /* copy obj to top */
	pref->ref=luaL_ref(L,LUA_REGISTRYINDEX); /* remove obj from top & put into registry */
}

void swiglua_ref_get(SWIGLUA_REF* pref){
	if (pref->L!=0)
		lua_rawgeti(pref->L,LUA_REGISTRYINDEX,pref->ref);
}



#include <string.h>

SWIGINTERN float std_vector_Sl_float_Sg____getitem__SWIG(std::vector< float > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_float_Sg____setitem__SWIG(std::vector< float > *self,size_t i,float val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< float > std_vector_Sl_float_Sg__begin__SWIG(std::vector< float > *self){
                std::vector_iterator<float> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< float > std_vector_Sl_float_Sg__end__SWIG(std::vector< float > *self){
                std::vector_iterator<float> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_float_Sg__erase__SWIG_0(std::vector< float > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_float_Sg__erase__SWIG_1(std::vector< float > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN double std_vector_Sl_double_Sg____getitem__SWIG(std::vector< double > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_double_Sg____setitem__SWIG(std::vector< double > *self,size_t i,double val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< double > std_vector_Sl_double_Sg__begin__SWIG(std::vector< double > *self){
                std::vector_iterator<double> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< double > std_vector_Sl_double_Sg__end__SWIG(std::vector< double > *self){
                std::vector_iterator<double> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_double_Sg__erase__SWIG_0(std::vector< double > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_double_Sg__erase__SWIG_1(std::vector< double > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN std::complex< float > std_vector_Sl_std_complex_Sl_float_Sg__Sg____getitem__SWIG(std::vector< std::complex< float > > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sg____setitem__SWIG(std::vector< std::complex< float > > *self,size_t i,std::complex< float > val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< std::complex< float > > std_vector_Sl_std_complex_Sl_float_Sg__Sg__begin__SWIG(std::vector< std::complex< float > > *self){
                std::vector_iterator<std::complex< float >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< std::complex< float > > std_vector_Sl_std_complex_Sl_float_Sg__Sg__end__SWIG(std::vector< std::complex< float > > *self){
                std::vector_iterator<std::complex< float >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sg__erase__SWIG_0(std::vector< std::complex< float > > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sg__erase__SWIG_1(std::vector< std::complex< float > > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN std::complex< double > std_vector_Sl_std_complex_Sl_double_Sg__Sg____getitem__SWIG(std::vector< std::complex< double > > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sg____setitem__SWIG(std::vector< std::complex< double > > *self,size_t i,std::complex< double > val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< std::complex< double > > std_vector_Sl_std_complex_Sl_double_Sg__Sg__begin__SWIG(std::vector< std::complex< double > > *self){
                std::vector_iterator<std::complex< double >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< std::complex< double > > std_vector_Sl_std_complex_Sl_double_Sg__Sg__end__SWIG(std::vector< std::complex< double > > *self){
                std::vector_iterator<std::complex< double >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sg__erase__SWIG_0(std::vector< std::complex< double > > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sg__erase__SWIG_1(std::vector< std::complex< double > > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
#ifdef __cplusplus
extern "C" {
#endif
static void swig_delete_gslice(void *obj) {
std::gslice *arg1 = (std::gslice *) obj;
delete arg1;
}
static swig_lua_attribute swig_gslice_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_gslice_methods[]= {
    {0,0}
};
static swig_lua_method swig_gslice_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_gslice_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_gslice_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_gslice_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_gslice_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_gslice_Sf_SwigStatic = {
    "gslice",
    swig_gslice_Sf_SwigStatic_methods,
    swig_gslice_Sf_SwigStatic_attributes,
    swig_gslice_Sf_SwigStatic_constants,
    swig_gslice_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_gslice_bases[] = {0};
static const char *swig_gslice_base_names[] = {0};
static swig_lua_class _wrap_class_gslice = { "gslice", "gslice", &SWIGTYPE_p_std__gslice,0, swig_delete_gslice, swig_gslice_methods, swig_gslice_attributes, &swig_gslice_Sf_SwigStatic, swig_gslice_meta, swig_gslice_bases, swig_gslice_base_names };

static void swig_delete_slice(void *obj) {
std::slice *arg1 = (std::slice *) obj;
delete arg1;
}
static swig_lua_attribute swig_slice_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_slice_methods[]= {
    {0,0}
};
static swig_lua_method swig_slice_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_slice_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_slice_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_slice_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_slice_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_slice_Sf_SwigStatic = {
    "slice",
    swig_slice_Sf_SwigStatic_methods,
    swig_slice_Sf_SwigStatic_attributes,
    swig_slice_Sf_SwigStatic_constants,
    swig_slice_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_slice_bases[] = {0};
static const char *swig_slice_base_names[] = {0};
static swig_lua_class _wrap_class_slice = { "slice", "slice", &SWIGTYPE_p_std__slice,0, swig_delete_slice, swig_slice_methods, swig_slice_attributes, &swig_slice_Sf_SwigStatic, swig_slice_meta, swig_slice_bases, swig_slice_base_names };

static int _wrap_new_float_complex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::complex",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (std::complex< float > *)new std::complex< float >((float const &)*arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (std::complex< float > *)new std::complex< float >((float const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",0,0)
  result = (std::complex< float > *)new std::complex< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("new_float_complex",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (std::complex< float > *)new std::complex< float >((std::complex< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_float_complex__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_complex__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_complex__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_complex__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_complex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::complex(float const &,float const &)\n"
    "    std::complex< float >::complex(float const &)\n"
    "    std::complex< float >::complex()\n"
    "    std::complex< float >::complex(std::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::complex< float >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::real",1,"std::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_real",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)((std::complex< float > const *)arg1)->real();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::complex< float >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::imag",1,"std::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_imag",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)((std::complex< float > const *)arg1)->imag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("std::complex< float >::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::real",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::real",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_real",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_float_complex_real__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_complex_real__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_complex_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::real() const\n"
    "    std::complex< float >::real(float)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("std::complex< float >::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::imag",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::imag",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_imag",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_imag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_float_complex_imag__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_complex_imag__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_complex_imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::imag() const\n"
    "    std::complex< float >::imag(float)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex___add(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__add__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__add__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___add",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___add",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____add____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__sub__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__sub__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___sub",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___sub",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____sub____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___div(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__div__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__div__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___div",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___div",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____div____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__mul__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__mul__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___mul",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___mul",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____mul____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__pow__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__pow__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___pow",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___pow",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____pow____SWIG_0(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__pow__",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::__pow__",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___pow",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = std_complex_Sl_float_Sg____pow____SWIG_1(arg1,(float const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_complex___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_complex___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_complex___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::__pow__(std::complex< float > const &)\n"
    "    std::complex< float >::__pow__(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex___eq(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("std::complex< float >::__eq__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__eq__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__eq__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___eq",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___eq",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (bool)std_complex_Sl_float_Sg____eq____SWIG(arg1,(std::complex< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_complex(void *obj) {
std::complex< float > *arg1 = (std::complex< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_complex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_complex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_complex_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_complex_methods[]= {
    { "real", _wrap_float_complex_real},
    { "imag", _wrap_float_complex_imag},
    { "__add", _wrap_float_complex___add},
    { "__sub", _wrap_float_complex___sub},
    { "__div", _wrap_float_complex___div},
    { "__mul", _wrap_float_complex___mul},
    { "__pow", _wrap_float_complex___pow},
    { "__eq", _wrap_float_complex___eq},
    {0,0}
};
static swig_lua_method swig_float_complex_meta[] = {
    { "__add", _wrap_float_complex___add},
    { "__sub", _wrap_float_complex___sub},
    { "__div", _wrap_float_complex___div},
    { "__mul", _wrap_float_complex___mul},
    { "__pow", _wrap_float_complex___pow},
    { "__eq", _wrap_float_complex___eq},
    {0,0}
};

static swig_lua_attribute swig_float_complex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_complex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_complex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_complex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_complex_Sf_SwigStatic = {
    "float_complex",
    swig_float_complex_Sf_SwigStatic_methods,
    swig_float_complex_Sf_SwigStatic_attributes,
    swig_float_complex_Sf_SwigStatic_constants,
    swig_float_complex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_complex_bases[] = {0};
static const char *swig_float_complex_base_names[] = {0};
static swig_lua_class _wrap_class_float_complex = { "float_complex", "float_complex", &SWIGTYPE_p_std__complexT_float_t,_proxy__wrap_new_float_complex, swig_delete_float_complex, swig_float_complex_methods, swig_float_complex_attributes, &swig_float_complex_Sf_SwigStatic, swig_float_complex_meta, swig_float_complex_bases, swig_float_complex_base_names };

static int _wrap_new_double_complex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::complex",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (std::complex< double > *)new std::complex< double >((double const &)*arg1,(double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (std::complex< double > *)new std::complex< double >((double const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",0,0)
  result = (std::complex< double > *)new std::complex< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_double_complex",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (std::complex< double > *)new std::complex< double >((std::complex< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_double_complex__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_complex__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_double_complex__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_double_complex__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_double_complex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::complex(double const &,double const &)\n"
    "    std::complex< double >::complex(double const &)\n"
    "    std::complex< double >::complex()\n"
    "    std::complex< double >::complex(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::complex< double >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::real",1,"std::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_real",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)((std::complex< double > const *)arg1)->real();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::complex< double >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::imag",1,"std::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_imag",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)((std::complex< double > const *)arg1)->imag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::complex< double >::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::real",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::real",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_real",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_double_complex_real__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_complex_real__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_complex_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::real() const\n"
    "    std::complex< double >::real(double)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::complex< double >::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::imag",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::imag",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_imag",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_imag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_double_complex_imag__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_complex_imag__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_complex_imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::imag() const\n"
    "    std::complex< double >::imag(double)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex___add(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__add__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__add__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___add",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___add",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____add____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__sub__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__sub__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___sub",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___sub",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____sub____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___div(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__div__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__div__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___div",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___div",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____div____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__mul__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__mul__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___mul",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___mul",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____mul____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__pow__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__pow__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___pow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___pow",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____pow____SWIG_0(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__pow__",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::__pow__",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___pow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = std_complex_Sl_double_Sg____pow____SWIG_1(arg1,(double const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_double_complex___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_complex___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_complex___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::__pow__(std::complex< double > const &)\n"
    "    std::complex< double >::__pow__(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex___eq(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("std::complex< double >::__eq__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__eq__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__eq__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___eq",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___eq",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (bool)std_complex_Sl_double_Sg____eq____SWIG(arg1,(std::complex< double > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_complex(void *obj) {
std::complex< double > *arg1 = (std::complex< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_complex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_complex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_complex_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_complex_methods[]= {
    { "real", _wrap_double_complex_real},
    { "imag", _wrap_double_complex_imag},
    { "__add", _wrap_double_complex___add},
    { "__sub", _wrap_double_complex___sub},
    { "__div", _wrap_double_complex___div},
    { "__mul", _wrap_double_complex___mul},
    { "__pow", _wrap_double_complex___pow},
    { "__eq", _wrap_double_complex___eq},
    {0,0}
};
static swig_lua_method swig_double_complex_meta[] = {
    { "__add", _wrap_double_complex___add},
    { "__sub", _wrap_double_complex___sub},
    { "__div", _wrap_double_complex___div},
    { "__mul", _wrap_double_complex___mul},
    { "__pow", _wrap_double_complex___pow},
    { "__eq", _wrap_double_complex___eq},
    {0,0}
};

static swig_lua_attribute swig_double_complex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_complex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_complex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_complex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_complex_Sf_SwigStatic = {
    "double_complex",
    swig_double_complex_Sf_SwigStatic_methods,
    swig_double_complex_Sf_SwigStatic_attributes,
    swig_double_complex_Sf_SwigStatic_constants,
    swig_double_complex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_complex_bases[] = {0};
static const char *swig_double_complex_base_names[] = {0};
static swig_lua_class _wrap_class_double_complex = { "double_complex", "double_complex", &SWIGTYPE_p_std__complexT_double_t,_proxy__wrap_new_double_complex, swig_delete_double_complex, swig_double_complex_methods, swig_double_complex_attributes, &swig_double_complex_Sf_SwigStatic, swig_double_complex_meta, swig_double_complex_bases, swig_double_complex_base_names };

static int _wrap_new_float_valarray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",0,0)
  result = (std::valarray< float > *)new std::valarray< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::valarray< float > *)new std::valarray< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  size_t arg2 ;
  float temp1 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::valarray",2,"size_t");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::valarray< float > *)new std::valarray< float >((float const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  size_t arg2 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"float const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::valarray",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::valarray< float > *)new std::valarray< float >((float const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::valarray< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  std::slice_array< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::slice_array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__slice_arrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__slice_arrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::slice_array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  std::gslice_array< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::gslice_array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__gslice_arrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__gslice_arrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::gslice_array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  std::mask_array< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::mask_array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mask_arrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__mask_arrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::mask_array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  std::indirect_array< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::indirect_array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__indirect_arrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__indirect_arrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::indirect_array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_float_valarray__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__slice_arrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__gslice_arrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__mask_arrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__indirect_arrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_valarray__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_valarray__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_valarray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::valarray()\n"
    "    std::valarray< float >::valarray(size_t)\n"
    "    std::valarray< float >::valarray(float const &,size_t)\n"
    "    std::valarray< float >::valarray(float const *,size_t)\n"
    "    std::valarray< float >::valarray(std::valarray< float > const &)\n"
    "    std::valarray< float >::valarray(std::slice_array< float > const &)\n"
    "    std::valarray< float >::valarray(std::gslice_array< float > const &)\n"
    "    std::valarray< float >::valarray(std::mask_array< float > const &)\n"
    "    std::valarray< float >::valarray(std::indirect_array< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray___getitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("std::valarray< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__getitem__",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___getitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)std_valarray_Sl_float_Sg____getitem____SWIG_0(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___setitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::valarray< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__setitem__",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::valarray< float >::__setitem__",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___setitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  std_valarray_Sl_float_Sg____setitem____SWIG_0(arg1,arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___getitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::gslice *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__getitem__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__getitem__",2,"std::gslice const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___getitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__gslice,0))){
    SWIG_fail_ptr("float_valarray___getitem",2,SWIGTYPE_p_std__gslice);
  }
  
  result = std_valarray_Sl_float_Sg____getitem____SWIG_1(arg1,(std::gslice const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___setitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::gslice *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::valarray< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__setitem__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__setitem__",2,"std::gslice const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::valarray< float >::__setitem__",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___setitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__gslice,0))){
    SWIG_fail_ptr("float_valarray___setitem",2,SWIGTYPE_p_std__gslice);
  }
  
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  std_valarray_Sl_float_Sg____setitem____SWIG_1(arg1,(std::gslice const &)*arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___getitem__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::slice *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__getitem__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__getitem__",2,"std::slice const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___getitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__slice,0))){
    SWIG_fail_ptr("float_valarray___getitem",2,SWIGTYPE_p_std__slice);
  }
  
  result = std_valarray_Sl_float_Sg____getitem____SWIG_2(arg1,(std::slice const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___getitem(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__gslice, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray___getitem__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__slice, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray___getitem__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_valarray___getitem__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray___getitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::__getitem__(size_t)\n"
    "    std::valarray< float >::__getitem__(std::gslice const &)\n"
    "    std::valarray< float >::__getitem__(std::slice const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray___setitem__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::slice *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::valarray< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__setitem__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__setitem__",2,"std::slice const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::valarray< float >::__setitem__",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___setitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__slice,0))){
    SWIG_fail_ptr("float_valarray___setitem",2,SWIGTYPE_p_std__slice);
  }
  
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  std_valarray_Sl_float_Sg____setitem____SWIG_2(arg1,(std::slice const &)*arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___setitem(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__gslice, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_valarray___setitem__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__slice, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_valarray___setitem__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_valarray___setitem__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray___setitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::__setitem__(size_t,float const &)\n"
    "    std::valarray< float >::__setitem__(std::gslice const &,float const &)\n"
    "    std::valarray< float >::__setitem__(std::slice const &,float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray___add(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__add__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__add__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___add",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___add",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____add____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__sub__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__sub__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___sub",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___sub",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____sub____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__mul__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__mul__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___mul",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___mul",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____mul____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___div(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__div__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__div__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___div",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___div",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____div____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___unm__(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__unm__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__unm__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__unm__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___unm__",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___unm__",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____unm____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__pow__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__pow__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___pow",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___pow",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____pow____SWIG_0(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__pow__",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::__pow__",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___pow",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = std_valarray_Sl_float_Sg____pow____SWIG_1(arg1,(float const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_valarray___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::__pow__(std::valarray< float > const &)\n"
    "    std::valarray< float >::__pow__(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray_size(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::valarray< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::size",1,"std::valarray< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_size",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = ((std::valarray< float > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("std::valarray< float >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::resize",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::valarray< float >::resize",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_resize",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::valarray< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::resize",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_resize",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_resize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_valarray_resize__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_valarray_resize__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::resize(size_t,float)\n"
    "    std::valarray< float >::resize(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray_sum(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::valarray< float >::sum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::sum",1,"std::valarray< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_sum",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = (float)((std::valarray< float > const *)arg1)->sum();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_min(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::valarray< float >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::min",1,"std::valarray< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_min",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = (float)((std::valarray< float > const *)arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_max(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::valarray< float >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::max",1,"std::valarray< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_max",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = (float)((std::valarray< float > const *)arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_shift(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  int arg2 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::shift",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::shift",1,"std::valarray< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::shift",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_shift",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((std::valarray< float > const *)arg1)->shift(arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_cshift(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  int arg2 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::cshift",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::cshift",1,"std::valarray< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::cshift",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_cshift",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((std::valarray< float > const *)arg1)->cshift(arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float (*arg2)(float) = (float (*)(float)) 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::apply",1,"std::valarray< float > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::valarray< float >::apply",2,"float (*)(float)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_apply",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_float__float,0))){
    SWIG_fail_ptr("float_valarray_apply",2,SWIGTYPE_p_f_float__float);
  }
  
  result = ((std::valarray< float > const *)arg1)->apply(arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float (*arg2)(float const &) = (float (*)(float const &)) 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::apply",1,"std::valarray< float > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::valarray< float >::apply",2,"float (*)(float const &)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_apply",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_r_q_const__float__float,0))){
    SWIG_fail_ptr("float_valarray_apply",2,SWIGTYPE_p_f_r_q_const__float__float);
  }
  
  result = ((std::valarray< float > const *)arg1)->apply(arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_apply(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_float__float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_r_q_const__float__float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray_apply__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::apply(float (*)(float)) const\n"
    "    std::valarray< float >::apply(float (*)(float const &)) const\n");
  lua_error(L);return 0;
}


static void swig_delete_float_valarray(void *obj) {
std::valarray< float > *arg1 = (std::valarray< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_valarray(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_valarray);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_valarray_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_valarray_methods[]= {
    { "__getitem", _wrap_float_valarray___getitem},
    { "__setitem", _wrap_float_valarray___setitem},
    { "__add", _wrap_float_valarray___add},
    { "__sub", _wrap_float_valarray___sub},
    { "__mul", _wrap_float_valarray___mul},
    { "__div", _wrap_float_valarray___div},
    { "__unm__", _wrap_float_valarray___unm__},
    { "__pow", _wrap_float_valarray___pow},
    { "size", _wrap_float_valarray_size},
    { "resize", _wrap_float_valarray_resize},
    { "sum", _wrap_float_valarray_sum},
    { "min", _wrap_float_valarray_min},
    { "max", _wrap_float_valarray_max},
    { "shift", _wrap_float_valarray_shift},
    { "cshift", _wrap_float_valarray_cshift},
    { "apply", _wrap_float_valarray_apply},
    {0,0}
};
static swig_lua_method swig_float_valarray_meta[] = {
    { "__getitem", _wrap_float_valarray___getitem},
    { "__setitem", _wrap_float_valarray___setitem},
    { "__add", _wrap_float_valarray___add},
    { "__sub", _wrap_float_valarray___sub},
    { "__mul", _wrap_float_valarray___mul},
    { "__div", _wrap_float_valarray___div},
    { "__unm__", _wrap_float_valarray___unm__},
    { "__pow", _wrap_float_valarray___pow},
    {0,0}
};

static swig_lua_attribute swig_float_valarray_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_valarray_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_valarray_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_valarray_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_valarray_Sf_SwigStatic = {
    "float_valarray",
    swig_float_valarray_Sf_SwigStatic_methods,
    swig_float_valarray_Sf_SwigStatic_attributes,
    swig_float_valarray_Sf_SwigStatic_constants,
    swig_float_valarray_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_valarray_bases[] = {0};
static const char *swig_float_valarray_base_names[] = {0};
static swig_lua_class _wrap_class_float_valarray = { "float_valarray", "float_valarray", &SWIGTYPE_p_std__valarrayT_float_t,_proxy__wrap_new_float_valarray, swig_delete_float_valarray, swig_float_valarray_methods, swig_float_valarray_attributes, &swig_float_valarray_Sf_SwigStatic, swig_float_valarray_meta, swig_float_valarray_bases, swig_float_valarray_base_names };

static int _wrap_float_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::min",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::max",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::epsilon",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::round_error",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::infinity",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::quiet_NaN",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::signaling_NaN",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::denorm_min",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< float >::numeric_limits",0,0)
  result = (std::numeric_limits< float > *)new std::numeric_limits< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_numeric_limits(void *obj) {
std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_numeric_limits_methods[]= {
    { "min", _wrap_float_numeric_limits_min},
    { "max", _wrap_float_numeric_limits_max},
    { "epsilon", _wrap_float_numeric_limits_epsilon},
    { "round_error", _wrap_float_numeric_limits_round_error},
    { "infinity", _wrap_float_numeric_limits_infinity},
    { "quiet_NaN", _wrap_float_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_float_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_float_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_float_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_float_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_numeric_limits_Sf_SwigStatic = {
    "float_numeric_limits",
    swig_float_numeric_limits_Sf_SwigStatic_methods,
    swig_float_numeric_limits_Sf_SwigStatic_attributes,
    swig_float_numeric_limits_Sf_SwigStatic_constants,
    swig_float_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_numeric_limits_bases[] = {0};
static const char *swig_float_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_float_numeric_limits = { "float_numeric_limits", "float_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_float_t,_proxy__wrap_new_float_numeric_limits, swig_delete_float_numeric_limits, swig_float_numeric_limits_methods, swig_float_numeric_limits_attributes, &swig_float_numeric_limits_Sf_SwigStatic, swig_float_numeric_limits_meta, swig_float_numeric_limits_bases, swig_float_numeric_limits_base_names };

static int _wrap_double_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::min",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::max",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::epsilon",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::round_error",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::infinity",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::quiet_NaN",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::signaling_NaN",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::denorm_min",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< double >::numeric_limits",0,0)
  result = (std::numeric_limits< double > *)new std::numeric_limits< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_numeric_limits(void *obj) {
std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_numeric_limits_methods[]= {
    { "min", _wrap_double_numeric_limits_min},
    { "max", _wrap_double_numeric_limits_max},
    { "epsilon", _wrap_double_numeric_limits_epsilon},
    { "round_error", _wrap_double_numeric_limits_round_error},
    { "infinity", _wrap_double_numeric_limits_infinity},
    { "quiet_NaN", _wrap_double_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_double_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_double_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_double_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_double_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_numeric_limits_Sf_SwigStatic = {
    "double_numeric_limits",
    swig_double_numeric_limits_Sf_SwigStatic_methods,
    swig_double_numeric_limits_Sf_SwigStatic_attributes,
    swig_double_numeric_limits_Sf_SwigStatic_constants,
    swig_double_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_numeric_limits_bases[] = {0};
static const char *swig_double_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_double_numeric_limits = { "double_numeric_limits", "double_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_double_t,_proxy__wrap_new_double_numeric_limits, swig_delete_double_numeric_limits, swig_double_numeric_limits_methods, swig_double_numeric_limits_attributes, &swig_double_numeric_limits_Sf_SwigStatic, swig_double_numeric_limits_meta, swig_double_numeric_limits_bases, swig_double_numeric_limits_base_names };

static int _wrap_int_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::min",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::max",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::epsilon",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::round_error",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::infinity",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::quiet_NaN",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::signaling_NaN",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::denorm_min",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< int >::numeric_limits",0,0)
  result = (std::numeric_limits< int > *)new std::numeric_limits< int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int_numeric_limits(void *obj) {
std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int_numeric_limits_methods[]= {
    { "min", _wrap_int_numeric_limits_min},
    { "max", _wrap_int_numeric_limits_max},
    { "epsilon", _wrap_int_numeric_limits_epsilon},
    { "round_error", _wrap_int_numeric_limits_round_error},
    { "infinity", _wrap_int_numeric_limits_infinity},
    { "quiet_NaN", _wrap_int_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_int_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_int_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_int_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_int_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int_numeric_limits_Sf_SwigStatic = {
    "int_numeric_limits",
    swig_int_numeric_limits_Sf_SwigStatic_methods,
    swig_int_numeric_limits_Sf_SwigStatic_attributes,
    swig_int_numeric_limits_Sf_SwigStatic_constants,
    swig_int_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int_numeric_limits_bases[] = {0};
static const char *swig_int_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_int_numeric_limits = { "int_numeric_limits", "int_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_int_t,_proxy__wrap_new_int_numeric_limits, swig_delete_int_numeric_limits, swig_int_numeric_limits_methods, swig_int_numeric_limits_attributes, &swig_int_numeric_limits_Sf_SwigStatic, swig_int_numeric_limits_meta, swig_int_numeric_limits_bases, swig_int_numeric_limits_base_names };

static int _wrap_uint_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::min",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::max",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::epsilon",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::round_error",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::infinity",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::quiet_NaN",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::signaling_NaN",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::denorm_min",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned int > *)new std::numeric_limits< unsigned int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint_numeric_limits(void *obj) {
std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint_numeric_limits_methods[]= {
    { "min", _wrap_uint_numeric_limits_min},
    { "max", _wrap_uint_numeric_limits_max},
    { "epsilon", _wrap_uint_numeric_limits_epsilon},
    { "round_error", _wrap_uint_numeric_limits_round_error},
    { "infinity", _wrap_uint_numeric_limits_infinity},
    { "quiet_NaN", _wrap_uint_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_uint_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_uint_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_uint_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uint_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint_numeric_limits_Sf_SwigStatic = {
    "uint_numeric_limits",
    swig_uint_numeric_limits_Sf_SwigStatic_methods,
    swig_uint_numeric_limits_Sf_SwigStatic_attributes,
    swig_uint_numeric_limits_Sf_SwigStatic_constants,
    swig_uint_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint_numeric_limits_bases[] = {0};
static const char *swig_uint_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_uint_numeric_limits = { "uint_numeric_limits", "uint_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,_proxy__wrap_new_uint_numeric_limits, swig_delete_uint_numeric_limits, swig_uint_numeric_limits_methods, swig_uint_numeric_limits_attributes, &swig_uint_numeric_limits_Sf_SwigStatic, swig_uint_numeric_limits_meta, swig_uint_numeric_limits_bases, swig_uint_numeric_limits_base_names };

static int _wrap_short_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::min",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::max",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::epsilon",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::round_error",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::infinity",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::quiet_NaN",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::signaling_NaN",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::denorm_min",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_short_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< short >::numeric_limits",0,0)
  result = (std::numeric_limits< short > *)new std::numeric_limits< short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_short_numeric_limits(void *obj) {
std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_short_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_short_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_short_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_short_numeric_limits_methods[]= {
    { "min", _wrap_short_numeric_limits_min},
    { "max", _wrap_short_numeric_limits_max},
    { "epsilon", _wrap_short_numeric_limits_epsilon},
    { "round_error", _wrap_short_numeric_limits_round_error},
    { "infinity", _wrap_short_numeric_limits_infinity},
    { "quiet_NaN", _wrap_short_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_short_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_short_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_short_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_short_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_short_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_short_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_short_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_short_numeric_limits_Sf_SwigStatic = {
    "short_numeric_limits",
    swig_short_numeric_limits_Sf_SwigStatic_methods,
    swig_short_numeric_limits_Sf_SwigStatic_attributes,
    swig_short_numeric_limits_Sf_SwigStatic_constants,
    swig_short_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_short_numeric_limits_bases[] = {0};
static const char *swig_short_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_short_numeric_limits = { "short_numeric_limits", "short_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_short_t,_proxy__wrap_new_short_numeric_limits, swig_delete_short_numeric_limits, swig_short_numeric_limits_methods, swig_short_numeric_limits_attributes, &swig_short_numeric_limits_Sf_SwigStatic, swig_short_numeric_limits_meta, swig_short_numeric_limits_bases, swig_short_numeric_limits_base_names };

static int _wrap_ushort_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::min",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::max",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::epsilon",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::round_error",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::infinity",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::quiet_NaN",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::signaling_NaN",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::denorm_min",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ushort_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned short > *)new std::numeric_limits< unsigned short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ushort_numeric_limits(void *obj) {
std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ushort_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ushort_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ushort_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ushort_numeric_limits_methods[]= {
    { "min", _wrap_ushort_numeric_limits_min},
    { "max", _wrap_ushort_numeric_limits_max},
    { "epsilon", _wrap_ushort_numeric_limits_epsilon},
    { "round_error", _wrap_ushort_numeric_limits_round_error},
    { "infinity", _wrap_ushort_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ushort_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ushort_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ushort_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ushort_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ushort_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ushort_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ushort_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ushort_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ushort_numeric_limits_Sf_SwigStatic = {
    "ushort_numeric_limits",
    swig_ushort_numeric_limits_Sf_SwigStatic_methods,
    swig_ushort_numeric_limits_Sf_SwigStatic_attributes,
    swig_ushort_numeric_limits_Sf_SwigStatic_constants,
    swig_ushort_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ushort_numeric_limits_bases[] = {0};
static const char *swig_ushort_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ushort_numeric_limits = { "ushort_numeric_limits", "ushort_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,_proxy__wrap_new_ushort_numeric_limits, swig_delete_ushort_numeric_limits, swig_ushort_numeric_limits_methods, swig_ushort_numeric_limits_attributes, &swig_ushort_numeric_limits_Sf_SwigStatic, swig_ushort_numeric_limits_meta, swig_ushort_numeric_limits_bases, swig_ushort_numeric_limits_base_names };

static int _wrap_long_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::min",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::max",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::epsilon",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::round_error",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::infinity",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::quiet_NaN",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::signaling_NaN",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::denorm_min",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_long_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< long >::numeric_limits",0,0)
  result = (std::numeric_limits< long > *)new std::numeric_limits< long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_long_numeric_limits(void *obj) {
std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_long_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_long_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_long_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_long_numeric_limits_methods[]= {
    { "min", _wrap_long_numeric_limits_min},
    { "max", _wrap_long_numeric_limits_max},
    { "epsilon", _wrap_long_numeric_limits_epsilon},
    { "round_error", _wrap_long_numeric_limits_round_error},
    { "infinity", _wrap_long_numeric_limits_infinity},
    { "quiet_NaN", _wrap_long_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_long_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_long_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_long_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_long_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_long_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_long_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_long_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_long_numeric_limits_Sf_SwigStatic = {
    "long_numeric_limits",
    swig_long_numeric_limits_Sf_SwigStatic_methods,
    swig_long_numeric_limits_Sf_SwigStatic_attributes,
    swig_long_numeric_limits_Sf_SwigStatic_constants,
    swig_long_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_long_numeric_limits_bases[] = {0};
static const char *swig_long_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_long_numeric_limits = { "long_numeric_limits", "long_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_long_t,_proxy__wrap_new_long_numeric_limits, swig_delete_long_numeric_limits, swig_long_numeric_limits_methods, swig_long_numeric_limits_attributes, &swig_long_numeric_limits_Sf_SwigStatic, swig_long_numeric_limits_meta, swig_long_numeric_limits_bases, swig_long_numeric_limits_base_names };

static int _wrap_ulong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::min",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::max",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::epsilon",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::round_error",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::infinity",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::quiet_NaN",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::signaling_NaN",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::denorm_min",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ulong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned long > *)new std::numeric_limits< unsigned long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ulong_numeric_limits(void *obj) {
std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ulong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ulong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ulong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ulong_numeric_limits_methods[]= {
    { "min", _wrap_ulong_numeric_limits_min},
    { "max", _wrap_ulong_numeric_limits_max},
    { "epsilon", _wrap_ulong_numeric_limits_epsilon},
    { "round_error", _wrap_ulong_numeric_limits_round_error},
    { "infinity", _wrap_ulong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ulong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ulong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ulong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ulong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ulong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ulong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ulong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ulong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ulong_numeric_limits_Sf_SwigStatic = {
    "ulong_numeric_limits",
    swig_ulong_numeric_limits_Sf_SwigStatic_methods,
    swig_ulong_numeric_limits_Sf_SwigStatic_attributes,
    swig_ulong_numeric_limits_Sf_SwigStatic_constants,
    swig_ulong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ulong_numeric_limits_bases[] = {0};
static const char *swig_ulong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ulong_numeric_limits = { "ulong_numeric_limits", "ulong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,_proxy__wrap_new_ulong_numeric_limits, swig_delete_ulong_numeric_limits, swig_ulong_numeric_limits_methods, swig_ulong_numeric_limits_attributes, &swig_ulong_numeric_limits_Sf_SwigStatic, swig_ulong_numeric_limits_meta, swig_ulong_numeric_limits_bases, swig_ulong_numeric_limits_base_names };

static int _wrap_llong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::min",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::max",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::epsilon",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::round_error",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::infinity",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::quiet_NaN",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::signaling_NaN",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::denorm_min",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_llong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< long long >::numeric_limits",0,0)
  result = (std::numeric_limits< long long > *)new std::numeric_limits< long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_llong_numeric_limits(void *obj) {
std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_llong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_llong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_llong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_llong_numeric_limits_methods[]= {
    { "min", _wrap_llong_numeric_limits_min},
    { "max", _wrap_llong_numeric_limits_max},
    { "epsilon", _wrap_llong_numeric_limits_epsilon},
    { "round_error", _wrap_llong_numeric_limits_round_error},
    { "infinity", _wrap_llong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_llong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_llong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_llong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_llong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_llong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_llong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_llong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_llong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_llong_numeric_limits_Sf_SwigStatic = {
    "llong_numeric_limits",
    swig_llong_numeric_limits_Sf_SwigStatic_methods,
    swig_llong_numeric_limits_Sf_SwigStatic_attributes,
    swig_llong_numeric_limits_Sf_SwigStatic_constants,
    swig_llong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_llong_numeric_limits_bases[] = {0};
static const char *swig_llong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_llong_numeric_limits = { "llong_numeric_limits", "llong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_long_long_t,_proxy__wrap_new_llong_numeric_limits, swig_delete_llong_numeric_limits, swig_llong_numeric_limits_methods, swig_llong_numeric_limits_attributes, &swig_llong_numeric_limits_Sf_SwigStatic, swig_llong_numeric_limits_meta, swig_llong_numeric_limits_bases, swig_llong_numeric_limits_base_names };

static int _wrap_ullong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::min",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::max",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::epsilon",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::round_error",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::infinity",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::quiet_NaN",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::signaling_NaN",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::denorm_min",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ullong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned long long > *)new std::numeric_limits< unsigned long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ullong_numeric_limits(void *obj) {
std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ullong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ullong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ullong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ullong_numeric_limits_methods[]= {
    { "min", _wrap_ullong_numeric_limits_min},
    { "max", _wrap_ullong_numeric_limits_max},
    { "epsilon", _wrap_ullong_numeric_limits_epsilon},
    { "round_error", _wrap_ullong_numeric_limits_round_error},
    { "infinity", _wrap_ullong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ullong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ullong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ullong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ullong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ullong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ullong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ullong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ullong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ullong_numeric_limits_Sf_SwigStatic = {
    "ullong_numeric_limits",
    swig_ullong_numeric_limits_Sf_SwigStatic_methods,
    swig_ullong_numeric_limits_Sf_SwigStatic_attributes,
    swig_ullong_numeric_limits_Sf_SwigStatic_constants,
    swig_ullong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ullong_numeric_limits_bases[] = {0};
static const char *swig_ullong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ullong_numeric_limits = { "ullong_numeric_limits", "ullong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,_proxy__wrap_new_ullong_numeric_limits, swig_delete_ullong_numeric_limits, swig_ullong_numeric_limits_methods, swig_ullong_numeric_limits_attributes, &swig_ullong_numeric_limits_Sf_SwigStatic, swig_ullong_numeric_limits_meta, swig_ullong_numeric_limits_bases, swig_ullong_numeric_limits_base_names };

static int _wrap_Huge(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Huge",0,0)
  result = (double)Huge();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Hugef(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("Hugef",0,0)
  result = (float)Hugef();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Infinity(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Infinity",0,0)
  result = (double)Infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NaN(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("NaN",0,0)
  result = (double)NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("abs< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("abs< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)abs< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cubef(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cube< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cube< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cube< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("sqrt< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sqrt< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)sqrt< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("exp< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)exp< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("exp2< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp2< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)exp2< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log10< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log10< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log10< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log2< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log2< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log2< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("logb< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("logb< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)logb< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("pow< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("pow< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pow< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)pow< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("floor< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("floor< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)floor< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("acos< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acos< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)acos< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("asin< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asin< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)asin< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("atan< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)atan< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("atan2< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan2< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("atan2< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)atan2< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cos< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cos< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cos< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("sin< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sin< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)sin< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("tan< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tan< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)tan< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cosh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cosh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cosh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("sinh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sinh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)sinh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("tanh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tanh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)tanh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgammaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("lgamma< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lgamma< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)lgamma< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("acosh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acosh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)acosh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("asinh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asinh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)asinh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("atanh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atanh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)atanh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrtf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cbrt< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cbrt< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cbrt< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cbrt< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysignf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("copysign< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("copysign< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("copysign< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)copysign< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erff(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("erf< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erf< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)erf< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfcf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("erfc< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erfc< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)erfc< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("expm1< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("expm1< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)expm1< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdimf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fdim< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fdim< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fdim< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fdim< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp1 ;
  float temp2 ;
  float temp3 ;
  float result;
  
  SWIG_check_num_args("fma< f32 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fma< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fma< f32 >",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fma< f32 >",3,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  result = (float)fma< f32 >((float const &)*arg1,(float const &)*arg2,(float const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaxf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fmax< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmax< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmax< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fmax< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fminf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fmin< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmin< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmin< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fmin< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmodf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fmod< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmod< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmod< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fmod< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fpclassifyf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  int result;
  
  SWIG_check_num_args("fpclassify< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fpclassify< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (int)fpclassify< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypotf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("hypot< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("hypot< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("hypot< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)hypot< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogbf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  int result;
  
  SWIG_check_num_args("ilogb< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ilogb< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (int)ilogb< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isfinitef(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isfinite< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isfinite< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isfinite< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreater< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreater< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreater< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreater< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterequalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreaterequal< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreaterequal< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreaterequal< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreaterequal< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isinff(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isinf< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isinf< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isinf< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isless< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isless< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isless< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isless< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessequalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("islessequal< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("islessequal< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("islessequal< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)islessequal< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isnan< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnan< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnan< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnormalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isnormal< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnormal< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnormal< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isunorderedf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isunordered< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isunordered< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isunordered< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isunordered< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldexpf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("ldexp< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ldexp< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ldexp< f32 >",2,"int");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)ldexp< f32 >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llrintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("llrint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llrint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)llrint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llroundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("llround< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llround< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)llround< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log1p< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log1p< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log1p< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lrintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("lrint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lrint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)lrint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lroundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("lround< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lround< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)lround< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("nan< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nan< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)nan< f32 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanff(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("nanf< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanf< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)nanf< f32 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanlf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("nanl< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanl< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)nanl< f32 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nearbyintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("nearbyint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nearbyint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)nearbyint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextafterf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("nextafter< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nextafter< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nextafter< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)nextafter< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nexttowardf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("nexttoward< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nexttoward< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nexttoward< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)nexttoward< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainderf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("remainder< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("remainder< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("remainder< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)remainder< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("rint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)rint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("round< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("round< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)round< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalblnf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  long arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("scalbln< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbln< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbln< f32 >",2,"long");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (long)lua_tonumber(L, 2);
  result = (float)scalbln< f32 >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbnf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("scalbn< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbn< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbn< f32 >",2,"int");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)scalbn< f32 >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squaref(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("square< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("square< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)square< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgammaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("tgamma< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tgamma< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)tgamma< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_truncf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("trunc< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("trunc< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)trunc< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("abs< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("abs< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)abs< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("sqrt< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sqrt< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)sqrt< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("exp< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)exp< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("exp2< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp2< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)exp2< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log10< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log10< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log10< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log2< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log2< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log2< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("logb< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("logb< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)logb< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("pow< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("pow< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pow< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)pow< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floord(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("floor< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("floor< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)floor< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("acos< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acos< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)acos< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("asin< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asin< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)asin< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("atan< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)atan< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("atan2< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan2< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("atan2< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)atan2< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cos< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cos< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cos< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("sin< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sin< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)sin< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("tan< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tan< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)tan< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cosh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cosh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cosh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("sinh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sinh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)sinh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("tanh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tanh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)tanh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgammad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("lgamma< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lgamma< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)lgamma< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("acosh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acosh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)acosh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("asinh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asinh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)asinh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("atanh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atanh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)atanh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrtd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cbrt< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cbrt< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceild(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cbrt< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cbrt< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysignd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("copysign< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("copysign< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("copysign< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)copysign< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("erf< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erf< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)erf< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfcd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("erfc< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erfc< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)erfc< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("expm1< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("expm1< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)expm1< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdimd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fdim< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fdim< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fdim< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fdim< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp1 ;
  double temp2 ;
  double temp3 ;
  double result;
  
  SWIG_check_num_args("fma< f64 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fma< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fma< f64 >",2,"double const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fma< f64 >",3,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  result = (double)fma< f64 >((double const &)*arg1,(double const &)*arg2,(double const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaxd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fmax< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmax< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmax< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fmax< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fmin< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmin< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmin< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fmin< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmodd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fmod< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmod< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmod< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fmod< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fpclassifyd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  int result;
  
  SWIG_check_num_args("fpclassify< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fpclassify< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (int)fpclassify< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypotd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("hypot< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("hypot< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("hypot< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)hypot< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogbd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  int result;
  
  SWIG_check_num_args("ilogb< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ilogb< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (int)ilogb< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isfinited(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isfinite< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isfinite< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isfinite< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreater< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreater< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreater< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreater< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterequald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreaterequal< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreaterequal< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreaterequal< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreaterequal< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isinfd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isinf< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isinf< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isinf< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isless< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isless< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isless< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isless< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessequald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("islessequal< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("islessequal< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("islessequal< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)islessequal< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isnan< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnan< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnan< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnormald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isnormal< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnormal< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnormal< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isunorderedd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isunordered< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isunordered< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isunordered< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isunordered< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldexpd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("ldexp< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ldexp< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ldexp< f64 >",2,"int");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)ldexp< f64 >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llrintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("llrint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llrint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)llrint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llroundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("llround< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llround< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)llround< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log1p< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log1p< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log1p< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lrintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("lrint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lrint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)lrint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lroundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("lround< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lround< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)lround< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nand(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("nan< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nan< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)nan< f64 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanfd(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("nanf< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanf< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)nanf< f64 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanld(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("nanl< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanl< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)nanl< f64 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nearbyintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("nearbyint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nearbyint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)nearbyint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextafterd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("nextafter< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nextafter< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nextafter< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)nextafter< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nexttowardd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("nexttoward< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nexttoward< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nexttoward< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)nexttoward< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainderd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("remainder< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("remainder< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("remainder< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)remainder< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("rint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)rint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("round< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("round< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)round< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalblnd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  long arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("scalbln< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbln< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbln< f64 >",2,"long");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (long)lua_tonumber(L, 2);
  result = (double)scalbln< f64 >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbnd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("scalbn< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbn< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbn< f64 >",2,"int");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)scalbn< f64 >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squared(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("square< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("square< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)square< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgammad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("tgamma< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tgamma< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)tgamma< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_truncd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("trunc< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("trunc< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)trunc< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feclearexcept(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("feclearexcept",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("feclearexcept",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)feclearexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fegetexceptflag(lua_State* L) {
  int SWIG_arg = 0;
  fexcept_t *arg1 = (fexcept_t *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("fegetexceptflag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fegetexceptflag",1,"fexcept_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fegetexceptflag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fexcept_t,0))){
    SWIG_fail_ptr("fegetexceptflag",1,SWIGTYPE_p_fexcept_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)fegetexceptflag(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feraiseexcept(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("feraiseexcept",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("feraiseexcept",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)feraiseexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fesetexceptflag(lua_State* L) {
  int SWIG_arg = 0;
  fexcept_t *arg1 = (fexcept_t *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("fesetexceptflag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fesetexceptflag",1,"fexcept_t const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fesetexceptflag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fexcept_t,0))){
    SWIG_fail_ptr("fesetexceptflag",1,SWIGTYPE_p_fexcept_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)fesetexceptflag((fexcept_t const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fetestexcept(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("fetestexcept",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fetestexcept",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)fetestexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fegetround(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("fegetround",0,0)
  result = (int)fegetround();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fesetround(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("fesetround",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fesetround",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)fesetround(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fegetenv(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("fegetenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fegetenv",1,"fenv_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("fegetenv",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)fegetenv(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feholdexcept(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("feholdexcept",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("feholdexcept",1,"fenv_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("feholdexcept",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)feholdexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fesetenv(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("fesetenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fesetenv",1,"fenv_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("fesetenv",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)fesetenv((fenv_t const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feupdateenv(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("feupdateenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("feupdateenv",1,"fenv_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("feupdateenv",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)feupdateenv((fenv_t const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DMConfig_dm_build_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DMConfig *arg1 = (SynthLab::DMConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::DMConfig::dm_build",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DMConfig::dm_build",1,"SynthLab::DMConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::DMConfig::dm_build",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DMConfig,0))){
    SWIG_fail_ptr("DMConfig_dm_build_set",1,SWIGTYPE_p_SynthLab__DMConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->dm_build = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DMConfig_dm_build_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DMConfig *arg1 = (SynthLab::DMConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DMConfig::dm_build",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DMConfig::dm_build",1,"SynthLab::DMConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DMConfig,0))){
    SWIG_fail_ptr("DMConfig_dm_build_get",1,SWIGTYPE_p_SynthLab__DMConfig);
  }
  
  result = (bool) ((arg1)->dm_build);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DMConfig_dual_mono_filters_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DMConfig *arg1 = (SynthLab::DMConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::DMConfig::dual_mono_filters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DMConfig::dual_mono_filters",1,"SynthLab::DMConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::DMConfig::dual_mono_filters",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DMConfig,0))){
    SWIG_fail_ptr("DMConfig_dual_mono_filters_set",1,SWIGTYPE_p_SynthLab__DMConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->dual_mono_filters = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DMConfig_dual_mono_filters_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DMConfig *arg1 = (SynthLab::DMConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DMConfig::dual_mono_filters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DMConfig::dual_mono_filters",1,"SynthLab::DMConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DMConfig,0))){
    SWIG_fail_ptr("DMConfig_dual_mono_filters_get",1,SWIGTYPE_p_SynthLab__DMConfig);
  }
  
  result = (bool) ((arg1)->dual_mono_filters);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DMConfig_half_sample_set_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DMConfig *arg1 = (SynthLab::DMConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::DMConfig::half_sample_set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DMConfig::half_sample_set",1,"SynthLab::DMConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::DMConfig::half_sample_set",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DMConfig,0))){
    SWIG_fail_ptr("DMConfig_half_sample_set_set",1,SWIGTYPE_p_SynthLab__DMConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->half_sample_set = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DMConfig_half_sample_set_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DMConfig *arg1 = (SynthLab::DMConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DMConfig::half_sample_set",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DMConfig::half_sample_set",1,"SynthLab::DMConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DMConfig,0))){
    SWIG_fail_ptr("DMConfig_half_sample_set_get",1,SWIGTYPE_p_SynthLab__DMConfig);
  }
  
  result = (bool) ((arg1)->half_sample_set);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DMConfig_reduced_unison_count_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DMConfig *arg1 = (SynthLab::DMConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::DMConfig::reduced_unison_count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DMConfig::reduced_unison_count",1,"SynthLab::DMConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::DMConfig::reduced_unison_count",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DMConfig,0))){
    SWIG_fail_ptr("DMConfig_reduced_unison_count_set",1,SWIGTYPE_p_SynthLab__DMConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->reduced_unison_count = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DMConfig_reduced_unison_count_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DMConfig *arg1 = (SynthLab::DMConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DMConfig::reduced_unison_count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DMConfig::reduced_unison_count",1,"SynthLab::DMConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DMConfig,0))){
    SWIG_fail_ptr("DMConfig_reduced_unison_count_get",1,SWIGTYPE_p_SynthLab__DMConfig);
  }
  
  result = (bool) ((arg1)->reduced_unison_count);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DMConfig_analog_fgn_filters_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DMConfig *arg1 = (SynthLab::DMConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::DMConfig::analog_fgn_filters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DMConfig::analog_fgn_filters",1,"SynthLab::DMConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::DMConfig::analog_fgn_filters",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DMConfig,0))){
    SWIG_fail_ptr("DMConfig_analog_fgn_filters_set",1,SWIGTYPE_p_SynthLab__DMConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->analog_fgn_filters = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DMConfig_analog_fgn_filters_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DMConfig *arg1 = (SynthLab::DMConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DMConfig::analog_fgn_filters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DMConfig::analog_fgn_filters",1,"SynthLab::DMConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DMConfig,0))){
    SWIG_fail_ptr("DMConfig_analog_fgn_filters_get",1,SWIGTYPE_p_SynthLab__DMConfig);
  }
  
  result = (bool) ((arg1)->analog_fgn_filters);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DMConfig_parameterSmoothing_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DMConfig *arg1 = (SynthLab::DMConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::DMConfig::parameterSmoothing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DMConfig::parameterSmoothing",1,"SynthLab::DMConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::DMConfig::parameterSmoothing",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DMConfig,0))){
    SWIG_fail_ptr("DMConfig_parameterSmoothing_set",1,SWIGTYPE_p_SynthLab__DMConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->parameterSmoothing = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DMConfig_parameterSmoothing_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DMConfig *arg1 = (SynthLab::DMConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DMConfig::parameterSmoothing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DMConfig::parameterSmoothing",1,"SynthLab::DMConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DMConfig,0))){
    SWIG_fail_ptr("DMConfig_parameterSmoothing_get",1,SWIGTYPE_p_SynthLab__DMConfig);
  }
  
  result = (bool) ((arg1)->parameterSmoothing);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DMConfig(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DMConfig *result = 0 ;
  
  SWIG_check_num_args("SynthLab::DMConfig::DMConfig",0,0)
  result = (SynthLab::DMConfig *)new SynthLab::DMConfig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__DMConfig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DMConfig(void *obj) {
SynthLab::DMConfig *arg1 = (SynthLab::DMConfig *) obj;
delete arg1;
}
static int _proxy__wrap_new_DMConfig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DMConfig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DMConfig_attributes[] = {
    { "dm_build", _wrap_DMConfig_dm_build_get, _wrap_DMConfig_dm_build_set },
    { "dual_mono_filters", _wrap_DMConfig_dual_mono_filters_get, _wrap_DMConfig_dual_mono_filters_set },
    { "half_sample_set", _wrap_DMConfig_half_sample_set_get, _wrap_DMConfig_half_sample_set_set },
    { "reduced_unison_count", _wrap_DMConfig_reduced_unison_count_get, _wrap_DMConfig_reduced_unison_count_set },
    { "analog_fgn_filters", _wrap_DMConfig_analog_fgn_filters_get, _wrap_DMConfig_analog_fgn_filters_set },
    { "parameterSmoothing", _wrap_DMConfig_parameterSmoothing_get, _wrap_DMConfig_parameterSmoothing_set },
    {0,0,0}
};
static swig_lua_method swig_DMConfig_methods[]= {
    {0,0}
};
static swig_lua_method swig_DMConfig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DMConfig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DMConfig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DMConfig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DMConfig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DMConfig_Sf_SwigStatic = {
    "DMConfig",
    swig_DMConfig_Sf_SwigStatic_methods,
    swig_DMConfig_Sf_SwigStatic_attributes,
    swig_DMConfig_Sf_SwigStatic_constants,
    swig_DMConfig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DMConfig_bases[] = {0};
static const char *swig_DMConfig_base_names[] = {0};
static swig_lua_class _wrap_class_DMConfig = { "DMConfig", "DMConfig", &SWIGTYPE_p_SynthLab__DMConfig,_proxy__wrap_new_DMConfig, swig_delete_DMConfig, swig_DMConfig_methods, swig_DMConfig_attributes, &swig_DMConfig_Sf_SwigStatic, swig_DMConfig_meta, swig_DMConfig_bases, swig_DMConfig_base_names };

static int _wrap_new_AudioBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioBuffer *result = 0 ;
  
  SWIG_check_num_args("SynthLab::AudioBuffer::AudioBuffer",0,0)
  result = (SynthLab::AudioBuffer *)new SynthLab::AudioBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__AudioBuffer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AudioBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t *argp1 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  SynthLab::AudioBuffer *result = 0 ;
  
  SWIG_check_num_args("SynthLab::AudioBuffer::AudioBuffer",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::AudioBuffer::AudioBuffer",1,"uint32_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::AudioBuffer::AudioBuffer",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::AudioBuffer::AudioBuffer",3,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_AudioBuffer",1,SWIGTYPE_p_uint32_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_AudioBuffer",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_AudioBuffer",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  result = (SynthLab::AudioBuffer *)new SynthLab::AudioBuffer(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__AudioBuffer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AudioBuffer(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_AudioBuffer__SWIG_0(L);
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_AudioBuffer__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_AudioBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::AudioBuffer::AudioBuffer()\n"
    "    SynthLab::AudioBuffer::AudioBuffer(uint32_t,uint32_t,uint32_t)\n");
  lua_error(L);return 0;
}


static int _wrap_AudioBuffer_init(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioBuffer *arg1 = (SynthLab::AudioBuffer *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  uint32_t *argp4 ;
  
  SWIG_check_num_args("SynthLab::AudioBuffer::init",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioBuffer::init",1,"SynthLab::AudioBuffer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::AudioBuffer::init",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::AudioBuffer::init",3,"uint32_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SynthLab::AudioBuffer::init",4,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioBuffer,0))){
    SWIG_fail_ptr("AudioBuffer_init",1,SWIGTYPE_p_SynthLab__AudioBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("AudioBuffer_init",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("AudioBuffer_init",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("AudioBuffer_init",4,SWIGTYPE_p_uint32_t);
  }
  arg4 = *argp4;
  
  (arg1)->init(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioBuffer_flushBuffers(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioBuffer *arg1 = (SynthLab::AudioBuffer *) 0 ;
  
  SWIG_check_num_args("SynthLab::AudioBuffer::flushBuffers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioBuffer::flushBuffers",1,"SynthLab::AudioBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioBuffer,0))){
    SWIG_fail_ptr("AudioBuffer_flushBuffers",1,SWIGTYPE_p_SynthLab__AudioBuffer);
  }
  
  (arg1)->flushBuffers();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioBuffer_getInputBuffer(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioBuffer *arg1 = (SynthLab::AudioBuffer *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("SynthLab::AudioBuffer::getInputBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioBuffer::getInputBuffer",1,"SynthLab::AudioBuffer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::AudioBuffer::getInputBuffer",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioBuffer,0))){
    SWIG_fail_ptr("AudioBuffer_getInputBuffer",1,SWIGTYPE_p_SynthLab__AudioBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("AudioBuffer_getInputBuffer",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (float *)(arg1)->getInputBuffer(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioBuffer_getOutputBuffer(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioBuffer *arg1 = (SynthLab::AudioBuffer *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("SynthLab::AudioBuffer::getOutputBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioBuffer::getOutputBuffer",1,"SynthLab::AudioBuffer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::AudioBuffer::getOutputBuffer",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioBuffer,0))){
    SWIG_fail_ptr("AudioBuffer_getOutputBuffer",1,SWIGTYPE_p_SynthLab__AudioBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("AudioBuffer_getOutputBuffer",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (float *)(arg1)->getOutputBuffer(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioBuffer_getInputBuffers(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioBuffer *arg1 = (SynthLab::AudioBuffer *) 0 ;
  float **result = 0 ;
  
  SWIG_check_num_args("SynthLab::AudioBuffer::getInputBuffers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioBuffer::getInputBuffers",1,"SynthLab::AudioBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioBuffer,0))){
    SWIG_fail_ptr("AudioBuffer_getInputBuffers",1,SWIGTYPE_p_SynthLab__AudioBuffer);
  }
  
  result = (float **)(arg1)->getInputBuffers();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioBuffer_getOutputBuffers(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioBuffer *arg1 = (SynthLab::AudioBuffer *) 0 ;
  float **result = 0 ;
  
  SWIG_check_num_args("SynthLab::AudioBuffer::getOutputBuffers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioBuffer::getOutputBuffers",1,"SynthLab::AudioBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioBuffer,0))){
    SWIG_fail_ptr("AudioBuffer_getOutputBuffers",1,SWIGTYPE_p_SynthLab__AudioBuffer);
  }
  
  result = (float **)(arg1)->getOutputBuffers();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioBuffer_getInputChannelCount(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioBuffer *arg1 = (SynthLab::AudioBuffer *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::AudioBuffer::getInputChannelCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioBuffer::getInputChannelCount",1,"SynthLab::AudioBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioBuffer,0))){
    SWIG_fail_ptr("AudioBuffer_getInputChannelCount",1,SWIGTYPE_p_SynthLab__AudioBuffer);
  }
  
  result = (arg1)->getInputChannelCount();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioBuffer_getOutputChannelCount(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioBuffer *arg1 = (SynthLab::AudioBuffer *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::AudioBuffer::getOutputChannelCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioBuffer::getOutputChannelCount",1,"SynthLab::AudioBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioBuffer,0))){
    SWIG_fail_ptr("AudioBuffer_getOutputChannelCount",1,SWIGTYPE_p_SynthLab__AudioBuffer);
  }
  
  result = (arg1)->getOutputChannelCount();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioBuffer_getBlockSize(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioBuffer *arg1 = (SynthLab::AudioBuffer *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::AudioBuffer::getBlockSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioBuffer::getBlockSize",1,"SynthLab::AudioBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioBuffer,0))){
    SWIG_fail_ptr("AudioBuffer_getBlockSize",1,SWIGTYPE_p_SynthLab__AudioBuffer);
  }
  
  result = (arg1)->getBlockSize();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioBuffer_getSamplesInBlock(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioBuffer *arg1 = (SynthLab::AudioBuffer *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::AudioBuffer::getSamplesInBlock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioBuffer::getSamplesInBlock",1,"SynthLab::AudioBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioBuffer,0))){
    SWIG_fail_ptr("AudioBuffer_getSamplesInBlock",1,SWIGTYPE_p_SynthLab__AudioBuffer);
  }
  
  result = (arg1)->getSamplesInBlock();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioBuffer_setSamplesInBlock(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioBuffer *arg1 = (SynthLab::AudioBuffer *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::AudioBuffer::setSamplesInBlock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioBuffer::setSamplesInBlock",1,"SynthLab::AudioBuffer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::AudioBuffer::setSamplesInBlock",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioBuffer,0))){
    SWIG_fail_ptr("AudioBuffer_setSamplesInBlock",1,SWIGTYPE_p_SynthLab__AudioBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("AudioBuffer_setSamplesInBlock",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->setSamplesInBlock(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AudioBuffer(void *obj) {
SynthLab::AudioBuffer *arg1 = (SynthLab::AudioBuffer *) obj;
delete arg1;
}
static int _proxy__wrap_new_AudioBuffer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AudioBuffer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AudioBuffer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AudioBuffer_methods[]= {
    { "init", _wrap_AudioBuffer_init},
    { "flushBuffers", _wrap_AudioBuffer_flushBuffers},
    { "getInputBuffer", _wrap_AudioBuffer_getInputBuffer},
    { "getOutputBuffer", _wrap_AudioBuffer_getOutputBuffer},
    { "getInputBuffers", _wrap_AudioBuffer_getInputBuffers},
    { "getOutputBuffers", _wrap_AudioBuffer_getOutputBuffers},
    { "getInputChannelCount", _wrap_AudioBuffer_getInputChannelCount},
    { "getOutputChannelCount", _wrap_AudioBuffer_getOutputChannelCount},
    { "getBlockSize", _wrap_AudioBuffer_getBlockSize},
    { "getSamplesInBlock", _wrap_AudioBuffer_getSamplesInBlock},
    { "setSamplesInBlock", _wrap_AudioBuffer_setSamplesInBlock},
    {0,0}
};
static swig_lua_method swig_AudioBuffer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AudioBuffer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AudioBuffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AudioBuffer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AudioBuffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AudioBuffer_Sf_SwigStatic = {
    "AudioBuffer",
    swig_AudioBuffer_Sf_SwigStatic_methods,
    swig_AudioBuffer_Sf_SwigStatic_attributes,
    swig_AudioBuffer_Sf_SwigStatic_constants,
    swig_AudioBuffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AudioBuffer_bases[] = {0};
static const char *swig_AudioBuffer_base_names[] = {0};
static swig_lua_class _wrap_class_AudioBuffer = { "AudioBuffer", "AudioBuffer", &SWIGTYPE_p_SynthLab__AudioBuffer,_proxy__wrap_new_AudioBuffer, swig_delete_AudioBuffer, swig_AudioBuffer_methods, swig_AudioBuffer_attributes, &swig_AudioBuffer_Sf_SwigStatic, swig_AudioBuffer_meta, swig_AudioBuffer_bases, swig_AudioBuffer_base_names };

static int _wrap_new_SynthClock(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthClock::SynthClock",0,0)
  result = (SynthLab::SynthClock *)new SynthLab::SynthClock();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__SynthClock,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_reset__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthClock::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::reset",1,"SynthLab::SynthClock *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthClock::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_reset",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->reset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_reset__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  
  SWIG_check_num_args("SynthLab::SynthClock::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::reset",1,"SynthLab::SynthClock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_reset",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_reset(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthClock, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SynthClock_reset__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthClock, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SynthClock_reset__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SynthClock_reset'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::SynthClock::reset(double)\n"
    "    SynthLab::SynthClock::reset()\n");
  lua_error(L);return 0;
}


static int _wrap_SynthClock_initWithClock(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  SynthLab::SynthClock *arg2 = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthClock::initWithClock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::initWithClock",1,"SynthLab::SynthClock *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthClock::initWithClock",2,"SynthLab::SynthClock &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_initWithClock",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_initWithClock",2,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  (arg1)->initWithClock(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_advanceClock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::SynthClock::advanceClock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::advanceClock",1,"SynthLab::SynthClock *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthClock::advanceClock",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_advanceClock",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("SynthClock_advanceClock",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->advanceClock(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_advanceClock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  
  SWIG_check_num_args("SynthLab::SynthClock::advanceClock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::advanceClock",1,"SynthLab::SynthClock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_advanceClock",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  (arg1)->advanceClock();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_advanceClock(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthClock, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SynthClock_advanceClock__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthClock, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SynthClock_advanceClock__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SynthClock_advanceClock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::SynthClock::advanceClock(uint32_t)\n"
    "    SynthLab::SynthClock::advanceClock()\n");
  lua_error(L);return 0;
}


static int _wrap_SynthClock_advanceWrapClock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthClock::advanceWrapClock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::advanceWrapClock",1,"SynthLab::SynthClock *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthClock::advanceWrapClock",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_advanceWrapClock",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("SynthClock_advanceWrapClock",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->advanceWrapClock(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_advanceWrapClock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthClock::advanceWrapClock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::advanceWrapClock",1,"SynthLab::SynthClock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_advanceWrapClock",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  result = (bool)(arg1)->advanceWrapClock();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_advanceWrapClock(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthClock, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SynthClock_advanceWrapClock__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthClock, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SynthClock_advanceWrapClock__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SynthClock_advanceWrapClock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::SynthClock::advanceWrapClock(uint32_t)\n"
    "    SynthLab::SynthClock::advanceWrapClock()\n");
  lua_error(L);return 0;
}


static int _wrap_SynthClock_wrapClock(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthClock::wrapClock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::wrapClock",1,"SynthLab::SynthClock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_wrapClock",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  result = (bool)(arg1)->wrapClock();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("SynthLab::SynthClock::setFrequency",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::setFrequency",1,"SynthLab::SynthClock *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthClock::setFrequency",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::SynthClock::setFrequency",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_setFrequency",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setFrequency(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_getFrequency(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::SynthClock::getFrequency",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::getFrequency",1,"SynthLab::SynthClock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_getFrequency",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  result = (double)(arg1)->getFrequency();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_addPhaseOffset__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  double arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("SynthLab::SynthClock::addPhaseOffset",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::addPhaseOffset",1,"SynthLab::SynthClock *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthClock::addPhaseOffset",2,"double");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("SynthLab::SynthClock::addPhaseOffset",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_addPhaseOffset",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->addPhaseOffset(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_addPhaseOffset__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthClock::addPhaseOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::addPhaseOffset",1,"SynthLab::SynthClock *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthClock::addPhaseOffset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_addPhaseOffset",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->addPhaseOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_addPhaseOffset(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthClock, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SynthClock_addPhaseOffset__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthClock, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_SynthClock_addPhaseOffset__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SynthClock_addPhaseOffset'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::SynthClock::addPhaseOffset(double,bool)\n"
    "    SynthLab::SynthClock::addPhaseOffset(double)\n");
  lua_error(L);return 0;
}


static int _wrap_SynthClock_removePhaseOffset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  
  SWIG_check_num_args("SynthLab::SynthClock::removePhaseOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::removePhaseOffset",1,"SynthLab::SynthClock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_removePhaseOffset",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  (arg1)->removePhaseOffset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_addFrequencyOffset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthClock::addFrequencyOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::addFrequencyOffset",1,"SynthLab::SynthClock *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthClock::addFrequencyOffset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_addFrequencyOffset",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->addFrequencyOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_removeFrequencyOffset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  
  SWIG_check_num_args("SynthLab::SynthClock::removeFrequencyOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::removeFrequencyOffset",1,"SynthLab::SynthClock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_removeFrequencyOffset",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  (arg1)->removeFrequencyOffset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_saveState(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  
  SWIG_check_num_args("SynthLab::SynthClock::saveState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::saveState",1,"SynthLab::SynthClock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_saveState",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  (arg1)->saveState();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_restoreState(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  
  SWIG_check_num_args("SynthLab::SynthClock::restoreState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::restoreState",1,"SynthLab::SynthClock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_restoreState",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  (arg1)->restoreState();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_mcounter_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthClock::mcounter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::mcounter",1,"SynthLab::SynthClock *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthClock::mcounter",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_mcounter_set",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->mcounter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_mcounter_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::SynthClock::mcounter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::mcounter",1,"SynthLab::SynthClock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_mcounter_get",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  result = (double) ((arg1)->mcounter);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_phaseInc_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthClock::phaseInc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::phaseInc",1,"SynthLab::SynthClock *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthClock::phaseInc",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_phaseInc_set",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->phaseInc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_phaseInc_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::SynthClock::phaseInc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::phaseInc",1,"SynthLab::SynthClock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_phaseInc_get",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  result = (double) ((arg1)->phaseInc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_phaseOffset_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthClock::phaseOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::phaseOffset",1,"SynthLab::SynthClock *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthClock::phaseOffset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_phaseOffset_set",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->phaseOffset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_phaseOffset_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::SynthClock::phaseOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::phaseOffset",1,"SynthLab::SynthClock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_phaseOffset_get",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  result = (double) ((arg1)->phaseOffset);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_freqOffset_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthClock::freqOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::freqOffset",1,"SynthLab::SynthClock *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthClock::freqOffset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_freqOffset_set",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->freqOffset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_freqOffset_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::SynthClock::freqOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::freqOffset",1,"SynthLab::SynthClock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_freqOffset_get",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  result = (double) ((arg1)->freqOffset);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_frequency_Hz_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthClock::frequency_Hz",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::frequency_Hz",1,"SynthLab::SynthClock *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthClock::frequency_Hz",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_frequency_Hz_set",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->frequency_Hz = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_frequency_Hz_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::SynthClock::frequency_Hz",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::frequency_Hz",1,"SynthLab::SynthClock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_frequency_Hz_get",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  result = (double) ((arg1)->frequency_Hz);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_sampleRate_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthClock::sampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::sampleRate",1,"SynthLab::SynthClock *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthClock::sampleRate",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_sampleRate_set",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->sampleRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_sampleRate_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::SynthClock::sampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::sampleRate",1,"SynthLab::SynthClock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_sampleRate_get",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  result = (double) ((arg1)->sampleRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_state_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthClock::state",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::state",1,"SynthLab::SynthClock *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::SynthClock::state",2,"double [SynthLab::SynthClock::NUM_VARS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_state_set",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("SynthClock_state_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->state;
    for (ii = 0; ii < (size_t)SynthLab::SynthClock::NUM_VARS; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthClock_state_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthClock::state",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthClock::state",1,"SynthLab::SynthClock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SynthClock_state_get",1,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  result = (double *)(double *) ((arg1)->state);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SynthClock(void *obj) {
SynthLab::SynthClock *arg1 = (SynthLab::SynthClock *) obj;
delete arg1;
}
static int _proxy__wrap_new_SynthClock(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SynthClock);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SynthClock_attributes[] = {
    { "mcounter", _wrap_SynthClock_mcounter_get, _wrap_SynthClock_mcounter_set },
    { "phaseInc", _wrap_SynthClock_phaseInc_get, _wrap_SynthClock_phaseInc_set },
    { "phaseOffset", _wrap_SynthClock_phaseOffset_get, _wrap_SynthClock_phaseOffset_set },
    { "freqOffset", _wrap_SynthClock_freqOffset_get, _wrap_SynthClock_freqOffset_set },
    { "frequency_Hz", _wrap_SynthClock_frequency_Hz_get, _wrap_SynthClock_frequency_Hz_set },
    { "sampleRate", _wrap_SynthClock_sampleRate_get, _wrap_SynthClock_sampleRate_set },
    { "state", _wrap_SynthClock_state_get, _wrap_SynthClock_state_set },
    {0,0,0}
};
static swig_lua_method swig_SynthClock_methods[]= {
    { "reset", _wrap_SynthClock_reset},
    { "initWithClock", _wrap_SynthClock_initWithClock},
    { "advanceClock", _wrap_SynthClock_advanceClock},
    { "advanceWrapClock", _wrap_SynthClock_advanceWrapClock},
    { "wrapClock", _wrap_SynthClock_wrapClock},
    { "setFrequency", _wrap_SynthClock_setFrequency},
    { "getFrequency", _wrap_SynthClock_getFrequency},
    { "addPhaseOffset", _wrap_SynthClock_addPhaseOffset},
    { "removePhaseOffset", _wrap_SynthClock_removePhaseOffset},
    { "addFrequencyOffset", _wrap_SynthClock_addFrequencyOffset},
    { "removeFrequencyOffset", _wrap_SynthClock_removeFrequencyOffset},
    { "saveState", _wrap_SynthClock_saveState},
    { "restoreState", _wrap_SynthClock_restoreState},
    {0,0}
};
static swig_lua_method swig_SynthClock_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SynthClock_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SynthClock_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("MOD_COUNTER", SynthLab::SynthClock::MOD_COUNTER)},
    {SWIG_LUA_CONSTTAB_INT("PHASE_INC", SynthLab::SynthClock::PHASE_INC)},
    {SWIG_LUA_CONSTTAB_INT("PHASE_OFFSET", SynthLab::SynthClock::PHASE_OFFSET)},
    {SWIG_LUA_CONSTTAB_INT("FREQUENCY_HZ", SynthLab::SynthClock::FREQUENCY_HZ)},
    {SWIG_LUA_CONSTTAB_INT("NUM_VARS", SynthLab::SynthClock::NUM_VARS)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SynthClock_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SynthClock_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SynthClock_Sf_SwigStatic = {
    "SynthClock",
    swig_SynthClock_Sf_SwigStatic_methods,
    swig_SynthClock_Sf_SwigStatic_attributes,
    swig_SynthClock_Sf_SwigStatic_constants,
    swig_SynthClock_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SynthClock_bases[] = {0};
static const char *swig_SynthClock_base_names[] = {0};
static swig_lua_class _wrap_class_SynthClock = { "SynthClock", "SynthClock", &SWIGTYPE_p_SynthLab__SynthClock,_proxy__wrap_new_SynthClock, swig_delete_SynthClock, swig_SynthClock_methods, swig_SynthClock_attributes, &swig_SynthClock_Sf_SwigStatic, swig_SynthClock_meta, swig_SynthClock_bases, swig_SynthClock_base_names };

static int _wrap_new_Timer(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Timer *result = 0 ;
  
  SWIG_check_num_args("SynthLab::Timer::Timer",0,0)
  result = (SynthLab::Timer *)new SynthLab::Timer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__Timer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_resetTimer(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Timer *arg1 = (SynthLab::Timer *) 0 ;
  
  SWIG_check_num_args("SynthLab::Timer::resetTimer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Timer::resetTimer",1,"SynthLab::Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Timer,0))){
    SWIG_fail_ptr("Timer_resetTimer",1,SWIGTYPE_p_SynthLab__Timer);
  }
  
  (arg1)->resetTimer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_setExpireSamples(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Timer *arg1 = (SynthLab::Timer *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::Timer::setExpireSamples",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Timer::setExpireSamples",1,"SynthLab::Timer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::Timer::setExpireSamples",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Timer,0))){
    SWIG_fail_ptr("Timer_setExpireSamples",1,SWIGTYPE_p_SynthLab__Timer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("Timer_setExpireSamples",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->setExpireSamples(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_setExpireMilliSec(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Timer *arg1 = (SynthLab::Timer *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("SynthLab::Timer::setExpireMilliSec",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Timer::setExpireMilliSec",1,"SynthLab::Timer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::Timer::setExpireMilliSec",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::Timer::setExpireMilliSec",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Timer,0))){
    SWIG_fail_ptr("Timer_setExpireMilliSec",1,SWIGTYPE_p_SynthLab__Timer);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setExpireMilliSec(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_getExpireSamples(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Timer *arg1 = (SynthLab::Timer *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::Timer::getExpireSamples",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Timer::getExpireSamples",1,"SynthLab::Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Timer,0))){
    SWIG_fail_ptr("Timer_getExpireSamples",1,SWIGTYPE_p_SynthLab__Timer);
  }
  
  result = (arg1)->getExpireSamples();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_timerExpired(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Timer *arg1 = (SynthLab::Timer *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::Timer::timerExpired",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Timer::timerExpired",1,"SynthLab::Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Timer,0))){
    SWIG_fail_ptr("Timer_timerExpired",1,SWIGTYPE_p_SynthLab__Timer);
  }
  
  result = (bool)(arg1)->timerExpired();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_advanceTimer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Timer *arg1 = (SynthLab::Timer *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::Timer::advanceTimer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Timer::advanceTimer",1,"SynthLab::Timer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::Timer::advanceTimer",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Timer,0))){
    SWIG_fail_ptr("Timer_advanceTimer",1,SWIGTYPE_p_SynthLab__Timer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("Timer_advanceTimer",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->advanceTimer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_advanceTimer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Timer *arg1 = (SynthLab::Timer *) 0 ;
  
  SWIG_check_num_args("SynthLab::Timer::advanceTimer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Timer::advanceTimer",1,"SynthLab::Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Timer,0))){
    SWIG_fail_ptr("Timer_advanceTimer",1,SWIGTYPE_p_SynthLab__Timer);
  }
  
  (arg1)->advanceTimer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_advanceTimer(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__Timer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Timer_advanceTimer__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__Timer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Timer_advanceTimer__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Timer_advanceTimer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::Timer::advanceTimer(uint32_t)\n"
    "    SynthLab::Timer::advanceTimer()\n");
  lua_error(L);return 0;
}


static int _wrap_Timer_getTick(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Timer *arg1 = (SynthLab::Timer *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::Timer::getTick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Timer::getTick",1,"SynthLab::Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Timer,0))){
    SWIG_fail_ptr("Timer_getTick",1,SWIGTYPE_p_SynthLab__Timer);
  }
  
  result = (arg1)->getTick();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Timer(void *obj) {
SynthLab::Timer *arg1 = (SynthLab::Timer *) obj;
delete arg1;
}
static int _proxy__wrap_new_Timer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Timer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Timer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Timer_methods[]= {
    { "resetTimer", _wrap_Timer_resetTimer},
    { "setExpireSamples", _wrap_Timer_setExpireSamples},
    { "setExpireMilliSec", _wrap_Timer_setExpireMilliSec},
    { "getExpireSamples", _wrap_Timer_getExpireSamples},
    { "timerExpired", _wrap_Timer_timerExpired},
    { "advanceTimer", _wrap_Timer_advanceTimer},
    { "getTick", _wrap_Timer_getTick},
    {0,0}
};
static swig_lua_method swig_Timer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Timer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Timer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Timer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Timer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Timer_Sf_SwigStatic = {
    "Timer",
    swig_Timer_Sf_SwigStatic_methods,
    swig_Timer_Sf_SwigStatic_attributes,
    swig_Timer_Sf_SwigStatic_constants,
    swig_Timer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Timer_bases[] = {0};
static const char *swig_Timer_base_names[] = {0};
static swig_lua_class _wrap_class_Timer = { "Timer", "Timer", &SWIGTYPE_p_SynthLab__Timer,_proxy__wrap_new_Timer, swig_delete_Timer, swig_Timer_methods, swig_Timer_attributes, &swig_Timer_Sf_SwigStatic, swig_Timer_meta, swig_Timer_bases, swig_Timer_base_names };

static int _wrap_new_XFader__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::XFader *result = 0 ;
  
  SWIG_check_num_args("SynthLab::XFader::XFader",0,0)
  result = (SynthLab::XFader *)new SynthLab::XFader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__XFader,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_XFader__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  uint32_t *argp1 ;
  SynthLab::XFader *result = 0 ;
  
  SWIG_check_num_args("SynthLab::XFader::XFader",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::XFader::XFader",1,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_XFader",1,SWIGTYPE_p_uint32_t);
  }
  arg1 = *argp1;
  
  result = (SynthLab::XFader *)new SynthLab::XFader(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__XFader,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_XFader(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_XFader__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_XFader__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_XFader'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::XFader::XFader()\n"
    "    SynthLab::XFader::XFader(uint32_t)\n");
  lua_error(L);return 0;
}


static int _wrap_XFader_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::XFader *arg1 = (SynthLab::XFader *) 0 ;
  
  SWIG_check_num_args("SynthLab::XFader::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::XFader::reset",1,"SynthLab::XFader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__XFader,0))){
    SWIG_fail_ptr("XFader_reset",1,SWIGTYPE_p_SynthLab__XFader);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XFader_setXFadeTime(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::XFader *arg1 = (SynthLab::XFader *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::XFader::setXFadeTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::XFader::setXFadeTime",1,"SynthLab::XFader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::XFader::setXFadeTime",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__XFader,0))){
    SWIG_fail_ptr("XFader_setXFadeTime",1,SWIGTYPE_p_SynthLab__XFader);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("XFader_setXFadeTime",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->setXFadeTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XFader_startCrossfade(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::XFader *arg1 = (SynthLab::XFader *) 0 ;
  
  SWIG_check_num_args("SynthLab::XFader::startCrossfade",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::XFader::startCrossfade",1,"SynthLab::XFader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__XFader,0))){
    SWIG_fail_ptr("XFader_startCrossfade",1,SWIGTYPE_p_SynthLab__XFader);
  }
  
  (arg1)->startCrossfade();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XFader_stopCrossfade(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::XFader *arg1 = (SynthLab::XFader *) 0 ;
  
  SWIG_check_num_args("SynthLab::XFader::stopCrossfade",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::XFader::stopCrossfade",1,"SynthLab::XFader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__XFader,0))){
    SWIG_fail_ptr("XFader_stopCrossfade",1,SWIGTYPE_p_SynthLab__XFader);
  }
  
  (arg1)->stopCrossfade();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XFader_isCrossfading(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::XFader *arg1 = (SynthLab::XFader *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::XFader::isCrossfading",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::XFader::isCrossfading",1,"SynthLab::XFader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__XFader,0))){
    SWIG_fail_ptr("XFader_isCrossfading",1,SWIGTYPE_p_SynthLab__XFader);
  }
  
  result = (bool)(arg1)->isCrossfading();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XFader_crossfade(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::XFader *arg1 = (SynthLab::XFader *) 0 ;
  XFadeType arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = 0 ;
  XFadeType *argp2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::XFader::crossfade",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::XFader::crossfade",1,"SynthLab::XFader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::XFader::crossfade",2,"XFadeType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::XFader::crossfade",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::XFader::crossfade",4,"double");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SynthLab::XFader::crossfade",5,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__XFader,0))){
    SWIG_fail_ptr("XFader_crossfade",1,SWIGTYPE_p_SynthLab__XFader);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_XFadeType,0))){
    SWIG_fail_ptr("XFader_crossfade",2,SWIGTYPE_p_XFadeType);
  }
  arg2 = *argp2;
  
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("XFader_crossfade",5,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->crossfade(arg2,arg3,arg4,*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_XFader(void *obj) {
SynthLab::XFader *arg1 = (SynthLab::XFader *) obj;
delete arg1;
}
static int _proxy__wrap_new_XFader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_XFader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_XFader_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_XFader_methods[]= {
    { "reset", _wrap_XFader_reset},
    { "setXFadeTime", _wrap_XFader_setXFadeTime},
    { "startCrossfade", _wrap_XFader_startCrossfade},
    { "stopCrossfade", _wrap_XFader_stopCrossfade},
    { "isCrossfading", _wrap_XFader_isCrossfading},
    { "crossfade", _wrap_XFader_crossfade},
    {0,0}
};
static swig_lua_method swig_XFader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_XFader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_XFader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_XFader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_XFader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_XFader_Sf_SwigStatic = {
    "XFader",
    swig_XFader_Sf_SwigStatic_methods,
    swig_XFader_Sf_SwigStatic_attributes,
    swig_XFader_Sf_SwigStatic_constants,
    swig_XFader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_XFader_bases[] = {0};
static const char *swig_XFader_base_names[] = {0};
static swig_lua_class _wrap_class_XFader = { "XFader", "XFader", &SWIGTYPE_p_SynthLab__XFader,_proxy__wrap_new_XFader, swig_delete_XFader, swig_XFader_methods, swig_XFader_attributes, &swig_XFader_Sf_SwigStatic, swig_XFader_meta, swig_XFader_bases, swig_XFader_base_names };

static int _wrap_new_XHoldFader(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::XHoldFader *result = 0 ;
  
  SWIG_check_num_args("SynthLab::XHoldFader::XHoldFader",0,0)
  result = (SynthLab::XHoldFader *)new SynthLab::XHoldFader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__XHoldFader,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XHoldFader_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::XHoldFader *arg1 = (SynthLab::XHoldFader *) 0 ;
  
  SWIG_check_num_args("SynthLab::XHoldFader::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::XHoldFader::reset",1,"SynthLab::XHoldFader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__XHoldFader,0))){
    SWIG_fail_ptr("XHoldFader_reset",1,SWIGTYPE_p_SynthLab__XHoldFader);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XHoldFader_setXFadeTimeSamples(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::XHoldFader *arg1 = (SynthLab::XHoldFader *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::XHoldFader::setXFadeTimeSamples",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::XHoldFader::setXFadeTimeSamples",1,"SynthLab::XHoldFader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::XHoldFader::setXFadeTimeSamples",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__XHoldFader,0))){
    SWIG_fail_ptr("XHoldFader_setXFadeTimeSamples",1,SWIGTYPE_p_SynthLab__XHoldFader);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("XHoldFader_setXFadeTimeSamples",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->setXFadeTimeSamples(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XHoldFader_getXFadeTimeSamples(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::XHoldFader *arg1 = (SynthLab::XHoldFader *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::XHoldFader::getXFadeTimeSamples",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::XHoldFader::getXFadeTimeSamples",1,"SynthLab::XHoldFader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__XHoldFader,0))){
    SWIG_fail_ptr("XHoldFader_getXFadeTimeSamples",1,SWIGTYPE_p_SynthLab__XHoldFader);
  }
  
  result = (arg1)->getXFadeTimeSamples();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XHoldFader_setHoldTimeSamples(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::XHoldFader *arg1 = (SynthLab::XHoldFader *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::XHoldFader::setHoldTimeSamples",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::XHoldFader::setHoldTimeSamples",1,"SynthLab::XHoldFader *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::XHoldFader::setHoldTimeSamples",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__XHoldFader,0))){
    SWIG_fail_ptr("XHoldFader_setHoldTimeSamples",1,SWIGTYPE_p_SynthLab__XHoldFader);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setHoldTimeSamples(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XHoldFader_getHoldTimeSamples(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::XHoldFader *arg1 = (SynthLab::XHoldFader *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::XHoldFader::getHoldTimeSamples",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::XHoldFader::getHoldTimeSamples",1,"SynthLab::XHoldFader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__XHoldFader,0))){
    SWIG_fail_ptr("XHoldFader_getHoldTimeSamples",1,SWIGTYPE_p_SynthLab__XHoldFader);
  }
  
  result = (double)(arg1)->getHoldTimeSamples();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XHoldFader_getCrossfadeData(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::XHoldFader *arg1 = (SynthLab::XHoldFader *) 0 ;
  XFadeData result;
  
  SWIG_check_num_args("SynthLab::XHoldFader::getCrossfadeData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::XHoldFader::getCrossfadeData",1,"SynthLab::XHoldFader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__XHoldFader,0))){
    SWIG_fail_ptr("XHoldFader_getCrossfadeData",1,SWIGTYPE_p_SynthLab__XHoldFader);
  }
  
  result = (arg1)->getCrossfadeData();
  {
    XFadeData * resultptr = new XFadeData((const XFadeData &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_XFadeData,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_XHoldFader(void *obj) {
SynthLab::XHoldFader *arg1 = (SynthLab::XHoldFader *) obj;
delete arg1;
}
static int _proxy__wrap_new_XHoldFader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_XHoldFader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_XHoldFader_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_XHoldFader_methods[]= {
    { "reset", _wrap_XHoldFader_reset},
    { "setXFadeTimeSamples", _wrap_XHoldFader_setXFadeTimeSamples},
    { "getXFadeTimeSamples", _wrap_XHoldFader_getXFadeTimeSamples},
    { "setHoldTimeSamples", _wrap_XHoldFader_setHoldTimeSamples},
    { "getHoldTimeSamples", _wrap_XHoldFader_getHoldTimeSamples},
    { "getCrossfadeData", _wrap_XHoldFader_getCrossfadeData},
    {0,0}
};
static swig_lua_method swig_XHoldFader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_XHoldFader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_XHoldFader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_XHoldFader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_XHoldFader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_XHoldFader_Sf_SwigStatic = {
    "XHoldFader",
    swig_XHoldFader_Sf_SwigStatic_methods,
    swig_XHoldFader_Sf_SwigStatic_attributes,
    swig_XHoldFader_Sf_SwigStatic_constants,
    swig_XHoldFader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_XHoldFader_bases[] = {0};
static const char *swig_XHoldFader_base_names[] = {0};
static swig_lua_class _wrap_class_XHoldFader = { "XHoldFader", "XHoldFader", &SWIGTYPE_p_SynthLab__XHoldFader,_proxy__wrap_new_XHoldFader, swig_delete_XHoldFader, swig_XHoldFader_methods, swig_XHoldFader_attributes, &swig_XHoldFader_Sf_SwigStatic, swig_XHoldFader_meta, swig_XHoldFader_bases, swig_XHoldFader_base_names };

static int _wrap_new_SlewLimiter(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SlewLimiter *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SlewLimiter::SlewLimiter",0,0)
  result = (SynthLab::SlewLimiter *)new SynthLab::SlewLimiter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__SlewLimiter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlewLimiter_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SlewLimiter *arg1 = (SynthLab::SlewLimiter *) 0 ;
  
  SWIG_check_num_args("SynthLab::SlewLimiter::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SlewLimiter::reset",1,"SynthLab::SlewLimiter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SlewLimiter,0))){
    SWIG_fail_ptr("SlewLimiter_reset",1,SWIGTYPE_p_SynthLab__SlewLimiter);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlewLimiter_setSlewValue(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SlewLimiter *arg1 = (SynthLab::SlewLimiter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::SlewLimiter::setSlewValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SlewLimiter::setSlewValue",1,"SynthLab::SlewLimiter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SlewLimiter::setSlewValue",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SlewLimiter,0))){
    SWIG_fail_ptr("SlewLimiter_setSlewValue",1,SWIGTYPE_p_SynthLab__SlewLimiter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setSlewValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlewLimiter_doSlewLimiter(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SlewLimiter *arg1 = (SynthLab::SlewLimiter *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::SlewLimiter::doSlewLimiter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SlewLimiter::doSlewLimiter",1,"SynthLab::SlewLimiter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SlewLimiter::doSlewLimiter",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SlewLimiter,0))){
    SWIG_fail_ptr("SlewLimiter_doSlewLimiter",1,SWIGTYPE_p_SynthLab__SlewLimiter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->doSlewLimiter(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SlewLimiter(void *obj) {
SynthLab::SlewLimiter *arg1 = (SynthLab::SlewLimiter *) obj;
delete arg1;
}
static int _proxy__wrap_new_SlewLimiter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SlewLimiter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SlewLimiter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SlewLimiter_methods[]= {
    { "reset", _wrap_SlewLimiter_reset},
    { "setSlewValue", _wrap_SlewLimiter_setSlewValue},
    { "doSlewLimiter", _wrap_SlewLimiter_doSlewLimiter},
    {0,0}
};
static swig_lua_method swig_SlewLimiter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SlewLimiter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SlewLimiter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SlewLimiter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SlewLimiter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SlewLimiter_Sf_SwigStatic = {
    "SlewLimiter",
    swig_SlewLimiter_Sf_SwigStatic_methods,
    swig_SlewLimiter_Sf_SwigStatic_attributes,
    swig_SlewLimiter_Sf_SwigStatic_constants,
    swig_SlewLimiter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SlewLimiter_bases[] = {0};
static const char *swig_SlewLimiter_base_names[] = {0};
static swig_lua_class _wrap_class_SlewLimiter = { "SlewLimiter", "SlewLimiter", &SWIGTYPE_p_SynthLab__SlewLimiter,_proxy__wrap_new_SlewLimiter, swig_delete_SlewLimiter, swig_SlewLimiter_methods, swig_SlewLimiter_attributes, &swig_SlewLimiter_Sf_SwigStatic, swig_SlewLimiter_meta, swig_SlewLimiter_bases, swig_SlewLimiter_base_names };

static int _wrap_new_Synchronizer(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Synchronizer *result = 0 ;
  
  SWIG_check_num_args("SynthLab::Synchronizer::Synchronizer",0,0)
  result = (SynthLab::Synchronizer *)new SynthLab::Synchronizer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__Synchronizer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Synchronizer_reset__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Synchronizer *arg1 = (SynthLab::Synchronizer *) 0 ;
  double arg2 ;
  double arg3 ;
  int32_t arg4 ;
  int32_t *argp4 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::Synchronizer::reset",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Synchronizer::reset",1,"SynthLab::Synchronizer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::Synchronizer::reset",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::Synchronizer::reset",3,"double");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SynthLab::Synchronizer::reset",4,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Synchronizer,0))){
    SWIG_fail_ptr("Synchronizer_reset",1,SWIGTYPE_p_SynthLab__Synchronizer);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("Synchronizer_reset",4,SWIGTYPE_p_int32_t);
  }
  arg4 = *argp4;
  
  result = (bool)(arg1)->reset(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Synchronizer_reset__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Synchronizer *arg1 = (SynthLab::Synchronizer *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::Synchronizer::reset",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Synchronizer::reset",1,"SynthLab::Synchronizer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::Synchronizer::reset",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::Synchronizer::reset",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Synchronizer,0))){
    SWIG_fail_ptr("Synchronizer_reset",1,SWIGTYPE_p_SynthLab__Synchronizer);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->reset(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Synchronizer_reset(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__Synchronizer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Synchronizer_reset__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__Synchronizer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_int32_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Synchronizer_reset__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Synchronizer_reset'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::Synchronizer::reset(double,double,int32_t)\n"
    "    SynthLab::Synchronizer::reset(double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_Synchronizer_setHardSyncFrequency(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Synchronizer *arg1 = (SynthLab::Synchronizer *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::Synchronizer::setHardSyncFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Synchronizer::setHardSyncFrequency",1,"SynthLab::Synchronizer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::Synchronizer::setHardSyncFrequency",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Synchronizer,0))){
    SWIG_fail_ptr("Synchronizer_setHardSyncFrequency",1,SWIGTYPE_p_SynthLab__Synchronizer);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->setHardSyncFrequency(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Synchronizer_getHardSyncClock(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Synchronizer *arg1 = (SynthLab::Synchronizer *) 0 ;
  SynthLab::SynthClock *result = 0 ;
  
  SWIG_check_num_args("SynthLab::Synchronizer::getHardSyncClock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Synchronizer::getHardSyncClock",1,"SynthLab::Synchronizer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Synchronizer,0))){
    SWIG_fail_ptr("Synchronizer_getHardSyncClock",1,SWIGTYPE_p_SynthLab__Synchronizer);
  }
  
  result = (SynthLab::SynthClock *) &(arg1)->getHardSyncClock();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__SynthClock,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Synchronizer_getCrossFadeClock(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Synchronizer *arg1 = (SynthLab::Synchronizer *) 0 ;
  SynthLab::SynthClock *result = 0 ;
  
  SWIG_check_num_args("SynthLab::Synchronizer::getCrossFadeClock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Synchronizer::getCrossFadeClock",1,"SynthLab::Synchronizer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Synchronizer,0))){
    SWIG_fail_ptr("Synchronizer_getCrossFadeClock",1,SWIGTYPE_p_SynthLab__Synchronizer);
  }
  
  result = (SynthLab::SynthClock *) &(arg1)->getCrossFadeClock();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__SynthClock,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Synchronizer_startHardSync(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Synchronizer *arg1 = (SynthLab::Synchronizer *) 0 ;
  SynthLab::SynthClock arg2 ;
  SynthLab::SynthClock *argp2 ;
  
  SWIG_check_num_args("SynthLab::Synchronizer::startHardSync",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Synchronizer::startHardSync",1,"SynthLab::Synchronizer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::Synchronizer::startHardSync",2,"SynthLab::SynthClock");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Synchronizer,0))){
    SWIG_fail_ptr("Synchronizer_startHardSync",1,SWIGTYPE_p_SynthLab__Synchronizer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("Synchronizer_startHardSync",2,SWIGTYPE_p_SynthLab__SynthClock);
  }
  arg2 = *argp2;
  
  (arg1)->startHardSync(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Synchronizer_doHardSyncXFade(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Synchronizer *arg1 = (SynthLab::Synchronizer *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::Synchronizer::doHardSyncXFade",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Synchronizer::doHardSyncXFade",1,"SynthLab::Synchronizer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::Synchronizer::doHardSyncXFade",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::Synchronizer::doHardSyncXFade",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Synchronizer,0))){
    SWIG_fail_ptr("Synchronizer_doHardSyncXFade",1,SWIGTYPE_p_SynthLab__Synchronizer);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->doHardSyncXFade(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Synchronizer_isProcessing(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Synchronizer *arg1 = (SynthLab::Synchronizer *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::Synchronizer::isProcessing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Synchronizer::isProcessing",1,"SynthLab::Synchronizer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Synchronizer,0))){
    SWIG_fail_ptr("Synchronizer_isProcessing",1,SWIGTYPE_p_SynthLab__Synchronizer);
  }
  
  result = (bool)(arg1)->isProcessing();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Synchronizer_addPhaseOffset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Synchronizer *arg1 = (SynthLab::Synchronizer *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::Synchronizer::addPhaseOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Synchronizer::addPhaseOffset",1,"SynthLab::Synchronizer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::Synchronizer::addPhaseOffset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Synchronizer,0))){
    SWIG_fail_ptr("Synchronizer_addPhaseOffset",1,SWIGTYPE_p_SynthLab__Synchronizer);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->addPhaseOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Synchronizer_removePhaseOffset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Synchronizer *arg1 = (SynthLab::Synchronizer *) 0 ;
  
  SWIG_check_num_args("SynthLab::Synchronizer::removePhaseOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Synchronizer::removePhaseOffset",1,"SynthLab::Synchronizer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Synchronizer,0))){
    SWIG_fail_ptr("Synchronizer_removePhaseOffset",1,SWIGTYPE_p_SynthLab__Synchronizer);
  }
  
  (arg1)->removePhaseOffset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Synchronizer(void *obj) {
SynthLab::Synchronizer *arg1 = (SynthLab::Synchronizer *) obj;
delete arg1;
}
static int _proxy__wrap_new_Synchronizer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Synchronizer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Synchronizer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Synchronizer_methods[]= {
    { "reset", _wrap_Synchronizer_reset},
    { "setHardSyncFrequency", _wrap_Synchronizer_setHardSyncFrequency},
    { "getHardSyncClock", _wrap_Synchronizer_getHardSyncClock},
    { "getCrossFadeClock", _wrap_Synchronizer_getCrossFadeClock},
    { "startHardSync", _wrap_Synchronizer_startHardSync},
    { "doHardSyncXFade", _wrap_Synchronizer_doHardSyncXFade},
    { "isProcessing", _wrap_Synchronizer_isProcessing},
    { "addPhaseOffset", _wrap_Synchronizer_addPhaseOffset},
    { "removePhaseOffset", _wrap_Synchronizer_removePhaseOffset},
    {0,0}
};
static swig_lua_method swig_Synchronizer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Synchronizer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Synchronizer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Synchronizer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Synchronizer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Synchronizer_Sf_SwigStatic = {
    "Synchronizer",
    swig_Synchronizer_Sf_SwigStatic_methods,
    swig_Synchronizer_Sf_SwigStatic_attributes,
    swig_Synchronizer_Sf_SwigStatic_constants,
    swig_Synchronizer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Synchronizer_bases[] = {0};
static const char *swig_Synchronizer_base_names[] = {0};
static swig_lua_class _wrap_class_Synchronizer = { "Synchronizer", "Synchronizer", &SWIGTYPE_p_SynthLab__Synchronizer,_proxy__wrap_new_Synchronizer, swig_delete_Synchronizer, swig_Synchronizer_methods, swig_Synchronizer_attributes, &swig_Synchronizer_Sf_SwigStatic, swig_Synchronizer_meta, swig_Synchronizer_bases, swig_Synchronizer_base_names };

static int _wrap_new_RampModulator(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::RampModulator *result = 0 ;
  
  SWIG_check_num_args("SynthLab::RampModulator::RampModulator",0,0)
  result = (SynthLab::RampModulator *)new SynthLab::RampModulator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__RampModulator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RampModulator_startModulator(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::RampModulator *arg1 = (SynthLab::RampModulator *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::RampModulator::startModulator",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::RampModulator::startModulator",1,"SynthLab::RampModulator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::RampModulator::startModulator",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::RampModulator::startModulator",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::RampModulator::startModulator",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SynthLab::RampModulator::startModulator",5,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__RampModulator,0))){
    SWIG_fail_ptr("RampModulator_startModulator",1,SWIGTYPE_p_SynthLab__RampModulator);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (bool)(arg1)->startModulator(arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RampModulator_setModTime(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::RampModulator *arg1 = (SynthLab::RampModulator *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::RampModulator::setModTime",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::RampModulator::setModTime",1,"SynthLab::RampModulator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::RampModulator::setModTime",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::RampModulator::setModTime",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__RampModulator,0))){
    SWIG_fail_ptr("RampModulator_setModTime",1,SWIGTYPE_p_SynthLab__RampModulator);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setModTime(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RampModulator_getNextModulationValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::RampModulator *arg1 = (SynthLab::RampModulator *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::RampModulator::getNextModulationValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::RampModulator::getNextModulationValue",1,"SynthLab::RampModulator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::RampModulator::getNextModulationValue",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__RampModulator,0))){
    SWIG_fail_ptr("RampModulator_getNextModulationValue",1,SWIGTYPE_p_SynthLab__RampModulator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("RampModulator_getNextModulationValue",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (double)(arg1)->getNextModulationValue(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RampModulator_getNextModulationValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::RampModulator *arg1 = (SynthLab::RampModulator *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::RampModulator::getNextModulationValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::RampModulator::getNextModulationValue",1,"SynthLab::RampModulator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__RampModulator,0))){
    SWIG_fail_ptr("RampModulator_getNextModulationValue",1,SWIGTYPE_p_SynthLab__RampModulator);
  }
  
  result = (double)(arg1)->getNextModulationValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RampModulator_getNextModulationValue(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__RampModulator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RampModulator_getNextModulationValue__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__RampModulator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RampModulator_getNextModulationValue__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RampModulator_getNextModulationValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::RampModulator::getNextModulationValue(uint32_t)\n"
    "    SynthLab::RampModulator::getNextModulationValue()\n");
  lua_error(L);return 0;
}


static int _wrap_RampModulator_advanceClock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::RampModulator *arg1 = (SynthLab::RampModulator *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::RampModulator::advanceClock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::RampModulator::advanceClock",1,"SynthLab::RampModulator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::RampModulator::advanceClock",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__RampModulator,0))){
    SWIG_fail_ptr("RampModulator_advanceClock",1,SWIGTYPE_p_SynthLab__RampModulator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("RampModulator_advanceClock",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->advanceClock(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RampModulator_advanceClock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::RampModulator *arg1 = (SynthLab::RampModulator *) 0 ;
  
  SWIG_check_num_args("SynthLab::RampModulator::advanceClock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::RampModulator::advanceClock",1,"SynthLab::RampModulator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__RampModulator,0))){
    SWIG_fail_ptr("RampModulator_advanceClock",1,SWIGTYPE_p_SynthLab__RampModulator);
  }
  
  (arg1)->advanceClock();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RampModulator_advanceClock(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__RampModulator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RampModulator_advanceClock__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__RampModulator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RampModulator_advanceClock__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RampModulator_advanceClock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::RampModulator::advanceClock(uint32_t)\n"
    "    SynthLab::RampModulator::advanceClock()\n");
  lua_error(L);return 0;
}


static int _wrap_RampModulator_isActive(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::RampModulator *arg1 = (SynthLab::RampModulator *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::RampModulator::isActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::RampModulator::isActive",1,"SynthLab::RampModulator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__RampModulator,0))){
    SWIG_fail_ptr("RampModulator_isActive",1,SWIGTYPE_p_SynthLab__RampModulator);
  }
  
  result = (bool)(arg1)->isActive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RampModulator(void *obj) {
SynthLab::RampModulator *arg1 = (SynthLab::RampModulator *) obj;
delete arg1;
}
static int _proxy__wrap_new_RampModulator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RampModulator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RampModulator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RampModulator_methods[]= {
    { "startModulator", _wrap_RampModulator_startModulator},
    { "setModTime", _wrap_RampModulator_setModTime},
    { "getNextModulationValue", _wrap_RampModulator_getNextModulationValue},
    { "advanceClock", _wrap_RampModulator_advanceClock},
    { "isActive", _wrap_RampModulator_isActive},
    {0,0}
};
static swig_lua_method swig_RampModulator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RampModulator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RampModulator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RampModulator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RampModulator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RampModulator_Sf_SwigStatic = {
    "RampModulator",
    swig_RampModulator_Sf_SwigStatic_methods,
    swig_RampModulator_Sf_SwigStatic_attributes,
    swig_RampModulator_Sf_SwigStatic_constants,
    swig_RampModulator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RampModulator_bases[] = {0};
static const char *swig_RampModulator_base_names[] = {0};
static swig_lua_class _wrap_class_RampModulator = { "RampModulator", "RampModulator", &SWIGTYPE_p_SynthLab__RampModulator,_proxy__wrap_new_RampModulator, swig_delete_RampModulator, swig_RampModulator_methods, swig_RampModulator_attributes, &swig_RampModulator_Sf_SwigStatic, swig_RampModulator_meta, swig_RampModulator_bases, swig_RampModulator_base_names };

static int _wrap_new_GlideModulator(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::GlideModulator *result = 0 ;
  
  SWIG_check_num_args("SynthLab::GlideModulator::GlideModulator",0,0)
  result = (SynthLab::GlideModulator *)new SynthLab::GlideModulator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__GlideModulator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GlideModulator_startModulator(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::GlideModulator *arg1 = (SynthLab::GlideModulator *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::GlideModulator::startModulator",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::GlideModulator::startModulator",1,"SynthLab::GlideModulator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::GlideModulator::startModulator",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::GlideModulator::startModulator",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::GlideModulator::startModulator",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SynthLab::GlideModulator::startModulator",5,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__GlideModulator,0))){
    SWIG_fail_ptr("GlideModulator_startModulator",1,SWIGTYPE_p_SynthLab__GlideModulator);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (bool)(arg1)->startModulator(arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GlideModulator_setGlideTime(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::GlideModulator *arg1 = (SynthLab::GlideModulator *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::GlideModulator::setGlideTime",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::GlideModulator::setGlideTime",1,"SynthLab::GlideModulator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::GlideModulator::setGlideTime",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::GlideModulator::setGlideTime",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__GlideModulator,0))){
    SWIG_fail_ptr("GlideModulator_setGlideTime",1,SWIGTYPE_p_SynthLab__GlideModulator);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setGlideTime(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GlideModulator_getNextModulationValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::GlideModulator *arg1 = (SynthLab::GlideModulator *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::GlideModulator::getNextModulationValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::GlideModulator::getNextModulationValue",1,"SynthLab::GlideModulator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::GlideModulator::getNextModulationValue",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__GlideModulator,0))){
    SWIG_fail_ptr("GlideModulator_getNextModulationValue",1,SWIGTYPE_p_SynthLab__GlideModulator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("GlideModulator_getNextModulationValue",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (double)(arg1)->getNextModulationValue(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GlideModulator_getNextModulationValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::GlideModulator *arg1 = (SynthLab::GlideModulator *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::GlideModulator::getNextModulationValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::GlideModulator::getNextModulationValue",1,"SynthLab::GlideModulator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__GlideModulator,0))){
    SWIG_fail_ptr("GlideModulator_getNextModulationValue",1,SWIGTYPE_p_SynthLab__GlideModulator);
  }
  
  result = (double)(arg1)->getNextModulationValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GlideModulator_getNextModulationValue(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__GlideModulator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GlideModulator_getNextModulationValue__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__GlideModulator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GlideModulator_getNextModulationValue__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GlideModulator_getNextModulationValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::GlideModulator::getNextModulationValue(uint32_t)\n"
    "    SynthLab::GlideModulator::getNextModulationValue()\n");
  lua_error(L);return 0;
}


static int _wrap_GlideModulator_advanceClock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::GlideModulator *arg1 = (SynthLab::GlideModulator *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::GlideModulator::advanceClock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::GlideModulator::advanceClock",1,"SynthLab::GlideModulator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::GlideModulator::advanceClock",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__GlideModulator,0))){
    SWIG_fail_ptr("GlideModulator_advanceClock",1,SWIGTYPE_p_SynthLab__GlideModulator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("GlideModulator_advanceClock",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->advanceClock(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GlideModulator_advanceClock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::GlideModulator *arg1 = (SynthLab::GlideModulator *) 0 ;
  
  SWIG_check_num_args("SynthLab::GlideModulator::advanceClock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::GlideModulator::advanceClock",1,"SynthLab::GlideModulator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__GlideModulator,0))){
    SWIG_fail_ptr("GlideModulator_advanceClock",1,SWIGTYPE_p_SynthLab__GlideModulator);
  }
  
  (arg1)->advanceClock();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GlideModulator_advanceClock(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__GlideModulator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GlideModulator_advanceClock__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__GlideModulator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GlideModulator_advanceClock__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GlideModulator_advanceClock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::GlideModulator::advanceClock(uint32_t)\n"
    "    SynthLab::GlideModulator::advanceClock()\n");
  lua_error(L);return 0;
}


static int _wrap_GlideModulator_isActive(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::GlideModulator *arg1 = (SynthLab::GlideModulator *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::GlideModulator::isActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::GlideModulator::isActive",1,"SynthLab::GlideModulator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__GlideModulator,0))){
    SWIG_fail_ptr("GlideModulator_isActive",1,SWIGTYPE_p_SynthLab__GlideModulator);
  }
  
  result = (bool)(arg1)->isActive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GlideModulator(void *obj) {
SynthLab::GlideModulator *arg1 = (SynthLab::GlideModulator *) obj;
delete arg1;
}
static int _proxy__wrap_new_GlideModulator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_GlideModulator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_GlideModulator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GlideModulator_methods[]= {
    { "startModulator", _wrap_GlideModulator_startModulator},
    { "setGlideTime", _wrap_GlideModulator_setGlideTime},
    { "getNextModulationValue", _wrap_GlideModulator_getNextModulationValue},
    { "advanceClock", _wrap_GlideModulator_advanceClock},
    { "isActive", _wrap_GlideModulator_isActive},
    {0,0}
};
static swig_lua_method swig_GlideModulator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_GlideModulator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GlideModulator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GlideModulator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_GlideModulator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GlideModulator_Sf_SwigStatic = {
    "GlideModulator",
    swig_GlideModulator_Sf_SwigStatic_methods,
    swig_GlideModulator_Sf_SwigStatic_attributes,
    swig_GlideModulator_Sf_SwigStatic_constants,
    swig_GlideModulator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GlideModulator_bases[] = {0};
static const char *swig_GlideModulator_base_names[] = {0};
static swig_lua_class _wrap_class_GlideModulator = { "GlideModulator", "GlideModulator", &SWIGTYPE_p_SynthLab__GlideModulator,_proxy__wrap_new_GlideModulator, swig_delete_GlideModulator, swig_GlideModulator_methods, swig_GlideModulator_attributes, &swig_GlideModulator_Sf_SwigStatic, swig_GlideModulator_meta, swig_GlideModulator_bases, swig_GlideModulator_base_names };

static int _wrap_new_NoiseGenerator(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::NoiseGenerator *result = 0 ;
  
  SWIG_check_num_args("SynthLab::NoiseGenerator::NoiseGenerator",0,0)
  result = (SynthLab::NoiseGenerator *)new SynthLab::NoiseGenerator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__NoiseGenerator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseGenerator_defaultGeneratorEngine_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::NoiseGenerator *arg1 = (SynthLab::NoiseGenerator *) 0 ;
  std::default_random_engine arg2 ;
  std::default_random_engine *argp2 ;
  
  SWIG_check_num_args("SynthLab::NoiseGenerator::defaultGeneratorEngine",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::NoiseGenerator::defaultGeneratorEngine",1,"SynthLab::NoiseGenerator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::NoiseGenerator::defaultGeneratorEngine",2,"std::default_random_engine");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__NoiseGenerator,0))){
    SWIG_fail_ptr("NoiseGenerator_defaultGeneratorEngine_set",1,SWIGTYPE_p_SynthLab__NoiseGenerator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__default_random_engine,0))){
    SWIG_fail_ptr("NoiseGenerator_defaultGeneratorEngine_set",2,SWIGTYPE_p_std__default_random_engine);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->defaultGeneratorEngine = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseGenerator_defaultGeneratorEngine_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::NoiseGenerator *arg1 = (SynthLab::NoiseGenerator *) 0 ;
  std::default_random_engine result;
  
  SWIG_check_num_args("SynthLab::NoiseGenerator::defaultGeneratorEngine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::NoiseGenerator::defaultGeneratorEngine",1,"SynthLab::NoiseGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__NoiseGenerator,0))){
    SWIG_fail_ptr("NoiseGenerator_defaultGeneratorEngine_get",1,SWIGTYPE_p_SynthLab__NoiseGenerator);
  }
  
  result =  ((arg1)->defaultGeneratorEngine);
  {
    std::default_random_engine * resultptr = new std::default_random_engine((const std::default_random_engine &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__default_random_engine,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseGenerator_doGaussianWhiteNoise__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::NoiseGenerator *arg1 = (SynthLab::NoiseGenerator *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::NoiseGenerator::doGaussianWhiteNoise",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::NoiseGenerator::doGaussianWhiteNoise",1,"SynthLab::NoiseGenerator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::NoiseGenerator::doGaussianWhiteNoise",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::NoiseGenerator::doGaussianWhiteNoise",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__NoiseGenerator,0))){
    SWIG_fail_ptr("NoiseGenerator_doGaussianWhiteNoise",1,SWIGTYPE_p_SynthLab__NoiseGenerator);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->doGaussianWhiteNoise(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseGenerator_doGaussianWhiteNoise__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::NoiseGenerator *arg1 = (SynthLab::NoiseGenerator *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::NoiseGenerator::doGaussianWhiteNoise",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::NoiseGenerator::doGaussianWhiteNoise",1,"SynthLab::NoiseGenerator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::NoiseGenerator::doGaussianWhiteNoise",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__NoiseGenerator,0))){
    SWIG_fail_ptr("NoiseGenerator_doGaussianWhiteNoise",1,SWIGTYPE_p_SynthLab__NoiseGenerator);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->doGaussianWhiteNoise(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseGenerator_doGaussianWhiteNoise__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::NoiseGenerator *arg1 = (SynthLab::NoiseGenerator *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::NoiseGenerator::doGaussianWhiteNoise",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::NoiseGenerator::doGaussianWhiteNoise",1,"SynthLab::NoiseGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__NoiseGenerator,0))){
    SWIG_fail_ptr("NoiseGenerator_doGaussianWhiteNoise",1,SWIGTYPE_p_SynthLab__NoiseGenerator);
  }
  
  result = (double)(arg1)->doGaussianWhiteNoise();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseGenerator_doGaussianWhiteNoise(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__NoiseGenerator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NoiseGenerator_doGaussianWhiteNoise__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__NoiseGenerator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NoiseGenerator_doGaussianWhiteNoise__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__NoiseGenerator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NoiseGenerator_doGaussianWhiteNoise__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NoiseGenerator_doGaussianWhiteNoise'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::NoiseGenerator::doGaussianWhiteNoise(double,double)\n"
    "    SynthLab::NoiseGenerator::doGaussianWhiteNoise(double)\n"
    "    SynthLab::NoiseGenerator::doGaussianWhiteNoise()\n");
  lua_error(L);return 0;
}


static int _wrap_NoiseGenerator_doWhiteNoise(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::NoiseGenerator *arg1 = (SynthLab::NoiseGenerator *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::NoiseGenerator::doWhiteNoise",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::NoiseGenerator::doWhiteNoise",1,"SynthLab::NoiseGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__NoiseGenerator,0))){
    SWIG_fail_ptr("NoiseGenerator_doWhiteNoise",1,SWIGTYPE_p_SynthLab__NoiseGenerator);
  }
  
  result = (double)(arg1)->doWhiteNoise();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseGenerator_doPinkNoise(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::NoiseGenerator *arg1 = (SynthLab::NoiseGenerator *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::NoiseGenerator::doPinkNoise",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::NoiseGenerator::doPinkNoise",1,"SynthLab::NoiseGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__NoiseGenerator,0))){
    SWIG_fail_ptr("NoiseGenerator_doPinkNoise",1,SWIGTYPE_p_SynthLab__NoiseGenerator);
  }
  
  result = (double)(arg1)->doPinkNoise();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseGenerator_doPinkingFilter(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::NoiseGenerator *arg1 = (SynthLab::NoiseGenerator *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::NoiseGenerator::doPinkingFilter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::NoiseGenerator::doPinkingFilter",1,"SynthLab::NoiseGenerator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::NoiseGenerator::doPinkingFilter",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__NoiseGenerator,0))){
    SWIG_fail_ptr("NoiseGenerator_doPinkingFilter",1,SWIGTYPE_p_SynthLab__NoiseGenerator);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->doPinkingFilter(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NoiseGenerator(void *obj) {
SynthLab::NoiseGenerator *arg1 = (SynthLab::NoiseGenerator *) obj;
delete arg1;
}
static int _proxy__wrap_new_NoiseGenerator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NoiseGenerator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NoiseGenerator_attributes[] = {
    { "defaultGeneratorEngine", _wrap_NoiseGenerator_defaultGeneratorEngine_get, _wrap_NoiseGenerator_defaultGeneratorEngine_set },
    {0,0,0}
};
static swig_lua_method swig_NoiseGenerator_methods[]= {
    { "doGaussianWhiteNoise", _wrap_NoiseGenerator_doGaussianWhiteNoise},
    { "doWhiteNoise", _wrap_NoiseGenerator_doWhiteNoise},
    { "doPinkNoise", _wrap_NoiseGenerator_doPinkNoise},
    { "doPinkingFilter", _wrap_NoiseGenerator_doPinkingFilter},
    {0,0}
};
static swig_lua_method swig_NoiseGenerator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NoiseGenerator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NoiseGenerator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NoiseGenerator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NoiseGenerator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NoiseGenerator_Sf_SwigStatic = {
    "NoiseGenerator",
    swig_NoiseGenerator_Sf_SwigStatic_methods,
    swig_NoiseGenerator_Sf_SwigStatic_attributes,
    swig_NoiseGenerator_Sf_SwigStatic_constants,
    swig_NoiseGenerator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NoiseGenerator_bases[] = {0};
static const char *swig_NoiseGenerator_base_names[] = {0};
static swig_lua_class _wrap_class_NoiseGenerator = { "NoiseGenerator", "NoiseGenerator", &SWIGTYPE_p_SynthLab__NoiseGenerator,_proxy__wrap_new_NoiseGenerator, swig_delete_NoiseGenerator, swig_NoiseGenerator_methods, swig_NoiseGenerator_attributes, &swig_NoiseGenerator_Sf_SwigStatic, swig_NoiseGenerator_meta, swig_NoiseGenerator_bases, swig_NoiseGenerator_base_names };

static int _wrap_IModulator_getModArrayPtr(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IModulator *arg1 = (SynthLab::IModulator *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::IModulator::getModArrayPtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IModulator::getModArrayPtr",1,"SynthLab::IModulator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::IModulator::getModArrayPtr",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IModulator,0))){
    SWIG_fail_ptr("IModulator_getModArrayPtr",1,SWIGTYPE_p_SynthLab__IModulator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("IModulator_getModArrayPtr",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (double *)(arg1)->getModArrayPtr(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IModulator_getModValue(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IModulator *arg1 = (SynthLab::IModulator *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::IModulator::getModValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IModulator::getModValue",1,"SynthLab::IModulator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::IModulator::getModValue",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IModulator,0))){
    SWIG_fail_ptr("IModulator_getModValue",1,SWIGTYPE_p_SynthLab__IModulator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("IModulator_getModValue",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (double)(arg1)->getModValue(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IModulator_setModValue(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IModulator *arg1 = (SynthLab::IModulator *) 0 ;
  uint32_t arg2 ;
  double arg3 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::IModulator::setModValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IModulator::setModValue",1,"SynthLab::IModulator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::IModulator::setModValue",2,"uint32_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::IModulator::setModValue",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IModulator,0))){
    SWIG_fail_ptr("IModulator_setModValue",1,SWIGTYPE_p_SynthLab__IModulator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("IModulator_setModValue",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setModValue(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IModulator(void *obj) {
SynthLab::IModulator *arg1 = (SynthLab::IModulator *) obj;
delete arg1;
}
static swig_lua_attribute swig_IModulator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IModulator_methods[]= {
    { "getModArrayPtr", _wrap_IModulator_getModArrayPtr},
    { "getModValue", _wrap_IModulator_getModValue},
    { "setModValue", _wrap_IModulator_setModValue},
    {0,0}
};
static swig_lua_method swig_IModulator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IModulator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IModulator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IModulator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IModulator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IModulator_Sf_SwigStatic = {
    "IModulator",
    swig_IModulator_Sf_SwigStatic_methods,
    swig_IModulator_Sf_SwigStatic_attributes,
    swig_IModulator_Sf_SwigStatic_constants,
    swig_IModulator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IModulator_bases[] = {0};
static const char *swig_IModulator_base_names[] = {0};
static swig_lua_class _wrap_class_IModulator = { "IModulator", "IModulator", &SWIGTYPE_p_SynthLab__IModulator,0, swig_delete_IModulator, swig_IModulator_methods, swig_IModulator_attributes, &swig_IModulator_Sf_SwigStatic, swig_IModulator_meta, swig_IModulator_bases, swig_IModulator_base_names };

static int _wrap_IWavetableSource_selectTable(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IWavetableSource *arg1 = (SynthLab::IWavetableSource *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::IWavetableSource::selectTable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IWavetableSource::selectTable",1,"SynthLab::IWavetableSource *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::IWavetableSource::selectTable",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IWavetableSource,0))){
    SWIG_fail_ptr("IWavetableSource_selectTable",1,SWIGTYPE_p_SynthLab__IWavetableSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("IWavetableSource_selectTable",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->selectTable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IWavetableSource_readWaveTable(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IWavetableSource *arg1 = (SynthLab::IWavetableSource *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::IWavetableSource::readWaveTable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IWavetableSource::readWaveTable",1,"SynthLab::IWavetableSource *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::IWavetableSource::readWaveTable",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IWavetableSource,0))){
    SWIG_fail_ptr("IWavetableSource_readWaveTable",1,SWIGTYPE_p_SynthLab__IWavetableSource);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->readWaveTable(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IWavetableSource_getWaveTableLength(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IWavetableSource *arg1 = (SynthLab::IWavetableSource *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::IWavetableSource::getWaveTableLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IWavetableSource::getWaveTableLength",1,"SynthLab::IWavetableSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IWavetableSource,0))){
    SWIG_fail_ptr("IWavetableSource_getWaveTableLength",1,SWIGTYPE_p_SynthLab__IWavetableSource);
  }
  
  result = (arg1)->getWaveTableLength();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IWavetableSource_getWaveformName(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IWavetableSource *arg1 = (SynthLab::IWavetableSource *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("SynthLab::IWavetableSource::getWaveformName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IWavetableSource::getWaveformName",1,"SynthLab::IWavetableSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IWavetableSource,0))){
    SWIG_fail_ptr("IWavetableSource_getWaveformName",1,SWIGTYPE_p_SynthLab__IWavetableSource);
  }
  
  result = (char *)(arg1)->getWaveformName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IWavetableSource(void *obj) {
SynthLab::IWavetableSource *arg1 = (SynthLab::IWavetableSource *) obj;
delete arg1;
}
static swig_lua_attribute swig_IWavetableSource_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IWavetableSource_methods[]= {
    { "selectTable", _wrap_IWavetableSource_selectTable},
    { "readWaveTable", _wrap_IWavetableSource_readWaveTable},
    { "getWaveTableLength", _wrap_IWavetableSource_getWaveTableLength},
    { "getWaveformName", _wrap_IWavetableSource_getWaveformName},
    {0,0}
};
static swig_lua_method swig_IWavetableSource_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IWavetableSource_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IWavetableSource_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IWavetableSource_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IWavetableSource_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IWavetableSource_Sf_SwigStatic = {
    "IWavetableSource",
    swig_IWavetableSource_Sf_SwigStatic_methods,
    swig_IWavetableSource_Sf_SwigStatic_attributes,
    swig_IWavetableSource_Sf_SwigStatic_constants,
    swig_IWavetableSource_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IWavetableSource_bases[] = {0};
static const char *swig_IWavetableSource_base_names[] = {0};
static swig_lua_class _wrap_class_IWavetableSource = { "IWavetableSource", "IWavetableSource", &SWIGTYPE_p_SynthLab__IWavetableSource,0, swig_delete_IWavetableSource, swig_IWavetableSource_methods, swig_IWavetableSource_attributes, &swig_IWavetableSource_Sf_SwigStatic, swig_IWavetableSource_meta, swig_IWavetableSource_bases, swig_IWavetableSource_base_names };

static int _wrap_IWavetableDatabase_getTableSource__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IWavetableDatabase *arg1 = (SynthLab::IWavetableDatabase *) 0 ;
  char *arg2 = (char *) 0 ;
  SynthLab::IWavetableSource *result = 0 ;
  
  SWIG_check_num_args("SynthLab::IWavetableDatabase::getTableSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IWavetableDatabase::getTableSource",1,"SynthLab::IWavetableDatabase *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::IWavetableDatabase::getTableSource",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IWavetableDatabase,0))){
    SWIG_fail_ptr("IWavetableDatabase_getTableSource",1,SWIGTYPE_p_SynthLab__IWavetableDatabase);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (SynthLab::IWavetableSource *)(arg1)->getTableSource((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__IWavetableSource,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IWavetableDatabase_getTableSource__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IWavetableDatabase *arg1 = (SynthLab::IWavetableDatabase *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  SynthLab::IWavetableSource *result = 0 ;
  
  SWIG_check_num_args("SynthLab::IWavetableDatabase::getTableSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IWavetableDatabase::getTableSource",1,"SynthLab::IWavetableDatabase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::IWavetableDatabase::getTableSource",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IWavetableDatabase,0))){
    SWIG_fail_ptr("IWavetableDatabase_getTableSource",1,SWIGTYPE_p_SynthLab__IWavetableDatabase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("IWavetableDatabase_getTableSource",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (SynthLab::IWavetableSource *)(arg1)->getTableSource(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__IWavetableSource,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IWavetableDatabase_getTableSource(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__IWavetableDatabase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IWavetableDatabase_getTableSource__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__IWavetableDatabase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_IWavetableDatabase_getTableSource__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IWavetableDatabase_getTableSource'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::IWavetableDatabase::getTableSource(char const *)\n"
    "    SynthLab::IWavetableDatabase::getTableSource(uint32_t)\n");
  lua_error(L);return 0;
}


static int _wrap_IWavetableDatabase_addTableSource(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IWavetableDatabase *arg1 = (SynthLab::IWavetableDatabase *) 0 ;
  char *arg2 = (char *) 0 ;
  SynthLab::IWavetableSource *arg3 = (SynthLab::IWavetableSource *) 0 ;
  uint32_t *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::IWavetableDatabase::addTableSource",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IWavetableDatabase::addTableSource",1,"SynthLab::IWavetableDatabase *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::IWavetableDatabase::addTableSource",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SynthLab::IWavetableDatabase::addTableSource",3,"SynthLab::IWavetableSource *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SynthLab::IWavetableDatabase::addTableSource",4,"uint32_t &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IWavetableDatabase,0))){
    SWIG_fail_ptr("IWavetableDatabase_addTableSource",1,SWIGTYPE_p_SynthLab__IWavetableDatabase);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SynthLab__IWavetableSource,0))){
    SWIG_fail_ptr("IWavetableDatabase_addTableSource",3,SWIGTYPE_p_SynthLab__IWavetableSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("IWavetableDatabase_addTableSource",4,SWIGTYPE_p_uint32_t);
  }
  
  result = (bool)(arg1)->addTableSource((char const *)arg2,arg3,*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IWavetableDatabase_removeTableSource(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IWavetableDatabase *arg1 = (SynthLab::IWavetableDatabase *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::IWavetableDatabase::removeTableSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IWavetableDatabase::removeTableSource",1,"SynthLab::IWavetableDatabase *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::IWavetableDatabase::removeTableSource",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IWavetableDatabase,0))){
    SWIG_fail_ptr("IWavetableDatabase_removeTableSource",1,SWIGTYPE_p_SynthLab__IWavetableDatabase);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->removeTableSource((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IWavetableDatabase_clearTableSources(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IWavetableDatabase *arg1 = (SynthLab::IWavetableDatabase *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::IWavetableDatabase::clearTableSources",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IWavetableDatabase::clearTableSources",1,"SynthLab::IWavetableDatabase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IWavetableDatabase,0))){
    SWIG_fail_ptr("IWavetableDatabase_clearTableSources",1,SWIGTYPE_p_SynthLab__IWavetableDatabase);
  }
  
  result = (bool)(arg1)->clearTableSources();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IWavetableDatabase_getWaveformIndex(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IWavetableDatabase *arg1 = (SynthLab::IWavetableDatabase *) 0 ;
  char *arg2 = (char *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("SynthLab::IWavetableDatabase::getWaveformIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IWavetableDatabase::getWaveformIndex",1,"SynthLab::IWavetableDatabase *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::IWavetableDatabase::getWaveformIndex",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IWavetableDatabase,0))){
    SWIG_fail_ptr("IWavetableDatabase_getWaveformIndex",1,SWIGTYPE_p_SynthLab__IWavetableDatabase);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->getWaveformIndex((char const *)arg2);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IWavetableDatabase(void *obj) {
SynthLab::IWavetableDatabase *arg1 = (SynthLab::IWavetableDatabase *) obj;
delete arg1;
}
static swig_lua_attribute swig_IWavetableDatabase_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IWavetableDatabase_methods[]= {
    { "getTableSource", _wrap_IWavetableDatabase_getTableSource},
    { "addTableSource", _wrap_IWavetableDatabase_addTableSource},
    { "removeTableSource", _wrap_IWavetableDatabase_removeTableSource},
    { "clearTableSources", _wrap_IWavetableDatabase_clearTableSources},
    { "getWaveformIndex", _wrap_IWavetableDatabase_getWaveformIndex},
    {0,0}
};
static swig_lua_method swig_IWavetableDatabase_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IWavetableDatabase_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IWavetableDatabase_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IWavetableDatabase_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IWavetableDatabase_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IWavetableDatabase_Sf_SwigStatic = {
    "IWavetableDatabase",
    swig_IWavetableDatabase_Sf_SwigStatic_methods,
    swig_IWavetableDatabase_Sf_SwigStatic_attributes,
    swig_IWavetableDatabase_Sf_SwigStatic_constants,
    swig_IWavetableDatabase_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IWavetableDatabase_bases[] = {0};
static const char *swig_IWavetableDatabase_base_names[] = {0};
static swig_lua_class _wrap_class_IWavetableDatabase = { "IWavetableDatabase", "IWavetableDatabase", &SWIGTYPE_p_SynthLab__IWavetableDatabase,0, swig_delete_IWavetableDatabase, swig_IWavetableDatabase_methods, swig_IWavetableDatabase_attributes, &swig_IWavetableDatabase_Sf_SwigStatic, swig_IWavetableDatabase_meta, swig_IWavetableDatabase_bases, swig_IWavetableDatabase_base_names };

static int _wrap_PCMSampleOutput_audioOutput_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSampleOutput *arg1 = (SynthLab::PCMSampleOutput *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::PCMSampleOutput::audioOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSampleOutput::audioOutput",1,"SynthLab::PCMSampleOutput *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::PCMSampleOutput::audioOutput",2,"double [SynthLab::STEREO_CHANNELS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSampleOutput,0))){
    SWIG_fail_ptr("PCMSampleOutput_audioOutput_set",1,SWIGTYPE_p_SynthLab__PCMSampleOutput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("PCMSampleOutput_audioOutput_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->audioOutput;
    for (ii = 0; ii < (size_t)SynthLab::STEREO_CHANNELS; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSampleOutput_audioOutput_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSampleOutput *arg1 = (SynthLab::PCMSampleOutput *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::PCMSampleOutput::audioOutput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSampleOutput::audioOutput",1,"SynthLab::PCMSampleOutput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSampleOutput,0))){
    SWIG_fail_ptr("PCMSampleOutput_audioOutput_get",1,SWIGTYPE_p_SynthLab__PCMSampleOutput);
  }
  
  result = (double *)(double *) ((arg1)->audioOutput);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSampleOutput_numActiveChannels_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSampleOutput *arg1 = (SynthLab::PCMSampleOutput *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::PCMSampleOutput::numActiveChannels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSampleOutput::numActiveChannels",1,"SynthLab::PCMSampleOutput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::PCMSampleOutput::numActiveChannels",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSampleOutput,0))){
    SWIG_fail_ptr("PCMSampleOutput_numActiveChannels_set",1,SWIGTYPE_p_SynthLab__PCMSampleOutput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("PCMSampleOutput_numActiveChannels_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->numActiveChannels = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSampleOutput_numActiveChannels_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSampleOutput *arg1 = (SynthLab::PCMSampleOutput *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::PCMSampleOutput::numActiveChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSampleOutput::numActiveChannels",1,"SynthLab::PCMSampleOutput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSampleOutput,0))){
    SWIG_fail_ptr("PCMSampleOutput_numActiveChannels_get",1,SWIGTYPE_p_SynthLab__PCMSampleOutput);
  }
  
  result =  ((arg1)->numActiveChannels);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PCMSampleOutput(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSampleOutput *result = 0 ;
  
  SWIG_check_num_args("SynthLab::PCMSampleOutput::PCMSampleOutput",0,0)
  result = (SynthLab::PCMSampleOutput *)new SynthLab::PCMSampleOutput();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__PCMSampleOutput,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PCMSampleOutput(void *obj) {
SynthLab::PCMSampleOutput *arg1 = (SynthLab::PCMSampleOutput *) obj;
delete arg1;
}
static int _proxy__wrap_new_PCMSampleOutput(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PCMSampleOutput);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PCMSampleOutput_attributes[] = {
    { "audioOutput", _wrap_PCMSampleOutput_audioOutput_get, _wrap_PCMSampleOutput_audioOutput_set },
    { "numActiveChannels", _wrap_PCMSampleOutput_numActiveChannels_get, _wrap_PCMSampleOutput_numActiveChannels_set },
    {0,0,0}
};
static swig_lua_method swig_PCMSampleOutput_methods[]= {
    {0,0}
};
static swig_lua_method swig_PCMSampleOutput_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PCMSampleOutput_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PCMSampleOutput_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PCMSampleOutput_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PCMSampleOutput_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PCMSampleOutput_Sf_SwigStatic = {
    "PCMSampleOutput",
    swig_PCMSampleOutput_Sf_SwigStatic_methods,
    swig_PCMSampleOutput_Sf_SwigStatic_attributes,
    swig_PCMSampleOutput_Sf_SwigStatic_constants,
    swig_PCMSampleOutput_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PCMSampleOutput_bases[] = {0};
static const char *swig_PCMSampleOutput_base_names[] = {0};
static swig_lua_class _wrap_class_PCMSampleOutput = { "PCMSampleOutput", "PCMSampleOutput", &SWIGTYPE_p_SynthLab__PCMSampleOutput,_proxy__wrap_new_PCMSampleOutput, swig_delete_PCMSampleOutput, swig_PCMSampleOutput_methods, swig_PCMSampleOutput_attributes, &swig_PCMSampleOutput_Sf_SwigStatic, swig_PCMSampleOutput_meta, swig_PCMSampleOutput_bases, swig_PCMSampleOutput_base_names };

static int _wrap_IPCMSampleSource_selectSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IPCMSampleSource *arg1 = (SynthLab::IPCMSampleSource *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::IPCMSampleSource::selectSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IPCMSampleSource::selectSample",1,"SynthLab::IPCMSampleSource *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::IPCMSampleSource::selectSample",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IPCMSampleSource,0))){
    SWIG_fail_ptr("IPCMSampleSource_selectSample",1,SWIGTYPE_p_SynthLab__IPCMSampleSource);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->selectSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPCMSampleSource_readSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IPCMSampleSource *arg1 = (SynthLab::IPCMSampleSource *) 0 ;
  double *arg2 = 0 ;
  double arg3 ;
  SynthLab::PCMSampleOutput result;
  
  SWIG_check_num_args("SynthLab::IPCMSampleSource::readSample",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IPCMSampleSource::readSample",1,"SynthLab::IPCMSampleSource *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::IPCMSampleSource::readSample",2,"double &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::IPCMSampleSource::readSample",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IPCMSampleSource,0))){
    SWIG_fail_ptr("IPCMSampleSource_readSample",1,SWIGTYPE_p_SynthLab__IPCMSampleSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPCMSampleSource_readSample",2,SWIGTYPE_p_double);
  }
  
  arg3 = (double)lua_tonumber(L, 3);
  result = (arg1)->readSample(*arg2,arg3);
  {
    SynthLab::PCMSampleOutput * resultptr = new SynthLab::PCMSampleOutput((const SynthLab::PCMSampleOutput &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SynthLab__PCMSampleOutput,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPCMSampleSource_setSampleLoopMode(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IPCMSampleSource *arg1 = (SynthLab::IPCMSampleSource *) 0 ;
  SynthLab::SampleLoopMode arg2 ;
  
  SWIG_check_num_args("SynthLab::IPCMSampleSource::setSampleLoopMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IPCMSampleSource::setSampleLoopMode",1,"SynthLab::IPCMSampleSource *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::IPCMSampleSource::setSampleLoopMode",2,"SynthLab::SampleLoopMode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IPCMSampleSource,0))){
    SWIG_fail_ptr("IPCMSampleSource_setSampleLoopMode",1,SWIGTYPE_p_SynthLab__IPCMSampleSource);
  }
  
  arg2 = (SynthLab::SampleLoopMode)(int)lua_tonumber(L, 2);
  (arg1)->setSampleLoopMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPCMSampleSource_deleteSamples(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IPCMSampleSource *arg1 = (SynthLab::IPCMSampleSource *) 0 ;
  
  SWIG_check_num_args("SynthLab::IPCMSampleSource::deleteSamples",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IPCMSampleSource::deleteSamples",1,"SynthLab::IPCMSampleSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IPCMSampleSource,0))){
    SWIG_fail_ptr("IPCMSampleSource_deleteSamples",1,SWIGTYPE_p_SynthLab__IPCMSampleSource);
  }
  
  (arg1)->deleteSamples();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPCMSampleSource_getValidSampleCount(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IPCMSampleSource *arg1 = (SynthLab::IPCMSampleSource *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::IPCMSampleSource::getValidSampleCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IPCMSampleSource::getValidSampleCount",1,"SynthLab::IPCMSampleSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IPCMSampleSource,0))){
    SWIG_fail_ptr("IPCMSampleSource_getValidSampleCount",1,SWIGTYPE_p_SynthLab__IPCMSampleSource);
  }
  
  result = (arg1)->getValidSampleCount();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPCMSampleSource_haveValidSamples(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IPCMSampleSource *arg1 = (SynthLab::IPCMSampleSource *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::IPCMSampleSource::haveValidSamples",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IPCMSampleSource::haveValidSamples",1,"SynthLab::IPCMSampleSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IPCMSampleSource,0))){
    SWIG_fail_ptr("IPCMSampleSource_haveValidSamples",1,SWIGTYPE_p_SynthLab__IPCMSampleSource);
  }
  
  result = (bool)(arg1)->haveValidSamples();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IPCMSampleSource(void *obj) {
SynthLab::IPCMSampleSource *arg1 = (SynthLab::IPCMSampleSource *) obj;
delete arg1;
}
static swig_lua_attribute swig_IPCMSampleSource_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IPCMSampleSource_methods[]= {
    { "selectSample", _wrap_IPCMSampleSource_selectSample},
    { "readSample", _wrap_IPCMSampleSource_readSample},
    { "setSampleLoopMode", _wrap_IPCMSampleSource_setSampleLoopMode},
    { "deleteSamples", _wrap_IPCMSampleSource_deleteSamples},
    { "getValidSampleCount", _wrap_IPCMSampleSource_getValidSampleCount},
    { "haveValidSamples", _wrap_IPCMSampleSource_haveValidSamples},
    {0,0}
};
static swig_lua_method swig_IPCMSampleSource_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IPCMSampleSource_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IPCMSampleSource_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IPCMSampleSource_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IPCMSampleSource_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IPCMSampleSource_Sf_SwigStatic = {
    "IPCMSampleSource",
    swig_IPCMSampleSource_Sf_SwigStatic_methods,
    swig_IPCMSampleSource_Sf_SwigStatic_attributes,
    swig_IPCMSampleSource_Sf_SwigStatic_constants,
    swig_IPCMSampleSource_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IPCMSampleSource_bases[] = {0};
static const char *swig_IPCMSampleSource_base_names[] = {0};
static swig_lua_class _wrap_class_IPCMSampleSource = { "IPCMSampleSource", "IPCMSampleSource", &SWIGTYPE_p_SynthLab__IPCMSampleSource,0, swig_delete_IPCMSampleSource, swig_IPCMSampleSource_methods, swig_IPCMSampleSource_attributes, &swig_IPCMSampleSource_Sf_SwigStatic, swig_IPCMSampleSource_meta, swig_IPCMSampleSource_bases, swig_IPCMSampleSource_base_names };

static int _wrap_IPCMSampleDatabase_getSampleSource(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IPCMSampleDatabase *arg1 = (SynthLab::IPCMSampleDatabase *) 0 ;
  char *arg2 = (char *) 0 ;
  SynthLab::IPCMSampleSource *result = 0 ;
  
  SWIG_check_num_args("SynthLab::IPCMSampleDatabase::getSampleSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IPCMSampleDatabase::getSampleSource",1,"SynthLab::IPCMSampleDatabase *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::IPCMSampleDatabase::getSampleSource",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IPCMSampleDatabase,0))){
    SWIG_fail_ptr("IPCMSampleDatabase_getSampleSource",1,SWIGTYPE_p_SynthLab__IPCMSampleDatabase);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (SynthLab::IPCMSampleSource *)(arg1)->getSampleSource((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__IPCMSampleSource,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPCMSampleDatabase_addSampleSource(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IPCMSampleDatabase *arg1 = (SynthLab::IPCMSampleDatabase *) 0 ;
  char *arg2 = (char *) 0 ;
  SynthLab::IPCMSampleSource *arg3 = (SynthLab::IPCMSampleSource *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::IPCMSampleDatabase::addSampleSource",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IPCMSampleDatabase::addSampleSource",1,"SynthLab::IPCMSampleDatabase *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::IPCMSampleDatabase::addSampleSource",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SynthLab::IPCMSampleDatabase::addSampleSource",3,"SynthLab::IPCMSampleSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IPCMSampleDatabase,0))){
    SWIG_fail_ptr("IPCMSampleDatabase_addSampleSource",1,SWIGTYPE_p_SynthLab__IPCMSampleDatabase);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SynthLab__IPCMSampleSource,0))){
    SWIG_fail_ptr("IPCMSampleDatabase_addSampleSource",3,SWIGTYPE_p_SynthLab__IPCMSampleSource);
  }
  
  result = (bool)(arg1)->addSampleSource((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPCMSampleDatabase_removeSampleSource(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IPCMSampleDatabase *arg1 = (SynthLab::IPCMSampleDatabase *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::IPCMSampleDatabase::removeSampleSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IPCMSampleDatabase::removeSampleSource",1,"SynthLab::IPCMSampleDatabase *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::IPCMSampleDatabase::removeSampleSource",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IPCMSampleDatabase,0))){
    SWIG_fail_ptr("IPCMSampleDatabase_removeSampleSource",1,SWIGTYPE_p_SynthLab__IPCMSampleDatabase);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->removeSampleSource((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPCMSampleDatabase_clearSampleSources(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IPCMSampleDatabase *arg1 = (SynthLab::IPCMSampleDatabase *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::IPCMSampleDatabase::clearSampleSources",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IPCMSampleDatabase::clearSampleSources",1,"SynthLab::IPCMSampleDatabase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IPCMSampleDatabase,0))){
    SWIG_fail_ptr("IPCMSampleDatabase_clearSampleSources",1,SWIGTYPE_p_SynthLab__IPCMSampleDatabase);
  }
  
  result = (bool)(arg1)->clearSampleSources();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IPCMSampleDatabase(void *obj) {
SynthLab::IPCMSampleDatabase *arg1 = (SynthLab::IPCMSampleDatabase *) obj;
delete arg1;
}
static swig_lua_attribute swig_IPCMSampleDatabase_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IPCMSampleDatabase_methods[]= {
    { "getSampleSource", _wrap_IPCMSampleDatabase_getSampleSource},
    { "addSampleSource", _wrap_IPCMSampleDatabase_addSampleSource},
    { "removeSampleSource", _wrap_IPCMSampleDatabase_removeSampleSource},
    { "clearSampleSources", _wrap_IPCMSampleDatabase_clearSampleSources},
    {0,0}
};
static swig_lua_method swig_IPCMSampleDatabase_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IPCMSampleDatabase_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IPCMSampleDatabase_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IPCMSampleDatabase_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IPCMSampleDatabase_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IPCMSampleDatabase_Sf_SwigStatic = {
    "IPCMSampleDatabase",
    swig_IPCMSampleDatabase_Sf_SwigStatic_methods,
    swig_IPCMSampleDatabase_Sf_SwigStatic_attributes,
    swig_IPCMSampleDatabase_Sf_SwigStatic_constants,
    swig_IPCMSampleDatabase_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IPCMSampleDatabase_bases[] = {0};
static const char *swig_IPCMSampleDatabase_base_names[] = {0};
static swig_lua_class _wrap_class_IPCMSampleDatabase = { "IPCMSampleDatabase", "IPCMSampleDatabase", &SWIGTYPE_p_SynthLab__IPCMSampleDatabase,0, swig_delete_IPCMSampleDatabase, swig_IPCMSampleDatabase_methods, swig_IPCMSampleDatabase_attributes, &swig_IPCMSampleDatabase_Sf_SwigStatic, swig_IPCMSampleDatabase_meta, swig_IPCMSampleDatabase_bases, swig_IPCMSampleDatabase_base_names };

static int _wrap_IMidiInputData_getGlobalMIDIData(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IMidiInputData *arg1 = (SynthLab::IMidiInputData *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::IMidiInputData::getGlobalMIDIData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IMidiInputData::getGlobalMIDIData",1,"SynthLab::IMidiInputData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::IMidiInputData::getGlobalMIDIData",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IMidiInputData,0))){
    SWIG_fail_ptr("IMidiInputData_getGlobalMIDIData",1,SWIGTYPE_p_SynthLab__IMidiInputData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("IMidiInputData_getGlobalMIDIData",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (arg1)->getGlobalMIDIData(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMidiInputData_getCCMIDIData(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IMidiInputData *arg1 = (SynthLab::IMidiInputData *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::IMidiInputData::getCCMIDIData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IMidiInputData::getCCMIDIData",1,"SynthLab::IMidiInputData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::IMidiInputData::getCCMIDIData",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IMidiInputData,0))){
    SWIG_fail_ptr("IMidiInputData_getCCMIDIData",1,SWIGTYPE_p_SynthLab__IMidiInputData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("IMidiInputData_getCCMIDIData",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (arg1)->getCCMIDIData(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMidiInputData_getAuxDAWDataUINT(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IMidiInputData *arg1 = (SynthLab::IMidiInputData *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::IMidiInputData::getAuxDAWDataUINT",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IMidiInputData::getAuxDAWDataUINT",1,"SynthLab::IMidiInputData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::IMidiInputData::getAuxDAWDataUINT",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IMidiInputData,0))){
    SWIG_fail_ptr("IMidiInputData_getAuxDAWDataUINT",1,SWIGTYPE_p_SynthLab__IMidiInputData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("IMidiInputData_getAuxDAWDataUINT",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (arg1)->getAuxDAWDataUINT(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMidiInputData_getAuxDAWDataFloat(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IMidiInputData *arg1 = (SynthLab::IMidiInputData *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  float result;
  
  SWIG_check_num_args("SynthLab::IMidiInputData::getAuxDAWDataFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::IMidiInputData::getAuxDAWDataFloat",1,"SynthLab::IMidiInputData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::IMidiInputData::getAuxDAWDataFloat",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IMidiInputData,0))){
    SWIG_fail_ptr("IMidiInputData_getAuxDAWDataFloat",1,SWIGTYPE_p_SynthLab__IMidiInputData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("IMidiInputData_getAuxDAWDataFloat",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (float)(arg1)->getAuxDAWDataFloat(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IMidiInputData(void *obj) {
SynthLab::IMidiInputData *arg1 = (SynthLab::IMidiInputData *) obj;
delete arg1;
}
static swig_lua_attribute swig_IMidiInputData_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IMidiInputData_methods[]= {
    { "getGlobalMIDIData", _wrap_IMidiInputData_getGlobalMIDIData},
    { "getCCMIDIData", _wrap_IMidiInputData_getCCMIDIData},
    { "getAuxDAWDataUINT", _wrap_IMidiInputData_getAuxDAWDataUINT},
    { "getAuxDAWDataFloat", _wrap_IMidiInputData_getAuxDAWDataFloat},
    {0,0}
};
static swig_lua_method swig_IMidiInputData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IMidiInputData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IMidiInputData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IMidiInputData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IMidiInputData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IMidiInputData_Sf_SwigStatic = {
    "IMidiInputData",
    swig_IMidiInputData_Sf_SwigStatic_methods,
    swig_IMidiInputData_Sf_SwigStatic_attributes,
    swig_IMidiInputData_Sf_SwigStatic_constants,
    swig_IMidiInputData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IMidiInputData_bases[] = {0};
static const char *swig_IMidiInputData_base_names[] = {0};
static swig_lua_class _wrap_class_IMidiInputData = { "IMidiInputData", "IMidiInputData", &SWIGTYPE_p_SynthLab__IMidiInputData,0, swig_delete_IMidiInputData, swig_IMidiInputData_methods, swig_IMidiInputData_attributes, &swig_IMidiInputData_Sf_SwigStatic, swig_IMidiInputData_meta, swig_IMidiInputData_bases, swig_IMidiInputData_base_names };

static int _wrap_GUI_Q_MIN_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::GUI_Q_MIN",0,0)
  result = (double)(double)SynthLab::GUI_Q_MIN;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GUI_Q_MAX_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::GUI_Q_MAX",0,0)
  result = (double)(double)SynthLab::GUI_Q_MAX;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SVF_Q_SLOPE_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::SVF_Q_SLOPE",0,0)
  result = (double)(double)SynthLab::SVF_Q_SLOPE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KORG35_Q_SLOPE_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::KORG35_Q_SLOPE",0,0)
  result = (double)(double)SynthLab::KORG35_Q_SLOPE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MOOG_Q_SLOPE_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::MOOG_Q_SLOPE",0,0)
  result = (double)(double)SynthLab::MOOG_Q_SLOPE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DIODE_Q_SLOPE_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::DIODE_Q_SLOPE",0,0)
  result = (double)(double)SynthLab::DIODE_Q_SLOPE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HSYNC_MOD_SLOPE_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::HSYNC_MOD_SLOPE",0,0)
  result = (double)(double)SynthLab::HSYNC_MOD_SLOPE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FilterOutput(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterOutput *result = 0 ;
  
  SWIG_check_num_args("SynthLab::FilterOutput::FilterOutput",0,0)
  result = (SynthLab::FilterOutput *)new SynthLab::FilterOutput();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__FilterOutput,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterOutput_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterOutput *arg1 = (SynthLab::FilterOutput *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::FilterOutput::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FilterOutput::filter",1,"SynthLab::FilterOutput *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::FilterOutput::filter",2,"double [SynthLab::NUM_FILTER_OUTPUTS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FilterOutput,0))){
    SWIG_fail_ptr("FilterOutput_filter_set",1,SWIGTYPE_p_SynthLab__FilterOutput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FilterOutput_filter_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->filter;
    for (ii = 0; ii < (size_t)SynthLab::NUM_FILTER_OUTPUTS; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterOutput_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterOutput *arg1 = (SynthLab::FilterOutput *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::FilterOutput::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FilterOutput::filter",1,"SynthLab::FilterOutput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FilterOutput,0))){
    SWIG_fail_ptr("FilterOutput_filter_get",1,SWIGTYPE_p_SynthLab__FilterOutput);
  }
  
  result = (double *)(double *) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterOutput_clearData(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterOutput *arg1 = (SynthLab::FilterOutput *) 0 ;
  
  SWIG_check_num_args("SynthLab::FilterOutput::clearData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FilterOutput::clearData",1,"SynthLab::FilterOutput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FilterOutput,0))){
    SWIG_fail_ptr("FilterOutput_clearData",1,SWIGTYPE_p_SynthLab__FilterOutput);
  }
  
  (arg1)->clearData();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FilterOutput(void *obj) {
SynthLab::FilterOutput *arg1 = (SynthLab::FilterOutput *) obj;
delete arg1;
}
static int _proxy__wrap_new_FilterOutput(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FilterOutput);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FilterOutput_attributes[] = {
    { "filter", _wrap_FilterOutput_filter_get, _wrap_FilterOutput_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FilterOutput_methods[]= {
    { "clearData", _wrap_FilterOutput_clearData},
    {0,0}
};
static swig_lua_method swig_FilterOutput_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FilterOutput_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FilterOutput_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FilterOutput_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FilterOutput_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FilterOutput_Sf_SwigStatic = {
    "FilterOutput",
    swig_FilterOutput_Sf_SwigStatic_methods,
    swig_FilterOutput_Sf_SwigStatic_attributes,
    swig_FilterOutput_Sf_SwigStatic_constants,
    swig_FilterOutput_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FilterOutput_bases[] = {0};
static const char *swig_FilterOutput_base_names[] = {0};
static swig_lua_class _wrap_class_FilterOutput = { "FilterOutput", "FilterOutput", &SWIGTYPE_p_SynthLab__FilterOutput,_proxy__wrap_new_FilterOutput, swig_delete_FilterOutput, swig_FilterOutput_methods, swig_FilterOutput_attributes, &swig_FilterOutput_Sf_SwigStatic, swig_FilterOutput_meta, swig_FilterOutput_bases, swig_FilterOutput_base_names };

static void swig_delete_IFilterBase(void *obj) {
SynthLab::IFilterBase *arg1 = (SynthLab::IFilterBase *) obj;
delete arg1;
}
static swig_lua_attribute swig_IFilterBase_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IFilterBase_methods[]= {
    {0,0}
};
static swig_lua_method swig_IFilterBase_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IFilterBase_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IFilterBase_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IFilterBase_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IFilterBase_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IFilterBase_Sf_SwigStatic = {
    "IFilterBase",
    swig_IFilterBase_Sf_SwigStatic_methods,
    swig_IFilterBase_Sf_SwigStatic_attributes,
    swig_IFilterBase_Sf_SwigStatic_constants,
    swig_IFilterBase_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IFilterBase_bases[] = {0};
static const char *swig_IFilterBase_base_names[] = {0};
static swig_lua_class _wrap_class_IFilterBase = { "IFilterBase", "IFilterBase", &SWIGTYPE_p_SynthLab__IFilterBase,0, swig_delete_IFilterBase, swig_IFilterBase_methods, swig_IFilterBase_attributes, &swig_IFilterBase_Sf_SwigStatic, swig_IFilterBase_meta, swig_IFilterBase_bases, swig_IFilterBase_base_names };

static int _wrap_CoreProcData_modulationInputs_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  SynthLab::IModulator *arg2 = (SynthLab::IModulator *) 0 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::modulationInputs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::modulationInputs",1,"SynthLab::CoreProcData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::CoreProcData::modulationInputs",2,"SynthLab::IModulator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_modulationInputs_set",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__IModulator,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CoreProcData_modulationInputs_set",2,SWIGTYPE_p_SynthLab__IModulator);
  }
  
  if (arg1) (arg1)->modulationInputs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_modulationInputs_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  SynthLab::IModulator *result = 0 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::modulationInputs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::modulationInputs",1,"SynthLab::CoreProcData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_modulationInputs_get",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (SynthLab::IModulator *) ((arg1)->modulationInputs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__IModulator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_modulationOutputs_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  SynthLab::IModulator *arg2 = (SynthLab::IModulator *) 0 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::modulationOutputs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::modulationOutputs",1,"SynthLab::CoreProcData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::CoreProcData::modulationOutputs",2,"SynthLab::IModulator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_modulationOutputs_set",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__IModulator,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CoreProcData_modulationOutputs_set",2,SWIGTYPE_p_SynthLab__IModulator);
  }
  
  if (arg1) (arg1)->modulationOutputs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_modulationOutputs_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  SynthLab::IModulator *result = 0 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::modulationOutputs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::modulationOutputs",1,"SynthLab::CoreProcData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_modulationOutputs_get",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (SynthLab::IModulator *) ((arg1)->modulationOutputs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__IModulator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_inputBuffers_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  float **arg2 = (float **) 0 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::inputBuffers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::inputBuffers",1,"SynthLab::CoreProcData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::CoreProcData::inputBuffers",2,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_inputBuffers_set",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("CoreProcData_inputBuffers_set",2,SWIGTYPE_p_p_float);
  }
  
  if (arg1) (arg1)->inputBuffers = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_inputBuffers_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  float **result = 0 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::inputBuffers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::inputBuffers",1,"SynthLab::CoreProcData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_inputBuffers_get",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (float **) ((arg1)->inputBuffers);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_outputBuffers_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  float **arg2 = (float **) 0 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::outputBuffers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::outputBuffers",1,"SynthLab::CoreProcData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::CoreProcData::outputBuffers",2,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_outputBuffers_set",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("CoreProcData_outputBuffers_set",2,SWIGTYPE_p_p_float);
  }
  
  if (arg1) (arg1)->outputBuffers = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_outputBuffers_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  float **result = 0 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::outputBuffers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::outputBuffers",1,"SynthLab::CoreProcData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_outputBuffers_get",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (float **) ((arg1)->outputBuffers);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_fmBuffers_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  float **arg2 = (float **) 0 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::fmBuffers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::fmBuffers",1,"SynthLab::CoreProcData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::CoreProcData::fmBuffers",2,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_fmBuffers_set",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("CoreProcData_fmBuffers_set",2,SWIGTYPE_p_p_float);
  }
  
  if (arg1) (arg1)->fmBuffers = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_fmBuffers_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  float **result = 0 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::fmBuffers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::fmBuffers",1,"SynthLab::CoreProcData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_fmBuffers_get",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (float **) ((arg1)->fmBuffers);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_wavetableDatabase_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  SynthLab::IWavetableDatabase *arg2 = (SynthLab::IWavetableDatabase *) 0 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::wavetableDatabase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::wavetableDatabase",1,"SynthLab::CoreProcData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::CoreProcData::wavetableDatabase",2,"SynthLab::IWavetableDatabase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_wavetableDatabase_set",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__IWavetableDatabase,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CoreProcData_wavetableDatabase_set",2,SWIGTYPE_p_SynthLab__IWavetableDatabase);
  }
  
  if (arg1) (arg1)->wavetableDatabase = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_wavetableDatabase_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  SynthLab::IWavetableDatabase *result = 0 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::wavetableDatabase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::wavetableDatabase",1,"SynthLab::CoreProcData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_wavetableDatabase_get",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (SynthLab::IWavetableDatabase *) ((arg1)->wavetableDatabase);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__IWavetableDatabase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_sampleDatabase_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  SynthLab::IPCMSampleDatabase *arg2 = (SynthLab::IPCMSampleDatabase *) 0 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::sampleDatabase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::sampleDatabase",1,"SynthLab::CoreProcData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::CoreProcData::sampleDatabase",2,"SynthLab::IPCMSampleDatabase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_sampleDatabase_set",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__IPCMSampleDatabase,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CoreProcData_sampleDatabase_set",2,SWIGTYPE_p_SynthLab__IPCMSampleDatabase);
  }
  
  if (arg1) (arg1)->sampleDatabase = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_sampleDatabase_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  SynthLab::IPCMSampleDatabase *result = 0 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::sampleDatabase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::sampleDatabase",1,"SynthLab::CoreProcData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_sampleDatabase_get",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (SynthLab::IPCMSampleDatabase *) ((arg1)->sampleDatabase);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__IPCMSampleDatabase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_midiInputData_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  SynthLab::IMidiInputData *arg2 = (SynthLab::IMidiInputData *) 0 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::midiInputData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::midiInputData",1,"SynthLab::CoreProcData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::CoreProcData::midiInputData",2,"SynthLab::IMidiInputData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_midiInputData_set",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__IMidiInputData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CoreProcData_midiInputData_set",2,SWIGTYPE_p_SynthLab__IMidiInputData);
  }
  
  if (arg1) (arg1)->midiInputData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_midiInputData_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  SynthLab::IMidiInputData *result = 0 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::midiInputData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::midiInputData",1,"SynthLab::CoreProcData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_midiInputData_get",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (SynthLab::IMidiInputData *) ((arg1)->midiInputData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__IMidiInputData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_moduleParameters_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::moduleParameters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::moduleParameters",1,"SynthLab::CoreProcData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::CoreProcData::moduleParameters",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_moduleParameters_set",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CoreProcData_moduleParameters_set");
  if (arg1) (arg1)->moduleParameters = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_moduleParameters_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::moduleParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::moduleParameters",1,"SynthLab::CoreProcData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_moduleParameters_get",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (void *) ((arg1)->moduleParameters);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_dllPath_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::dllPath",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::dllPath",1,"SynthLab::CoreProcData *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::CoreProcData::dllPath",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_dllPath_set",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if (arg2) {
      arg1->dllPath = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->dllPath, (const char *)arg2);
    } else {
      arg1->dllPath = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_dllPath_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::dllPath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::dllPath",1,"SynthLab::CoreProcData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_dllPath_get",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (char *) ((arg1)->dllPath);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_sampleRate_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::sampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::sampleRate",1,"SynthLab::CoreProcData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::CoreProcData::sampleRate",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_sampleRate_set",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->sampleRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_sampleRate_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::CoreProcData::sampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::sampleRate",1,"SynthLab::CoreProcData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_sampleRate_get",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (double) ((arg1)->sampleRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_samplesToProcess_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::samplesToProcess",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::samplesToProcess",1,"SynthLab::CoreProcData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::CoreProcData::samplesToProcess",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_samplesToProcess_set",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("CoreProcData_samplesToProcess_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->samplesToProcess = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_samplesToProcess_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::CoreProcData::samplesToProcess",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::samplesToProcess",1,"SynthLab::CoreProcData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_samplesToProcess_get",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result =  ((arg1)->samplesToProcess);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_unisonDetuneCents_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::unisonDetuneCents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::unisonDetuneCents",1,"SynthLab::CoreProcData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::CoreProcData::unisonDetuneCents",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_unisonDetuneCents_set",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->unisonDetuneCents = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_unisonDetuneCents_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::CoreProcData::unisonDetuneCents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::unisonDetuneCents",1,"SynthLab::CoreProcData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_unisonDetuneCents_get",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (double) ((arg1)->unisonDetuneCents);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_unisonStartPhase_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::unisonStartPhase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::unisonStartPhase",1,"SynthLab::CoreProcData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::CoreProcData::unisonStartPhase",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_unisonStartPhase_set",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->unisonStartPhase = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_unisonStartPhase_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::CoreProcData::unisonStartPhase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::unisonStartPhase",1,"SynthLab::CoreProcData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_unisonStartPhase_get",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (double) ((arg1)->unisonStartPhase);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_BPM_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::BPM",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::BPM",1,"SynthLab::CoreProcData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::CoreProcData::BPM",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_BPM_set",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->BPM = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_BPM_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::CoreProcData::BPM",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::BPM",1,"SynthLab::CoreProcData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_BPM_get",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (double) ((arg1)->BPM);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_noteEvent_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  MIDINoteEvent arg2 ;
  MIDINoteEvent *argp2 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::noteEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::noteEvent",1,"SynthLab::CoreProcData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::CoreProcData::noteEvent",2,"MIDINoteEvent");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_noteEvent_set",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_MIDINoteEvent,0))){
    SWIG_fail_ptr("CoreProcData_noteEvent_set",2,SWIGTYPE_p_MIDINoteEvent);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->noteEvent = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoreProcData_noteEvent_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) 0 ;
  MIDINoteEvent result;
  
  SWIG_check_num_args("SynthLab::CoreProcData::noteEvent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::CoreProcData::noteEvent",1,"SynthLab::CoreProcData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("CoreProcData_noteEvent_get",1,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result =  ((arg1)->noteEvent);
  {
    MIDINoteEvent * resultptr = new MIDINoteEvent((const MIDINoteEvent &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MIDINoteEvent,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CoreProcData(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::CoreProcData *result = 0 ;
  
  SWIG_check_num_args("SynthLab::CoreProcData::CoreProcData",0,0)
  result = (SynthLab::CoreProcData *)new SynthLab::CoreProcData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__CoreProcData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CoreProcData(void *obj) {
SynthLab::CoreProcData *arg1 = (SynthLab::CoreProcData *) obj;
delete arg1;
}
static int _proxy__wrap_new_CoreProcData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CoreProcData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CoreProcData_attributes[] = {
    { "modulationInputs", _wrap_CoreProcData_modulationInputs_get, _wrap_CoreProcData_modulationInputs_set },
    { "modulationOutputs", _wrap_CoreProcData_modulationOutputs_get, _wrap_CoreProcData_modulationOutputs_set },
    { "inputBuffers", _wrap_CoreProcData_inputBuffers_get, _wrap_CoreProcData_inputBuffers_set },
    { "outputBuffers", _wrap_CoreProcData_outputBuffers_get, _wrap_CoreProcData_outputBuffers_set },
    { "fmBuffers", _wrap_CoreProcData_fmBuffers_get, _wrap_CoreProcData_fmBuffers_set },
    { "wavetableDatabase", _wrap_CoreProcData_wavetableDatabase_get, _wrap_CoreProcData_wavetableDatabase_set },
    { "sampleDatabase", _wrap_CoreProcData_sampleDatabase_get, _wrap_CoreProcData_sampleDatabase_set },
    { "midiInputData", _wrap_CoreProcData_midiInputData_get, _wrap_CoreProcData_midiInputData_set },
    { "moduleParameters", _wrap_CoreProcData_moduleParameters_get, _wrap_CoreProcData_moduleParameters_set },
    { "dllPath", _wrap_CoreProcData_dllPath_get, _wrap_CoreProcData_dllPath_set },
    { "sampleRate", _wrap_CoreProcData_sampleRate_get, _wrap_CoreProcData_sampleRate_set },
    { "samplesToProcess", _wrap_CoreProcData_samplesToProcess_get, _wrap_CoreProcData_samplesToProcess_set },
    { "unisonDetuneCents", _wrap_CoreProcData_unisonDetuneCents_get, _wrap_CoreProcData_unisonDetuneCents_set },
    { "unisonStartPhase", _wrap_CoreProcData_unisonStartPhase_get, _wrap_CoreProcData_unisonStartPhase_set },
    { "BPM", _wrap_CoreProcData_BPM_get, _wrap_CoreProcData_BPM_set },
    { "noteEvent", _wrap_CoreProcData_noteEvent_get, _wrap_CoreProcData_noteEvent_set },
    {0,0,0}
};
static swig_lua_method swig_CoreProcData_methods[]= {
    {0,0}
};
static swig_lua_method swig_CoreProcData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CoreProcData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CoreProcData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CoreProcData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CoreProcData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CoreProcData_Sf_SwigStatic = {
    "CoreProcData",
    swig_CoreProcData_Sf_SwigStatic_methods,
    swig_CoreProcData_Sf_SwigStatic_attributes,
    swig_CoreProcData_Sf_SwigStatic_constants,
    swig_CoreProcData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CoreProcData_bases[] = {0};
static const char *swig_CoreProcData_base_names[] = {0};
static swig_lua_class _wrap_class_CoreProcData = { "CoreProcData", "CoreProcData", &SWIGTYPE_p_SynthLab__CoreProcData,_proxy__wrap_new_CoreProcData, swig_delete_CoreProcData, swig_CoreProcData_methods, swig_CoreProcData_attributes, &swig_CoreProcData_Sf_SwigStatic, swig_CoreProcData_meta, swig_CoreProcData_bases, swig_CoreProcData_base_names };

static int _wrap_new_SynthLabTableSet(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  uint32_t *arg3 = (uint32_t *) 0 ;
  uint64_t **arg4 = (uint64_t **) 0 ;
  double arg5 ;
  SynthLab::SynthLabTableSet *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthLabTableSet::SynthLabTableSet",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SynthLab::SynthLabTableSet::SynthLabTableSet",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthLabTableSet::SynthLabTableSet",2,"double");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SynthLab::SynthLabTableSet::SynthLabTableSet",3,"uint32_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SynthLab::SynthLabTableSet::SynthLabTableSet",4,"uint64_t **");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SynthLab::SynthLabTableSet::SynthLabTableSet",5,"double");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_SynthLabTableSet",3,SWIGTYPE_p_uint32_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_uint64_t,0))){
    SWIG_fail_ptr("new_SynthLabTableSet",4,SWIGTYPE_p_p_uint64_t);
  }
  
  arg5 = (double)lua_tonumber(L, 5);
  result = (SynthLab::SynthLabTableSet *)new SynthLab::SynthLabTableSet((char const *)arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__SynthLabTableSet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLabTableSet_tableLengths_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabTableSet *arg1 = (SynthLab::SynthLabTableSet *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  
  SWIG_check_num_args("SynthLab::SynthLabTableSet::tableLengths",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabTableSet::tableLengths",1,"SynthLab::SynthLabTableSet *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::SynthLabTableSet::tableLengths",2,"uint32_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabTableSet,0))){
    SWIG_fail_ptr("SynthLabTableSet_tableLengths_set",1,SWIGTYPE_p_SynthLab__SynthLabTableSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint32_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("SynthLabTableSet_tableLengths_set",2,SWIGTYPE_p_uint32_t);
  }
  
  if (arg1) (arg1)->tableLengths = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLabTableSet_tableLengths_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabTableSet *arg1 = (SynthLab::SynthLabTableSet *) 0 ;
  uint32_t *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthLabTableSet::tableLengths",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabTableSet::tableLengths",1,"SynthLab::SynthLabTableSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabTableSet,0))){
    SWIG_fail_ptr("SynthLabTableSet_tableLengths_get",1,SWIGTYPE_p_SynthLab__SynthLabTableSet);
  }
  
  result = (uint32_t *) ((arg1)->tableLengths);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint32_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLabTableSet_ppHexTableSet_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabTableSet *arg1 = (SynthLab::SynthLabTableSet *) 0 ;
  uint64_t **arg2 = (uint64_t **) 0 ;
  
  SWIG_check_num_args("SynthLab::SynthLabTableSet::ppHexTableSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabTableSet::ppHexTableSet",1,"SynthLab::SynthLabTableSet *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::SynthLabTableSet::ppHexTableSet",2,"uint64_t **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabTableSet,0))){
    SWIG_fail_ptr("SynthLabTableSet_ppHexTableSet_set",1,SWIGTYPE_p_SynthLab__SynthLabTableSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_uint64_t,0))){
    SWIG_fail_ptr("SynthLabTableSet_ppHexTableSet_set",2,SWIGTYPE_p_p_uint64_t);
  }
  
  if (arg1) (arg1)->ppHexTableSet = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLabTableSet_ppHexTableSet_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabTableSet *arg1 = (SynthLab::SynthLabTableSet *) 0 ;
  uint64_t **result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthLabTableSet::ppHexTableSet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabTableSet::ppHexTableSet",1,"SynthLab::SynthLabTableSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabTableSet,0))){
    SWIG_fail_ptr("SynthLabTableSet_ppHexTableSet_get",1,SWIGTYPE_p_SynthLab__SynthLabTableSet);
  }
  
  result = (uint64_t **) ((arg1)->ppHexTableSet);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_uint64_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLabTableSet_tableFs_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabTableSet *arg1 = (SynthLab::SynthLabTableSet *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthLabTableSet::tableFs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabTableSet::tableFs",1,"SynthLab::SynthLabTableSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthLabTableSet::tableFs",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabTableSet,0))){
    SWIG_fail_ptr("SynthLabTableSet_tableFs_set",1,SWIGTYPE_p_SynthLab__SynthLabTableSet);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->tableFs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLabTableSet_tableFs_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabTableSet *arg1 = (SynthLab::SynthLabTableSet *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::SynthLabTableSet::tableFs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabTableSet::tableFs",1,"SynthLab::SynthLabTableSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabTableSet,0))){
    SWIG_fail_ptr("SynthLabTableSet_tableFs_get",1,SWIGTYPE_p_SynthLab__SynthLabTableSet);
  }
  
  result = (double) ((arg1)->tableFs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLabTableSet_outputComp_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabTableSet *arg1 = (SynthLab::SynthLabTableSet *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthLabTableSet::outputComp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabTableSet::outputComp",1,"SynthLab::SynthLabTableSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthLabTableSet::outputComp",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabTableSet,0))){
    SWIG_fail_ptr("SynthLabTableSet_outputComp_set",1,SWIGTYPE_p_SynthLab__SynthLabTableSet);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->outputComp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLabTableSet_outputComp_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabTableSet *arg1 = (SynthLab::SynthLabTableSet *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::SynthLabTableSet::outputComp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabTableSet::outputComp",1,"SynthLab::SynthLabTableSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabTableSet,0))){
    SWIG_fail_ptr("SynthLabTableSet_outputComp_get",1,SWIGTYPE_p_SynthLab__SynthLabTableSet);
  }
  
  result = (double) ((arg1)->outputComp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLabTableSet_waveformName_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabTableSet *arg1 = (SynthLab::SynthLabTableSet *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("SynthLab::SynthLabTableSet::waveformName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabTableSet::waveformName",1,"SynthLab::SynthLabTableSet *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::SynthLabTableSet::waveformName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabTableSet,0))){
    SWIG_fail_ptr("SynthLabTableSet_waveformName_set",1,SWIGTYPE_p_SynthLab__SynthLabTableSet);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if (arg2) {
      arg1->waveformName = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->waveformName, (const char *)arg2);
    } else {
      arg1->waveformName = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLabTableSet_waveformName_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabTableSet *arg1 = (SynthLab::SynthLabTableSet *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthLabTableSet::waveformName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabTableSet::waveformName",1,"SynthLab::SynthLabTableSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabTableSet,0))){
    SWIG_fail_ptr("SynthLabTableSet_waveformName_get",1,SWIGTYPE_p_SynthLab__SynthLabTableSet);
  }
  
  result = (char *) ((arg1)->waveformName);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SynthLabTableSet(void *obj) {
SynthLab::SynthLabTableSet *arg1 = (SynthLab::SynthLabTableSet *) obj;
delete arg1;
}
static int _proxy__wrap_new_SynthLabTableSet(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SynthLabTableSet);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SynthLabTableSet_attributes[] = {
    { "tableLengths", _wrap_SynthLabTableSet_tableLengths_get, _wrap_SynthLabTableSet_tableLengths_set },
    { "ppHexTableSet", _wrap_SynthLabTableSet_ppHexTableSet_get, _wrap_SynthLabTableSet_ppHexTableSet_set },
    { "tableFs", _wrap_SynthLabTableSet_tableFs_get, _wrap_SynthLabTableSet_tableFs_set },
    { "outputComp", _wrap_SynthLabTableSet_outputComp_get, _wrap_SynthLabTableSet_outputComp_set },
    { "waveformName", _wrap_SynthLabTableSet_waveformName_get, _wrap_SynthLabTableSet_waveformName_set },
    {0,0,0}
};
static swig_lua_method swig_SynthLabTableSet_methods[]= {
    {0,0}
};
static swig_lua_method swig_SynthLabTableSet_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SynthLabTableSet_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SynthLabTableSet_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SynthLabTableSet_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SynthLabTableSet_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SynthLabTableSet_Sf_SwigStatic = {
    "SynthLabTableSet",
    swig_SynthLabTableSet_Sf_SwigStatic_methods,
    swig_SynthLabTableSet_Sf_SwigStatic_attributes,
    swig_SynthLabTableSet_Sf_SwigStatic_constants,
    swig_SynthLabTableSet_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SynthLabTableSet_bases[] = {0};
static const char *swig_SynthLabTableSet_base_names[] = {0};
static swig_lua_class _wrap_class_SynthLabTableSet = { "SynthLabTableSet", "SynthLabTableSet", &SWIGTYPE_p_SynthLab__SynthLabTableSet,_proxy__wrap_new_SynthLabTableSet, swig_delete_SynthLabTableSet, swig_SynthLabTableSet_methods, swig_SynthLabTableSet_attributes, &swig_SynthLabTableSet_Sf_SwigStatic, swig_SynthLabTableSet_meta, swig_SynthLabTableSet_bases, swig_SynthLabTableSet_base_names };

static int _wrap_new_SynthLabBankSet__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  SynthLab::SynthLabTableSet **arg2 = (SynthLab::SynthLabTableSet **) 0 ;
  std::string *arg3 = (std::string *) 0 ;
  SynthLab::StaticTableSource *arg4 = (SynthLab::StaticTableSource *) 0 ;
  SynthLab::SynthLabBankSet *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthLabBankSet::SynthLabBankSet",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::SynthLabBankSet::SynthLabBankSet",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::SynthLabBankSet::SynthLabBankSet",2,"SynthLab::SynthLabTableSet **");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SynthLab::SynthLabBankSet::SynthLabBankSet",3,"std::string *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SynthLab::SynthLabBankSet::SynthLabBankSet",4,"SynthLab::StaticTableSource *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_SynthLab__SynthLabTableSet,0))){
    SWIG_fail_ptr("new_SynthLabBankSet",2,SWIGTYPE_p_p_SynthLab__SynthLabTableSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_SynthLabBankSet",3,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SynthLab__StaticTableSource,0))){
    SWIG_fail_ptr("new_SynthLabBankSet",4,SWIGTYPE_p_SynthLab__StaticTableSource);
  }
  
  result = (SynthLab::SynthLabBankSet *)new SynthLab::SynthLabBankSet(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__SynthLabBankSet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SynthLabBankSet__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  SynthLab::SynthLabTableSet **arg2 = (SynthLab::SynthLabTableSet **) 0 ;
  std::string *arg3 = (std::string *) 0 ;
  SynthLab::SynthLabBankSet *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthLabBankSet::SynthLabBankSet",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::SynthLabBankSet::SynthLabBankSet",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::SynthLabBankSet::SynthLabBankSet",2,"SynthLab::SynthLabTableSet **");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SynthLab::SynthLabBankSet::SynthLabBankSet",3,"std::string *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_SynthLab__SynthLabTableSet,0))){
    SWIG_fail_ptr("new_SynthLabBankSet",2,SWIGTYPE_p_p_SynthLab__SynthLabTableSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_SynthLabBankSet",3,SWIGTYPE_p_std__string);
  }
  
  result = (SynthLab::SynthLabBankSet *)new SynthLab::SynthLabBankSet(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__SynthLabBankSet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SynthLabBankSet(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_p_SynthLab__SynthLabTableSet, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_SynthLabBankSet__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_p_SynthLab__SynthLabTableSet, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SynthLab__StaticTableSource, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_SynthLabBankSet__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SynthLabBankSet'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::SynthLabBankSet::SynthLabBankSet(unsigned int,SynthLab::SynthLabTableSet **,std::string *,SynthLab::StaticTableSource *)\n"
    "    SynthLab::SynthLabBankSet::SynthLabBankSet(unsigned int,SynthLab::SynthLabTableSet **,std::string *)\n");
  lua_error(L);return 0;
}


static int _wrap_SynthLabBankSet_tablePtrsCount_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabBankSet *arg1 = (SynthLab::SynthLabBankSet *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthLabBankSet::tablePtrsCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabBankSet::tablePtrsCount",1,"SynthLab::SynthLabBankSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthLabBankSet::tablePtrsCount",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabBankSet,0))){
    SWIG_fail_ptr("SynthLabBankSet_tablePtrsCount_set",1,SWIGTYPE_p_SynthLab__SynthLabBankSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->tablePtrsCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLabBankSet_tablePtrsCount_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabBankSet *arg1 = (SynthLab::SynthLabBankSet *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("SynthLab::SynthLabBankSet::tablePtrsCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabBankSet::tablePtrsCount",1,"SynthLab::SynthLabBankSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabBankSet,0))){
    SWIG_fail_ptr("SynthLabBankSet_tablePtrsCount_get",1,SWIGTYPE_p_SynthLab__SynthLabBankSet);
  }
  
  result = (unsigned int) ((arg1)->tablePtrsCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLabBankSet_tablePtrs_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabBankSet *arg1 = (SynthLab::SynthLabBankSet *) 0 ;
  SynthLab::SynthLabTableSet **arg2 = (SynthLab::SynthLabTableSet **) 0 ;
  
  SWIG_check_num_args("SynthLab::SynthLabBankSet::tablePtrs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabBankSet::tablePtrs",1,"SynthLab::SynthLabBankSet *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::SynthLabBankSet::tablePtrs",2,"SynthLab::SynthLabTableSet **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabBankSet,0))){
    SWIG_fail_ptr("SynthLabBankSet_tablePtrs_set",1,SWIGTYPE_p_SynthLab__SynthLabBankSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_SynthLab__SynthLabTableSet,0))){
    SWIG_fail_ptr("SynthLabBankSet_tablePtrs_set",2,SWIGTYPE_p_p_SynthLab__SynthLabTableSet);
  }
  
  if (arg1) (arg1)->tablePtrs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLabBankSet_tablePtrs_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabBankSet *arg1 = (SynthLab::SynthLabBankSet *) 0 ;
  SynthLab::SynthLabTableSet **result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthLabBankSet::tablePtrs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabBankSet::tablePtrs",1,"SynthLab::SynthLabBankSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabBankSet,0))){
    SWIG_fail_ptr("SynthLabBankSet_tablePtrs_get",1,SWIGTYPE_p_SynthLab__SynthLabBankSet);
  }
  
  result = (SynthLab::SynthLabTableSet **) ((arg1)->tablePtrs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_SynthLab__SynthLabTableSet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLabBankSet_tableNames_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabBankSet *arg1 = (SynthLab::SynthLabBankSet *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  
  SWIG_check_num_args("SynthLab::SynthLabBankSet::tableNames",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabBankSet::tableNames",1,"SynthLab::SynthLabBankSet *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::SynthLabBankSet::tableNames",2,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabBankSet,0))){
    SWIG_fail_ptr("SynthLabBankSet_tableNames_set",1,SWIGTYPE_p_SynthLab__SynthLabBankSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("SynthLabBankSet_tableNames_set",2,SWIGTYPE_p_std__string);
  }
  
  if (arg1) (arg1)->tableNames = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLabBankSet_tableNames_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabBankSet *arg1 = (SynthLab::SynthLabBankSet *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthLabBankSet::tableNames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabBankSet::tableNames",1,"SynthLab::SynthLabBankSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabBankSet,0))){
    SWIG_fail_ptr("SynthLabBankSet_tableNames_get",1,SWIGTYPE_p_SynthLab__SynthLabBankSet);
  }
  
  result = (std::string *) ((arg1)->tableNames);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLabBankSet_staticSources_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabBankSet *arg1 = (SynthLab::SynthLabBankSet *) 0 ;
  SynthLab::StaticTableSource *arg2 = (SynthLab::StaticTableSource *) 0 ;
  
  SWIG_check_num_args("SynthLab::SynthLabBankSet::staticSources",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabBankSet::staticSources",1,"SynthLab::SynthLabBankSet *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::SynthLabBankSet::staticSources",2,"SynthLab::StaticTableSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabBankSet,0))){
    SWIG_fail_ptr("SynthLabBankSet_staticSources_set",1,SWIGTYPE_p_SynthLab__SynthLabBankSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__StaticTableSource,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("SynthLabBankSet_staticSources_set",2,SWIGTYPE_p_SynthLab__StaticTableSource);
  }
  
  if (arg1) (arg1)->staticSources = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLabBankSet_staticSources_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabBankSet *arg1 = (SynthLab::SynthLabBankSet *) 0 ;
  SynthLab::StaticTableSource *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthLabBankSet::staticSources",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabBankSet::staticSources",1,"SynthLab::SynthLabBankSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabBankSet,0))){
    SWIG_fail_ptr("SynthLabBankSet_staticSources_get",1,SWIGTYPE_p_SynthLab__SynthLabBankSet);
  }
  
  result = (SynthLab::StaticTableSource *) ((arg1)->staticSources);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__StaticTableSource,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SynthLabBankSet(void *obj) {
SynthLab::SynthLabBankSet *arg1 = (SynthLab::SynthLabBankSet *) obj;
delete arg1;
}
static int _proxy__wrap_new_SynthLabBankSet(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SynthLabBankSet);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SynthLabBankSet_attributes[] = {
    { "tablePtrsCount", _wrap_SynthLabBankSet_tablePtrsCount_get, _wrap_SynthLabBankSet_tablePtrsCount_set },
    { "tablePtrs", _wrap_SynthLabBankSet_tablePtrs_get, _wrap_SynthLabBankSet_tablePtrs_set },
    { "tableNames", _wrap_SynthLabBankSet_tableNames_get, _wrap_SynthLabBankSet_tableNames_set },
    { "staticSources", _wrap_SynthLabBankSet_staticSources_get, _wrap_SynthLabBankSet_staticSources_set },
    {0,0,0}
};
static swig_lua_method swig_SynthLabBankSet_methods[]= {
    {0,0}
};
static swig_lua_method swig_SynthLabBankSet_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SynthLabBankSet_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SynthLabBankSet_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SynthLabBankSet_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SynthLabBankSet_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SynthLabBankSet_Sf_SwigStatic = {
    "SynthLabBankSet",
    swig_SynthLabBankSet_Sf_SwigStatic_methods,
    swig_SynthLabBankSet_Sf_SwigStatic_attributes,
    swig_SynthLabBankSet_Sf_SwigStatic_constants,
    swig_SynthLabBankSet_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SynthLabBankSet_bases[] = {0};
static const char *swig_SynthLabBankSet_base_names[] = {0};
static swig_lua_class _wrap_class_SynthLabBankSet = { "SynthLabBankSet", "SynthLabBankSet", &SWIGTYPE_p_SynthLab__SynthLabBankSet,_proxy__wrap_new_SynthLabBankSet, swig_delete_SynthLabBankSet, swig_SynthLabBankSet_methods, swig_SynthLabBankSet_attributes, &swig_SynthLabBankSet_Sf_SwigStatic, swig_SynthLabBankSet_meta, swig_SynthLabBankSet_bases, swig_SynthLabBankSet_base_names };

static int _wrap_kDefaultWaveTableLength_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::kDefaultWaveTableLength",0,0)
  result = (uint32_t)SynthLab::kDefaultWaveTableLength;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StaticWavetable__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::StaticWavetable *result = 0 ;
  
  SWIG_check_num_args("SynthLab::StaticWavetable::StaticWavetable",0,0)
  result = (SynthLab::StaticWavetable *)new SynthLab::StaticWavetable();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__StaticWavetable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StaticWavetable__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  uint64_t *arg1 = (uint64_t *) 0 ;
  uint32_t arg2 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  double arg5 ;
  uint32_t *argp2 ;
  SynthLab::StaticWavetable *result = 0 ;
  
  SWIG_check_num_args("SynthLab::StaticWavetable::StaticWavetable",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::StaticWavetable::StaticWavetable",1,"uint64_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::StaticWavetable::StaticWavetable",2,"uint32_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SynthLab::StaticWavetable::StaticWavetable",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::StaticWavetable::StaticWavetable",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SynthLab::StaticWavetable::StaticWavetable",5,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uint64_t,0))){
    SWIG_fail_ptr("new_StaticWavetable",1,SWIGTYPE_p_uint64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_StaticWavetable",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (SynthLab::StaticWavetable *)new SynthLab::StaticWavetable((uint64_t const *)arg1,arg2,(char const *)arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__StaticWavetable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StaticWavetable__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  uint64_t *arg1 = (uint64_t *) 0 ;
  uint32_t arg2 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  uint32_t *argp2 ;
  SynthLab::StaticWavetable *result = 0 ;
  
  SWIG_check_num_args("SynthLab::StaticWavetable::StaticWavetable",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::StaticWavetable::StaticWavetable",1,"uint64_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::StaticWavetable::StaticWavetable",2,"uint32_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SynthLab::StaticWavetable::StaticWavetable",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::StaticWavetable::StaticWavetable",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uint64_t,0))){
    SWIG_fail_ptr("new_StaticWavetable",1,SWIGTYPE_p_uint64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_StaticWavetable",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (SynthLab::StaticWavetable *)new SynthLab::StaticWavetable((uint64_t const *)arg1,arg2,(char const *)arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__StaticWavetable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StaticWavetable__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  uint64_t *arg1 = (uint64_t *) 0 ;
  uint32_t arg2 ;
  char *arg3 = (char *) 0 ;
  uint32_t *argp2 ;
  SynthLab::StaticWavetable *result = 0 ;
  
  SWIG_check_num_args("SynthLab::StaticWavetable::StaticWavetable",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::StaticWavetable::StaticWavetable",1,"uint64_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::StaticWavetable::StaticWavetable",2,"uint32_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SynthLab::StaticWavetable::StaticWavetable",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uint64_t,0))){
    SWIG_fail_ptr("new_StaticWavetable",1,SWIGTYPE_p_uint64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_StaticWavetable",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (SynthLab::StaticWavetable *)new SynthLab::StaticWavetable((uint64_t const *)arg1,arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__StaticWavetable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StaticWavetable__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  uint32_t arg2 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  double arg5 ;
  uint32_t *argp2 ;
  SynthLab::StaticWavetable *result = 0 ;
  
  SWIG_check_num_args("SynthLab::StaticWavetable::StaticWavetable",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::StaticWavetable::StaticWavetable",1,"double const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::StaticWavetable::StaticWavetable",2,"uint32_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SynthLab::StaticWavetable::StaticWavetable",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::StaticWavetable::StaticWavetable",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SynthLab::StaticWavetable::StaticWavetable",5,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("new_StaticWavetable",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_StaticWavetable",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (SynthLab::StaticWavetable *)new SynthLab::StaticWavetable((double const *)arg1,arg2,(char const *)arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__StaticWavetable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StaticWavetable__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  uint32_t arg2 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  uint32_t *argp2 ;
  SynthLab::StaticWavetable *result = 0 ;
  
  SWIG_check_num_args("SynthLab::StaticWavetable::StaticWavetable",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::StaticWavetable::StaticWavetable",1,"double const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::StaticWavetable::StaticWavetable",2,"uint32_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SynthLab::StaticWavetable::StaticWavetable",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::StaticWavetable::StaticWavetable",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("new_StaticWavetable",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_StaticWavetable",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (SynthLab::StaticWavetable *)new SynthLab::StaticWavetable((double const *)arg1,arg2,(char const *)arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__StaticWavetable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StaticWavetable__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  uint32_t arg2 ;
  char *arg3 = (char *) 0 ;
  uint32_t *argp2 ;
  SynthLab::StaticWavetable *result = 0 ;
  
  SWIG_check_num_args("SynthLab::StaticWavetable::StaticWavetable",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::StaticWavetable::StaticWavetable",1,"double const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::StaticWavetable::StaticWavetable",2,"uint32_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SynthLab::StaticWavetable::StaticWavetable",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("new_StaticWavetable",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_StaticWavetable",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (SynthLab::StaticWavetable *)new SynthLab::StaticWavetable((double const *)arg1,arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__StaticWavetable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StaticWavetable(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_StaticWavetable__SWIG_0(L);
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uint64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_StaticWavetable__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_double, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_StaticWavetable__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_double, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_StaticWavetable__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uint64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_StaticWavetable__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uint64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_StaticWavetable__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_double, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_StaticWavetable__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_StaticWavetable'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::StaticWavetable::StaticWavetable()\n"
    "    SynthLab::StaticWavetable::StaticWavetable(uint64_t const *,uint32_t,char const *,double,double)\n"
    "    SynthLab::StaticWavetable::StaticWavetable(uint64_t const *,uint32_t,char const *,double)\n"
    "    SynthLab::StaticWavetable::StaticWavetable(uint64_t const *,uint32_t,char const *)\n"
    "    SynthLab::StaticWavetable::StaticWavetable(double const *,uint32_t,char const *,double,double)\n"
    "    SynthLab::StaticWavetable::StaticWavetable(double const *,uint32_t,char const *,double)\n"
    "    SynthLab::StaticWavetable::StaticWavetable(double const *,uint32_t,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StaticWavetable_uTable_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::StaticWavetable *arg1 = (SynthLab::StaticWavetable *) 0 ;
  uint64_t *arg2 = (uint64_t *) 0 ;
  
  SWIG_check_num_args("SynthLab::StaticWavetable::uTable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::StaticWavetable::uTable",1,"SynthLab::StaticWavetable *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::StaticWavetable::uTable",2,"uint64_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__StaticWavetable,0))){
    SWIG_fail_ptr("StaticWavetable_uTable_set",1,SWIGTYPE_p_SynthLab__StaticWavetable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint64_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("StaticWavetable_uTable_set",2,SWIGTYPE_p_uint64_t);
  }
  
  if (arg1) (arg1)->uTable = (uint64_t const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StaticWavetable_uTable_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::StaticWavetable *arg1 = (SynthLab::StaticWavetable *) 0 ;
  uint64_t *result = 0 ;
  
  SWIG_check_num_args("SynthLab::StaticWavetable::uTable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::StaticWavetable::uTable",1,"SynthLab::StaticWavetable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__StaticWavetable,0))){
    SWIG_fail_ptr("StaticWavetable_uTable_get",1,SWIGTYPE_p_SynthLab__StaticWavetable);
  }
  
  result = (uint64_t *) ((arg1)->uTable);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint64_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StaticWavetable_dTable_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::StaticWavetable *arg1 = (SynthLab::StaticWavetable *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("SynthLab::StaticWavetable::dTable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::StaticWavetable::dTable",1,"SynthLab::StaticWavetable *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::StaticWavetable::dTable",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__StaticWavetable,0))){
    SWIG_fail_ptr("StaticWavetable_dTable_set",1,SWIGTYPE_p_SynthLab__StaticWavetable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("StaticWavetable_dTable_set",2,SWIGTYPE_p_double);
  }
  
  if (arg1) (arg1)->dTable = (double const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StaticWavetable_dTable_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::StaticWavetable *arg1 = (SynthLab::StaticWavetable *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::StaticWavetable::dTable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::StaticWavetable::dTable",1,"SynthLab::StaticWavetable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__StaticWavetable,0))){
    SWIG_fail_ptr("StaticWavetable_dTable_get",1,SWIGTYPE_p_SynthLab__StaticWavetable);
  }
  
  result = (double *) ((arg1)->dTable);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StaticWavetable_tableLength_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::StaticWavetable *arg1 = (SynthLab::StaticWavetable *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::StaticWavetable::tableLength",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::StaticWavetable::tableLength",1,"SynthLab::StaticWavetable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::StaticWavetable::tableLength",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__StaticWavetable,0))){
    SWIG_fail_ptr("StaticWavetable_tableLength_set",1,SWIGTYPE_p_SynthLab__StaticWavetable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("StaticWavetable_tableLength_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->tableLength = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StaticWavetable_tableLength_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::StaticWavetable *arg1 = (SynthLab::StaticWavetable *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::StaticWavetable::tableLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::StaticWavetable::tableLength",1,"SynthLab::StaticWavetable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__StaticWavetable,0))){
    SWIG_fail_ptr("StaticWavetable_tableLength_get",1,SWIGTYPE_p_SynthLab__StaticWavetable);
  }
  
  result =  ((arg1)->tableLength);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StaticWavetable_wrapMask_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::StaticWavetable *arg1 = (SynthLab::StaticWavetable *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::StaticWavetable::wrapMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::StaticWavetable::wrapMask",1,"SynthLab::StaticWavetable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::StaticWavetable::wrapMask",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__StaticWavetable,0))){
    SWIG_fail_ptr("StaticWavetable_wrapMask_set",1,SWIGTYPE_p_SynthLab__StaticWavetable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("StaticWavetable_wrapMask_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->wrapMask = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StaticWavetable_wrapMask_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::StaticWavetable *arg1 = (SynthLab::StaticWavetable *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::StaticWavetable::wrapMask",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::StaticWavetable::wrapMask",1,"SynthLab::StaticWavetable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__StaticWavetable,0))){
    SWIG_fail_ptr("StaticWavetable_wrapMask_get",1,SWIGTYPE_p_SynthLab__StaticWavetable);
  }
  
  result =  ((arg1)->wrapMask);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StaticWavetable_outputComp_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::StaticWavetable *arg1 = (SynthLab::StaticWavetable *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::StaticWavetable::outputComp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::StaticWavetable::outputComp",1,"SynthLab::StaticWavetable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::StaticWavetable::outputComp",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__StaticWavetable,0))){
    SWIG_fail_ptr("StaticWavetable_outputComp_set",1,SWIGTYPE_p_SynthLab__StaticWavetable);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->outputComp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StaticWavetable_outputComp_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::StaticWavetable *arg1 = (SynthLab::StaticWavetable *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::StaticWavetable::outputComp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::StaticWavetable::outputComp",1,"SynthLab::StaticWavetable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__StaticWavetable,0))){
    SWIG_fail_ptr("StaticWavetable_outputComp_get",1,SWIGTYPE_p_SynthLab__StaticWavetable);
  }
  
  result = (double) ((arg1)->outputComp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StaticWavetable_tableFs_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::StaticWavetable *arg1 = (SynthLab::StaticWavetable *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::StaticWavetable::tableFs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::StaticWavetable::tableFs",1,"SynthLab::StaticWavetable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::StaticWavetable::tableFs",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__StaticWavetable,0))){
    SWIG_fail_ptr("StaticWavetable_tableFs_set",1,SWIGTYPE_p_SynthLab__StaticWavetable);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->tableFs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StaticWavetable_tableFs_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::StaticWavetable *arg1 = (SynthLab::StaticWavetable *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::StaticWavetable::tableFs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::StaticWavetable::tableFs",1,"SynthLab::StaticWavetable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__StaticWavetable,0))){
    SWIG_fail_ptr("StaticWavetable_tableFs_get",1,SWIGTYPE_p_SynthLab__StaticWavetable);
  }
  
  result = (double) ((arg1)->tableFs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StaticWavetable_waveformName_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::StaticWavetable *arg1 = (SynthLab::StaticWavetable *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("SynthLab::StaticWavetable::waveformName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::StaticWavetable::waveformName",1,"SynthLab::StaticWavetable *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::StaticWavetable::waveformName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__StaticWavetable,0))){
    SWIG_fail_ptr("StaticWavetable_waveformName_set",1,SWIGTYPE_p_SynthLab__StaticWavetable);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if (arg2) {
      arg1->waveformName = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->waveformName, (const char *)arg2);
    } else {
      arg1->waveformName = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StaticWavetable_waveformName_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::StaticWavetable *arg1 = (SynthLab::StaticWavetable *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("SynthLab::StaticWavetable::waveformName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::StaticWavetable::waveformName",1,"SynthLab::StaticWavetable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__StaticWavetable,0))){
    SWIG_fail_ptr("StaticWavetable_waveformName_get",1,SWIGTYPE_p_SynthLab__StaticWavetable);
  }
  
  result = (char *) ((arg1)->waveformName);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StaticWavetable(void *obj) {
SynthLab::StaticWavetable *arg1 = (SynthLab::StaticWavetable *) obj;
delete arg1;
}
static int _proxy__wrap_new_StaticWavetable(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StaticWavetable);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StaticWavetable_attributes[] = {
    { "uTable", _wrap_StaticWavetable_uTable_get, _wrap_StaticWavetable_uTable_set },
    { "dTable", _wrap_StaticWavetable_dTable_get, _wrap_StaticWavetable_dTable_set },
    { "tableLength", _wrap_StaticWavetable_tableLength_get, _wrap_StaticWavetable_tableLength_set },
    { "wrapMask", _wrap_StaticWavetable_wrapMask_get, _wrap_StaticWavetable_wrapMask_set },
    { "outputComp", _wrap_StaticWavetable_outputComp_get, _wrap_StaticWavetable_outputComp_set },
    { "tableFs", _wrap_StaticWavetable_tableFs_get, _wrap_StaticWavetable_tableFs_set },
    { "waveformName", _wrap_StaticWavetable_waveformName_get, _wrap_StaticWavetable_waveformName_set },
    {0,0,0}
};
static swig_lua_method swig_StaticWavetable_methods[]= {
    {0,0}
};
static swig_lua_method swig_StaticWavetable_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StaticWavetable_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StaticWavetable_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StaticWavetable_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StaticWavetable_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StaticWavetable_Sf_SwigStatic = {
    "StaticWavetable",
    swig_StaticWavetable_Sf_SwigStatic_methods,
    swig_StaticWavetable_Sf_SwigStatic_attributes,
    swig_StaticWavetable_Sf_SwigStatic_constants,
    swig_StaticWavetable_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StaticWavetable_bases[] = {0};
static const char *swig_StaticWavetable_base_names[] = {0};
static swig_lua_class _wrap_class_StaticWavetable = { "StaticWavetable", "StaticWavetable", &SWIGTYPE_p_SynthLab__StaticWavetable,_proxy__wrap_new_StaticWavetable, swig_delete_StaticWavetable, swig_StaticWavetable_methods, swig_StaticWavetable_attributes, &swig_StaticWavetable_Sf_SwigStatic, swig_StaticWavetable_meta, swig_StaticWavetable_bases, swig_StaticWavetable_base_names };

static int _wrap_new_DynamicWavetable__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DynamicWavetable *result = 0 ;
  
  SWIG_check_num_args("SynthLab::DynamicWavetable::DynamicWavetable",0,0)
  result = (SynthLab::DynamicWavetable *)new SynthLab::DynamicWavetable();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__DynamicWavetable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DynamicWavetable__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::shared_ptr< double > arg1 ;
  uint32_t arg2 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< double > *argp1 ;
  uint32_t *argp2 ;
  SynthLab::DynamicWavetable *result = 0 ;
  
  SWIG_check_num_args("SynthLab::DynamicWavetable::DynamicWavetable",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::DynamicWavetable::DynamicWavetable",1,"std::shared_ptr< double >");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DynamicWavetable::DynamicWavetable",2,"uint32_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SynthLab::DynamicWavetable::DynamicWavetable",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::DynamicWavetable::DynamicWavetable",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SynthLab::DynamicWavetable::DynamicWavetable",5,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__shared_ptrT_double_t,0))){
    SWIG_fail_ptr("new_DynamicWavetable",1,SWIGTYPE_p_std__shared_ptrT_double_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_DynamicWavetable",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (SynthLab::DynamicWavetable *)new SynthLab::DynamicWavetable(arg1,arg2,(char const *)arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__DynamicWavetable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DynamicWavetable__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::shared_ptr< double > arg1 ;
  uint32_t arg2 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  std::shared_ptr< double > *argp1 ;
  uint32_t *argp2 ;
  SynthLab::DynamicWavetable *result = 0 ;
  
  SWIG_check_num_args("SynthLab::DynamicWavetable::DynamicWavetable",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::DynamicWavetable::DynamicWavetable",1,"std::shared_ptr< double >");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DynamicWavetable::DynamicWavetable",2,"uint32_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SynthLab::DynamicWavetable::DynamicWavetable",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::DynamicWavetable::DynamicWavetable",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__shared_ptrT_double_t,0))){
    SWIG_fail_ptr("new_DynamicWavetable",1,SWIGTYPE_p_std__shared_ptrT_double_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_DynamicWavetable",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (SynthLab::DynamicWavetable *)new SynthLab::DynamicWavetable(arg1,arg2,(char const *)arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__DynamicWavetable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DynamicWavetable__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::shared_ptr< double > arg1 ;
  uint32_t arg2 ;
  char *arg3 = (char *) 0 ;
  std::shared_ptr< double > *argp1 ;
  uint32_t *argp2 ;
  SynthLab::DynamicWavetable *result = 0 ;
  
  SWIG_check_num_args("SynthLab::DynamicWavetable::DynamicWavetable",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::DynamicWavetable::DynamicWavetable",1,"std::shared_ptr< double >");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DynamicWavetable::DynamicWavetable",2,"uint32_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SynthLab::DynamicWavetable::DynamicWavetable",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__shared_ptrT_double_t,0))){
    SWIG_fail_ptr("new_DynamicWavetable",1,SWIGTYPE_p_std__shared_ptrT_double_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_DynamicWavetable",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (SynthLab::DynamicWavetable *)new SynthLab::DynamicWavetable(arg1,arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__DynamicWavetable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DynamicWavetable(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DynamicWavetable__SWIG_0(L);
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_DynamicWavetable__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DynamicWavetable__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_DynamicWavetable__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DynamicWavetable'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::DynamicWavetable::DynamicWavetable()\n"
    "    SynthLab::DynamicWavetable::DynamicWavetable(std::shared_ptr< double >,uint32_t,char const *,double,double)\n"
    "    SynthLab::DynamicWavetable::DynamicWavetable(std::shared_ptr< double >,uint32_t,char const *,double)\n"
    "    SynthLab::DynamicWavetable::DynamicWavetable(std::shared_ptr< double >,uint32_t,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_DynamicWavetable_table_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DynamicWavetable *arg1 = (SynthLab::DynamicWavetable *) 0 ;
  std::shared_ptr< double > arg2 ;
  std::shared_ptr< double > *argp2 ;
  
  SWIG_check_num_args("SynthLab::DynamicWavetable::table",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DynamicWavetable::table",1,"SynthLab::DynamicWavetable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DynamicWavetable::table",2,"std::shared_ptr< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DynamicWavetable,0))){
    SWIG_fail_ptr("DynamicWavetable_table_set",1,SWIGTYPE_p_SynthLab__DynamicWavetable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__shared_ptrT_double_t,0))){
    SWIG_fail_ptr("DynamicWavetable_table_set",2,SWIGTYPE_p_std__shared_ptrT_double_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->table = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicWavetable_table_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DynamicWavetable *arg1 = (SynthLab::DynamicWavetable *) 0 ;
  std::shared_ptr< double > result;
  
  SWIG_check_num_args("SynthLab::DynamicWavetable::table",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DynamicWavetable::table",1,"SynthLab::DynamicWavetable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DynamicWavetable,0))){
    SWIG_fail_ptr("DynamicWavetable_table_get",1,SWIGTYPE_p_SynthLab__DynamicWavetable);
  }
  
  result =  ((arg1)->table);
  {
    std::shared_ptr< double > * resultptr = new std::shared_ptr< double >((const std::shared_ptr< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicWavetable_tableLength_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DynamicWavetable *arg1 = (SynthLab::DynamicWavetable *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::DynamicWavetable::tableLength",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DynamicWavetable::tableLength",1,"SynthLab::DynamicWavetable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DynamicWavetable::tableLength",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DynamicWavetable,0))){
    SWIG_fail_ptr("DynamicWavetable_tableLength_set",1,SWIGTYPE_p_SynthLab__DynamicWavetable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("DynamicWavetable_tableLength_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->tableLength = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicWavetable_tableLength_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DynamicWavetable *arg1 = (SynthLab::DynamicWavetable *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::DynamicWavetable::tableLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DynamicWavetable::tableLength",1,"SynthLab::DynamicWavetable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DynamicWavetable,0))){
    SWIG_fail_ptr("DynamicWavetable_tableLength_get",1,SWIGTYPE_p_SynthLab__DynamicWavetable);
  }
  
  result =  ((arg1)->tableLength);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicWavetable_wrapMask_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DynamicWavetable *arg1 = (SynthLab::DynamicWavetable *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::DynamicWavetable::wrapMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DynamicWavetable::wrapMask",1,"SynthLab::DynamicWavetable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DynamicWavetable::wrapMask",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DynamicWavetable,0))){
    SWIG_fail_ptr("DynamicWavetable_wrapMask_set",1,SWIGTYPE_p_SynthLab__DynamicWavetable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("DynamicWavetable_wrapMask_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->wrapMask = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicWavetable_wrapMask_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DynamicWavetable *arg1 = (SynthLab::DynamicWavetable *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::DynamicWavetable::wrapMask",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DynamicWavetable::wrapMask",1,"SynthLab::DynamicWavetable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DynamicWavetable,0))){
    SWIG_fail_ptr("DynamicWavetable_wrapMask_get",1,SWIGTYPE_p_SynthLab__DynamicWavetable);
  }
  
  result =  ((arg1)->wrapMask);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicWavetable_outputComp_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DynamicWavetable *arg1 = (SynthLab::DynamicWavetable *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::DynamicWavetable::outputComp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DynamicWavetable::outputComp",1,"SynthLab::DynamicWavetable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::DynamicWavetable::outputComp",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DynamicWavetable,0))){
    SWIG_fail_ptr("DynamicWavetable_outputComp_set",1,SWIGTYPE_p_SynthLab__DynamicWavetable);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->outputComp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicWavetable_outputComp_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DynamicWavetable *arg1 = (SynthLab::DynamicWavetable *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::DynamicWavetable::outputComp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DynamicWavetable::outputComp",1,"SynthLab::DynamicWavetable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DynamicWavetable,0))){
    SWIG_fail_ptr("DynamicWavetable_outputComp_get",1,SWIGTYPE_p_SynthLab__DynamicWavetable);
  }
  
  result = (double) ((arg1)->outputComp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicWavetable_tableFs_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DynamicWavetable *arg1 = (SynthLab::DynamicWavetable *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::DynamicWavetable::tableFs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DynamicWavetable::tableFs",1,"SynthLab::DynamicWavetable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::DynamicWavetable::tableFs",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DynamicWavetable,0))){
    SWIG_fail_ptr("DynamicWavetable_tableFs_set",1,SWIGTYPE_p_SynthLab__DynamicWavetable);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->tableFs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicWavetable_tableFs_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DynamicWavetable *arg1 = (SynthLab::DynamicWavetable *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::DynamicWavetable::tableFs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DynamicWavetable::tableFs",1,"SynthLab::DynamicWavetable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DynamicWavetable,0))){
    SWIG_fail_ptr("DynamicWavetable_tableFs_get",1,SWIGTYPE_p_SynthLab__DynamicWavetable);
  }
  
  result = (double) ((arg1)->tableFs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicWavetable_waveformName_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DynamicWavetable *arg1 = (SynthLab::DynamicWavetable *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("SynthLab::DynamicWavetable::waveformName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DynamicWavetable::waveformName",1,"SynthLab::DynamicWavetable *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::DynamicWavetable::waveformName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DynamicWavetable,0))){
    SWIG_fail_ptr("DynamicWavetable_waveformName_set",1,SWIGTYPE_p_SynthLab__DynamicWavetable);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if (arg2) {
      arg1->waveformName = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->waveformName, (const char *)arg2);
    } else {
      arg1->waveformName = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicWavetable_waveformName_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DynamicWavetable *arg1 = (SynthLab::DynamicWavetable *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("SynthLab::DynamicWavetable::waveformName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DynamicWavetable::waveformName",1,"SynthLab::DynamicWavetable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DynamicWavetable,0))){
    SWIG_fail_ptr("DynamicWavetable_waveformName_get",1,SWIGTYPE_p_SynthLab__DynamicWavetable);
  }
  
  result = (char *) ((arg1)->waveformName);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DynamicWavetable(void *obj) {
SynthLab::DynamicWavetable *arg1 = (SynthLab::DynamicWavetable *) obj;
delete arg1;
}
static int _proxy__wrap_new_DynamicWavetable(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DynamicWavetable);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DynamicWavetable_attributes[] = {
    { "table", _wrap_DynamicWavetable_table_get, _wrap_DynamicWavetable_table_set },
    { "tableLength", _wrap_DynamicWavetable_tableLength_get, _wrap_DynamicWavetable_tableLength_set },
    { "wrapMask", _wrap_DynamicWavetable_wrapMask_get, _wrap_DynamicWavetable_wrapMask_set },
    { "outputComp", _wrap_DynamicWavetable_outputComp_get, _wrap_DynamicWavetable_outputComp_set },
    { "tableFs", _wrap_DynamicWavetable_tableFs_get, _wrap_DynamicWavetable_tableFs_set },
    { "waveformName", _wrap_DynamicWavetable_waveformName_get, _wrap_DynamicWavetable_waveformName_set },
    {0,0,0}
};
static swig_lua_method swig_DynamicWavetable_methods[]= {
    {0,0}
};
static swig_lua_method swig_DynamicWavetable_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DynamicWavetable_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DynamicWavetable_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DynamicWavetable_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DynamicWavetable_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DynamicWavetable_Sf_SwigStatic = {
    "DynamicWavetable",
    swig_DynamicWavetable_Sf_SwigStatic_methods,
    swig_DynamicWavetable_Sf_SwigStatic_attributes,
    swig_DynamicWavetable_Sf_SwigStatic_constants,
    swig_DynamicWavetable_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DynamicWavetable_bases[] = {0};
static const char *swig_DynamicWavetable_base_names[] = {0};
static swig_lua_class _wrap_class_DynamicWavetable = { "DynamicWavetable", "DynamicWavetable", &SWIGTYPE_p_SynthLab__DynamicWavetable,_proxy__wrap_new_DynamicWavetable, swig_delete_DynamicWavetable, swig_DynamicWavetable_methods, swig_DynamicWavetable_attributes, &swig_DynamicWavetable_Sf_SwigStatic, swig_DynamicWavetable_meta, swig_DynamicWavetable_bases, swig_DynamicWavetable_base_names };

static int _wrap_new_WavetableDatabase(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WavetableDatabase *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WavetableDatabase::WavetableDatabase",0,0)
  result = (SynthLab::WavetableDatabase *)new SynthLab::WavetableDatabase();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__WavetableDatabase,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WavetableDatabase_getTableSource__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WavetableDatabase *arg1 = (SynthLab::WavetableDatabase *) 0 ;
  char *arg2 = (char *) 0 ;
  SynthLab::IWavetableSource *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WavetableDatabase::getTableSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WavetableDatabase::getTableSource",1,"SynthLab::WavetableDatabase *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::WavetableDatabase::getTableSource",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WavetableDatabase,0))){
    SWIG_fail_ptr("WavetableDatabase_getTableSource",1,SWIGTYPE_p_SynthLab__WavetableDatabase);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (SynthLab::IWavetableSource *)(arg1)->getTableSource((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__IWavetableSource,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WavetableDatabase_getTableSource__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WavetableDatabase *arg1 = (SynthLab::WavetableDatabase *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  SynthLab::IWavetableSource *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WavetableDatabase::getTableSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WavetableDatabase::getTableSource",1,"SynthLab::WavetableDatabase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WavetableDatabase::getTableSource",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WavetableDatabase,0))){
    SWIG_fail_ptr("WavetableDatabase_getTableSource",1,SWIGTYPE_p_SynthLab__WavetableDatabase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WavetableDatabase_getTableSource",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (SynthLab::IWavetableSource *)(arg1)->getTableSource(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__IWavetableSource,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WavetableDatabase_getTableSource(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__WavetableDatabase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WavetableDatabase_getTableSource__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__WavetableDatabase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_WavetableDatabase_getTableSource__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WavetableDatabase_getTableSource'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::WavetableDatabase::getTableSource(char const *)\n"
    "    SynthLab::WavetableDatabase::getTableSource(uint32_t)\n");
  lua_error(L);return 0;
}


static int _wrap_WavetableDatabase_addTableSource(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WavetableDatabase *arg1 = (SynthLab::WavetableDatabase *) 0 ;
  char *arg2 = (char *) 0 ;
  SynthLab::IWavetableSource *arg3 = (SynthLab::IWavetableSource *) 0 ;
  uint32_t *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WavetableDatabase::addTableSource",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WavetableDatabase::addTableSource",1,"SynthLab::WavetableDatabase *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::WavetableDatabase::addTableSource",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SynthLab::WavetableDatabase::addTableSource",3,"SynthLab::IWavetableSource *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SynthLab::WavetableDatabase::addTableSource",4,"uint32_t &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WavetableDatabase,0))){
    SWIG_fail_ptr("WavetableDatabase_addTableSource",1,SWIGTYPE_p_SynthLab__WavetableDatabase);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SynthLab__IWavetableSource,0))){
    SWIG_fail_ptr("WavetableDatabase_addTableSource",3,SWIGTYPE_p_SynthLab__IWavetableSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WavetableDatabase_addTableSource",4,SWIGTYPE_p_uint32_t);
  }
  
  result = (bool)(arg1)->addTableSource((char const *)arg2,arg3,*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WavetableDatabase_removeTableSource(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WavetableDatabase *arg1 = (SynthLab::WavetableDatabase *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WavetableDatabase::removeTableSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WavetableDatabase::removeTableSource",1,"SynthLab::WavetableDatabase *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::WavetableDatabase::removeTableSource",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WavetableDatabase,0))){
    SWIG_fail_ptr("WavetableDatabase_removeTableSource",1,SWIGTYPE_p_SynthLab__WavetableDatabase);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->removeTableSource((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WavetableDatabase_clearTableSources(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WavetableDatabase *arg1 = (SynthLab::WavetableDatabase *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WavetableDatabase::clearTableSources",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WavetableDatabase::clearTableSources",1,"SynthLab::WavetableDatabase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WavetableDatabase,0))){
    SWIG_fail_ptr("WavetableDatabase_clearTableSources",1,SWIGTYPE_p_SynthLab__WavetableDatabase);
  }
  
  result = (bool)(arg1)->clearTableSources();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WavetableDatabase_getWaveformIndex(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WavetableDatabase *arg1 = (SynthLab::WavetableDatabase *) 0 ;
  char *arg2 = (char *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("SynthLab::WavetableDatabase::getWaveformIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WavetableDatabase::getWaveformIndex",1,"SynthLab::WavetableDatabase *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::WavetableDatabase::getWaveformIndex",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WavetableDatabase,0))){
    SWIG_fail_ptr("WavetableDatabase_getWaveformIndex",1,SWIGTYPE_p_SynthLab__WavetableDatabase);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->getWaveformIndex((char const *)arg2);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WavetableDatabase_getIWavetableDatabase(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WavetableDatabase *arg1 = (SynthLab::WavetableDatabase *) 0 ;
  SynthLab::IWavetableDatabase *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WavetableDatabase::getIWavetableDatabase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WavetableDatabase::getIWavetableDatabase",1,"SynthLab::WavetableDatabase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WavetableDatabase,0))){
    SWIG_fail_ptr("WavetableDatabase_getIWavetableDatabase",1,SWIGTYPE_p_SynthLab__WavetableDatabase);
  }
  
  result = (SynthLab::IWavetableDatabase *)(arg1)->getIWavetableDatabase();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__IWavetableDatabase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WavetableDatabase(void *obj) {
SynthLab::WavetableDatabase *arg1 = (SynthLab::WavetableDatabase *) obj;
delete arg1;
}
static int _proxy__wrap_new_WavetableDatabase(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WavetableDatabase);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WavetableDatabase_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WavetableDatabase_methods[]= {
    { "getTableSource", _wrap_WavetableDatabase_getTableSource},
    { "addTableSource", _wrap_WavetableDatabase_addTableSource},
    { "removeTableSource", _wrap_WavetableDatabase_removeTableSource},
    { "clearTableSources", _wrap_WavetableDatabase_clearTableSources},
    { "getWaveformIndex", _wrap_WavetableDatabase_getWaveformIndex},
    { "getIWavetableDatabase", _wrap_WavetableDatabase_getIWavetableDatabase},
    {0,0}
};
static swig_lua_method swig_WavetableDatabase_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WavetableDatabase_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WavetableDatabase_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WavetableDatabase_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WavetableDatabase_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WavetableDatabase_Sf_SwigStatic = {
    "WavetableDatabase",
    swig_WavetableDatabase_Sf_SwigStatic_methods,
    swig_WavetableDatabase_Sf_SwigStatic_attributes,
    swig_WavetableDatabase_Sf_SwigStatic_constants,
    swig_WavetableDatabase_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WavetableDatabase_bases[] = {0,0};
static const char *swig_WavetableDatabase_base_names[] = {"SynthLab::IWavetableDatabase *",0};
static swig_lua_class _wrap_class_WavetableDatabase = { "WavetableDatabase", "WavetableDatabase", &SWIGTYPE_p_SynthLab__WavetableDatabase,_proxy__wrap_new_WavetableDatabase, swig_delete_WavetableDatabase, swig_WavetableDatabase_methods, swig_WavetableDatabase_attributes, &swig_WavetableDatabase_Sf_SwigStatic, swig_WavetableDatabase_meta, swig_WavetableDatabase_bases, swig_WavetableDatabase_base_names };

static int _wrap_new_PCMSampleDatabase(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSampleDatabase *result = 0 ;
  
  SWIG_check_num_args("SynthLab::PCMSampleDatabase::PCMSampleDatabase",0,0)
  result = (SynthLab::PCMSampleDatabase *)new SynthLab::PCMSampleDatabase();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__PCMSampleDatabase,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSampleDatabase_getSampleSource(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSampleDatabase *arg1 = (SynthLab::PCMSampleDatabase *) 0 ;
  char *arg2 = (char *) 0 ;
  SynthLab::IPCMSampleSource *result = 0 ;
  
  SWIG_check_num_args("SynthLab::PCMSampleDatabase::getSampleSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSampleDatabase::getSampleSource",1,"SynthLab::PCMSampleDatabase *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::PCMSampleDatabase::getSampleSource",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSampleDatabase,0))){
    SWIG_fail_ptr("PCMSampleDatabase_getSampleSource",1,SWIGTYPE_p_SynthLab__PCMSampleDatabase);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (SynthLab::IPCMSampleSource *)(arg1)->getSampleSource((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__IPCMSampleSource,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSampleDatabase_addSampleSource(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSampleDatabase *arg1 = (SynthLab::PCMSampleDatabase *) 0 ;
  char *arg2 = (char *) 0 ;
  SynthLab::IPCMSampleSource *arg3 = (SynthLab::IPCMSampleSource *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::PCMSampleDatabase::addSampleSource",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSampleDatabase::addSampleSource",1,"SynthLab::PCMSampleDatabase *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::PCMSampleDatabase::addSampleSource",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SynthLab::PCMSampleDatabase::addSampleSource",3,"SynthLab::IPCMSampleSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSampleDatabase,0))){
    SWIG_fail_ptr("PCMSampleDatabase_addSampleSource",1,SWIGTYPE_p_SynthLab__PCMSampleDatabase);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SynthLab__IPCMSampleSource,0))){
    SWIG_fail_ptr("PCMSampleDatabase_addSampleSource",3,SWIGTYPE_p_SynthLab__IPCMSampleSource);
  }
  
  result = (bool)(arg1)->addSampleSource((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSampleDatabase_removeSampleSource(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSampleDatabase *arg1 = (SynthLab::PCMSampleDatabase *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::PCMSampleDatabase::removeSampleSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSampleDatabase::removeSampleSource",1,"SynthLab::PCMSampleDatabase *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::PCMSampleDatabase::removeSampleSource",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSampleDatabase,0))){
    SWIG_fail_ptr("PCMSampleDatabase_removeSampleSource",1,SWIGTYPE_p_SynthLab__PCMSampleDatabase);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->removeSampleSource((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSampleDatabase_clearSampleSources(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSampleDatabase *arg1 = (SynthLab::PCMSampleDatabase *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::PCMSampleDatabase::clearSampleSources",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSampleDatabase::clearSampleSources",1,"SynthLab::PCMSampleDatabase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSampleDatabase,0))){
    SWIG_fail_ptr("PCMSampleDatabase_clearSampleSources",1,SWIGTYPE_p_SynthLab__PCMSampleDatabase);
  }
  
  result = (bool)(arg1)->clearSampleSources();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSampleDatabase_getIPCMSampleDatabase(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSampleDatabase *arg1 = (SynthLab::PCMSampleDatabase *) 0 ;
  SynthLab::IPCMSampleDatabase *result = 0 ;
  
  SWIG_check_num_args("SynthLab::PCMSampleDatabase::getIPCMSampleDatabase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSampleDatabase::getIPCMSampleDatabase",1,"SynthLab::PCMSampleDatabase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSampleDatabase,0))){
    SWIG_fail_ptr("PCMSampleDatabase_getIPCMSampleDatabase",1,SWIGTYPE_p_SynthLab__PCMSampleDatabase);
  }
  
  result = (SynthLab::IPCMSampleDatabase *)(arg1)->getIPCMSampleDatabase();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__IPCMSampleDatabase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PCMSampleDatabase(void *obj) {
SynthLab::PCMSampleDatabase *arg1 = (SynthLab::PCMSampleDatabase *) obj;
delete arg1;
}
static int _proxy__wrap_new_PCMSampleDatabase(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PCMSampleDatabase);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PCMSampleDatabase_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PCMSampleDatabase_methods[]= {
    { "getSampleSource", _wrap_PCMSampleDatabase_getSampleSource},
    { "addSampleSource", _wrap_PCMSampleDatabase_addSampleSource},
    { "removeSampleSource", _wrap_PCMSampleDatabase_removeSampleSource},
    { "clearSampleSources", _wrap_PCMSampleDatabase_clearSampleSources},
    { "getIPCMSampleDatabase", _wrap_PCMSampleDatabase_getIPCMSampleDatabase},
    {0,0}
};
static swig_lua_method swig_PCMSampleDatabase_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PCMSampleDatabase_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PCMSampleDatabase_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PCMSampleDatabase_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PCMSampleDatabase_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PCMSampleDatabase_Sf_SwigStatic = {
    "PCMSampleDatabase",
    swig_PCMSampleDatabase_Sf_SwigStatic_methods,
    swig_PCMSampleDatabase_Sf_SwigStatic_attributes,
    swig_PCMSampleDatabase_Sf_SwigStatic_constants,
    swig_PCMSampleDatabase_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PCMSampleDatabase_bases[] = {0,0};
static const char *swig_PCMSampleDatabase_base_names[] = {"SynthLab::IPCMSampleDatabase *",0};
static swig_lua_class _wrap_class_PCMSampleDatabase = { "PCMSampleDatabase", "PCMSampleDatabase", &SWIGTYPE_p_SynthLab__PCMSampleDatabase,_proxy__wrap_new_PCMSampleDatabase, swig_delete_PCMSampleDatabase, swig_PCMSampleDatabase_methods, swig_PCMSampleDatabase_attributes, &swig_PCMSampleDatabase_Sf_SwigStatic, swig_PCMSampleDatabase_meta, swig_PCMSampleDatabase_bases, swig_PCMSampleDatabase_base_names };

static int _wrap_new_SynthProcessInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthProcessInfo *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthProcessInfo::SynthProcessInfo",0,0)
  result = (SynthLab::SynthProcessInfo *)new SynthLab::SynthProcessInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__SynthProcessInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SynthProcessInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t *argp1 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  SynthLab::SynthProcessInfo *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthProcessInfo::SynthProcessInfo",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::SynthProcessInfo::SynthProcessInfo",1,"uint32_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthProcessInfo::SynthProcessInfo",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::SynthProcessInfo::SynthProcessInfo",3,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_SynthProcessInfo",1,SWIGTYPE_p_uint32_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_SynthProcessInfo",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_SynthProcessInfo",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  result = (SynthLab::SynthProcessInfo *)new SynthLab::SynthProcessInfo(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__SynthProcessInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SynthProcessInfo(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SynthProcessInfo__SWIG_0(L);
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_SynthProcessInfo__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SynthProcessInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::SynthProcessInfo::SynthProcessInfo()\n"
    "    SynthLab::SynthProcessInfo::SynthProcessInfo(uint32_t,uint32_t,uint32_t)\n");
  lua_error(L);return 0;
}


static int _wrap_SynthProcessInfo_pushMidiEvent(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthProcessInfo *arg1 = (SynthLab::SynthProcessInfo *) 0 ;
  midiEvent arg2 ;
  midiEvent *argp2 ;
  
  SWIG_check_num_args("SynthLab::SynthProcessInfo::pushMidiEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthProcessInfo::pushMidiEvent",1,"SynthLab::SynthProcessInfo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthProcessInfo::pushMidiEvent",2,"midiEvent");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthProcessInfo,0))){
    SWIG_fail_ptr("SynthProcessInfo_pushMidiEvent",1,SWIGTYPE_p_SynthLab__SynthProcessInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_midiEvent,0))){
    SWIG_fail_ptr("SynthProcessInfo_pushMidiEvent",2,SWIGTYPE_p_midiEvent);
  }
  arg2 = *argp2;
  
  (arg1)->pushMidiEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthProcessInfo_clearMidiEvents(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthProcessInfo *arg1 = (SynthLab::SynthProcessInfo *) 0 ;
  
  SWIG_check_num_args("SynthLab::SynthProcessInfo::clearMidiEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthProcessInfo::clearMidiEvents",1,"SynthLab::SynthProcessInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthProcessInfo,0))){
    SWIG_fail_ptr("SynthProcessInfo_clearMidiEvents",1,SWIGTYPE_p_SynthLab__SynthProcessInfo);
  }
  
  (arg1)->clearMidiEvents();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthProcessInfo_getMidiEventCount(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthProcessInfo *arg1 = (SynthLab::SynthProcessInfo *) 0 ;
  uint64_t result;
  
  SWIG_check_num_args("SynthLab::SynthProcessInfo::getMidiEventCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthProcessInfo::getMidiEventCount",1,"SynthLab::SynthProcessInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthProcessInfo,0))){
    SWIG_fail_ptr("SynthProcessInfo_getMidiEventCount",1,SWIGTYPE_p_SynthLab__SynthProcessInfo);
  }
  
  result = (arg1)->getMidiEventCount();
  {
    uint64_t * resultptr = new uint64_t((const uint64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthProcessInfo_getMidiEvent(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthProcessInfo *arg1 = (SynthLab::SynthProcessInfo *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  midiEvent *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthProcessInfo::getMidiEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthProcessInfo::getMidiEvent",1,"SynthLab::SynthProcessInfo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthProcessInfo::getMidiEvent",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthProcessInfo,0))){
    SWIG_fail_ptr("SynthProcessInfo_getMidiEvent",1,SWIGTYPE_p_SynthLab__SynthProcessInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("SynthProcessInfo_getMidiEvent",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (midiEvent *)(arg1)->getMidiEvent(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_midiEvent,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthProcessInfo_absoluteBufferTime_Sec_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthProcessInfo *arg1 = (SynthLab::SynthProcessInfo *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthProcessInfo::absoluteBufferTime_Sec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthProcessInfo::absoluteBufferTime_Sec",1,"SynthLab::SynthProcessInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthProcessInfo::absoluteBufferTime_Sec",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthProcessInfo,0))){
    SWIG_fail_ptr("SynthProcessInfo_absoluteBufferTime_Sec_set",1,SWIGTYPE_p_SynthLab__SynthProcessInfo);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->absoluteBufferTime_Sec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthProcessInfo_absoluteBufferTime_Sec_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthProcessInfo *arg1 = (SynthLab::SynthProcessInfo *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::SynthProcessInfo::absoluteBufferTime_Sec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthProcessInfo::absoluteBufferTime_Sec",1,"SynthLab::SynthProcessInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthProcessInfo,0))){
    SWIG_fail_ptr("SynthProcessInfo_absoluteBufferTime_Sec_get",1,SWIGTYPE_p_SynthLab__SynthProcessInfo);
  }
  
  result = (double) ((arg1)->absoluteBufferTime_Sec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthProcessInfo_BPM_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthProcessInfo *arg1 = (SynthLab::SynthProcessInfo *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthProcessInfo::BPM",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthProcessInfo::BPM",1,"SynthLab::SynthProcessInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthProcessInfo::BPM",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthProcessInfo,0))){
    SWIG_fail_ptr("SynthProcessInfo_BPM_set",1,SWIGTYPE_p_SynthLab__SynthProcessInfo);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->BPM = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthProcessInfo_BPM_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthProcessInfo *arg1 = (SynthLab::SynthProcessInfo *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::SynthProcessInfo::BPM",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthProcessInfo::BPM",1,"SynthLab::SynthProcessInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthProcessInfo,0))){
    SWIG_fail_ptr("SynthProcessInfo_BPM_get",1,SWIGTYPE_p_SynthLab__SynthProcessInfo);
  }
  
  result = (double) ((arg1)->BPM);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthProcessInfo_timeSigNumerator_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthProcessInfo *arg1 = (SynthLab::SynthProcessInfo *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthProcessInfo::timeSigNumerator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthProcessInfo::timeSigNumerator",1,"SynthLab::SynthProcessInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthProcessInfo::timeSigNumerator",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthProcessInfo,0))){
    SWIG_fail_ptr("SynthProcessInfo_timeSigNumerator_set",1,SWIGTYPE_p_SynthLab__SynthProcessInfo);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->timeSigNumerator = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthProcessInfo_timeSigNumerator_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthProcessInfo *arg1 = (SynthLab::SynthProcessInfo *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::SynthProcessInfo::timeSigNumerator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthProcessInfo::timeSigNumerator",1,"SynthLab::SynthProcessInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthProcessInfo,0))){
    SWIG_fail_ptr("SynthProcessInfo_timeSigNumerator_get",1,SWIGTYPE_p_SynthLab__SynthProcessInfo);
  }
  
  result = (double) ((arg1)->timeSigNumerator);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthProcessInfo_timeSigDenomintor_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthProcessInfo *arg1 = (SynthLab::SynthProcessInfo *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::SynthProcessInfo::timeSigDenomintor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthProcessInfo::timeSigDenomintor",1,"SynthLab::SynthProcessInfo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthProcessInfo::timeSigDenomintor",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthProcessInfo,0))){
    SWIG_fail_ptr("SynthProcessInfo_timeSigDenomintor_set",1,SWIGTYPE_p_SynthLab__SynthProcessInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("SynthProcessInfo_timeSigDenomintor_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->timeSigDenomintor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthProcessInfo_timeSigDenomintor_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthProcessInfo *arg1 = (SynthLab::SynthProcessInfo *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::SynthProcessInfo::timeSigDenomintor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthProcessInfo::timeSigDenomintor",1,"SynthLab::SynthProcessInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthProcessInfo,0))){
    SWIG_fail_ptr("SynthProcessInfo_timeSigDenomintor_get",1,SWIGTYPE_p_SynthLab__SynthProcessInfo);
  }
  
  result =  ((arg1)->timeSigDenomintor);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SynthProcessInfo(void *obj) {
SynthLab::SynthProcessInfo *arg1 = (SynthLab::SynthProcessInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_SynthProcessInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SynthProcessInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SynthProcessInfo_attributes[] = {
    { "absoluteBufferTime_Sec", _wrap_SynthProcessInfo_absoluteBufferTime_Sec_get, _wrap_SynthProcessInfo_absoluteBufferTime_Sec_set },
    { "BPM", _wrap_SynthProcessInfo_BPM_get, _wrap_SynthProcessInfo_BPM_set },
    { "timeSigNumerator", _wrap_SynthProcessInfo_timeSigNumerator_get, _wrap_SynthProcessInfo_timeSigNumerator_set },
    { "timeSigDenomintor", _wrap_SynthProcessInfo_timeSigDenomintor_get, _wrap_SynthProcessInfo_timeSigDenomintor_set },
    {0,0,0}
};
static swig_lua_method swig_SynthProcessInfo_methods[]= {
    { "pushMidiEvent", _wrap_SynthProcessInfo_pushMidiEvent},
    { "clearMidiEvents", _wrap_SynthProcessInfo_clearMidiEvents},
    { "getMidiEventCount", _wrap_SynthProcessInfo_getMidiEventCount},
    { "getMidiEvent", _wrap_SynthProcessInfo_getMidiEvent},
    {0,0}
};
static swig_lua_method swig_SynthProcessInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SynthProcessInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SynthProcessInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SynthProcessInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SynthProcessInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SynthProcessInfo_Sf_SwigStatic = {
    "SynthProcessInfo",
    swig_SynthProcessInfo_Sf_SwigStatic_methods,
    swig_SynthProcessInfo_Sf_SwigStatic_attributes,
    swig_SynthProcessInfo_Sf_SwigStatic_constants,
    swig_SynthProcessInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SynthProcessInfo_bases[] = {0,0};
static const char *swig_SynthProcessInfo_base_names[] = {"SynthLab::AudioBuffer *",0};
static swig_lua_class _wrap_class_SynthProcessInfo = { "SynthProcessInfo", "SynthProcessInfo", &SWIGTYPE_p_SynthLab__SynthProcessInfo,_proxy__wrap_new_SynthProcessInfo, swig_delete_SynthProcessInfo, swig_SynthProcessInfo_methods, swig_SynthProcessInfo_attributes, &swig_SynthProcessInfo_Sf_SwigStatic, swig_SynthProcessInfo_meta, swig_SynthProcessInfo_bases, swig_SynthProcessInfo_base_names };

static int _wrap_new_MidiInputData(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MidiInputData *result = 0 ;
  
  SWIG_check_num_args("SynthLab::MidiInputData::MidiInputData",0,0)
  result = (SynthLab::MidiInputData *)new SynthLab::MidiInputData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__MidiInputData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInputData_getGlobalMIDIData(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MidiInputData *arg1 = (SynthLab::MidiInputData *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::MidiInputData::getGlobalMIDIData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MidiInputData::getGlobalMIDIData",1,"SynthLab::MidiInputData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MidiInputData::getGlobalMIDIData",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MidiInputData,0))){
    SWIG_fail_ptr("MidiInputData_getGlobalMIDIData",1,SWIGTYPE_p_SynthLab__MidiInputData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("MidiInputData_getGlobalMIDIData",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (arg1)->getGlobalMIDIData(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInputData_getCCMIDIData(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MidiInputData *arg1 = (SynthLab::MidiInputData *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::MidiInputData::getCCMIDIData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MidiInputData::getCCMIDIData",1,"SynthLab::MidiInputData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MidiInputData::getCCMIDIData",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MidiInputData,0))){
    SWIG_fail_ptr("MidiInputData_getCCMIDIData",1,SWIGTYPE_p_SynthLab__MidiInputData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("MidiInputData_getCCMIDIData",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (arg1)->getCCMIDIData(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInputData_getAuxDAWDataUINT(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MidiInputData *arg1 = (SynthLab::MidiInputData *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::MidiInputData::getAuxDAWDataUINT",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MidiInputData::getAuxDAWDataUINT",1,"SynthLab::MidiInputData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MidiInputData::getAuxDAWDataUINT",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MidiInputData,0))){
    SWIG_fail_ptr("MidiInputData_getAuxDAWDataUINT",1,SWIGTYPE_p_SynthLab__MidiInputData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("MidiInputData_getAuxDAWDataUINT",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (arg1)->getAuxDAWDataUINT(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInputData_getAuxDAWDataFloat(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MidiInputData *arg1 = (SynthLab::MidiInputData *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  float result;
  
  SWIG_check_num_args("SynthLab::MidiInputData::getAuxDAWDataFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MidiInputData::getAuxDAWDataFloat",1,"SynthLab::MidiInputData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MidiInputData::getAuxDAWDataFloat",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MidiInputData,0))){
    SWIG_fail_ptr("MidiInputData_getAuxDAWDataFloat",1,SWIGTYPE_p_SynthLab__MidiInputData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("MidiInputData_getAuxDAWDataFloat",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (float)(arg1)->getAuxDAWDataFloat(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInputData_setGlobalMIDIData(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MidiInputData *arg1 = (SynthLab::MidiInputData *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  
  SWIG_check_num_args("SynthLab::MidiInputData::setGlobalMIDIData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MidiInputData::setGlobalMIDIData",1,"SynthLab::MidiInputData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MidiInputData::setGlobalMIDIData",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::MidiInputData::setGlobalMIDIData",3,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MidiInputData,0))){
    SWIG_fail_ptr("MidiInputData_setGlobalMIDIData",1,SWIGTYPE_p_SynthLab__MidiInputData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("MidiInputData_setGlobalMIDIData",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("MidiInputData_setGlobalMIDIData",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  (arg1)->setGlobalMIDIData(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInputData_setCCMIDIData(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MidiInputData *arg1 = (SynthLab::MidiInputData *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  
  SWIG_check_num_args("SynthLab::MidiInputData::setCCMIDIData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MidiInputData::setCCMIDIData",1,"SynthLab::MidiInputData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MidiInputData::setCCMIDIData",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::MidiInputData::setCCMIDIData",3,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MidiInputData,0))){
    SWIG_fail_ptr("MidiInputData_setCCMIDIData",1,SWIGTYPE_p_SynthLab__MidiInputData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("MidiInputData_setCCMIDIData",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("MidiInputData_setCCMIDIData",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  (arg1)->setCCMIDIData(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInputData_setAuxDAWDataUINT(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MidiInputData *arg1 = (SynthLab::MidiInputData *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  
  SWIG_check_num_args("SynthLab::MidiInputData::setAuxDAWDataUINT",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MidiInputData::setAuxDAWDataUINT",1,"SynthLab::MidiInputData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MidiInputData::setAuxDAWDataUINT",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::MidiInputData::setAuxDAWDataUINT",3,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MidiInputData,0))){
    SWIG_fail_ptr("MidiInputData_setAuxDAWDataUINT",1,SWIGTYPE_p_SynthLab__MidiInputData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("MidiInputData_setAuxDAWDataUINT",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("MidiInputData_setAuxDAWDataUINT",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  (arg1)->setAuxDAWDataUINT(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInputData_setAuxDAWDataFloat(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MidiInputData *arg1 = (SynthLab::MidiInputData *) 0 ;
  uint32_t arg2 ;
  float arg3 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::MidiInputData::setAuxDAWDataFloat",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MidiInputData::setAuxDAWDataFloat",1,"SynthLab::MidiInputData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MidiInputData::setAuxDAWDataFloat",2,"uint32_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::MidiInputData::setAuxDAWDataFloat",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MidiInputData,0))){
    SWIG_fail_ptr("MidiInputData_setAuxDAWDataFloat",1,SWIGTYPE_p_SynthLab__MidiInputData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("MidiInputData_setAuxDAWDataFloat",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setAuxDAWDataFloat(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInputData_getIMIDIInputData(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MidiInputData *arg1 = (SynthLab::MidiInputData *) 0 ;
  SynthLab::IMidiInputData *result = 0 ;
  
  SWIG_check_num_args("SynthLab::MidiInputData::getIMIDIInputData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MidiInputData::getIMIDIInputData",1,"SynthLab::MidiInputData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MidiInputData,0))){
    SWIG_fail_ptr("MidiInputData_getIMIDIInputData",1,SWIGTYPE_p_SynthLab__MidiInputData);
  }
  
  result = (SynthLab::IMidiInputData *)(arg1)->getIMIDIInputData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__IMidiInputData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MidiInputData(void *obj) {
SynthLab::MidiInputData *arg1 = (SynthLab::MidiInputData *) obj;
delete arg1;
}
static int _proxy__wrap_new_MidiInputData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MidiInputData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MidiInputData_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MidiInputData_methods[]= {
    { "getGlobalMIDIData", _wrap_MidiInputData_getGlobalMIDIData},
    { "getCCMIDIData", _wrap_MidiInputData_getCCMIDIData},
    { "getAuxDAWDataUINT", _wrap_MidiInputData_getAuxDAWDataUINT},
    { "getAuxDAWDataFloat", _wrap_MidiInputData_getAuxDAWDataFloat},
    { "setGlobalMIDIData", _wrap_MidiInputData_setGlobalMIDIData},
    { "setCCMIDIData", _wrap_MidiInputData_setCCMIDIData},
    { "setAuxDAWDataUINT", _wrap_MidiInputData_setAuxDAWDataUINT},
    { "setAuxDAWDataFloat", _wrap_MidiInputData_setAuxDAWDataFloat},
    { "getIMIDIInputData", _wrap_MidiInputData_getIMIDIInputData},
    {0,0}
};
static swig_lua_method swig_MidiInputData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MidiInputData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MidiInputData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MidiInputData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MidiInputData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MidiInputData_Sf_SwigStatic = {
    "MidiInputData",
    swig_MidiInputData_Sf_SwigStatic_methods,
    swig_MidiInputData_Sf_SwigStatic_attributes,
    swig_MidiInputData_Sf_SwigStatic_constants,
    swig_MidiInputData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MidiInputData_bases[] = {0,0};
static const char *swig_MidiInputData_base_names[] = {"SynthLab::IMidiInputData *",0};
static swig_lua_class _wrap_class_MidiInputData = { "MidiInputData", "MidiInputData", &SWIGTYPE_p_SynthLab__MidiInputData,_proxy__wrap_new_MidiInputData, swig_delete_MidiInputData, swig_MidiInputData_methods, swig_MidiInputData_attributes, &swig_MidiInputData_Sf_SwigStatic, swig_MidiInputData_meta, swig_MidiInputData_bases, swig_MidiInputData_base_names };

static int _wrap_new_Modulators(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Modulators *result = 0 ;
  
  SWIG_check_num_args("SynthLab::Modulators::Modulators",0,0)
  result = (SynthLab::Modulators *)new SynthLab::Modulators();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__Modulators,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modulators_getModArrayPtr(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Modulators *arg1 = (SynthLab::Modulators *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::Modulators::getModArrayPtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Modulators::getModArrayPtr",1,"SynthLab::Modulators *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::Modulators::getModArrayPtr",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Modulators,0))){
    SWIG_fail_ptr("Modulators_getModArrayPtr",1,SWIGTYPE_p_SynthLab__Modulators);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("Modulators_getModArrayPtr",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (double *)(arg1)->getModArrayPtr(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modulators_getModValue(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Modulators *arg1 = (SynthLab::Modulators *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::Modulators::getModValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Modulators::getModValue",1,"SynthLab::Modulators *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::Modulators::getModValue",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Modulators,0))){
    SWIG_fail_ptr("Modulators_getModValue",1,SWIGTYPE_p_SynthLab__Modulators);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("Modulators_getModValue",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (double)(arg1)->getModValue(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modulators_setModValue(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Modulators *arg1 = (SynthLab::Modulators *) 0 ;
  uint32_t arg2 ;
  double arg3 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::Modulators::setModValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Modulators::setModValue",1,"SynthLab::Modulators *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::Modulators::setModValue",2,"uint32_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::Modulators::setModValue",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Modulators,0))){
    SWIG_fail_ptr("Modulators_setModValue",1,SWIGTYPE_p_SynthLab__Modulators);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("Modulators_setModValue",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setModValue(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modulators_clear(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Modulators *arg1 = (SynthLab::Modulators *) 0 ;
  
  SWIG_check_num_args("SynthLab::Modulators::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Modulators::clear",1,"SynthLab::Modulators *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Modulators,0))){
    SWIG_fail_ptr("Modulators_clear",1,SWIGTYPE_p_SynthLab__Modulators);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modulators_initInputValues(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Modulators *arg1 = (SynthLab::Modulators *) 0 ;
  
  SWIG_check_num_args("SynthLab::Modulators::initInputValues",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Modulators::initInputValues",1,"SynthLab::Modulators *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Modulators,0))){
    SWIG_fail_ptr("Modulators_initInputValues",1,SWIGTYPE_p_SynthLab__Modulators);
  }
  
  (arg1)->initInputValues();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modulators_getModulatorPtr(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Modulators *arg1 = (SynthLab::Modulators *) 0 ;
  SynthLab::IModulator *result = 0 ;
  
  SWIG_check_num_args("SynthLab::Modulators::getModulatorPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Modulators::getModulatorPtr",1,"SynthLab::Modulators *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Modulators,0))){
    SWIG_fail_ptr("Modulators_getModulatorPtr",1,SWIGTYPE_p_SynthLab__Modulators);
  }
  
  result = (SynthLab::IModulator *)(arg1)->getModulatorPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__IModulator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Modulators(void *obj) {
SynthLab::Modulators *arg1 = (SynthLab::Modulators *) obj;
delete arg1;
}
static int _proxy__wrap_new_Modulators(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Modulators);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Modulators_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Modulators_methods[]= {
    { "getModArrayPtr", _wrap_Modulators_getModArrayPtr},
    { "getModValue", _wrap_Modulators_getModValue},
    { "setModValue", _wrap_Modulators_setModValue},
    { "clear", _wrap_Modulators_clear},
    { "initInputValues", _wrap_Modulators_initInputValues},
    { "getModulatorPtr", _wrap_Modulators_getModulatorPtr},
    {0,0}
};
static swig_lua_method swig_Modulators_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Modulators_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Modulators_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Modulators_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Modulators_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Modulators_Sf_SwigStatic = {
    "Modulators",
    swig_Modulators_Sf_SwigStatic_methods,
    swig_Modulators_Sf_SwigStatic_attributes,
    swig_Modulators_Sf_SwigStatic_constants,
    swig_Modulators_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Modulators_bases[] = {0,0};
static const char *swig_Modulators_base_names[] = {"SynthLab::IModulator *",0};
static swig_lua_class _wrap_class_Modulators = { "Modulators", "Modulators", &SWIGTYPE_p_SynthLab__Modulators,_proxy__wrap_new_Modulators, swig_delete_Modulators, swig_Modulators_methods, swig_Modulators_attributes, &swig_Modulators_Sf_SwigStatic, swig_Modulators_meta, swig_Modulators_bases, swig_Modulators_base_names };

static int _wrap_ModuleCore_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCore *arg1 = (SynthLab::ModuleCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::ModuleCore::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModuleCore::reset",1,"SynthLab::ModuleCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ModuleCore::reset",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModuleCore,0))){
    SWIG_fail_ptr("ModuleCore_reset",1,SWIGTYPE_p_SynthLab__ModuleCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("ModuleCore_reset",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->reset(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleCore_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCore *arg1 = (SynthLab::ModuleCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::ModuleCore::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModuleCore::update",1,"SynthLab::ModuleCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ModuleCore::update",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModuleCore,0))){
    SWIG_fail_ptr("ModuleCore_update",1,SWIGTYPE_p_SynthLab__ModuleCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("ModuleCore_update",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->update(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleCore_render(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCore *arg1 = (SynthLab::ModuleCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::ModuleCore::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModuleCore::render",1,"SynthLab::ModuleCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ModuleCore::render",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModuleCore,0))){
    SWIG_fail_ptr("ModuleCore_render",1,SWIGTYPE_p_SynthLab__ModuleCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("ModuleCore_render",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->render(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleCore_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCore *arg1 = (SynthLab::ModuleCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::ModuleCore::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModuleCore::doNoteOn",1,"SynthLab::ModuleCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ModuleCore::doNoteOn",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModuleCore,0))){
    SWIG_fail_ptr("ModuleCore_doNoteOn",1,SWIGTYPE_p_SynthLab__ModuleCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("ModuleCore_doNoteOn",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleCore_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCore *arg1 = (SynthLab::ModuleCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::ModuleCore::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModuleCore::doNoteOff",1,"SynthLab::ModuleCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ModuleCore::doNoteOff",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModuleCore,0))){
    SWIG_fail_ptr("ModuleCore_doNoteOff",1,SWIGTYPE_p_SynthLab__ModuleCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("ModuleCore_doNoteOff",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleCore_getState(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCore *arg1 = (SynthLab::ModuleCore *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("SynthLab::ModuleCore::getState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModuleCore::getState",1,"SynthLab::ModuleCore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModuleCore,0))){
    SWIG_fail_ptr("ModuleCore_getState",1,SWIGTYPE_p_SynthLab__ModuleCore);
  }
  
  result = (arg1)->getState();
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleCore_shutdown(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCore *arg1 = (SynthLab::ModuleCore *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::ModuleCore::shutdown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModuleCore::shutdown",1,"SynthLab::ModuleCore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModuleCore,0))){
    SWIG_fail_ptr("ModuleCore_shutdown",1,SWIGTYPE_p_SynthLab__ModuleCore);
  }
  
  result = (bool)(arg1)->shutdown();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleCore_setSustainOverride(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCore *arg1 = (SynthLab::ModuleCore *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::ModuleCore::setSustainOverride",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModuleCore::setSustainOverride",1,"SynthLab::ModuleCore *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::ModuleCore::setSustainOverride",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModuleCore,0))){
    SWIG_fail_ptr("ModuleCore_setSustainOverride",1,SWIGTYPE_p_SynthLab__ModuleCore);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setSustainOverride(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleCore_setStandAloneMode(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCore *arg1 = (SynthLab::ModuleCore *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::ModuleCore::setStandAloneMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModuleCore::setStandAloneMode",1,"SynthLab::ModuleCore *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::ModuleCore::setStandAloneMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModuleCore,0))){
    SWIG_fail_ptr("ModuleCore_setStandAloneMode",1,SWIGTYPE_p_SynthLab__ModuleCore);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setStandAloneMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleCore_startGlideModulation(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCore *arg1 = (SynthLab::ModuleCore *) 0 ;
  GlideInfo *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::ModuleCore::startGlideModulation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModuleCore::startGlideModulation",1,"SynthLab::ModuleCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ModuleCore::startGlideModulation",2,"GlideInfo &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModuleCore,0))){
    SWIG_fail_ptr("ModuleCore_startGlideModulation",1,SWIGTYPE_p_SynthLab__ModuleCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GlideInfo,0))){
    SWIG_fail_ptr("ModuleCore_startGlideModulation",2,SWIGTYPE_p_GlideInfo);
  }
  
  result = (bool)(arg1)->startGlideModulation(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleCore_getModuleType(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCore *arg1 = (SynthLab::ModuleCore *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::ModuleCore::getModuleType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModuleCore::getModuleType",1,"SynthLab::ModuleCore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModuleCore,0))){
    SWIG_fail_ptr("ModuleCore_getModuleType",1,SWIGTYPE_p_SynthLab__ModuleCore);
  }
  
  result = (arg1)->getModuleType();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleCore_getModuleName(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCore *arg1 = (SynthLab::ModuleCore *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("SynthLab::ModuleCore::getModuleName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModuleCore::getModuleName",1,"SynthLab::ModuleCore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModuleCore,0))){
    SWIG_fail_ptr("ModuleCore_getModuleName",1,SWIGTYPE_p_SynthLab__ModuleCore);
  }
  
  result = (char *)(arg1)->getModuleName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleCore_getModuleHandle(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCore *arg1 = (SynthLab::ModuleCore *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("SynthLab::ModuleCore::getModuleHandle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModuleCore::getModuleHandle",1,"SynthLab::ModuleCore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModuleCore,0))){
    SWIG_fail_ptr("ModuleCore_getModuleHandle",1,SWIGTYPE_p_SynthLab__ModuleCore);
  }
  
  result = (void *)(arg1)->getModuleHandle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleCore_setModuleHandle(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCore *arg1 = (SynthLab::ModuleCore *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("SynthLab::ModuleCore::setModuleHandle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModuleCore::setModuleHandle",1,"SynthLab::ModuleCore *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::ModuleCore::setModuleHandle",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModuleCore,0))){
    SWIG_fail_ptr("ModuleCore_setModuleHandle",1,SWIGTYPE_p_SynthLab__ModuleCore);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ModuleCore_setModuleHandle");
  (arg1)->setModuleHandle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleCore_getModuleIndex(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCore *arg1 = (SynthLab::ModuleCore *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::ModuleCore::getModuleIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModuleCore::getModuleIndex",1,"SynthLab::ModuleCore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModuleCore,0))){
    SWIG_fail_ptr("ModuleCore_getModuleIndex",1,SWIGTYPE_p_SynthLab__ModuleCore);
  }
  
  result = (arg1)->getModuleIndex();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleCore_setModuleIndex(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCore *arg1 = (SynthLab::ModuleCore *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::ModuleCore::setModuleIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModuleCore::setModuleIndex",1,"SynthLab::ModuleCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ModuleCore::setModuleIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModuleCore,0))){
    SWIG_fail_ptr("ModuleCore_setModuleIndex",1,SWIGTYPE_p_SynthLab__ModuleCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("ModuleCore_setModuleIndex",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->setModuleIndex(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleCore_getPreferredModuleIndex(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCore *arg1 = (SynthLab::ModuleCore *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("SynthLab::ModuleCore::getPreferredModuleIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModuleCore::getPreferredModuleIndex",1,"SynthLab::ModuleCore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModuleCore,0))){
    SWIG_fail_ptr("ModuleCore_getPreferredModuleIndex",1,SWIGTYPE_p_SynthLab__ModuleCore);
  }
  
  result = (arg1)->getPreferredModuleIndex();
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleCore_setPreferredModuleIndex(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCore *arg1 = (SynthLab::ModuleCore *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::ModuleCore::setPreferredModuleIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModuleCore::setPreferredModuleIndex",1,"SynthLab::ModuleCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ModuleCore::setPreferredModuleIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModuleCore,0))){
    SWIG_fail_ptr("ModuleCore_setPreferredModuleIndex",1,SWIGTYPE_p_SynthLab__ModuleCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("ModuleCore_setPreferredModuleIndex",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->setPreferredModuleIndex(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleCore_getModuleData(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCore *arg1 = (SynthLab::ModuleCore *) 0 ;
  ModuleCoreData *result = 0 ;
  
  SWIG_check_num_args("SynthLab::ModuleCore::getModuleData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModuleCore::getModuleData",1,"SynthLab::ModuleCore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModuleCore,0))){
    SWIG_fail_ptr("ModuleCore_getModuleData",1,SWIGTYPE_p_SynthLab__ModuleCore);
  }
  
  result = (ModuleCoreData *) &(arg1)->getModuleData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ModuleCoreData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ModuleCore(void *obj) {
SynthLab::ModuleCore *arg1 = (SynthLab::ModuleCore *) obj;
delete arg1;
}
static swig_lua_attribute swig_ModuleCore_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ModuleCore_methods[]= {
    { "reset", _wrap_ModuleCore_reset},
    { "update", _wrap_ModuleCore_update},
    { "render", _wrap_ModuleCore_render},
    { "doNoteOn", _wrap_ModuleCore_doNoteOn},
    { "doNoteOff", _wrap_ModuleCore_doNoteOff},
    { "getState", _wrap_ModuleCore_getState},
    { "shutdown", _wrap_ModuleCore_shutdown},
    { "setSustainOverride", _wrap_ModuleCore_setSustainOverride},
    { "setStandAloneMode", _wrap_ModuleCore_setStandAloneMode},
    { "startGlideModulation", _wrap_ModuleCore_startGlideModulation},
    { "getModuleType", _wrap_ModuleCore_getModuleType},
    { "getModuleName", _wrap_ModuleCore_getModuleName},
    { "getModuleHandle", _wrap_ModuleCore_getModuleHandle},
    { "setModuleHandle", _wrap_ModuleCore_setModuleHandle},
    { "getModuleIndex", _wrap_ModuleCore_getModuleIndex},
    { "setModuleIndex", _wrap_ModuleCore_setModuleIndex},
    { "getPreferredModuleIndex", _wrap_ModuleCore_getPreferredModuleIndex},
    { "setPreferredModuleIndex", _wrap_ModuleCore_setPreferredModuleIndex},
    { "getModuleData", _wrap_ModuleCore_getModuleData},
    {0,0}
};
static swig_lua_method swig_ModuleCore_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ModuleCore_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ModuleCore_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ModuleCore_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ModuleCore_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ModuleCore_Sf_SwigStatic = {
    "ModuleCore",
    swig_ModuleCore_Sf_SwigStatic_methods,
    swig_ModuleCore_Sf_SwigStatic_attributes,
    swig_ModuleCore_Sf_SwigStatic_constants,
    swig_ModuleCore_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ModuleCore_bases[] = {0};
static const char *swig_ModuleCore_base_names[] = {0};
static swig_lua_class _wrap_class_ModuleCore = { "ModuleCore", "ModuleCore", &SWIGTYPE_p_SynthLab__ModuleCore,0, swig_delete_ModuleCore, swig_ModuleCore_methods, swig_ModuleCore_attributes, &swig_ModuleCore_Sf_SwigStatic, swig_ModuleCore_meta, swig_ModuleCore_bases, swig_ModuleCore_base_names };

static int _wrap_SynthModule_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthModule::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::reset",1,"SynthLab::SynthModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthModule::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_reset",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthModule::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::update",1,"SynthLab::SynthModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_update",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  result = (bool)(arg1)->update();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_render__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthModule::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::render",1,"SynthLab::SynthModule *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthModule::render",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_render",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("SynthModule_render",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->render(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_render__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthModule::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::render",1,"SynthLab::SynthModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_render",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  result = (bool)(arg1)->render();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_render(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthModule, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SynthModule_render__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthModule, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SynthModule_render__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SynthModule_render'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::SynthModule::render(uint32_t)\n"
    "    SynthLab::SynthModule::render()\n");
  lua_error(L);return 0;
}


static int _wrap_SynthModule_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthModule::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::doNoteOn",1,"SynthLab::SynthModule *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthModule::doNoteOn",2,"MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_doNoteOn",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MIDINoteEvent,0))){
    SWIG_fail_ptr("SynthModule_doNoteOn",2,SWIGTYPE_p_MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthModule::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::doNoteOff",1,"SynthLab::SynthModule *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthModule::doNoteOff",2,"MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_doNoteOff",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MIDINoteEvent,0))){
    SWIG_fail_ptr("SynthModule_doNoteOff",2,SWIGTYPE_p_MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_initialize(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthModule::initialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::initialize",1,"SynthLab::SynthModule *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::SynthModule::initialize",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_initialize",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->initialize((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_getState(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("SynthLab::SynthModule::getState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::getState",1,"SynthLab::SynthModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_getState",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  result = (arg1)->getState();
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_shutdown(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthModule::shutdown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::shutdown",1,"SynthLab::SynthModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_shutdown",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  result = (bool)(arg1)->shutdown();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_startGlideModulation(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  GlideInfo *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthModule::startGlideModulation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::startGlideModulation",1,"SynthLab::SynthModule *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthModule::startGlideModulation",2,"GlideInfo &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_startGlideModulation",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GlideInfo,0))){
    SWIG_fail_ptr("SynthModule_startGlideModulation",2,SWIGTYPE_p_GlideInfo);
  }
  
  result = (bool)(arg1)->startGlideModulation(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_getModulationInput(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::Modulators > > result;
  
  SWIG_check_num_args("SynthLab::SynthModule::getModulationInput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::getModulationInput",1,"SynthLab::SynthModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_getModulationInput",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  result = (arg1)->getModulationInput();
  {
    std::shared_ptr< SynthLab::Modulators > * resultptr = new std::shared_ptr< SynthLab::Modulators >((const std::shared_ptr< SynthLab::Modulators > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_SynthLab__Modulators_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_getModulationOutput(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::Modulators > > result;
  
  SWIG_check_num_args("SynthLab::SynthModule::getModulationOutput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::getModulationOutput",1,"SynthLab::SynthModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_getModulationOutput",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  result = (arg1)->getModulationOutput();
  {
    std::shared_ptr< SynthLab::Modulators > * resultptr = new std::shared_ptr< SynthLab::Modulators >((const std::shared_ptr< SynthLab::Modulators > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_SynthLab__Modulators_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_getAudioBuffers(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::AudioBuffer > > result;
  
  SWIG_check_num_args("SynthLab::SynthModule::getAudioBuffers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::getAudioBuffers",1,"SynthLab::SynthModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_getAudioBuffers",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  result = (arg1)->getAudioBuffers();
  {
    std::shared_ptr< SynthLab::AudioBuffer > * resultptr = new std::shared_ptr< SynthLab::AudioBuffer >((const std::shared_ptr< SynthLab::AudioBuffer > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_setUnisonMode(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("SynthLab::SynthModule::setUnisonMode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::setUnisonMode",1,"SynthLab::SynthModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthModule::setUnisonMode",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::SynthModule::setUnisonMode",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_setUnisonMode",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setUnisonMode(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_setFMBuffer(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::AudioBuffer > > arg2 ;
  std::shared_ptr< SynthLab::AudioBuffer > *argp2 ;
  
  SWIG_check_num_args("SynthLab::SynthModule::setFMBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::setFMBuffer",1,"SynthLab::SynthModule *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthModule::setFMBuffer",2,"std::shared_ptr< SynthLab::AudioBuffer >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_setFMBuffer",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t,0))){
    SWIG_fail_ptr("SynthModule_setFMBuffer",2,SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t);
  }
  arg2 = *argp2;
  
  (arg1)->setFMBuffer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_clearFMBuffer(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  
  SWIG_check_num_args("SynthLab::SynthModule::clearFMBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::clearFMBuffer",1,"SynthLab::SynthModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_clearFMBuffer",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  (arg1)->clearFMBuffer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_getModuleStrings__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string arg3 ;
  std::string *argp3 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthModule::getModuleStrings",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::getModuleStrings",1,"SynthLab::SynthModule *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthModule::getModuleStrings",2,"std::vector< std::string > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::SynthModule::getModuleStrings",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_getModuleStrings",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("SynthModule_getModuleStrings",2,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("SynthModule_getModuleStrings",3,SWIGTYPE_p_std__string);
  }
  arg3 = *argp3;
  
  result = (bool)(arg1)->getModuleStrings(*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_getModuleStrings__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthModule::getModuleStrings",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::getModuleStrings",1,"SynthLab::SynthModule *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthModule::getModuleStrings",2,"std::vector< std::string > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_getModuleStrings",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("SynthModule_getModuleStrings",2,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = (bool)(arg1)->getModuleStrings(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_getModuleStrings__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  uint32_t arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  std::string arg4 ;
  uint32_t *argp2 ;
  std::string *argp4 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthModule::getModuleStrings",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::getModuleStrings",1,"SynthLab::SynthModule *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthModule::getModuleStrings",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::SynthModule::getModuleStrings",3,"std::vector< std::string > &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SynthLab::SynthModule::getModuleStrings",4,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_getModuleStrings",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("SynthModule_getModuleStrings",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("SynthModule_getModuleStrings",3,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("SynthModule_getModuleStrings",4,SWIGTYPE_p_std__string);
  }
  arg4 = *argp4;
  
  result = (bool)(arg1)->getModuleStrings(arg2,*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_getModuleStrings(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthModule, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SynthModule_getModuleStrings__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthModule, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SynthModule_getModuleStrings__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthModule, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_SynthModule_getModuleStrings__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SynthModule_getModuleStrings'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::SynthModule::getModuleStrings(std::vector< std::string > &,std::string)\n"
    "    SynthLab::SynthModule::getModuleStrings(std::vector< std::string > &)\n"
    "    SynthLab::SynthModule::getModuleStrings(uint32_t,std::vector< std::string > &,std::string)\n");
  lua_error(L);return 0;
}


static int _wrap_SynthModule_getAllModuleStrings(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string arg3 ;
  std::string *argp3 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthModule::getAllModuleStrings",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::getAllModuleStrings",1,"SynthLab::SynthModule *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthModule::getAllModuleStrings",2,"std::vector< std::string > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::SynthModule::getAllModuleStrings",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_getAllModuleStrings",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("SynthModule_getAllModuleStrings",2,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("SynthModule_getAllModuleStrings",3,SWIGTYPE_p_std__string);
  }
  arg3 = *argp3;
  
  result = (bool)(arg1)->getAllModuleStrings(*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_getModKnobStrings__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthModule::getModKnobStrings",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::getModKnobStrings",1,"SynthLab::SynthModule *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthModule::getModKnobStrings",2,"std::vector< std::string > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_getModKnobStrings",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("SynthModule_getModKnobStrings",2,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = (bool)(arg1)->getModKnobStrings(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_getModKnobStrings__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  uint32_t arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  uint32_t *argp2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthModule::getModKnobStrings",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::getModKnobStrings",1,"SynthLab::SynthModule *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthModule::getModKnobStrings",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::SynthModule::getModKnobStrings",3,"std::vector< std::string > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_getModKnobStrings",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("SynthModule_getModKnobStrings",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("SynthModule_getModKnobStrings",3,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = (bool)(arg1)->getModKnobStrings(arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_getModKnobStrings(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthModule, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SynthModule_getModKnobStrings__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthModule, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SynthModule_getModKnobStrings__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SynthModule_getModKnobStrings'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::SynthModule::getModKnobStrings(std::vector< std::string > &)\n"
    "    SynthLab::SynthModule::getModKnobStrings(uint32_t,std::vector< std::string > &)\n");
  lua_error(L);return 0;
}


static int _wrap_SynthModule_getModuleCoreStrings(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthModule::getModuleCoreStrings",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::getModuleCoreStrings",1,"SynthLab::SynthModule *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthModule::getModuleCoreStrings",2,"std::vector< std::string > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_getModuleCoreStrings",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("SynthModule_getModuleCoreStrings",2,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = (bool)(arg1)->getModuleCoreStrings(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_addModuleCore(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::ModuleCore > > arg2 ;
  std::shared_ptr< SynthLab::ModuleCore > *argp2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthModule::addModuleCore",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::addModuleCore",1,"SynthLab::SynthModule *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthModule::addModuleCore",2,"std::shared_ptr< SynthLab::ModuleCore >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_addModuleCore",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__shared_ptrT_SynthLab__ModuleCore_t,0))){
    SWIG_fail_ptr("SynthModule_addModuleCore",2,SWIGTYPE_p_std__shared_ptrT_SynthLab__ModuleCore_t);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->addModuleCore(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_getSelectedCoreIndex(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::SynthModule::getSelectedCoreIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::getSelectedCoreIndex",1,"SynthLab::SynthModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_getSelectedCoreIndex",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  result = (arg1)->getSelectedCoreIndex();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_selectModuleCore(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthModule::selectModuleCore",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::selectModuleCore",1,"SynthLab::SynthModule *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthModule::selectModuleCore",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_selectModuleCore",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("SynthModule_selectModuleCore",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->selectModuleCore(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_selectDefaultModuleCore(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthModule::selectDefaultModuleCore",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::selectDefaultModuleCore",1,"SynthLab::SynthModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_selectDefaultModuleCore",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  result = (bool)(arg1)->selectDefaultModuleCore();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_packCores(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  
  SWIG_check_num_args("SynthLab::SynthModule::packCores",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::packCores",1,"SynthLab::SynthModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_packCores",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  (arg1)->packCores();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_clearModuleCores(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthModule::clearModuleCores",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::clearModuleCores",1,"SynthLab::SynthModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_clearModuleCores",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  result = (bool)(arg1)->clearModuleCores();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthModule_setStandAloneMode(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthModule::setStandAloneMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthModule::setStandAloneMode",1,"SynthLab::SynthModule *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::SynthModule::setStandAloneMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthModule,0))){
    SWIG_fail_ptr("SynthModule_setStandAloneMode",1,SWIGTYPE_p_SynthLab__SynthModule);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setStandAloneMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SynthModule(void *obj) {
SynthLab::SynthModule *arg1 = (SynthLab::SynthModule *) obj;
delete arg1;
}
static swig_lua_attribute swig_SynthModule_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SynthModule_methods[]= {
    { "reset", _wrap_SynthModule_reset},
    { "update", _wrap_SynthModule_update},
    { "render", _wrap_SynthModule_render},
    { "doNoteOn", _wrap_SynthModule_doNoteOn},
    { "doNoteOff", _wrap_SynthModule_doNoteOff},
    { "initialize", _wrap_SynthModule_initialize},
    { "getState", _wrap_SynthModule_getState},
    { "shutdown", _wrap_SynthModule_shutdown},
    { "startGlideModulation", _wrap_SynthModule_startGlideModulation},
    { "getModulationInput", _wrap_SynthModule_getModulationInput},
    { "getModulationOutput", _wrap_SynthModule_getModulationOutput},
    { "getAudioBuffers", _wrap_SynthModule_getAudioBuffers},
    { "setUnisonMode", _wrap_SynthModule_setUnisonMode},
    { "setFMBuffer", _wrap_SynthModule_setFMBuffer},
    { "clearFMBuffer", _wrap_SynthModule_clearFMBuffer},
    { "getModuleStrings", _wrap_SynthModule_getModuleStrings},
    { "getAllModuleStrings", _wrap_SynthModule_getAllModuleStrings},
    { "getModKnobStrings", _wrap_SynthModule_getModKnobStrings},
    { "getModuleCoreStrings", _wrap_SynthModule_getModuleCoreStrings},
    { "addModuleCore", _wrap_SynthModule_addModuleCore},
    { "getSelectedCoreIndex", _wrap_SynthModule_getSelectedCoreIndex},
    { "selectModuleCore", _wrap_SynthModule_selectModuleCore},
    { "selectDefaultModuleCore", _wrap_SynthModule_selectDefaultModuleCore},
    { "packCores", _wrap_SynthModule_packCores},
    { "clearModuleCores", _wrap_SynthModule_clearModuleCores},
    { "setStandAloneMode", _wrap_SynthModule_setStandAloneMode},
    {0,0}
};
static swig_lua_method swig_SynthModule_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SynthModule_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SynthModule_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SynthModule_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SynthModule_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SynthModule_Sf_SwigStatic = {
    "SynthModule",
    swig_SynthModule_Sf_SwigStatic_methods,
    swig_SynthModule_Sf_SwigStatic_attributes,
    swig_SynthModule_Sf_SwigStatic_constants,
    swig_SynthModule_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SynthModule_bases[] = {0};
static const char *swig_SynthModule_base_names[] = {0};
static swig_lua_class _wrap_class_SynthModule = { "SynthModule", "SynthModule", &SWIGTYPE_p_SynthLab__SynthModule,0, swig_delete_SynthModule, swig_SynthModule_methods, swig_SynthModule_attributes, &swig_SynthModule_Sf_SwigStatic, swig_SynthModule_meta, swig_SynthModule_bases, swig_SynthModule_base_names };

static int _wrap_doLinearInterp(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::doLinearInterp",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::doLinearInterp",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::doLinearInterp",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::doLinearInterp",3,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)SynthLab::doLinearInterp(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DelayLine(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DelayLine *result = 0 ;
  
  SWIG_check_num_args("SynthLab::DelayLine::DelayLine",0,0)
  result = (SynthLab::DelayLine *)new SynthLab::DelayLine();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__DelayLine,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_clear(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DelayLine *arg1 = (SynthLab::DelayLine *) 0 ;
  
  SWIG_check_num_args("SynthLab::DelayLine::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DelayLine::clear",1,"SynthLab::DelayLine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DelayLine,0))){
    SWIG_fail_ptr("DelayLine_clear",1,SWIGTYPE_p_SynthLab__DelayLine);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_reset__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DelayLine *arg1 = (SynthLab::DelayLine *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("SynthLab::DelayLine::reset",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DelayLine::reset",1,"SynthLab::DelayLine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::DelayLine::reset",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::DelayLine::reset",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DelayLine,0))){
    SWIG_fail_ptr("DelayLine_reset",1,SWIGTYPE_p_SynthLab__DelayLine);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->reset(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_reset__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DelayLine *arg1 = (SynthLab::DelayLine *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::DelayLine::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DelayLine::reset",1,"SynthLab::DelayLine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::DelayLine::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DelayLine,0))){
    SWIG_fail_ptr("DelayLine_reset",1,SWIGTYPE_p_SynthLab__DelayLine);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->reset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_reset(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__DelayLine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DelayLine_reset__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__DelayLine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DelayLine_reset__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DelayLine_reset'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::DelayLine::reset(double,double)\n"
    "    SynthLab::DelayLine::reset(double)\n");
  lua_error(L);return 0;
}


static int _wrap_DelayLine_setDelayInSamples(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DelayLine *arg1 = (SynthLab::DelayLine *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::DelayLine::setDelayInSamples",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DelayLine::setDelayInSamples",1,"SynthLab::DelayLine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::DelayLine::setDelayInSamples",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DelayLine,0))){
    SWIG_fail_ptr("DelayLine_setDelayInSamples",1,SWIGTYPE_p_SynthLab__DelayLine);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setDelayInSamples(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_writeDelay(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DelayLine *arg1 = (SynthLab::DelayLine *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::DelayLine::writeDelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DelayLine::writeDelay",1,"SynthLab::DelayLine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::DelayLine::writeDelay",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DelayLine,0))){
    SWIG_fail_ptr("DelayLine_writeDelay",1,SWIGTYPE_p_SynthLab__DelayLine);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->writeDelay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_readDelay(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DelayLine *arg1 = (SynthLab::DelayLine *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::DelayLine::readDelay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DelayLine::readDelay",1,"SynthLab::DelayLine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DelayLine,0))){
    SWIG_fail_ptr("DelayLine_readDelay",1,SWIGTYPE_p_SynthLab__DelayLine);
  }
  
  result = (double)(arg1)->readDelay();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DelayLine(void *obj) {
SynthLab::DelayLine *arg1 = (SynthLab::DelayLine *) obj;
delete arg1;
}
static int _proxy__wrap_new_DelayLine(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DelayLine);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DelayLine_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DelayLine_methods[]= {
    { "clear", _wrap_DelayLine_clear},
    { "reset", _wrap_DelayLine_reset},
    { "setDelayInSamples", _wrap_DelayLine_setDelayInSamples},
    { "writeDelay", _wrap_DelayLine_writeDelay},
    { "readDelay", _wrap_DelayLine_readDelay},
    {0,0}
};
static swig_lua_method swig_DelayLine_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DelayLine_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DelayLine_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DelayLine_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DelayLine_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DelayLine_Sf_SwigStatic = {
    "DelayLine",
    swig_DelayLine_Sf_SwigStatic_methods,
    swig_DelayLine_Sf_SwigStatic_attributes,
    swig_DelayLine_Sf_SwigStatic_constants,
    swig_DelayLine_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DelayLine_bases[] = {0};
static const char *swig_DelayLine_base_names[] = {0};
static swig_lua_class _wrap_class_DelayLine = { "DelayLine", "DelayLine", &SWIGTYPE_p_SynthLab__DelayLine,_proxy__wrap_new_DelayLine, swig_delete_DelayLine, swig_DelayLine_methods, swig_DelayLine_attributes, &swig_DelayLine_Sf_SwigStatic, swig_DelayLine_meta, swig_DelayLine_bases, swig_DelayLine_base_names };

static int _wrap_BQCoeffs_coeff_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::BQCoeffs *arg1 = (SynthLab::BQCoeffs *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::BQCoeffs::coeff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::BQCoeffs::coeff",1,"SynthLab::BQCoeffs *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::BQCoeffs::coeff",2,"double [7]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__BQCoeffs,0))){
    SWIG_fail_ptr("BQCoeffs_coeff_set",1,SWIGTYPE_p_SynthLab__BQCoeffs);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("BQCoeffs_coeff_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->coeff;
    for (ii = 0; ii < (size_t)7; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BQCoeffs_coeff_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::BQCoeffs *arg1 = (SynthLab::BQCoeffs *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::BQCoeffs::coeff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::BQCoeffs::coeff",1,"SynthLab::BQCoeffs *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__BQCoeffs,0))){
    SWIG_fail_ptr("BQCoeffs_coeff_get",1,SWIGTYPE_p_SynthLab__BQCoeffs);
  }
  
  result = (double *)(double *) ((arg1)->coeff);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BQCoeffs(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::BQCoeffs *result = 0 ;
  
  SWIG_check_num_args("SynthLab::BQCoeffs::BQCoeffs",0,0)
  result = (SynthLab::BQCoeffs *)new SynthLab::BQCoeffs();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__BQCoeffs,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BQCoeffs(void *obj) {
SynthLab::BQCoeffs *arg1 = (SynthLab::BQCoeffs *) obj;
delete arg1;
}
static int _proxy__wrap_new_BQCoeffs(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BQCoeffs);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BQCoeffs_attributes[] = {
    { "coeff", _wrap_BQCoeffs_coeff_get, _wrap_BQCoeffs_coeff_set },
    {0,0,0}
};
static swig_lua_method swig_BQCoeffs_methods[]= {
    {0,0}
};
static swig_lua_method swig_BQCoeffs_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BQCoeffs_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BQCoeffs_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BQCoeffs_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BQCoeffs_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BQCoeffs_Sf_SwigStatic = {
    "BQCoeffs",
    swig_BQCoeffs_Sf_SwigStatic_methods,
    swig_BQCoeffs_Sf_SwigStatic_attributes,
    swig_BQCoeffs_Sf_SwigStatic_constants,
    swig_BQCoeffs_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BQCoeffs_bases[] = {0};
static const char *swig_BQCoeffs_base_names[] = {0};
static swig_lua_class _wrap_class_BQCoeffs = { "BQCoeffs", "BQCoeffs", &SWIGTYPE_p_SynthLab__BQCoeffs,_proxy__wrap_new_BQCoeffs, swig_delete_BQCoeffs, swig_BQCoeffs_methods, swig_BQCoeffs_attributes, &swig_BQCoeffs_Sf_SwigStatic, swig_BQCoeffs_meta, swig_BQCoeffs_bases, swig_BQCoeffs_base_names };

static int _wrap_new_BQAudioFilter(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::BQAudioFilter *result = 0 ;
  
  SWIG_check_num_args("SynthLab::BQAudioFilter::BQAudioFilter",0,0)
  result = (SynthLab::BQAudioFilter *)new SynthLab::BQAudioFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__BQAudioFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BQAudioFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::BQAudioFilter *arg1 = (SynthLab::BQAudioFilter *) 0 ;
  
  SWIG_check_num_args("SynthLab::BQAudioFilter::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::BQAudioFilter::reset",1,"SynthLab::BQAudioFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__BQAudioFilter,0))){
    SWIG_fail_ptr("BQAudioFilter_reset",1,SWIGTYPE_p_SynthLab__BQAudioFilter);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BQAudioFilter_flushDelays(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::BQAudioFilter *arg1 = (SynthLab::BQAudioFilter *) 0 ;
  
  SWIG_check_num_args("SynthLab::BQAudioFilter::flushDelays",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::BQAudioFilter::flushDelays",1,"SynthLab::BQAudioFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__BQAudioFilter,0))){
    SWIG_fail_ptr("BQAudioFilter_flushDelays",1,SWIGTYPE_p_SynthLab__BQAudioFilter);
  }
  
  (arg1)->flushDelays();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BQAudioFilter_setCoeffs(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::BQAudioFilter *arg1 = (SynthLab::BQAudioFilter *) 0 ;
  SynthLab::BQCoeffs *arg2 = 0 ;
  
  SWIG_check_num_args("SynthLab::BQAudioFilter::setCoeffs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::BQAudioFilter::setCoeffs",1,"SynthLab::BQAudioFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::BQAudioFilter::setCoeffs",2,"SynthLab::BQCoeffs &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__BQAudioFilter,0))){
    SWIG_fail_ptr("BQAudioFilter_setCoeffs",1,SWIGTYPE_p_SynthLab__BQAudioFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__BQCoeffs,0))){
    SWIG_fail_ptr("BQAudioFilter_setCoeffs",2,SWIGTYPE_p_SynthLab__BQCoeffs);
  }
  
  (arg1)->setCoeffs(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BQAudioFilter_copyCoeffs(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::BQAudioFilter *arg1 = (SynthLab::BQAudioFilter *) 0 ;
  SynthLab::BQAudioFilter *arg2 = 0 ;
  
  SWIG_check_num_args("SynthLab::BQAudioFilter::copyCoeffs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::BQAudioFilter::copyCoeffs",1,"SynthLab::BQAudioFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::BQAudioFilter::copyCoeffs",2,"SynthLab::BQAudioFilter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__BQAudioFilter,0))){
    SWIG_fail_ptr("BQAudioFilter_copyCoeffs",1,SWIGTYPE_p_SynthLab__BQAudioFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__BQAudioFilter,0))){
    SWIG_fail_ptr("BQAudioFilter_copyCoeffs",2,SWIGTYPE_p_SynthLab__BQAudioFilter);
  }
  
  (arg1)->copyCoeffs(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BQAudioFilter_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::BQAudioFilter *arg1 = (SynthLab::BQAudioFilter *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::BQAudioFilter::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::BQAudioFilter::processAudioSample",1,"SynthLab::BQAudioFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::BQAudioFilter::processAudioSample",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__BQAudioFilter,0))){
    SWIG_fail_ptr("BQAudioFilter_processAudioSample",1,SWIGTYPE_p_SynthLab__BQAudioFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BQAudioFilter(void *obj) {
SynthLab::BQAudioFilter *arg1 = (SynthLab::BQAudioFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_BQAudioFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BQAudioFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BQAudioFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BQAudioFilter_methods[]= {
    { "reset", _wrap_BQAudioFilter_reset},
    { "flushDelays", _wrap_BQAudioFilter_flushDelays},
    { "setCoeffs", _wrap_BQAudioFilter_setCoeffs},
    { "copyCoeffs", _wrap_BQAudioFilter_copyCoeffs},
    { "processAudioSample", _wrap_BQAudioFilter_processAudioSample},
    {0,0}
};
static swig_lua_method swig_BQAudioFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BQAudioFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BQAudioFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BQAudioFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BQAudioFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BQAudioFilter_Sf_SwigStatic = {
    "BQAudioFilter",
    swig_BQAudioFilter_Sf_SwigStatic_methods,
    swig_BQAudioFilter_Sf_SwigStatic_attributes,
    swig_BQAudioFilter_Sf_SwigStatic_constants,
    swig_BQAudioFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BQAudioFilter_bases[] = {0};
static const char *swig_BQAudioFilter_base_names[] = {0};
static swig_lua_class _wrap_class_BQAudioFilter = { "BQAudioFilter", "BQAudioFilter", &SWIGTYPE_p_SynthLab__BQAudioFilter,_proxy__wrap_new_BQAudioFilter, swig_delete_BQAudioFilter, swig_BQAudioFilter_methods, swig_BQAudioFilter_attributes, &swig_BQAudioFilter_Sf_SwigStatic, swig_BQAudioFilter_meta, swig_BQAudioFilter_bases, swig_BQAudioFilter_base_names };

static int _wrap_new_FracDelayAPF(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FracDelayAPF *result = 0 ;
  
  SWIG_check_num_args("SynthLab::FracDelayAPF::FracDelayAPF",0,0)
  result = (SynthLab::FracDelayAPF *)new SynthLab::FracDelayAPF();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__FracDelayAPF,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FracDelayAPF_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FracDelayAPF *arg1 = (SynthLab::FracDelayAPF *) 0 ;
  
  SWIG_check_num_args("SynthLab::FracDelayAPF::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FracDelayAPF::reset",1,"SynthLab::FracDelayAPF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FracDelayAPF,0))){
    SWIG_fail_ptr("FracDelayAPF_reset",1,SWIGTYPE_p_SynthLab__FracDelayAPF);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FracDelayAPF_setAlpha(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FracDelayAPF *arg1 = (SynthLab::FracDelayAPF *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::FracDelayAPF::setAlpha",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FracDelayAPF::setAlpha",1,"SynthLab::FracDelayAPF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::FracDelayAPF::setAlpha",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FracDelayAPF,0))){
    SWIG_fail_ptr("FracDelayAPF_setAlpha",1,SWIGTYPE_p_SynthLab__FracDelayAPF);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setAlpha(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FracDelayAPF_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FracDelayAPF *arg1 = (SynthLab::FracDelayAPF *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::FracDelayAPF::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FracDelayAPF::processAudioSample",1,"SynthLab::FracDelayAPF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::FracDelayAPF::processAudioSample",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FracDelayAPF,0))){
    SWIG_fail_ptr("FracDelayAPF_processAudioSample",1,SWIGTYPE_p_SynthLab__FracDelayAPF);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FracDelayAPF(void *obj) {
SynthLab::FracDelayAPF *arg1 = (SynthLab::FracDelayAPF *) obj;
delete arg1;
}
static int _proxy__wrap_new_FracDelayAPF(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FracDelayAPF);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FracDelayAPF_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FracDelayAPF_methods[]= {
    { "reset", _wrap_FracDelayAPF_reset},
    { "setAlpha", _wrap_FracDelayAPF_setAlpha},
    { "processAudioSample", _wrap_FracDelayAPF_processAudioSample},
    {0,0}
};
static swig_lua_method swig_FracDelayAPF_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FracDelayAPF_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FracDelayAPF_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FracDelayAPF_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FracDelayAPF_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FracDelayAPF_Sf_SwigStatic = {
    "FracDelayAPF",
    swig_FracDelayAPF_Sf_SwigStatic_methods,
    swig_FracDelayAPF_Sf_SwigStatic_attributes,
    swig_FracDelayAPF_Sf_SwigStatic_constants,
    swig_FracDelayAPF_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FracDelayAPF_bases[] = {0};
static const char *swig_FracDelayAPF_base_names[] = {0};
static swig_lua_class _wrap_class_FracDelayAPF = { "FracDelayAPF", "FracDelayAPF", &SWIGTYPE_p_SynthLab__FracDelayAPF,_proxy__wrap_new_FracDelayAPF, swig_delete_FracDelayAPF, swig_FracDelayAPF_methods, swig_FracDelayAPF_attributes, &swig_FracDelayAPF_Sf_SwigStatic, swig_FracDelayAPF_meta, swig_FracDelayAPF_bases, swig_FracDelayAPF_base_names };

static int _wrap_new_ResLoopFilter(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ResLoopFilter *result = 0 ;
  
  SWIG_check_num_args("SynthLab::ResLoopFilter::ResLoopFilter",0,0)
  result = (SynthLab::ResLoopFilter *)new SynthLab::ResLoopFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__ResLoopFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResLoopFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ResLoopFilter *arg1 = (SynthLab::ResLoopFilter *) 0 ;
  
  SWIG_check_num_args("SynthLab::ResLoopFilter::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ResLoopFilter::reset",1,"SynthLab::ResLoopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ResLoopFilter,0))){
    SWIG_fail_ptr("ResLoopFilter_reset",1,SWIGTYPE_p_SynthLab__ResLoopFilter);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResLoopFilter_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ResLoopFilter *arg1 = (SynthLab::ResLoopFilter *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::ResLoopFilter::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ResLoopFilter::processAudioSample",1,"SynthLab::ResLoopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::ResLoopFilter::processAudioSample",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ResLoopFilter,0))){
    SWIG_fail_ptr("ResLoopFilter_processAudioSample",1,SWIGTYPE_p_SynthLab__ResLoopFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ResLoopFilter(void *obj) {
SynthLab::ResLoopFilter *arg1 = (SynthLab::ResLoopFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ResLoopFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ResLoopFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ResLoopFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ResLoopFilter_methods[]= {
    { "reset", _wrap_ResLoopFilter_reset},
    { "processAudioSample", _wrap_ResLoopFilter_processAudioSample},
    {0,0}
};
static swig_lua_method swig_ResLoopFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ResLoopFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ResLoopFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ResLoopFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ResLoopFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ResLoopFilter_Sf_SwigStatic = {
    "ResLoopFilter",
    swig_ResLoopFilter_Sf_SwigStatic_methods,
    swig_ResLoopFilter_Sf_SwigStatic_attributes,
    swig_ResLoopFilter_Sf_SwigStatic_constants,
    swig_ResLoopFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ResLoopFilter_bases[] = {0};
static const char *swig_ResLoopFilter_base_names[] = {0};
static swig_lua_class _wrap_class_ResLoopFilter = { "ResLoopFilter", "ResLoopFilter", &SWIGTYPE_p_SynthLab__ResLoopFilter,_proxy__wrap_new_ResLoopFilter, swig_delete_ResLoopFilter, swig_ResLoopFilter_methods, swig_ResLoopFilter_attributes, &swig_ResLoopFilter_Sf_SwigStatic, swig_ResLoopFilter_meta, swig_ResLoopFilter_bases, swig_ResLoopFilter_base_names };

static int _wrap_new_DCRemovalFilter(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DCRemovalFilter *result = 0 ;
  
  SWIG_check_num_args("SynthLab::DCRemovalFilter::DCRemovalFilter",0,0)
  result = (SynthLab::DCRemovalFilter *)new SynthLab::DCRemovalFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__DCRemovalFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCRemovalFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DCRemovalFilter *arg1 = (SynthLab::DCRemovalFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::DCRemovalFilter::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DCRemovalFilter::reset",1,"SynthLab::DCRemovalFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::DCRemovalFilter::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DCRemovalFilter,0))){
    SWIG_fail_ptr("DCRemovalFilter_reset",1,SWIGTYPE_p_SynthLab__DCRemovalFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->reset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCRemovalFilter_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DCRemovalFilter *arg1 = (SynthLab::DCRemovalFilter *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::DCRemovalFilter::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DCRemovalFilter::processAudioSample",1,"SynthLab::DCRemovalFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::DCRemovalFilter::processAudioSample",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DCRemovalFilter,0))){
    SWIG_fail_ptr("DCRemovalFilter_processAudioSample",1,SWIGTYPE_p_SynthLab__DCRemovalFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DCRemovalFilter(void *obj) {
SynthLab::DCRemovalFilter *arg1 = (SynthLab::DCRemovalFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_DCRemovalFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DCRemovalFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DCRemovalFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DCRemovalFilter_methods[]= {
    { "reset", _wrap_DCRemovalFilter_reset},
    { "processAudioSample", _wrap_DCRemovalFilter_processAudioSample},
    {0,0}
};
static swig_lua_method swig_DCRemovalFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DCRemovalFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DCRemovalFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DCRemovalFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DCRemovalFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DCRemovalFilter_Sf_SwigStatic = {
    "DCRemovalFilter",
    swig_DCRemovalFilter_Sf_SwigStatic_methods,
    swig_DCRemovalFilter_Sf_SwigStatic_attributes,
    swig_DCRemovalFilter_Sf_SwigStatic_constants,
    swig_DCRemovalFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DCRemovalFilter_bases[] = {0};
static const char *swig_DCRemovalFilter_base_names[] = {0};
static swig_lua_class _wrap_class_DCRemovalFilter = { "DCRemovalFilter", "DCRemovalFilter", &SWIGTYPE_p_SynthLab__DCRemovalFilter,_proxy__wrap_new_DCRemovalFilter, swig_delete_DCRemovalFilter, swig_DCRemovalFilter_methods, swig_DCRemovalFilter_attributes, &swig_DCRemovalFilter_Sf_SwigStatic, swig_DCRemovalFilter_meta, swig_DCRemovalFilter_bases, swig_DCRemovalFilter_base_names };

static int _wrap_new_TinyBPF(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::TinyBPF *result = 0 ;
  
  SWIG_check_num_args("SynthLab::TinyBPF::TinyBPF",0,0)
  result = (SynthLab::TinyBPF *)new SynthLab::TinyBPF();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__TinyBPF,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TinyBPF_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::TinyBPF *arg1 = (SynthLab::TinyBPF *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::TinyBPF::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::TinyBPF::reset",1,"SynthLab::TinyBPF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::TinyBPF::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__TinyBPF,0))){
    SWIG_fail_ptr("TinyBPF_reset",1,SWIGTYPE_p_SynthLab__TinyBPF);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->reset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TinyBPF_setParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::TinyBPF *arg1 = (SynthLab::TinyBPF *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("SynthLab::TinyBPF::setParameters",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::TinyBPF::setParameters",1,"SynthLab::TinyBPF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::TinyBPF::setParameters",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::TinyBPF::setParameters",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__TinyBPF,0))){
    SWIG_fail_ptr("TinyBPF_setParameters",1,SWIGTYPE_p_SynthLab__TinyBPF);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParameters(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TinyBPF_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::TinyBPF *arg1 = (SynthLab::TinyBPF *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::TinyBPF::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::TinyBPF::processAudioSample",1,"SynthLab::TinyBPF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::TinyBPF::processAudioSample",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__TinyBPF,0))){
    SWIG_fail_ptr("TinyBPF_processAudioSample",1,SWIGTYPE_p_SynthLab__TinyBPF);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TinyBPF(void *obj) {
SynthLab::TinyBPF *arg1 = (SynthLab::TinyBPF *) obj;
delete arg1;
}
static int _proxy__wrap_new_TinyBPF(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TinyBPF);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TinyBPF_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TinyBPF_methods[]= {
    { "reset", _wrap_TinyBPF_reset},
    { "setParameters", _wrap_TinyBPF_setParameters},
    { "processAudioSample", _wrap_TinyBPF_processAudioSample},
    {0,0}
};
static swig_lua_method swig_TinyBPF_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TinyBPF_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TinyBPF_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TinyBPF_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TinyBPF_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TinyBPF_Sf_SwigStatic = {
    "TinyBPF",
    swig_TinyBPF_Sf_SwigStatic_methods,
    swig_TinyBPF_Sf_SwigStatic_attributes,
    swig_TinyBPF_Sf_SwigStatic_constants,
    swig_TinyBPF_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TinyBPF_bases[] = {0};
static const char *swig_TinyBPF_base_names[] = {0};
static swig_lua_class _wrap_class_TinyBPF = { "TinyBPF", "TinyBPF", &SWIGTYPE_p_SynthLab__TinyBPF,_proxy__wrap_new_TinyBPF, swig_delete_TinyBPF, swig_TinyBPF_methods, swig_TinyBPF_attributes, &swig_TinyBPF_Sf_SwigStatic, swig_TinyBPF_meta, swig_TinyBPF_bases, swig_TinyBPF_base_names };

static int _wrap_new_LP2Filter(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LP2Filter *result = 0 ;
  
  SWIG_check_num_args("SynthLab::LP2Filter::LP2Filter",0,0)
  result = (SynthLab::LP2Filter *)new SynthLab::LP2Filter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__LP2Filter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LP2Filter_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LP2Filter *arg1 = (SynthLab::LP2Filter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::LP2Filter::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LP2Filter::reset",1,"SynthLab::LP2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::LP2Filter::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LP2Filter,0))){
    SWIG_fail_ptr("LP2Filter_reset",1,SWIGTYPE_p_SynthLab__LP2Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->reset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LP2Filter_clear(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LP2Filter *arg1 = (SynthLab::LP2Filter *) 0 ;
  
  SWIG_check_num_args("SynthLab::LP2Filter::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LP2Filter::clear",1,"SynthLab::LP2Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LP2Filter,0))){
    SWIG_fail_ptr("LP2Filter_clear",1,SWIGTYPE_p_SynthLab__LP2Filter);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LP2Filter_setParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LP2Filter *arg1 = (SynthLab::LP2Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("SynthLab::LP2Filter::setParameters",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LP2Filter::setParameters",1,"SynthLab::LP2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::LP2Filter::setParameters",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::LP2Filter::setParameters",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LP2Filter,0))){
    SWIG_fail_ptr("LP2Filter_setParameters",1,SWIGTYPE_p_SynthLab__LP2Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParameters(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LP2Filter_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LP2Filter *arg1 = (SynthLab::LP2Filter *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::LP2Filter::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LP2Filter::processAudioSample",1,"SynthLab::LP2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::LP2Filter::processAudioSample",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LP2Filter,0))){
    SWIG_fail_ptr("LP2Filter_processAudioSample",1,SWIGTYPE_p_SynthLab__LP2Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LP2Filter(void *obj) {
SynthLab::LP2Filter *arg1 = (SynthLab::LP2Filter *) obj;
delete arg1;
}
static int _proxy__wrap_new_LP2Filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LP2Filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LP2Filter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LP2Filter_methods[]= {
    { "reset", _wrap_LP2Filter_reset},
    { "clear", _wrap_LP2Filter_clear},
    { "setParameters", _wrap_LP2Filter_setParameters},
    { "processAudioSample", _wrap_LP2Filter_processAudioSample},
    {0,0}
};
static swig_lua_method swig_LP2Filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LP2Filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LP2Filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LP2Filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LP2Filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LP2Filter_Sf_SwigStatic = {
    "LP2Filter",
    swig_LP2Filter_Sf_SwigStatic_methods,
    swig_LP2Filter_Sf_SwigStatic_attributes,
    swig_LP2Filter_Sf_SwigStatic_constants,
    swig_LP2Filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LP2Filter_bases[] = {0};
static const char *swig_LP2Filter_base_names[] = {0};
static swig_lua_class _wrap_class_LP2Filter = { "LP2Filter", "LP2Filter", &SWIGTYPE_p_SynthLab__LP2Filter,_proxy__wrap_new_LP2Filter, swig_delete_LP2Filter, swig_LP2Filter_methods, swig_LP2Filter_attributes, &swig_LP2Filter_Sf_SwigStatic, swig_LP2Filter_meta, swig_LP2Filter_bases, swig_LP2Filter_base_names };

static int _wrap_new_HP2Filter(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::HP2Filter *result = 0 ;
  
  SWIG_check_num_args("SynthLab::HP2Filter::HP2Filter",0,0)
  result = (SynthLab::HP2Filter *)new SynthLab::HP2Filter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__HP2Filter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HP2Filter_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::HP2Filter *arg1 = (SynthLab::HP2Filter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::HP2Filter::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::HP2Filter::reset",1,"SynthLab::HP2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::HP2Filter::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__HP2Filter,0))){
    SWIG_fail_ptr("HP2Filter_reset",1,SWIGTYPE_p_SynthLab__HP2Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->reset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HP2Filter_setParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::HP2Filter *arg1 = (SynthLab::HP2Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("SynthLab::HP2Filter::setParameters",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::HP2Filter::setParameters",1,"SynthLab::HP2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::HP2Filter::setParameters",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::HP2Filter::setParameters",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__HP2Filter,0))){
    SWIG_fail_ptr("HP2Filter_setParameters",1,SWIGTYPE_p_SynthLab__HP2Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParameters(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HP2Filter_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::HP2Filter *arg1 = (SynthLab::HP2Filter *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::HP2Filter::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::HP2Filter::processAudioSample",1,"SynthLab::HP2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::HP2Filter::processAudioSample",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__HP2Filter,0))){
    SWIG_fail_ptr("HP2Filter_processAudioSample",1,SWIGTYPE_p_SynthLab__HP2Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_HP2Filter(void *obj) {
SynthLab::HP2Filter *arg1 = (SynthLab::HP2Filter *) obj;
delete arg1;
}
static int _proxy__wrap_new_HP2Filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_HP2Filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_HP2Filter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_HP2Filter_methods[]= {
    { "reset", _wrap_HP2Filter_reset},
    { "setParameters", _wrap_HP2Filter_setParameters},
    { "processAudioSample", _wrap_HP2Filter_processAudioSample},
    {0,0}
};
static swig_lua_method swig_HP2Filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_HP2Filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_HP2Filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_HP2Filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_HP2Filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_HP2Filter_Sf_SwigStatic = {
    "HP2Filter",
    swig_HP2Filter_Sf_SwigStatic_methods,
    swig_HP2Filter_Sf_SwigStatic_attributes,
    swig_HP2Filter_Sf_SwigStatic_constants,
    swig_HP2Filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_HP2Filter_bases[] = {0};
static const char *swig_HP2Filter_base_names[] = {0};
static swig_lua_class _wrap_class_HP2Filter = { "HP2Filter", "HP2Filter", &SWIGTYPE_p_SynthLab__HP2Filter,_proxy__wrap_new_HP2Filter, swig_delete_HP2Filter, swig_HP2Filter_methods, swig_HP2Filter_attributes, &swig_HP2Filter_Sf_SwigStatic, swig_HP2Filter_meta, swig_HP2Filter_bases, swig_HP2Filter_base_names };

static int _wrap_new_TinyReson(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::TinyReson *result = 0 ;
  
  SWIG_check_num_args("SynthLab::TinyReson::TinyReson",0,0)
  result = (SynthLab::TinyReson *)new SynthLab::TinyReson();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__TinyReson,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TinyReson_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::TinyReson *arg1 = (SynthLab::TinyReson *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::TinyReson::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::TinyReson::reset",1,"SynthLab::TinyReson *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::TinyReson::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__TinyReson,0))){
    SWIG_fail_ptr("TinyReson_reset",1,SWIGTYPE_p_SynthLab__TinyReson);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->reset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TinyReson_setParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::TinyReson *arg1 = (SynthLab::TinyReson *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("SynthLab::TinyReson::setParameters",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::TinyReson::setParameters",1,"SynthLab::TinyReson *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::TinyReson::setParameters",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::TinyReson::setParameters",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__TinyReson,0))){
    SWIG_fail_ptr("TinyReson_setParameters",1,SWIGTYPE_p_SynthLab__TinyReson);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParameters(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TinyReson_processAudioSample__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::TinyReson *arg1 = (SynthLab::TinyReson *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::TinyReson::processAudioSample",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::TinyReson::processAudioSample",1,"SynthLab::TinyReson *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::TinyReson::processAudioSample",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::TinyReson::processAudioSample",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__TinyReson,0))){
    SWIG_fail_ptr("TinyReson_processAudioSample",1,SWIGTYPE_p_SynthLab__TinyReson);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->processAudioSample(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TinyReson_processAudioSample__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::TinyReson *arg1 = (SynthLab::TinyReson *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::TinyReson::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::TinyReson::processAudioSample",1,"SynthLab::TinyReson *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::TinyReson::processAudioSample",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__TinyReson,0))){
    SWIG_fail_ptr("TinyReson_processAudioSample",1,SWIGTYPE_p_SynthLab__TinyReson);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TinyReson_processAudioSample(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__TinyReson, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TinyReson_processAudioSample__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__TinyReson, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TinyReson_processAudioSample__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TinyReson_processAudioSample'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::TinyReson::processAudioSample(double,double)\n"
    "    SynthLab::TinyReson::processAudioSample(double)\n");
  lua_error(L);return 0;
}


static void swig_delete_TinyReson(void *obj) {
SynthLab::TinyReson *arg1 = (SynthLab::TinyReson *) obj;
delete arg1;
}
static int _proxy__wrap_new_TinyReson(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TinyReson);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TinyReson_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TinyReson_methods[]= {
    { "reset", _wrap_TinyReson_reset},
    { "setParameters", _wrap_TinyReson_setParameters},
    { "processAudioSample", _wrap_TinyReson_processAudioSample},
    {0,0}
};
static swig_lua_method swig_TinyReson_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TinyReson_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TinyReson_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TinyReson_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TinyReson_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TinyReson_Sf_SwigStatic = {
    "TinyReson",
    swig_TinyReson_Sf_SwigStatic_methods,
    swig_TinyReson_Sf_SwigStatic_attributes,
    swig_TinyReson_Sf_SwigStatic_constants,
    swig_TinyReson_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TinyReson_bases[] = {0};
static const char *swig_TinyReson_base_names[] = {0};
static swig_lua_class _wrap_class_TinyReson = { "TinyReson", "TinyReson", &SWIGTYPE_p_SynthLab__TinyReson,_proxy__wrap_new_TinyReson, swig_delete_TinyReson, swig_TinyReson_methods, swig_TinyReson_attributes, &swig_TinyReson_Sf_SwigStatic, swig_TinyReson_meta, swig_TinyReson_bases, swig_TinyReson_base_names };

static int _wrap_new_LowShelfFilter(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LowShelfFilter *result = 0 ;
  
  SWIG_check_num_args("SynthLab::LowShelfFilter::LowShelfFilter",0,0)
  result = (SynthLab::LowShelfFilter *)new SynthLab::LowShelfFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__LowShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LowShelfFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LowShelfFilter *arg1 = (SynthLab::LowShelfFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::LowShelfFilter::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LowShelfFilter::reset",1,"SynthLab::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::LowShelfFilter::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LowShelfFilter,0))){
    SWIG_fail_ptr("LowShelfFilter_reset",1,SWIGTYPE_p_SynthLab__LowShelfFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->reset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LowShelfFilter_setParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LowShelfFilter *arg1 = (SynthLab::LowShelfFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("SynthLab::LowShelfFilter::setParameters",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LowShelfFilter::setParameters",1,"SynthLab::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::LowShelfFilter::setParameters",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::LowShelfFilter::setParameters",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LowShelfFilter,0))){
    SWIG_fail_ptr("LowShelfFilter_setParameters",1,SWIGTYPE_p_SynthLab__LowShelfFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParameters(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LowShelfFilter_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LowShelfFilter *arg1 = (SynthLab::LowShelfFilter *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::LowShelfFilter::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LowShelfFilter::processAudioSample",1,"SynthLab::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::LowShelfFilter::processAudioSample",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LowShelfFilter,0))){
    SWIG_fail_ptr("LowShelfFilter_processAudioSample",1,SWIGTYPE_p_SynthLab__LowShelfFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LowShelfFilter(void *obj) {
SynthLab::LowShelfFilter *arg1 = (SynthLab::LowShelfFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_LowShelfFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LowShelfFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LowShelfFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LowShelfFilter_methods[]= {
    { "reset", _wrap_LowShelfFilter_reset},
    { "setParameters", _wrap_LowShelfFilter_setParameters},
    { "processAudioSample", _wrap_LowShelfFilter_processAudioSample},
    {0,0}
};
static swig_lua_method swig_LowShelfFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LowShelfFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LowShelfFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LowShelfFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LowShelfFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LowShelfFilter_Sf_SwigStatic = {
    "LowShelfFilter",
    swig_LowShelfFilter_Sf_SwigStatic_methods,
    swig_LowShelfFilter_Sf_SwigStatic_attributes,
    swig_LowShelfFilter_Sf_SwigStatic_constants,
    swig_LowShelfFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LowShelfFilter_bases[] = {0};
static const char *swig_LowShelfFilter_base_names[] = {0};
static swig_lua_class _wrap_class_LowShelfFilter = { "LowShelfFilter", "LowShelfFilter", &SWIGTYPE_p_SynthLab__LowShelfFilter,_proxy__wrap_new_LowShelfFilter, swig_delete_LowShelfFilter, swig_LowShelfFilter_methods, swig_LowShelfFilter_attributes, &swig_LowShelfFilter_Sf_SwigStatic, swig_LowShelfFilter_meta, swig_LowShelfFilter_bases, swig_LowShelfFilter_base_names };

static int _wrap_new_HighShelfFilter(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::HighShelfFilter *result = 0 ;
  
  SWIG_check_num_args("SynthLab::HighShelfFilter::HighShelfFilter",0,0)
  result = (SynthLab::HighShelfFilter *)new SynthLab::HighShelfFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__HighShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HighShelfFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::HighShelfFilter *arg1 = (SynthLab::HighShelfFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::HighShelfFilter::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::HighShelfFilter::reset",1,"SynthLab::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::HighShelfFilter::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__HighShelfFilter,0))){
    SWIG_fail_ptr("HighShelfFilter_reset",1,SWIGTYPE_p_SynthLab__HighShelfFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->reset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HighShelfFilter_setParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::HighShelfFilter *arg1 = (SynthLab::HighShelfFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("SynthLab::HighShelfFilter::setParameters",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::HighShelfFilter::setParameters",1,"SynthLab::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::HighShelfFilter::setParameters",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::HighShelfFilter::setParameters",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__HighShelfFilter,0))){
    SWIG_fail_ptr("HighShelfFilter_setParameters",1,SWIGTYPE_p_SynthLab__HighShelfFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParameters(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HighShelfFilter_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::HighShelfFilter *arg1 = (SynthLab::HighShelfFilter *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::HighShelfFilter::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::HighShelfFilter::processAudioSample",1,"SynthLab::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::HighShelfFilter::processAudioSample",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__HighShelfFilter,0))){
    SWIG_fail_ptr("HighShelfFilter_processAudioSample",1,SWIGTYPE_p_SynthLab__HighShelfFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_HighShelfFilter(void *obj) {
SynthLab::HighShelfFilter *arg1 = (SynthLab::HighShelfFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_HighShelfFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_HighShelfFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_HighShelfFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_HighShelfFilter_methods[]= {
    { "reset", _wrap_HighShelfFilter_reset},
    { "setParameters", _wrap_HighShelfFilter_setParameters},
    { "processAudioSample", _wrap_HighShelfFilter_processAudioSample},
    {0,0}
};
static swig_lua_method swig_HighShelfFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_HighShelfFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_HighShelfFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_HighShelfFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_HighShelfFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_HighShelfFilter_Sf_SwigStatic = {
    "HighShelfFilter",
    swig_HighShelfFilter_Sf_SwigStatic_methods,
    swig_HighShelfFilter_Sf_SwigStatic_attributes,
    swig_HighShelfFilter_Sf_SwigStatic_constants,
    swig_HighShelfFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_HighShelfFilter_bases[] = {0};
static const char *swig_HighShelfFilter_base_names[] = {0};
static swig_lua_class _wrap_class_HighShelfFilter = { "HighShelfFilter", "HighShelfFilter", &SWIGTYPE_p_SynthLab__HighShelfFilter,_proxy__wrap_new_HighShelfFilter, swig_delete_HighShelfFilter, swig_HighShelfFilter_methods, swig_HighShelfFilter_attributes, &swig_HighShelfFilter_Sf_SwigStatic, swig_HighShelfFilter_meta, swig_HighShelfFilter_bases, swig_HighShelfFilter_base_names };

static int _wrap_new_ParametricFilter(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ParametricFilter *result = 0 ;
  
  SWIG_check_num_args("SynthLab::ParametricFilter::ParametricFilter",0,0)
  result = (SynthLab::ParametricFilter *)new SynthLab::ParametricFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__ParametricFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParametricFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ParametricFilter *arg1 = (SynthLab::ParametricFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::ParametricFilter::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ParametricFilter::reset",1,"SynthLab::ParametricFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::ParametricFilter::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ParametricFilter,0))){
    SWIG_fail_ptr("ParametricFilter_reset",1,SWIGTYPE_p_SynthLab__ParametricFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->reset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParametricFilter_setParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ParametricFilter *arg1 = (SynthLab::ParametricFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("SynthLab::ParametricFilter::setParameters",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ParametricFilter::setParameters",1,"SynthLab::ParametricFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::ParametricFilter::setParameters",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::ParametricFilter::setParameters",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::ParametricFilter::setParameters",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ParametricFilter,0))){
    SWIG_fail_ptr("ParametricFilter_setParameters",1,SWIGTYPE_p_SynthLab__ParametricFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->setParameters(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParametricFilter_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ParametricFilter *arg1 = (SynthLab::ParametricFilter *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::ParametricFilter::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ParametricFilter::processAudioSample",1,"SynthLab::ParametricFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::ParametricFilter::processAudioSample",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ParametricFilter,0))){
    SWIG_fail_ptr("ParametricFilter_processAudioSample",1,SWIGTYPE_p_SynthLab__ParametricFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParametricFilter(void *obj) {
SynthLab::ParametricFilter *arg1 = (SynthLab::ParametricFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParametricFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParametricFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParametricFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParametricFilter_methods[]= {
    { "reset", _wrap_ParametricFilter_reset},
    { "setParameters", _wrap_ParametricFilter_setParameters},
    { "processAudioSample", _wrap_ParametricFilter_processAudioSample},
    {0,0}
};
static swig_lua_method swig_ParametricFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParametricFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParametricFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParametricFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParametricFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParametricFilter_Sf_SwigStatic = {
    "ParametricFilter",
    swig_ParametricFilter_Sf_SwigStatic_methods,
    swig_ParametricFilter_Sf_SwigStatic_attributes,
    swig_ParametricFilter_Sf_SwigStatic_constants,
    swig_ParametricFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParametricFilter_bases[] = {0};
static const char *swig_ParametricFilter_base_names[] = {0};
static swig_lua_class _wrap_class_ParametricFilter = { "ParametricFilter", "ParametricFilter", &SWIGTYPE_p_SynthLab__ParametricFilter,_proxy__wrap_new_ParametricFilter, swig_delete_ParametricFilter, swig_ParametricFilter_methods, swig_ParametricFilter_attributes, &swig_ParametricFilter_Sf_SwigStatic, swig_ParametricFilter_meta, swig_ParametricFilter_bases, swig_ParametricFilter_base_names };

static int _wrap_new_LP1PFilter(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LP1PFilter *result = 0 ;
  
  SWIG_check_num_args("SynthLab::LP1PFilter::LP1PFilter",0,0)
  result = (SynthLab::LP1PFilter *)new SynthLab::LP1PFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__LP1PFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LP1PFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LP1PFilter *arg1 = (SynthLab::LP1PFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::LP1PFilter::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LP1PFilter::reset",1,"SynthLab::LP1PFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::LP1PFilter::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LP1PFilter,0))){
    SWIG_fail_ptr("LP1PFilter_reset",1,SWIGTYPE_p_SynthLab__LP1PFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->reset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LP1PFilter_clear(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LP1PFilter *arg1 = (SynthLab::LP1PFilter *) 0 ;
  
  SWIG_check_num_args("SynthLab::LP1PFilter::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LP1PFilter::clear",1,"SynthLab::LP1PFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LP1PFilter,0))){
    SWIG_fail_ptr("LP1PFilter_clear",1,SWIGTYPE_p_SynthLab__LP1PFilter);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LP1PFilter_setParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LP1PFilter *arg1 = (SynthLab::LP1PFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::LP1PFilter::setParameters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LP1PFilter::setParameters",1,"SynthLab::LP1PFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::LP1PFilter::setParameters",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LP1PFilter,0))){
    SWIG_fail_ptr("LP1PFilter_setParameters",1,SWIGTYPE_p_SynthLab__LP1PFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setParameters(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LP1PFilter_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LP1PFilter *arg1 = (SynthLab::LP1PFilter *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::LP1PFilter::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LP1PFilter::processAudioSample",1,"SynthLab::LP1PFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::LP1PFilter::processAudioSample",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LP1PFilter,0))){
    SWIG_fail_ptr("LP1PFilter_processAudioSample",1,SWIGTYPE_p_SynthLab__LP1PFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LP1PFilter(void *obj) {
SynthLab::LP1PFilter *arg1 = (SynthLab::LP1PFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_LP1PFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LP1PFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LP1PFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LP1PFilter_methods[]= {
    { "reset", _wrap_LP1PFilter_reset},
    { "clear", _wrap_LP1PFilter_clear},
    { "setParameters", _wrap_LP1PFilter_setParameters},
    { "processAudioSample", _wrap_LP1PFilter_processAudioSample},
    {0,0}
};
static swig_lua_method swig_LP1PFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LP1PFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LP1PFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LP1PFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LP1PFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LP1PFilter_Sf_SwigStatic = {
    "LP1PFilter",
    swig_LP1PFilter_Sf_SwigStatic_methods,
    swig_LP1PFilter_Sf_SwigStatic_attributes,
    swig_LP1PFilter_Sf_SwigStatic_constants,
    swig_LP1PFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LP1PFilter_bases[] = {0};
static const char *swig_LP1PFilter_base_names[] = {0};
static swig_lua_class _wrap_class_LP1PFilter = { "LP1PFilter", "LP1PFilter", &SWIGTYPE_p_SynthLab__LP1PFilter,_proxy__wrap_new_LP1PFilter, swig_delete_LP1PFilter, swig_LP1PFilter_methods, swig_LP1PFilter_attributes, &swig_LP1PFilter_Sf_SwigStatic, swig_LP1PFilter_meta, swig_LP1PFilter_bases, swig_LP1PFilter_base_names };

static int _wrap_new_PluckPosFilter(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PluckPosFilter *result = 0 ;
  
  SWIG_check_num_args("SynthLab::PluckPosFilter::PluckPosFilter",0,0)
  result = (SynthLab::PluckPosFilter *)new SynthLab::PluckPosFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__PluckPosFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PluckPosFilter_clear(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PluckPosFilter *arg1 = (SynthLab::PluckPosFilter *) 0 ;
  
  SWIG_check_num_args("SynthLab::PluckPosFilter::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PluckPosFilter::clear",1,"SynthLab::PluckPosFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PluckPosFilter,0))){
    SWIG_fail_ptr("PluckPosFilter_clear",1,SWIGTYPE_p_SynthLab__PluckPosFilter);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PluckPosFilter_reset__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PluckPosFilter *arg1 = (SynthLab::PluckPosFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("SynthLab::PluckPosFilter::reset",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PluckPosFilter::reset",1,"SynthLab::PluckPosFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::PluckPosFilter::reset",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::PluckPosFilter::reset",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PluckPosFilter,0))){
    SWIG_fail_ptr("PluckPosFilter_reset",1,SWIGTYPE_p_SynthLab__PluckPosFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->reset(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PluckPosFilter_reset__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PluckPosFilter *arg1 = (SynthLab::PluckPosFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::PluckPosFilter::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PluckPosFilter::reset",1,"SynthLab::PluckPosFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::PluckPosFilter::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PluckPosFilter,0))){
    SWIG_fail_ptr("PluckPosFilter_reset",1,SWIGTYPE_p_SynthLab__PluckPosFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->reset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PluckPosFilter_reset(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__PluckPosFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PluckPosFilter_reset__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__PluckPosFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_PluckPosFilter_reset__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PluckPosFilter_reset'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::PluckPosFilter::reset(double,double)\n"
    "    SynthLab::PluckPosFilter::reset(double)\n");
  lua_error(L);return 0;
}


static int _wrap_PluckPosFilter_setDelayInSamples(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PluckPosFilter *arg1 = (SynthLab::PluckPosFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::PluckPosFilter::setDelayInSamples",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PluckPosFilter::setDelayInSamples",1,"SynthLab::PluckPosFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::PluckPosFilter::setDelayInSamples",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PluckPosFilter,0))){
    SWIG_fail_ptr("PluckPosFilter_setDelayInSamples",1,SWIGTYPE_p_SynthLab__PluckPosFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setDelayInSamples(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PluckPosFilter_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PluckPosFilter *arg1 = (SynthLab::PluckPosFilter *) 0 ;
  double arg2 ;
  SynthLab::PluckFilterType arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::PluckPosFilter::processAudioSample",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PluckPosFilter::processAudioSample",1,"SynthLab::PluckPosFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::PluckPosFilter::processAudioSample",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::PluckPosFilter::processAudioSample",3,"SynthLab::PluckFilterType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PluckPosFilter,0))){
    SWIG_fail_ptr("PluckPosFilter_processAudioSample",1,SWIGTYPE_p_SynthLab__PluckPosFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (SynthLab::PluckFilterType)(int)lua_tonumber(L, 3);
  result = (double)(arg1)->processAudioSample(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PluckPosFilter(void *obj) {
SynthLab::PluckPosFilter *arg1 = (SynthLab::PluckPosFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_PluckPosFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PluckPosFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PluckPosFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PluckPosFilter_methods[]= {
    { "clear", _wrap_PluckPosFilter_clear},
    { "reset", _wrap_PluckPosFilter_reset},
    { "setDelayInSamples", _wrap_PluckPosFilter_setDelayInSamples},
    { "processAudioSample", _wrap_PluckPosFilter_processAudioSample},
    {0,0}
};
static swig_lua_method swig_PluckPosFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PluckPosFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PluckPosFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PluckPosFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PluckPosFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PluckPosFilter_Sf_SwigStatic = {
    "PluckPosFilter",
    swig_PluckPosFilter_Sf_SwigStatic_methods,
    swig_PluckPosFilter_Sf_SwigStatic_attributes,
    swig_PluckPosFilter_Sf_SwigStatic_constants,
    swig_PluckPosFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PluckPosFilter_bases[] = {0};
static const char *swig_PluckPosFilter_base_names[] = {0};
static swig_lua_class _wrap_class_PluckPosFilter = { "PluckPosFilter", "PluckPosFilter", &SWIGTYPE_p_SynthLab__PluckPosFilter,_proxy__wrap_new_PluckPosFilter, swig_delete_PluckPosFilter, swig_PluckPosFilter_methods, swig_PluckPosFilter_attributes, &swig_PluckPosFilter_Sf_SwigStatic, swig_PluckPosFilter_meta, swig_PluckPosFilter_bases, swig_PluckPosFilter_base_names };

static int _wrap_MAX_VOICES_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::MAX_VOICES",0,0)
  result = (uint32_t)SynthLab::MAX_VOICES;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MAX_SYNTH_CHANNELS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::MAX_SYNTH_CHANNELS",0,0)
  result = (uint32_t)SynthLab::MAX_SYNTH_CHANNELS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MAX_OSC_CHANNELS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::MAX_OSC_CHANNELS",0,0)
  result = (uint32_t)SynthLab::MAX_OSC_CHANNELS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MAX_PROCESSOR_CHANNELS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::MAX_PROCESSOR_CHANNELS",0,0)
  result = (uint32_t)SynthLab::MAX_PROCESSOR_CHANNELS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MAX_MODULATION_CHANNELS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::MAX_MODULATION_CHANNELS",0,0)
  result = (uint32_t)SynthLab::MAX_MODULATION_CHANNELS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PITCHLESS_LOOP_get(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("SynthLab::PITCHLESS_LOOP",0,0)
  result = (bool)(bool)SynthLab::PITCHLESS_LOOP;
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AUBIO_SLICES_get(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("SynthLab::AUBIO_SLICES",0,0)
  result = (bool)(bool)SynthLab::AUBIO_SLICES;
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NO_CHANNELS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::NO_CHANNELS",0,0)
  result = (uint32_t)SynthLab::NO_CHANNELS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MAX_SEQ_STEPS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::MAX_SEQ_STEPS",0,0)
  result = (uint32_t)SynthLab::MAX_SEQ_STEPS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MAX_SEQ_STEPSPLUS_OFF_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::MAX_SEQ_STEPSPLUS_OFF",0,0)
  result = (uint32_t)SynthLab::MAX_SEQ_STEPSPLUS_OFF;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WRAP_MASK_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WRAP_MASK",0,0)
  result = (uint32_t)SynthLab::WRAP_MASK;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NUM_OSC_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::NUM_OSC",0,0)
  result = (uint32_t)SynthLab::NUM_OSC;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NUM_LFO_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::NUM_LFO",0,0)
  result = (uint32_t)SynthLab::NUM_LFO;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NUM_FILTER_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::NUM_FILTER",0,0)
  result = (uint32_t)SynthLab::NUM_FILTER;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NUM_EG_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::NUM_EG",0,0)
  result = (uint32_t)SynthLab::NUM_EG;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NUM_WS_OSCILLATORS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::NUM_WS_OSCILLATORS",0,0)
  result = (uint32_t)SynthLab::NUM_WS_OSCILLATORS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NUM_OSCILLATORS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::NUM_OSCILLATORS",0,0)
  result = (uint32_t)SynthLab::NUM_OSCILLATORS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SHUTDOWN_TIME_MSEC_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::SHUTDOWN_TIME_MSEC",0,0)
  result = (double)(double)SynthLab::SHUTDOWN_TIME_MSEC;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UNDEFINED_MODULE_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::UNDEFINED_MODULE",0,0)
  result = (uint32_t)SynthLab::UNDEFINED_MODULE;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_MODULE_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::LFO_MODULE",0,0)
  result = (uint32_t)SynthLab::LFO_MODULE;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EG_MODULE_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::EG_MODULE",0,0)
  result = (uint32_t)SynthLab::EG_MODULE;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCA_MODULE_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::DCA_MODULE",0,0)
  result = (uint32_t)SynthLab::DCA_MODULE;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FILTER_MODULE_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::FILTER_MODULE",0,0)
  result = (uint32_t)SynthLab::FILTER_MODULE;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTO_MODULE_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WTO_MODULE",0,0)
  result = (uint32_t)SynthLab::WTO_MODULE;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAO_MODULE_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::VAO_MODULE",0,0)
  result = (uint32_t)SynthLab::VAO_MODULE;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMO_MODULE_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::FMO_MODULE",0,0)
  result = (uint32_t)SynthLab::FMO_MODULE;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMO_MODULE_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::PCMO_MODULE",0,0)
  result = (uint32_t)SynthLab::PCMO_MODULE;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSO_MODULE_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::KSO_MODULE",0,0)
  result = (uint32_t)SynthLab::KSO_MODULE;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSC_MODULE_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::OSC_MODULE",0,0)
  result = (uint32_t)SynthLab::OSC_MODULE;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MODULE_STRINGS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::MODULE_STRINGS",0,0)
  result = (uint32_t)SynthLab::MODULE_STRINGS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HALF_LEGACY_STRINGS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::HALF_LEGACY_STRINGS",0,0)
  result = (uint32_t)SynthLab::HALF_LEGACY_STRINGS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HALF_MELLOTRON_STRINGS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::HALF_MELLOTRON_STRINGS",0,0)
  result = (uint32_t)SynthLab::HALF_MELLOTRON_STRINGS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTBANK_SOURCES_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WTBANK_SOURCES",0,0)
  result = (uint32_t)SynthLab::WTBANK_SOURCES;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMPLBANK_SOURCES_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::SMPLBANK_SOURCES",0,0)
  result = (uint32_t)SynthLab::SMPLBANK_SOURCES;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MOD_KNOBS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::MOD_KNOBS",0,0)
  result = (uint32_t)SynthLab::MOD_KNOBS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NUM_MODULE_CORES_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::NUM_MODULE_CORES",0,0)
  result = (uint32_t)SynthLab::NUM_MODULE_CORES;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DEFAULT_CORE_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::DEFAULT_CORE",0,0)
  result = (uint32_t)SynthLab::DEFAULT_CORE;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUSTOM_CORE_0_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::CUSTOM_CORE_0",0,0)
  result = (uint32_t)SynthLab::CUSTOM_CORE_0;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUSTOM_CORE_1_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::CUSTOM_CORE_1",0,0)
  result = (uint32_t)SynthLab::CUSTOM_CORE_1;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUSTOM_CORE_2_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::CUSTOM_CORE_2",0,0)
  result = (uint32_t)SynthLab::CUSTOM_CORE_2;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO1_WAVEFORMS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::LFO1_WAVEFORMS",0,0)
  result = (uint32_t)SynthLab::LFO1_WAVEFORMS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO2_WAVEFORMS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::LFO2_WAVEFORMS",0,0)
  result = (uint32_t)SynthLab::LFO2_WAVEFORMS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSC1_WAVEFORMS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::OSC1_WAVEFORMS",0,0)
  result = (uint32_t)SynthLab::OSC1_WAVEFORMS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSC2_WAVEFORMS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::OSC2_WAVEFORMS",0,0)
  result = (uint32_t)SynthLab::OSC2_WAVEFORMS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSC3_WAVEFORMS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::OSC3_WAVEFORMS",0,0)
  result = (uint32_t)SynthLab::OSC3_WAVEFORMS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSC4_WAVEFORMS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::OSC4_WAVEFORMS",0,0)
  result = (uint32_t)SynthLab::OSC4_WAVEFORMS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EG1_CONTOUR_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::EG1_CONTOUR",0,0)
  result = (uint32_t)SynthLab::EG1_CONTOUR;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EG2_CONTOUR_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::EG2_CONTOUR",0,0)
  result = (uint32_t)SynthLab::EG2_CONTOUR;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EG3_CONTOUR_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::EG3_CONTOUR",0,0)
  result = (uint32_t)SynthLab::EG3_CONTOUR;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FILTER1_TYPES_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::FILTER1_TYPES",0,0)
  result = (uint32_t)SynthLab::FILTER1_TYPES;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FILTER2_TYPES_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::FILTER2_TYPES",0,0)
  result = (uint32_t)SynthLab::FILTER2_TYPES;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO1_SOURCE_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::LFO1_SOURCE",0,0)
  result = (uint32_t)SynthLab::LFO1_SOURCE;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO2_SOURCE_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::LFO2_SOURCE",0,0)
  result = (uint32_t)SynthLab::LFO2_SOURCE;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSC1_SOURCE_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::OSC1_SOURCE",0,0)
  result = (uint32_t)SynthLab::OSC1_SOURCE;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSC2_SOURCE_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::OSC2_SOURCE",0,0)
  result = (uint32_t)SynthLab::OSC2_SOURCE;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSC3_SOURCE_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::OSC3_SOURCE",0,0)
  result = (uint32_t)SynthLab::OSC3_SOURCE;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSC4_SOURCE_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::OSC4_SOURCE",0,0)
  result = (uint32_t)SynthLab::OSC4_SOURCE;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EG1_SOURCE_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::EG1_SOURCE",0,0)
  result = (uint32_t)SynthLab::EG1_SOURCE;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EG2_SOURCE_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::EG2_SOURCE",0,0)
  result = (uint32_t)SynthLab::EG2_SOURCE;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EG3_SOURCE_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::EG3_SOURCE",0,0)
  result = (uint32_t)SynthLab::EG3_SOURCE;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FILTER1_SOURCE_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::FILTER1_SOURCE",0,0)
  result = (uint32_t)SynthLab::FILTER1_SOURCE;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FILTER2_SOURCE_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::FILTER2_SOURCE",0,0)
  result = (uint32_t)SynthLab::FILTER2_SOURCE;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_SEQ_WAVES_1_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WAVE_SEQ_WAVES_1",0,0)
  result = (uint32_t)SynthLab::WAVE_SEQ_WAVES_1;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_SEQ_WAVES_2_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WAVE_SEQ_WAVES_2",0,0)
  result = (uint32_t)SynthLab::WAVE_SEQ_WAVES_2;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_SEQ_WAVES_3_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WAVE_SEQ_WAVES_3",0,0)
  result = (uint32_t)SynthLab::WAVE_SEQ_WAVES_3;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_SEQ_WAVES_4_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WAVE_SEQ_WAVES_4",0,0)
  result = (uint32_t)SynthLab::WAVE_SEQ_WAVES_4;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_SEQ_WAVES_5_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WAVE_SEQ_WAVES_5",0,0)
  result = (uint32_t)SynthLab::WAVE_SEQ_WAVES_5;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_SEQ_WAVES_6_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WAVE_SEQ_WAVES_6",0,0)
  result = (uint32_t)SynthLab::WAVE_SEQ_WAVES_6;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_SEQ_WAVES_7_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WAVE_SEQ_WAVES_7",0,0)
  result = (uint32_t)SynthLab::WAVE_SEQ_WAVES_7;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_SEQ_WAVES_8_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WAVE_SEQ_WAVES_8",0,0)
  result = (uint32_t)SynthLab::WAVE_SEQ_WAVES_8;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_empty_string_get(lua_State* L) {
  int SWIG_arg = 0;
  std::string result;
  
  SWIG_check_num_args("SynthLab::empty_string",0,0)
  result = (std::string)SynthLab::empty_string;
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO1_MOD_KNOBS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::LFO1_MOD_KNOBS",0,0)
  result = (uint32_t)SynthLab::LFO1_MOD_KNOBS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO2_MOD_KNOBS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::LFO2_MOD_KNOBS",0,0)
  result = (uint32_t)SynthLab::LFO2_MOD_KNOBS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSC1_MOD_KNOBS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::OSC1_MOD_KNOBS",0,0)
  result = (uint32_t)SynthLab::OSC1_MOD_KNOBS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSC2_MOD_KNOBS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::OSC2_MOD_KNOBS",0,0)
  result = (uint32_t)SynthLab::OSC2_MOD_KNOBS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSC3_MOD_KNOBS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::OSC3_MOD_KNOBS",0,0)
  result = (uint32_t)SynthLab::OSC3_MOD_KNOBS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSC4_MOD_KNOBS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::OSC4_MOD_KNOBS",0,0)
  result = (uint32_t)SynthLab::OSC4_MOD_KNOBS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EG1_MOD_KNOBS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::EG1_MOD_KNOBS",0,0)
  result = (uint32_t)SynthLab::EG1_MOD_KNOBS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EG2_MOD_KNOBS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::EG2_MOD_KNOBS",0,0)
  result = (uint32_t)SynthLab::EG2_MOD_KNOBS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EG3_MOD_KNOBS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::EG3_MOD_KNOBS",0,0)
  result = (uint32_t)SynthLab::EG3_MOD_KNOBS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FILTER1_MOD_KNOBS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::FILTER1_MOD_KNOBS",0,0)
  result = (uint32_t)SynthLab::FILTER1_MOD_KNOBS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FILTER2_MOD_KNOBS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::FILTER2_MOD_KNOBS",0,0)
  result = (uint32_t)SynthLab::FILTER2_MOD_KNOBS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sin_1024_set(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 ;
  
  SWIG_check_num_args("SynthLab::sin_1024",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::sin_1024",1,"double [1024]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("sin_1024_set",1,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) SynthLab::sin_1024;
    for (ii = 0; ii < (size_t)1024; ii++) b[ii] = *((double *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sin_1024_get(lua_State* L) {
  int SWIG_arg = 0;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::sin_1024",0,0)
  result = (double *)(double *)SynthLab::sin_1024;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DEFAULT_LUT_LENGTH_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::DEFAULT_LUT_LENGTH",0,0)
  result = (uint32_t)SynthLab::DEFAULT_LUT_LENGTH;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DEFAULT_LUT_WRAP_MASK_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::DEFAULT_LUT_WRAP_MASK",0,0)
  result = (uint32_t)SynthLab::DEFAULT_LUT_WRAP_MASK;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kMinModGain_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::kMinModGain_dB",0,0)
  result = (double)(double)SynthLab::kMinModGain_dB;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kMaxModGain_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::kMaxModGain_dB",0,0)
  result = (double)(double)SynthLab::kMaxModGain_dB;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kMinAbsoluteGain_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::kMinAbsoluteGain_dB",0,0)
  result = (double)(double)SynthLab::kMinAbsoluteGain_dB;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kDCA_Amp_ModRange_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::kDCA_Amp_ModRange",0,0)
  result = (double)(double)SynthLab::kDCA_Amp_ModRange;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kDCA_Pan_ModRange_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::kDCA_Pan_ModRange",0,0)
  result = (double)(double)SynthLab::kDCA_Pan_ModRange;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kOscBipolarModRangeSemitones_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::kOscBipolarModRangeSemitones",0,0)
  result = (double)(double)SynthLab::kOscBipolarModRangeSemitones;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kSqrtTwo_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::kSqrtTwo",0,0)
  result = (double)(double)SynthLab::kSqrtTwo;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kPi_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::kPi",0,0)
  result = (double)(double)SynthLab::kPi;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kTwoPi_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::kTwoPi",0,0)
  result = (double)(double)SynthLab::kTwoPi;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sineTableLength_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::sineTableLength",0,0)
  result = (uint32_t)SynthLab::sineTableLength;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinetable_set(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 ;
  
  SWIG_check_num_args("SynthLab::sinetable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::sinetable",1,"double [SynthLab::sineTableLength]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("sinetable_set",1,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) SynthLab::sinetable;
    for (ii = 0; ii < (size_t)SynthLab::sineTableLength; ii++) b[ii] = *((double *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinetable_get(lua_State* L) {
  int SWIG_arg = 0;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::sinetable",0,0)
  result = (double *)(double *)SynthLab::sinetable;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_costable_set(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 ;
  
  SWIG_check_num_args("SynthLab::costable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::costable",1,"double [SynthLab::sineTableLength]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("costable_set",1,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) SynthLab::costable;
    for (ii = 0; ii < (size_t)SynthLab::sineTableLength; ii++) b[ii] = *((double *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_costable_get(lua_State* L) {
  int SWIG_arg = 0;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::costable",0,0)
  result = (double *)(double *)SynthLab::costable;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kPiSqared_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::kPiSqared",0,0)
  result = (double)(double)SynthLab::kPiSqared;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kFourPi_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::kFourPi",0,0)
  result = (double)(double)SynthLab::kFourPi;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kPiOverFour_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::kPiOverFour",0,0)
  result = (double)(double)SynthLab::kPiOverFour;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kNumMIDICCs_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::kNumMIDICCs",0,0)
  result = (uint32_t)SynthLab::kNumMIDICCs;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NOTE_OFF_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::NOTE_OFF",0,0)
  result = (unsigned char)(unsigned char)SynthLab::NOTE_OFF;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NOTE_ON_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::NOTE_ON",0,0)
  result = (unsigned char)(unsigned char)SynthLab::NOTE_ON;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_POLY_PRESSURE_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::POLY_PRESSURE",0,0)
  result = (unsigned char)(unsigned char)SynthLab::POLY_PRESSURE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CONTROL_CHANGE_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::CONTROL_CHANGE",0,0)
  result = (unsigned char)(unsigned char)SynthLab::CONTROL_CHANGE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PROGRAM_CHANGE_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::PROGRAM_CHANGE",0,0)
  result = (unsigned char)(unsigned char)SynthLab::PROGRAM_CHANGE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CHANNEL_PRESSURE_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::CHANNEL_PRESSURE",0,0)
  result = (unsigned char)(unsigned char)SynthLab::CHANNEL_PRESSURE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PITCH_BEND_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::PITCH_BEND",0,0)
  result = (unsigned char)(unsigned char)SynthLab::PITCH_BEND;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MOD_WHEEL_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::MOD_WHEEL",0,0)
  result = (unsigned char)(unsigned char)SynthLab::MOD_WHEEL;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VOLUME_CC07_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::VOLUME_CC07",0,0)
  result = (unsigned char)(unsigned char)SynthLab::VOLUME_CC07;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PAN_CC10_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::PAN_CC10",0,0)
  result = (unsigned char)(unsigned char)SynthLab::PAN_CC10;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EXPRESSION_CC11_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::EXPRESSION_CC11",0,0)
  result = (unsigned char)(unsigned char)SynthLab::EXPRESSION_CC11;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JOYSTICK_X_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::JOYSTICK_X",0,0)
  result = (unsigned char)(unsigned char)SynthLab::JOYSTICK_X;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JOYSTICK_Y_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::JOYSTICK_Y",0,0)
  result = (unsigned char)(unsigned char)SynthLab::JOYSTICK_Y;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUSTAIN_PEDAL_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::SUSTAIN_PEDAL",0,0)
  result = (unsigned char)(unsigned char)SynthLab::SUSTAIN_PEDAL;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RESET_ALL_CONTROLLERS_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::RESET_ALL_CONTROLLERS",0,0)
  result = (unsigned char)(unsigned char)SynthLab::RESET_ALL_CONTROLLERS;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ALL_NOTES_OFF_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::ALL_NOTES_OFF",0,0)
  result = (unsigned char)(unsigned char)SynthLab::ALL_NOTES_OFF;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SYSTEM_EXCLUSIVE_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::SYSTEM_EXCLUSIVE",0,0)
  result = (unsigned char)(unsigned char)SynthLab::SYSTEM_EXCLUSIVE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MIDI_TIME_CODE_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::MIDI_TIME_CODE",0,0)
  result = (unsigned char)(unsigned char)SynthLab::MIDI_TIME_CODE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SONG_POSITION_POINTER_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::SONG_POSITION_POINTER",0,0)
  result = (unsigned char)(unsigned char)SynthLab::SONG_POSITION_POINTER;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SONG_SELECT_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::SONG_SELECT",0,0)
  result = (unsigned char)(unsigned char)SynthLab::SONG_SELECT;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TUNE_REQUEST_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::TUNE_REQUEST",0,0)
  result = (unsigned char)(unsigned char)SynthLab::TUNE_REQUEST;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_END_OF_EXCLUSIVE_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::END_OF_EXCLUSIVE",0,0)
  result = (unsigned char)(unsigned char)SynthLab::END_OF_EXCLUSIVE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TIMING_CLOCK_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::TIMING_CLOCK",0,0)
  result = (unsigned char)(unsigned char)SynthLab::TIMING_CLOCK;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_START_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::START",0,0)
  result = (unsigned char)(unsigned char)SynthLab::START;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CONTINUE_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::CONTINUE",0,0)
  result = (unsigned char)(unsigned char)SynthLab::CONTINUE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SToP_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::SToP",0,0)
  result = (unsigned char)(unsigned char)SynthLab::SToP;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ACTIVE_SENSING_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::ACTIVE_SENSING",0,0)
  result = (unsigned char)(unsigned char)SynthLab::ACTIVE_SENSING;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SYSTEM_RESET_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char result;
  
  SWIG_check_num_args("SynthLab::SYSTEM_RESET",0,0)
  result = (unsigned char)(unsigned char)SynthLab::SYSTEM_RESET;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NUM_MIDI_NOTES_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::NUM_MIDI_NOTES",0,0)
  result = (uint32_t)SynthLab::NUM_MIDI_NOTES;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MIDI_NOTE_A0_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::MIDI_NOTE_A0",0,0)
  result = (uint32_t)SynthLab::MIDI_NOTE_A0;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MIDI_NOTE_A4_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::MIDI_NOTE_A4",0,0)
  result = (uint32_t)SynthLab::MIDI_NOTE_A4;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MIDI_NOTE_0_FREQ_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::MIDI_NOTE_0_FREQ",0,0)
  result = (double)(double)SynthLab::MIDI_NOTE_0_FREQ;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SynthEngineParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngineParameters *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthEngineParameters::SynthEngineParameters",0,0)
  result = (SynthLab::SynthEngineParameters *)new SynthLab::SynthEngineParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__SynthEngineParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngineParameters_enableMIDINoteEvents_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngineParameters *arg1 = (SynthLab::SynthEngineParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthEngineParameters::enableMIDINoteEvents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngineParameters::enableMIDINoteEvents",1,"SynthLab::SynthEngineParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::SynthEngineParameters::enableMIDINoteEvents",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngineParameters,0))){
    SWIG_fail_ptr("SynthEngineParameters_enableMIDINoteEvents_set",1,SWIGTYPE_p_SynthLab__SynthEngineParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->enableMIDINoteEvents = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngineParameters_enableMIDINoteEvents_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngineParameters *arg1 = (SynthLab::SynthEngineParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthEngineParameters::enableMIDINoteEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngineParameters::enableMIDINoteEvents",1,"SynthLab::SynthEngineParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngineParameters,0))){
    SWIG_fail_ptr("SynthEngineParameters_enableMIDINoteEvents_get",1,SWIGTYPE_p_SynthLab__SynthEngineParameters);
  }
  
  result = (bool) ((arg1)->enableMIDINoteEvents);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngineParameters_synthModeIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngineParameters *arg1 = (SynthLab::SynthEngineParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::SynthEngineParameters::synthModeIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngineParameters::synthModeIndex",1,"SynthLab::SynthEngineParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthEngineParameters::synthModeIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngineParameters,0))){
    SWIG_fail_ptr("SynthEngineParameters_synthModeIndex_set",1,SWIGTYPE_p_SynthLab__SynthEngineParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("SynthEngineParameters_synthModeIndex_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->synthModeIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngineParameters_synthModeIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngineParameters *arg1 = (SynthLab::SynthEngineParameters *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::SynthEngineParameters::synthModeIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngineParameters::synthModeIndex",1,"SynthLab::SynthEngineParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngineParameters,0))){
    SWIG_fail_ptr("SynthEngineParameters_synthModeIndex_get",1,SWIGTYPE_p_SynthLab__SynthEngineParameters);
  }
  
  result =  ((arg1)->synthModeIndex);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngineParameters_globalVolume_dB_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngineParameters *arg1 = (SynthLab::SynthEngineParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthEngineParameters::globalVolume_dB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngineParameters::globalVolume_dB",1,"SynthLab::SynthEngineParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthEngineParameters::globalVolume_dB",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngineParameters,0))){
    SWIG_fail_ptr("SynthEngineParameters_globalVolume_dB_set",1,SWIGTYPE_p_SynthLab__SynthEngineParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->globalVolume_dB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngineParameters_globalVolume_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngineParameters *arg1 = (SynthLab::SynthEngineParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::SynthEngineParameters::globalVolume_dB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngineParameters::globalVolume_dB",1,"SynthLab::SynthEngineParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngineParameters,0))){
    SWIG_fail_ptr("SynthEngineParameters_globalVolume_dB_get",1,SWIGTYPE_p_SynthLab__SynthEngineParameters);
  }
  
  result = (double) ((arg1)->globalVolume_dB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngineParameters_globalPitchBendSensCoarse_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngineParameters *arg1 = (SynthLab::SynthEngineParameters *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthEngineParameters::globalPitchBendSensCoarse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngineParameters::globalPitchBendSensCoarse",1,"SynthLab::SynthEngineParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthEngineParameters::globalPitchBendSensCoarse",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngineParameters,0))){
    SWIG_fail_ptr("SynthEngineParameters_globalPitchBendSensCoarse_set",1,SWIGTYPE_p_SynthLab__SynthEngineParameters);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->globalPitchBendSensCoarse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngineParameters_globalPitchBendSensCoarse_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngineParameters *arg1 = (SynthLab::SynthEngineParameters *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("SynthLab::SynthEngineParameters::globalPitchBendSensCoarse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngineParameters::globalPitchBendSensCoarse",1,"SynthLab::SynthEngineParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngineParameters,0))){
    SWIG_fail_ptr("SynthEngineParameters_globalPitchBendSensCoarse_get",1,SWIGTYPE_p_SynthLab__SynthEngineParameters);
  }
  
  result = (unsigned int) ((arg1)->globalPitchBendSensCoarse);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngineParameters_globalPitchBendSensFine_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngineParameters *arg1 = (SynthLab::SynthEngineParameters *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthEngineParameters::globalPitchBendSensFine",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngineParameters::globalPitchBendSensFine",1,"SynthLab::SynthEngineParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthEngineParameters::globalPitchBendSensFine",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngineParameters,0))){
    SWIG_fail_ptr("SynthEngineParameters_globalPitchBendSensFine_set",1,SWIGTYPE_p_SynthLab__SynthEngineParameters);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->globalPitchBendSensFine = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngineParameters_globalPitchBendSensFine_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngineParameters *arg1 = (SynthLab::SynthEngineParameters *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("SynthLab::SynthEngineParameters::globalPitchBendSensFine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngineParameters::globalPitchBendSensFine",1,"SynthLab::SynthEngineParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngineParameters,0))){
    SWIG_fail_ptr("SynthEngineParameters_globalPitchBendSensFine_get",1,SWIGTYPE_p_SynthLab__SynthEngineParameters);
  }
  
  result = (unsigned int) ((arg1)->globalPitchBendSensFine);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngineParameters_globalTuningCoarse_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngineParameters *arg1 = (SynthLab::SynthEngineParameters *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthEngineParameters::globalTuningCoarse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngineParameters::globalTuningCoarse",1,"SynthLab::SynthEngineParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthEngineParameters::globalTuningCoarse",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngineParameters,0))){
    SWIG_fail_ptr("SynthEngineParameters_globalTuningCoarse_set",1,SWIGTYPE_p_SynthLab__SynthEngineParameters);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->globalTuningCoarse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngineParameters_globalTuningCoarse_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngineParameters *arg1 = (SynthLab::SynthEngineParameters *) 0 ;
  int result;
  
  SWIG_check_num_args("SynthLab::SynthEngineParameters::globalTuningCoarse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngineParameters::globalTuningCoarse",1,"SynthLab::SynthEngineParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngineParameters,0))){
    SWIG_fail_ptr("SynthEngineParameters_globalTuningCoarse_get",1,SWIGTYPE_p_SynthLab__SynthEngineParameters);
  }
  
  result = (int) ((arg1)->globalTuningCoarse);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngineParameters_globalTuningFine_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngineParameters *arg1 = (SynthLab::SynthEngineParameters *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthEngineParameters::globalTuningFine",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngineParameters::globalTuningFine",1,"SynthLab::SynthEngineParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthEngineParameters::globalTuningFine",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngineParameters,0))){
    SWIG_fail_ptr("SynthEngineParameters_globalTuningFine_set",1,SWIGTYPE_p_SynthLab__SynthEngineParameters);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->globalTuningFine = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngineParameters_globalTuningFine_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngineParameters *arg1 = (SynthLab::SynthEngineParameters *) 0 ;
  int result;
  
  SWIG_check_num_args("SynthLab::SynthEngineParameters::globalTuningFine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngineParameters::globalTuningFine",1,"SynthLab::SynthEngineParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngineParameters,0))){
    SWIG_fail_ptr("SynthEngineParameters_globalTuningFine_get",1,SWIGTYPE_p_SynthLab__SynthEngineParameters);
  }
  
  result = (int) ((arg1)->globalTuningFine);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngineParameters_globalUnisonDetune_Cents_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngineParameters *arg1 = (SynthLab::SynthEngineParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthEngineParameters::globalUnisonDetune_Cents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngineParameters::globalUnisonDetune_Cents",1,"SynthLab::SynthEngineParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthEngineParameters::globalUnisonDetune_Cents",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngineParameters,0))){
    SWIG_fail_ptr("SynthEngineParameters_globalUnisonDetune_Cents_set",1,SWIGTYPE_p_SynthLab__SynthEngineParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->globalUnisonDetune_Cents = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngineParameters_globalUnisonDetune_Cents_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngineParameters *arg1 = (SynthLab::SynthEngineParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::SynthEngineParameters::globalUnisonDetune_Cents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngineParameters::globalUnisonDetune_Cents",1,"SynthLab::SynthEngineParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngineParameters,0))){
    SWIG_fail_ptr("SynthEngineParameters_globalUnisonDetune_Cents_get",1,SWIGTYPE_p_SynthLab__SynthEngineParameters);
  }
  
  result = (double) ((arg1)->globalUnisonDetune_Cents);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngineParameters_voiceParameters_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngineParameters *arg1 = (SynthLab::SynthEngineParameters *) 0 ;
  std::shared_ptr< SynthVoiceParameters > arg2 ;
  std::shared_ptr< SynthVoiceParameters > *argp2 ;
  
  SWIG_check_num_args("SynthLab::SynthEngineParameters::voiceParameters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngineParameters::voiceParameters",1,"SynthLab::SynthEngineParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthEngineParameters::voiceParameters",2,"std::shared_ptr< SynthVoiceParameters >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngineParameters,0))){
    SWIG_fail_ptr("SynthEngineParameters_voiceParameters_set",1,SWIGTYPE_p_SynthLab__SynthEngineParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__shared_ptrT_SynthVoiceParameters_t,0))){
    SWIG_fail_ptr("SynthEngineParameters_voiceParameters_set",2,SWIGTYPE_p_std__shared_ptrT_SynthVoiceParameters_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->voiceParameters = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngineParameters_voiceParameters_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngineParameters *arg1 = (SynthLab::SynthEngineParameters *) 0 ;
  std::shared_ptr< SynthVoiceParameters > result;
  
  SWIG_check_num_args("SynthLab::SynthEngineParameters::voiceParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngineParameters::voiceParameters",1,"SynthLab::SynthEngineParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngineParameters,0))){
    SWIG_fail_ptr("SynthEngineParameters_voiceParameters_get",1,SWIGTYPE_p_SynthLab__SynthEngineParameters);
  }
  
  result =  ((arg1)->voiceParameters);
  {
    std::shared_ptr< SynthVoiceParameters > * resultptr = new std::shared_ptr< SynthVoiceParameters >((const std::shared_ptr< SynthVoiceParameters > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_SynthVoiceParameters_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SynthEngineParameters(void *obj) {
SynthLab::SynthEngineParameters *arg1 = (SynthLab::SynthEngineParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_SynthEngineParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SynthEngineParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SynthEngineParameters_attributes[] = {
    { "enableMIDINoteEvents", _wrap_SynthEngineParameters_enableMIDINoteEvents_get, _wrap_SynthEngineParameters_enableMIDINoteEvents_set },
    { "synthModeIndex", _wrap_SynthEngineParameters_synthModeIndex_get, _wrap_SynthEngineParameters_synthModeIndex_set },
    { "globalVolume_dB", _wrap_SynthEngineParameters_globalVolume_dB_get, _wrap_SynthEngineParameters_globalVolume_dB_set },
    { "globalPitchBendSensCoarse", _wrap_SynthEngineParameters_globalPitchBendSensCoarse_get, _wrap_SynthEngineParameters_globalPitchBendSensCoarse_set },
    { "globalPitchBendSensFine", _wrap_SynthEngineParameters_globalPitchBendSensFine_get, _wrap_SynthEngineParameters_globalPitchBendSensFine_set },
    { "globalTuningCoarse", _wrap_SynthEngineParameters_globalTuningCoarse_get, _wrap_SynthEngineParameters_globalTuningCoarse_set },
    { "globalTuningFine", _wrap_SynthEngineParameters_globalTuningFine_get, _wrap_SynthEngineParameters_globalTuningFine_set },
    { "globalUnisonDetune_Cents", _wrap_SynthEngineParameters_globalUnisonDetune_Cents_get, _wrap_SynthEngineParameters_globalUnisonDetune_Cents_set },
    { "voiceParameters", _wrap_SynthEngineParameters_voiceParameters_get, _wrap_SynthEngineParameters_voiceParameters_set },
    {0,0,0}
};
static swig_lua_method swig_SynthEngineParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_SynthEngineParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SynthEngineParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SynthEngineParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SynthEngineParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SynthEngineParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SynthEngineParameters_Sf_SwigStatic = {
    "SynthEngineParameters",
    swig_SynthEngineParameters_Sf_SwigStatic_methods,
    swig_SynthEngineParameters_Sf_SwigStatic_attributes,
    swig_SynthEngineParameters_Sf_SwigStatic_constants,
    swig_SynthEngineParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SynthEngineParameters_bases[] = {0};
static const char *swig_SynthEngineParameters_base_names[] = {0};
static swig_lua_class _wrap_class_SynthEngineParameters = { "SynthEngineParameters", "SynthEngineParameters", &SWIGTYPE_p_SynthLab__SynthEngineParameters,_proxy__wrap_new_SynthEngineParameters, swig_delete_SynthEngineParameters, swig_SynthEngineParameters_methods, swig_SynthEngineParameters_attributes, &swig_SynthEngineParameters_Sf_SwigStatic, swig_SynthEngineParameters_meta, swig_SynthEngineParameters_bases, swig_SynthEngineParameters_base_names };

static int _wrap_new_SynthEngine__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  uint32_t *argp1 ;
  SynthLab::SynthEngine *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthEngine::SynthEngine",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::SynthEngine::SynthEngine",1,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_SynthEngine",1,SWIGTYPE_p_uint32_t);
  }
  arg1 = *argp1;
  
  result = (SynthLab::SynthEngine *)new SynthLab::SynthEngine(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__SynthEngine,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SynthEngine__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngine *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthEngine::SynthEngine",0,0)
  result = (SynthLab::SynthEngine *)new SynthLab::SynthEngine();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__SynthEngine,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SynthEngine(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SynthEngine__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SynthEngine__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SynthEngine'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::SynthEngine::SynthEngine(uint32_t)\n"
    "    SynthLab::SynthEngine::SynthEngine()\n");
  lua_error(L);return 0;
}


static int _wrap_SynthEngine_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngine *arg1 = (SynthLab::SynthEngine *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthEngine::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngine::reset",1,"SynthLab::SynthEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthEngine::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngine,0))){
    SWIG_fail_ptr("SynthEngine_reset",1,SWIGTYPE_p_SynthLab__SynthEngine);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngine_render(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngine *arg1 = (SynthLab::SynthEngine *) 0 ;
  SynthLab::SynthProcessInfo *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthEngine::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngine::render",1,"SynthLab::SynthEngine *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthEngine::render",2,"SynthLab::SynthProcessInfo &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngine,0))){
    SWIG_fail_ptr("SynthEngine_render",1,SWIGTYPE_p_SynthLab__SynthEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__SynthProcessInfo,0))){
    SWIG_fail_ptr("SynthEngine_render",2,SWIGTYPE_p_SynthLab__SynthProcessInfo);
  }
  
  result = (bool)(arg1)->render(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngine_processMIDIEvent(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngine *arg1 = (SynthLab::SynthEngine *) 0 ;
  midiEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthEngine::processMIDIEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngine::processMIDIEvent",1,"SynthLab::SynthEngine *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthEngine::processMIDIEvent",2,"midiEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngine,0))){
    SWIG_fail_ptr("SynthEngine_processMIDIEvent",1,SWIGTYPE_p_SynthLab__SynthEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_midiEvent,0))){
    SWIG_fail_ptr("SynthEngine_processMIDIEvent",2,SWIGTYPE_p_midiEvent);
  }
  
  result = (bool)(arg1)->processMIDIEvent(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngine_initialize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngine *arg1 = (SynthLab::SynthEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthEngine::initialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngine::initialize",1,"SynthLab::SynthEngine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::SynthEngine::initialize",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngine,0))){
    SWIG_fail_ptr("SynthEngine_initialize",1,SWIGTYPE_p_SynthLab__SynthEngine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->initialize((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngine_initialize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngine *arg1 = (SynthLab::SynthEngine *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthEngine::initialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngine::initialize",1,"SynthLab::SynthEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngine,0))){
    SWIG_fail_ptr("SynthEngine_initialize",1,SWIGTYPE_p_SynthLab__SynthEngine);
  }
  
  result = (bool)(arg1)->initialize();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngine_initialize(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthEngine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SynthEngine_initialize__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthEngine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SynthEngine_initialize__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SynthEngine_initialize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::SynthEngine::initialize(char const *)\n"
    "    SynthLab::SynthEngine::initialize()\n");
  lua_error(L);return 0;
}


static int _wrap_SynthEngine_accumulateVoice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngine *arg1 = (SynthLab::SynthEngine *) 0 ;
  SynthLab::SynthProcessInfo *arg2 = 0 ;
  double arg3 ;
  
  SWIG_check_num_args("SynthLab::SynthEngine::accumulateVoice",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngine::accumulateVoice",1,"SynthLab::SynthEngine *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthEngine::accumulateVoice",2,"SynthLab::SynthProcessInfo &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::SynthEngine::accumulateVoice",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngine,0))){
    SWIG_fail_ptr("SynthEngine_accumulateVoice",1,SWIGTYPE_p_SynthLab__SynthEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__SynthProcessInfo,0))){
    SWIG_fail_ptr("SynthEngine_accumulateVoice",2,SWIGTYPE_p_SynthLab__SynthProcessInfo);
  }
  
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->accumulateVoice(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngine_accumulateVoice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngine *arg1 = (SynthLab::SynthEngine *) 0 ;
  SynthLab::SynthProcessInfo *arg2 = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthEngine::accumulateVoice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngine::accumulateVoice",1,"SynthLab::SynthEngine *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthEngine::accumulateVoice",2,"SynthLab::SynthProcessInfo &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngine,0))){
    SWIG_fail_ptr("SynthEngine_accumulateVoice",1,SWIGTYPE_p_SynthLab__SynthEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__SynthProcessInfo,0))){
    SWIG_fail_ptr("SynthEngine_accumulateVoice",2,SWIGTYPE_p_SynthLab__SynthProcessInfo);
  }
  
  (arg1)->accumulateVoice(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngine_accumulateVoice(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthEngine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthProcessInfo, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SynthEngine_accumulateVoice__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthEngine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthProcessInfo, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SynthEngine_accumulateVoice__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SynthEngine_accumulateVoice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::SynthEngine::accumulateVoice(SynthLab::SynthProcessInfo &,double)\n"
    "    SynthLab::SynthEngine::accumulateVoice(SynthLab::SynthProcessInfo &)\n");
  lua_error(L);return 0;
}


static int _wrap_SynthEngine_applyGlobalVolume(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngine *arg1 = (SynthLab::SynthEngine *) 0 ;
  SynthLab::SynthProcessInfo *arg2 = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthEngine::applyGlobalVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngine::applyGlobalVolume",1,"SynthLab::SynthEngine *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthEngine::applyGlobalVolume",2,"SynthLab::SynthProcessInfo &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngine,0))){
    SWIG_fail_ptr("SynthEngine_applyGlobalVolume",1,SWIGTYPE_p_SynthLab__SynthEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__SynthProcessInfo,0))){
    SWIG_fail_ptr("SynthEngine_applyGlobalVolume",2,SWIGTYPE_p_SynthLab__SynthProcessInfo);
  }
  
  (arg1)->applyGlobalVolume(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngine_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngine *arg1 = (SynthLab::SynthEngine *) 0 ;
  std::shared_ptr< SynthLab::SynthEngineParameters > *arg2 = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthEngine::getParameters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngine::getParameters",1,"SynthLab::SynthEngine *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthEngine::getParameters",2,"std::shared_ptr< SynthLab::SynthEngineParameters > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngine,0))){
    SWIG_fail_ptr("SynthEngine_getParameters",1,SWIGTYPE_p_SynthLab__SynthEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__shared_ptrT_SynthLab__SynthEngineParameters_t,0))){
    SWIG_fail_ptr("SynthEngine_getParameters",2,SWIGTYPE_p_std__shared_ptrT_SynthLab__SynthEngineParameters_t);
  }
  
  (arg1)->getParameters(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngine_setParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngine *arg1 = (SynthLab::SynthEngine *) 0 ;
  std::shared_ptr< SynthLab::SynthEngineParameters > *arg2 = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthEngine::setParameters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngine::setParameters",1,"SynthLab::SynthEngine *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthEngine::setParameters",2,"std::shared_ptr< SynthLab::SynthEngineParameters > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngine,0))){
    SWIG_fail_ptr("SynthEngine_setParameters",1,SWIGTYPE_p_SynthLab__SynthEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__shared_ptrT_SynthLab__SynthEngineParameters_t,0))){
    SWIG_fail_ptr("SynthEngine_setParameters",2,SWIGTYPE_p_std__shared_ptrT_SynthLab__SynthEngineParameters_t);
  }
  
  (arg1)->setParameters(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngine_getFreeVoiceIndex(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngine *arg1 = (SynthLab::SynthEngine *) 0 ;
  int result;
  
  SWIG_check_num_args("SynthLab::SynthEngine::getFreeVoiceIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngine::getFreeVoiceIndex",1,"SynthLab::SynthEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngine,0))){
    SWIG_fail_ptr("SynthEngine_getFreeVoiceIndex",1,SWIGTYPE_p_SynthLab__SynthEngine);
  }
  
  result = (int)(arg1)->getFreeVoiceIndex();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngine_getVoiceIndexToSteal(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngine *arg1 = (SynthLab::SynthEngine *) 0 ;
  int result;
  
  SWIG_check_num_args("SynthLab::SynthEngine::getVoiceIndexToSteal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngine::getVoiceIndexToSteal",1,"SynthLab::SynthEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngine,0))){
    SWIG_fail_ptr("SynthEngine_getVoiceIndexToSteal",1,SWIGTYPE_p_SynthLab__SynthEngine);
  }
  
  result = (int)(arg1)->getVoiceIndexToSteal();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngine_getActiveVoiceIndexInNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngine *arg1 = (SynthLab::SynthEngine *) 0 ;
  unsigned int arg2 ;
  int result;
  
  SWIG_check_num_args("SynthLab::SynthEngine::getActiveVoiceIndexInNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngine::getActiveVoiceIndexInNoteOn",1,"SynthLab::SynthEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthEngine::getActiveVoiceIndexInNoteOn",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngine,0))){
    SWIG_fail_ptr("SynthEngine_getActiveVoiceIndexInNoteOn",1,SWIGTYPE_p_SynthLab__SynthEngine);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (int)(arg1)->getActiveVoiceIndexInNoteOn(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthEngine_getStealingVoiceIndexInNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthEngine *arg1 = (SynthLab::SynthEngine *) 0 ;
  unsigned int arg2 ;
  int result;
  
  SWIG_check_num_args("SynthLab::SynthEngine::getStealingVoiceIndexInNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthEngine::getStealingVoiceIndexInNoteOn",1,"SynthLab::SynthEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthEngine::getStealingVoiceIndexInNoteOn",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthEngine,0))){
    SWIG_fail_ptr("SynthEngine_getStealingVoiceIndexInNoteOn",1,SWIGTYPE_p_SynthLab__SynthEngine);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (int)(arg1)->getStealingVoiceIndexInNoteOn(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SynthEngine(void *obj) {
SynthLab::SynthEngine *arg1 = (SynthLab::SynthEngine *) obj;
delete arg1;
}
static int _proxy__wrap_new_SynthEngine(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SynthEngine);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SynthEngine_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SynthEngine_methods[]= {
    { "reset", _wrap_SynthEngine_reset},
    { "render", _wrap_SynthEngine_render},
    { "processMIDIEvent", _wrap_SynthEngine_processMIDIEvent},
    { "initialize", _wrap_SynthEngine_initialize},
    { "accumulateVoice", _wrap_SynthEngine_accumulateVoice},
    { "applyGlobalVolume", _wrap_SynthEngine_applyGlobalVolume},
    { "getParameters", _wrap_SynthEngine_getParameters},
    { "setParameters", _wrap_SynthEngine_setParameters},
    { "getFreeVoiceIndex", _wrap_SynthEngine_getFreeVoiceIndex},
    { "getVoiceIndexToSteal", _wrap_SynthEngine_getVoiceIndexToSteal},
    { "getActiveVoiceIndexInNoteOn", _wrap_SynthEngine_getActiveVoiceIndexInNoteOn},
    { "getStealingVoiceIndexInNoteOn", _wrap_SynthEngine_getStealingVoiceIndexInNoteOn},
    {0,0}
};
static swig_lua_method swig_SynthEngine_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SynthEngine_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SynthEngine_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SynthEngine_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SynthEngine_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SynthEngine_Sf_SwigStatic = {
    "SynthEngine",
    swig_SynthEngine_Sf_SwigStatic_methods,
    swig_SynthEngine_Sf_SwigStatic_attributes,
    swig_SynthEngine_Sf_SwigStatic_constants,
    swig_SynthEngine_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SynthEngine_bases[] = {0};
static const char *swig_SynthEngine_base_names[] = {0};
static swig_lua_class _wrap_class_SynthEngine = { "SynthEngine", "SynthEngine", &SWIGTYPE_p_SynthLab__SynthEngine,_proxy__wrap_new_SynthEngine, swig_delete_SynthEngine, swig_SynthEngine_methods, swig_SynthEngine_attributes, &swig_SynthEngine_Sf_SwigStatic, swig_SynthEngine_meta, swig_SynthEngine_bases, swig_SynthEngine_base_names };

static int _wrap_new_SynthFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< std::shared_ptr< SynthLab::MidiInputData > > arg1 ;
  std::shared_ptr< FilterParameters > arg2 ;
  uint32_t arg3 ;
  std::shared_ptr< SynthLab::MidiInputData > *argp1 ;
  std::shared_ptr< FilterParameters > *argp2 ;
  uint32_t *argp3 ;
  SynthLab::SynthFilter *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthFilter::SynthFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::SynthFilter::SynthFilter",1,"std::shared_ptr< SynthLab::MidiInputData >");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthFilter::SynthFilter",2,"std::shared_ptr< FilterParameters >");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::SynthFilter::SynthFilter",3,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiInputData_t,0))){
    SWIG_fail_ptr("new_SynthFilter",1,SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiInputData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__shared_ptrT_FilterParameters_t,0))){
    SWIG_fail_ptr("new_SynthFilter",2,SWIGTYPE_p_std__shared_ptrT_FilterParameters_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_SynthFilter",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  result = (SynthLab::SynthFilter *)new SynthLab::SynthFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__SynthFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SynthFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< std::shared_ptr< SynthLab::MidiInputData > > arg1 ;
  std::shared_ptr< FilterParameters > arg2 ;
  std::shared_ptr< SynthLab::MidiInputData > *argp1 ;
  std::shared_ptr< FilterParameters > *argp2 ;
  SynthLab::SynthFilter *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthFilter::SynthFilter",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::SynthFilter::SynthFilter",1,"std::shared_ptr< SynthLab::MidiInputData >");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthFilter::SynthFilter",2,"std::shared_ptr< FilterParameters >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiInputData_t,0))){
    SWIG_fail_ptr("new_SynthFilter",1,SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiInputData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__shared_ptrT_FilterParameters_t,0))){
    SWIG_fail_ptr("new_SynthFilter",2,SWIGTYPE_p_std__shared_ptrT_FilterParameters_t);
  }
  arg2 = *argp2;
  
  result = (SynthLab::SynthFilter *)new SynthLab::SynthFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__SynthFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SynthFilter(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiInputData_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_FilterParameters_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_SynthFilter__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiInputData_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_FilterParameters_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_SynthFilter__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SynthFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::SynthFilter::SynthFilter(std::shared_ptr< SynthLab::MidiInputData >,std::shared_ptr< FilterParameters >,uint32_t)\n"
    "    SynthLab::SynthFilter::SynthFilter(std::shared_ptr< SynthLab::MidiInputData >,std::shared_ptr< FilterParameters >)\n");
  lua_error(L);return 0;
}


static int _wrap_SynthFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthFilter *arg1 = (SynthLab::SynthFilter *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthFilter::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthFilter::reset",1,"SynthLab::SynthFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthFilter::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthFilter,0))){
    SWIG_fail_ptr("SynthFilter_reset",1,SWIGTYPE_p_SynthLab__SynthFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthFilter_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthFilter *arg1 = (SynthLab::SynthFilter *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthFilter::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthFilter::update",1,"SynthLab::SynthFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthFilter,0))){
    SWIG_fail_ptr("SynthFilter_update",1,SWIGTYPE_p_SynthLab__SynthFilter);
  }
  
  result = (bool)(arg1)->update();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthFilter_render__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthFilter *arg1 = (SynthLab::SynthFilter *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthFilter::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthFilter::render",1,"SynthLab::SynthFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthFilter::render",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthFilter,0))){
    SWIG_fail_ptr("SynthFilter_render",1,SWIGTYPE_p_SynthLab__SynthFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("SynthFilter_render",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->render(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthFilter_render__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthFilter *arg1 = (SynthLab::SynthFilter *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthFilter::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthFilter::render",1,"SynthLab::SynthFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthFilter,0))){
    SWIG_fail_ptr("SynthFilter_render",1,SWIGTYPE_p_SynthLab__SynthFilter);
  }
  
  result = (bool)(arg1)->render();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthFilter_render(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SynthFilter_render__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SynthFilter_render__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SynthFilter_render'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::SynthFilter::render(uint32_t)\n"
    "    SynthLab::SynthFilter::render()\n");
  lua_error(L);return 0;
}


static int _wrap_SynthFilter_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthFilter *arg1 = (SynthLab::SynthFilter *) 0 ;
  MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthFilter::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthFilter::doNoteOn",1,"SynthLab::SynthFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthFilter::doNoteOn",2,"MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthFilter,0))){
    SWIG_fail_ptr("SynthFilter_doNoteOn",1,SWIGTYPE_p_SynthLab__SynthFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MIDINoteEvent,0))){
    SWIG_fail_ptr("SynthFilter_doNoteOn",2,SWIGTYPE_p_MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthFilter_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthFilter *arg1 = (SynthLab::SynthFilter *) 0 ;
  MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthFilter::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthFilter::doNoteOff",1,"SynthLab::SynthFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthFilter::doNoteOff",2,"MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthFilter,0))){
    SWIG_fail_ptr("SynthFilter_doNoteOff",1,SWIGTYPE_p_SynthLab__SynthFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MIDINoteEvent,0))){
    SWIG_fail_ptr("SynthFilter_doNoteOff",2,SWIGTYPE_p_MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthFilter_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthFilter *arg1 = (SynthLab::SynthFilter *) 0 ;
  std::shared_ptr< FilterParameters > result;
  
  SWIG_check_num_args("SynthLab::SynthFilter::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthFilter::getParameters",1,"SynthLab::SynthFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthFilter,0))){
    SWIG_fail_ptr("SynthFilter_getParameters",1,SWIGTYPE_p_SynthLab__SynthFilter);
  }
  
  result = (arg1)->getParameters();
  {
    std::shared_ptr< FilterParameters > * resultptr = new std::shared_ptr< FilterParameters >((const std::shared_ptr< FilterParameters > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_FilterParameters_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SynthFilter(void *obj) {
SynthLab::SynthFilter *arg1 = (SynthLab::SynthFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_SynthFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SynthFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SynthFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SynthFilter_methods[]= {
    { "reset", _wrap_SynthFilter_reset},
    { "update", _wrap_SynthFilter_update},
    { "render", _wrap_SynthFilter_render},
    { "doNoteOn", _wrap_SynthFilter_doNoteOn},
    { "doNoteOff", _wrap_SynthFilter_doNoteOff},
    { "getParameters", _wrap_SynthFilter_getParameters},
    {0,0}
};
static swig_lua_method swig_SynthFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SynthFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SynthFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SynthFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SynthFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SynthFilter_Sf_SwigStatic = {
    "SynthFilter",
    swig_SynthFilter_Sf_SwigStatic_methods,
    swig_SynthFilter_Sf_SwigStatic_attributes,
    swig_SynthFilter_Sf_SwigStatic_constants,
    swig_SynthFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SynthFilter_bases[] = {0,0};
static const char *swig_SynthFilter_base_names[] = {"SynthLab::SynthModule *",0};
static swig_lua_class _wrap_class_SynthFilter = { "SynthFilter", "SynthFilter", &SWIGTYPE_p_SynthLab__SynthFilter,_proxy__wrap_new_SynthFilter, swig_delete_SynthFilter, swig_SynthFilter_methods, swig_SynthFilter_attributes, &swig_SynthFilter_Sf_SwigStatic, swig_SynthFilter_meta, swig_SynthFilter_bases, swig_SynthFilter_base_names };

static int _wrap_copyOutputToInput(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< std::shared_ptr< SynthLab::AudioBuffer > > arg1 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::AudioBuffer > > arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  std::shared_ptr< SynthLab::AudioBuffer > *argp1 ;
  std::shared_ptr< SynthLab::AudioBuffer > *argp2 ;
  uint32_t *argp3 ;
  uint32_t *argp4 ;
  
  SWIG_check_num_args("SynthLab::copyOutputToInput",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::copyOutputToInput",1,"std::shared_ptr< SynthLab::AudioBuffer >");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::copyOutputToInput",2,"std::shared_ptr< SynthLab::AudioBuffer >");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::copyOutputToInput",3,"uint32_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SynthLab::copyOutputToInput",4,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t,0))){
    SWIG_fail_ptr("copyOutputToInput",1,SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t,0))){
    SWIG_fail_ptr("copyOutputToInput",2,SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("copyOutputToInput",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("copyOutputToInput",4,SWIGTYPE_p_uint32_t);
  }
  arg4 = *argp4;
  
  SynthLab::copyOutputToInput(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copyOutputToOutput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< std::shared_ptr< SynthLab::AudioBuffer > > arg1 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::AudioBuffer > > arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  std::shared_ptr< SynthLab::AudioBuffer > *argp1 ;
  std::shared_ptr< SynthLab::AudioBuffer > *argp2 ;
  uint32_t *argp3 ;
  uint32_t *argp4 ;
  
  SWIG_check_num_args("SynthLab::copyOutputToOutput",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::copyOutputToOutput",1,"std::shared_ptr< SynthLab::AudioBuffer >");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::copyOutputToOutput",2,"std::shared_ptr< SynthLab::AudioBuffer >");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::copyOutputToOutput",3,"uint32_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SynthLab::copyOutputToOutput",4,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t,0))){
    SWIG_fail_ptr("copyOutputToOutput",1,SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t,0))){
    SWIG_fail_ptr("copyOutputToOutput",2,SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("copyOutputToOutput",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("copyOutputToOutput",4,SWIGTYPE_p_uint32_t);
  }
  arg4 = *argp4;
  
  SynthLab::copyOutputToOutput(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copyOutputToOutput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< std::shared_ptr< SynthLab::AudioBuffer > > arg1 ;
  SynthLab::SynthProcessInfo *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  std::shared_ptr< SynthLab::AudioBuffer > *argp1 ;
  uint32_t *argp3 ;
  uint32_t *argp4 ;
  
  SWIG_check_num_args("SynthLab::copyOutputToOutput",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::copyOutputToOutput",1,"std::shared_ptr< SynthLab::AudioBuffer >");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::copyOutputToOutput",2,"SynthLab::SynthProcessInfo &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::copyOutputToOutput",3,"uint32_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SynthLab::copyOutputToOutput",4,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t,0))){
    SWIG_fail_ptr("copyOutputToOutput",1,SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__SynthProcessInfo,0))){
    SWIG_fail_ptr("copyOutputToOutput",2,SWIGTYPE_p_SynthLab__SynthProcessInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("copyOutputToOutput",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("copyOutputToOutput",4,SWIGTYPE_p_uint32_t);
  }
  arg4 = *argp4;
  
  SynthLab::copyOutputToOutput(arg1,*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copyOutputToOutput(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_copyOutputToOutput__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthProcessInfo, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_copyOutputToOutput__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'copyOutputToOutput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::copyOutputToOutput(std::shared_ptr< SynthLab::AudioBuffer >,std::shared_ptr< SynthLab::AudioBuffer >,uint32_t,uint32_t)\n"
    "    SynthLab::copyOutputToOutput(std::shared_ptr< SynthLab::AudioBuffer >,SynthLab::SynthProcessInfo &,uint32_t,uint32_t)\n");
  lua_error(L);return 0;
}


static int _wrap_copyBufferToInput(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< std::shared_ptr< SynthLab::AudioBuffer > > arg1 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::AudioBuffer > > arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  std::shared_ptr< SynthLab::AudioBuffer > *argp1 ;
  std::shared_ptr< SynthLab::AudioBuffer > *argp2 ;
  uint32_t *argp3 ;
  uint32_t *argp4 ;
  
  SWIG_check_num_args("SynthLab::copyBufferToInput",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::copyBufferToInput",1,"std::shared_ptr< SynthLab::AudioBuffer >");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::copyBufferToInput",2,"std::shared_ptr< SynthLab::AudioBuffer >");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::copyBufferToInput",3,"uint32_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SynthLab::copyBufferToInput",4,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t,0))){
    SWIG_fail_ptr("copyBufferToInput",1,SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t,0))){
    SWIG_fail_ptr("copyBufferToInput",2,SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("copyBufferToInput",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("copyBufferToInput",4,SWIGTYPE_p_uint32_t);
  }
  arg4 = *argp4;
  
  SynthLab::copyBufferToInput(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copyAudioBufferOutputToSynthOutput(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< std::shared_ptr< SynthLab::AudioBuffer > > arg1 ;
  SynthLab::SynthProcessInfo *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  std::shared_ptr< SynthLab::AudioBuffer > *argp1 ;
  uint32_t *argp3 ;
  uint32_t *argp4 ;
  
  SWIG_check_num_args("SynthLab::copyAudioBufferOutputToSynthOutput",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::copyAudioBufferOutputToSynthOutput",1,"std::shared_ptr< SynthLab::AudioBuffer >");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::copyAudioBufferOutputToSynthOutput",2,"SynthLab::SynthProcessInfo &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::copyAudioBufferOutputToSynthOutput",3,"uint32_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SynthLab::copyAudioBufferOutputToSynthOutput",4,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t,0))){
    SWIG_fail_ptr("copyAudioBufferOutputToSynthOutput",1,SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__SynthProcessInfo,0))){
    SWIG_fail_ptr("copyAudioBufferOutputToSynthOutput",2,SWIGTYPE_p_SynthLab__SynthProcessInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("copyAudioBufferOutputToSynthOutput",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("copyAudioBufferOutputToSynthOutput",4,SWIGTYPE_p_uint32_t);
  }
  arg4 = *argp4;
  
  SynthLab::copyAudioBufferOutputToSynthOutput(arg1,*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copySynthOutputToAudioBufferInput(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthProcessInfo *arg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::AudioBuffer > > arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  std::shared_ptr< SynthLab::AudioBuffer > *argp2 ;
  uint32_t *argp3 ;
  uint32_t *argp4 ;
  
  SWIG_check_num_args("SynthLab::copySynthOutputToAudioBufferInput",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::copySynthOutputToAudioBufferInput",1,"SynthLab::SynthProcessInfo &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::copySynthOutputToAudioBufferInput",2,"std::shared_ptr< SynthLab::AudioBuffer >");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::copySynthOutputToAudioBufferInput",3,"uint32_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SynthLab::copySynthOutputToAudioBufferInput",4,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthProcessInfo,0))){
    SWIG_fail_ptr("copySynthOutputToAudioBufferInput",1,SWIGTYPE_p_SynthLab__SynthProcessInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t,0))){
    SWIG_fail_ptr("copySynthOutputToAudioBufferInput",2,SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("copySynthOutputToAudioBufferInput",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("copySynthOutputToAudioBufferInput",4,SWIGTYPE_p_uint32_t);
  }
  arg4 = *argp4;
  
  SynthLab::copySynthOutputToAudioBufferInput(*arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kCTCoefficient_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::kCTCoefficient",0,0)
  result = (double)(double)SynthLab::kCTCoefficient;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kCTCorrFactorZero_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::kCTCorrFactorZero",0,0)
  result = (double)(double)SynthLab::kCTCorrFactorZero;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kCTCorrFactorAnitZero_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::kCTCorrFactorAnitZero",0,0)
  result = (double)(double)SynthLab::kCTCorrFactorAnitZero;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kCTCorrFactorUnity_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::kCTCorrFactorUnity",0,0)
  result = (double)(double)SynthLab::kCTCorrFactorUnity;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kCTCorrFactorAntiUnity_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::kCTCorrFactorAntiUnity",0,0)
  result = (double)(double)SynthLab::kCTCorrFactorAntiUnity;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kCTCorrFactorAntiLog_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::kCTCorrFactorAntiLog",0,0)
  result = (double)(double)SynthLab::kCTCorrFactorAntiLog;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kCTCorrFactorAntiLogScale_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::kCTCorrFactorAntiLogScale",0,0)
  result = (double)(double)SynthLab::kCTCorrFactorAntiLogScale;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_normToLogNorm(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::normToLogNorm",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::normToLogNorm",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)SynthLab::normToLogNorm(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logNormToNorm(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::logNormToNorm",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::logNormToNorm",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)SynthLab::logNormToNorm(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_normToAntiLogNorm(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::normToAntiLogNorm",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::normToAntiLogNorm",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)SynthLab::normToAntiLogNorm(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_antiLogNormToNorm(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::antiLogNormToNorm",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::antiLogNormToNorm",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)SynthLab::antiLogNormToNorm(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getModKnobValueLinear(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::getModKnobValueLinear",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::getModKnobValueLinear",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::getModKnobValueLinear",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::getModKnobValueLinear",3,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)SynthLab::getModKnobValueLinear(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getModKnobValueLog(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::getModKnobValueLog",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::getModKnobValueLog",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::getModKnobValueLog",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::getModKnobValueLog",3,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)SynthLab::getModKnobValueLog(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getModKnobValueAntiLog(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::getModKnobValueAntiLog",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::getModKnobValueAntiLog",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::getModKnobValueAntiLog",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::getModKnobValueAntiLog",3,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)SynthLab::getModKnobValueAntiLog(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_msecToSamples(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::msecToSamples",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::msecToSamples",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::msecToSamples",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)SynthLab::msecToSamples(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_clampMaxValue(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::clampMaxValue",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::clampMaxValue",1,"double &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::clampMaxValue",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("clampMaxValue",1,SWIGTYPE_p_double);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  SynthLab::clampMaxValue(*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_clampMinValue(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::clampMinValue",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::clampMinValue",1,"double &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::clampMinValue",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("clampMinValue",1,SWIGTYPE_p_double);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  SynthLab::clampMinValue(*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_boundValue(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("SynthLab::boundValue",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::boundValue",1,"double &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::boundValue",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::boundValue",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("boundValue",1,SWIGTYPE_p_double);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  SynthLab::boundValue(*arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_boundUIntValue(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t *arg1 = 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  
  SWIG_check_num_args("SynthLab::boundUIntValue",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::boundUIntValue",1,"uint32_t &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::boundUIntValue",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::boundUIntValue",3,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("boundUIntValue",1,SWIGTYPE_p_uint32_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("boundUIntValue",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("boundUIntValue",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  SynthLab::boundUIntValue(*arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_boundIntValue(lua_State* L) {
  int SWIG_arg = 0;
  int32_t *arg1 = 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  int32_t *argp2 ;
  int32_t *argp3 ;
  
  SWIG_check_num_args("SynthLab::boundIntValue",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::boundIntValue",1,"int32_t &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::boundIntValue",2,"int32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::boundIntValue",3,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("boundIntValue",1,SWIGTYPE_p_int32_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("boundIntValue",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("boundIntValue",3,SWIGTYPE_p_int32_t);
  }
  arg3 = *argp3;
  
  SynthLab::boundIntValue(*arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_boundValueUnipolar(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  
  SWIG_check_num_args("SynthLab::boundValueUnipolar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::boundValueUnipolar",1,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("boundValueUnipolar",1,SWIGTYPE_p_double);
  }
  
  SynthLab::boundValueUnipolar(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_boundValueBipolar(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  
  SWIG_check_num_args("SynthLab::boundValueBipolar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::boundValueBipolar",1,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("boundValueBipolar",1,SWIGTYPE_p_double);
  }
  
  SynthLab::boundValueBipolar(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_boundMIDIValueByte(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t *arg1 = 0 ;
  
  SWIG_check_num_args("SynthLab::boundMIDIValueByte",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::boundMIDIValueByte",1,"uint32_t &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("boundMIDIValueByte",1,SWIGTYPE_p_uint32_t);
  }
  
  SynthLab::boundMIDIValueByte(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_boundMIDIValueDoubleByte(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t *arg1 = 0 ;
  
  SWIG_check_num_args("SynthLab::boundMIDIValueDoubleByte",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::boundMIDIValueDoubleByte",1,"uint32_t &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("boundMIDIValueDoubleByte",1,SWIGTYPE_p_uint32_t);
  }
  
  SynthLab::boundMIDIValueDoubleByte(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mapDoubleValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  SWIG_check_num_args("SynthLab::mapDoubleValue",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::mapDoubleValue",1,"double &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::mapDoubleValue",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::mapDoubleValue",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::mapDoubleValue",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SynthLab::mapDoubleValue",5,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("mapDoubleValue",1,SWIGTYPE_p_double);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  SynthLab::mapDoubleValue(*arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mapDoubleValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("SynthLab::mapDoubleValue",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::mapDoubleValue",1,"double &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::mapDoubleValue",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::mapDoubleValue",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::mapDoubleValue",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("mapDoubleValue",1,SWIGTYPE_p_double);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  SynthLab::mapDoubleValue(*arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mapDoubleValue(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_mapDoubleValue__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_mapDoubleValue__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'mapDoubleValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::mapDoubleValue(double &,double,double,double,double)\n"
    "    SynthLab::mapDoubleValue(double &,double,double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_mapIntValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  
  SWIG_check_num_args("SynthLab::mapIntValue",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::mapIntValue",1,"int &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::mapIntValue",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::mapIntValue",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::mapIntValue",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SynthLab::mapIntValue",5,"int");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("SynthLab::mapIntValue",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("mapIntValue",1,SWIGTYPE_p_int);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  SynthLab::mapIntValue(*arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mapIntValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("SynthLab::mapIntValue",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::mapIntValue",1,"int &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::mapIntValue",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::mapIntValue",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::mapIntValue",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SynthLab::mapIntValue",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("mapIntValue",1,SWIGTYPE_p_int);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  SynthLab::mapIntValue(*arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mapIntValue(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_int, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_mapIntValue__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_int, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_mapIntValue__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'mapIntValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::mapIntValue(int &,int,int,int,int,bool)\n"
    "    SynthLab::mapIntValue(int &,int,int,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_mapUintValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t *arg1 = 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  uint32_t arg5 ;
  bool arg6 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  uint32_t *argp4 ;
  uint32_t *argp5 ;
  
  SWIG_check_num_args("SynthLab::mapUintValue",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::mapUintValue",1,"uint32_t &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::mapUintValue",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::mapUintValue",3,"uint32_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SynthLab::mapUintValue",4,"uint32_t");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SynthLab::mapUintValue",5,"uint32_t");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("SynthLab::mapUintValue",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("mapUintValue",1,SWIGTYPE_p_uint32_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("mapUintValue",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("mapUintValue",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("mapUintValue",4,SWIGTYPE_p_uint32_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("mapUintValue",5,SWIGTYPE_p_uint32_t);
  }
  arg5 = *argp5;
  
  arg6 = (lua_toboolean(L, 6)!=0);
  SynthLab::mapUintValue(*arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mapUintValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t *arg1 = 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  uint32_t arg5 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  uint32_t *argp4 ;
  uint32_t *argp5 ;
  
  SWIG_check_num_args("SynthLab::mapUintValue",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::mapUintValue",1,"uint32_t &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::mapUintValue",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::mapUintValue",3,"uint32_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SynthLab::mapUintValue",4,"uint32_t");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SynthLab::mapUintValue",5,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("mapUintValue",1,SWIGTYPE_p_uint32_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("mapUintValue",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("mapUintValue",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("mapUintValue",4,SWIGTYPE_p_uint32_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("mapUintValue",5,SWIGTYPE_p_uint32_t);
  }
  arg5 = *argp5;
  
  SynthLab::mapUintValue(*arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mapUintValue(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_mapUintValue__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_mapUintValue__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'mapUintValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::mapUintValue(uint32_t &,uint32_t,uint32_t,uint32_t,uint32_t,bool)\n"
    "    SynthLab::mapUintValue(uint32_t &,uint32_t,uint32_t,uint32_t,uint32_t)\n");
  lua_error(L);return 0;
}


static int _wrap_mapDoubleToUINT__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  uint32_t arg4 ;
  uint32_t arg5 ;
  bool arg6 ;
  uint32_t *argp4 ;
  uint32_t *argp5 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::mapDoubleToUINT",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::mapDoubleToUINT",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::mapDoubleToUINT",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::mapDoubleToUINT",3,"double");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SynthLab::mapDoubleToUINT",4,"uint32_t");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SynthLab::mapDoubleToUINT",5,"uint32_t");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("SynthLab::mapDoubleToUINT",6,"bool");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("mapDoubleToUINT",4,SWIGTYPE_p_uint32_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("mapDoubleToUINT",5,SWIGTYPE_p_uint32_t);
  }
  arg5 = *argp5;
  
  arg6 = (lua_toboolean(L, 6)!=0);
  result = SynthLab::mapDoubleToUINT(arg1,arg2,arg3,arg4,arg5,arg6);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mapDoubleToUINT__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  uint32_t arg4 ;
  uint32_t arg5 ;
  uint32_t *argp4 ;
  uint32_t *argp5 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::mapDoubleToUINT",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::mapDoubleToUINT",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::mapDoubleToUINT",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::mapDoubleToUINT",3,"double");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SynthLab::mapDoubleToUINT",4,"uint32_t");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SynthLab::mapDoubleToUINT",5,"uint32_t");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("mapDoubleToUINT",4,SWIGTYPE_p_uint32_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("mapDoubleToUINT",5,SWIGTYPE_p_uint32_t);
  }
  arg5 = *argp5;
  
  result = SynthLab::mapDoubleToUINT(arg1,arg2,arg3,arg4,arg5);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mapDoubleToUINT(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_mapDoubleToUINT__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_mapDoubleToUINT__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'mapDoubleToUINT'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::mapDoubleToUINT(double,double,double,uint32_t,uint32_t,bool)\n"
    "    SynthLab::mapDoubleToUINT(double,double,double,uint32_t,uint32_t)\n");
  lua_error(L);return 0;
}


static int _wrap_mapUINTToDouble(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  double arg4 ;
  double arg5 ;
  uint32_t *argp1 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::mapUINTToDouble",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::mapUINTToDouble",1,"uint32_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::mapUINTToDouble",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::mapUINTToDouble",3,"uint32_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::mapUINTToDouble",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SynthLab::mapUINTToDouble",5,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("mapUINTToDouble",1,SWIGTYPE_p_uint32_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("mapUINTToDouble",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("mapUINTToDouble",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (double)SynthLab::mapUINTToDouble(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_midi14_bitToBipolar(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t *argp1 ;
  uint32_t *argp2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::midi14_bitToBipolar",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::midi14_bitToBipolar",1,"uint32_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::midi14_bitToBipolar",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("midi14_bitToBipolar",1,SWIGTYPE_p_uint32_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("midi14_bitToBipolar",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (double)SynthLab::midi14_bitToBipolar(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_midi14_bitToUnipolarInt(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t *argp1 ;
  uint32_t *argp2 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::midi14_bitToUnipolarInt",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::midi14_bitToUnipolarInt",1,"uint32_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::midi14_bitToUnipolarInt",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("midi14_bitToUnipolarInt",1,SWIGTYPE_p_uint32_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("midi14_bitToUnipolarInt",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = SynthLab::midi14_bitToUnipolarInt(arg1,arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_midi14_bitToUnipolarDouble(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t *argp1 ;
  uint32_t *argp2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::midi14_bitToUnipolarDouble",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::midi14_bitToUnipolarDouble",1,"uint32_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::midi14_bitToUnipolarDouble",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("midi14_bitToUnipolarDouble",1,SWIGTYPE_p_uint32_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("midi14_bitToUnipolarDouble",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (double)SynthLab::midi14_bitToUnipolarDouble(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_midi14_bitToDouble(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  double arg3 ;
  double arg4 ;
  uint32_t *argp1 ;
  uint32_t *argp2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::midi14_bitToDouble",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::midi14_bitToDouble",1,"uint32_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::midi14_bitToDouble",2,"uint32_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::midi14_bitToDouble",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::midi14_bitToDouble",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("midi14_bitToDouble",1,SWIGTYPE_p_uint32_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("midi14_bitToDouble",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (double)SynthLab::midi14_bitToDouble(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unipolarIntToMIDI14_bit(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  uint32_t *arg2 = 0 ;
  uint32_t *arg3 = 0 ;
  uint32_t *argp1 ;
  
  SWIG_check_num_args("SynthLab::unipolarIntToMIDI14_bit",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::unipolarIntToMIDI14_bit",1,"uint32_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::unipolarIntToMIDI14_bit",2,"uint32_t &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::unipolarIntToMIDI14_bit",3,"uint32_t &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("unipolarIntToMIDI14_bit",1,SWIGTYPE_p_uint32_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("unipolarIntToMIDI14_bit",2,SWIGTYPE_p_uint32_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("unipolarIntToMIDI14_bit",3,SWIGTYPE_p_uint32_t);
  }
  
  SynthLab::unipolarIntToMIDI14_bit(arg1,*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bipolarIntToMIDI14_bit(lua_State* L) {
  int SWIG_arg = 0;
  int32_t arg1 ;
  int32_t arg2 ;
  int32_t arg3 ;
  uint32_t *arg4 = 0 ;
  uint32_t *arg5 = 0 ;
  int32_t *argp1 ;
  int32_t *argp2 ;
  int32_t *argp3 ;
  
  SWIG_check_num_args("SynthLab::bipolarIntToMIDI14_bit",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::bipolarIntToMIDI14_bit",1,"int32_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::bipolarIntToMIDI14_bit",2,"int32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::bipolarIntToMIDI14_bit",3,"int32_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SynthLab::bipolarIntToMIDI14_bit",4,"uint32_t &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SynthLab::bipolarIntToMIDI14_bit",5,"uint32_t &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("bipolarIntToMIDI14_bit",1,SWIGTYPE_p_int32_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("bipolarIntToMIDI14_bit",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("bipolarIntToMIDI14_bit",3,SWIGTYPE_p_int32_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("bipolarIntToMIDI14_bit",4,SWIGTYPE_p_uint32_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("bipolarIntToMIDI14_bit",5,SWIGTYPE_p_uint32_t);
  }
  
  SynthLab::bipolarIntToMIDI14_bit(arg1,arg2,arg3,*arg4,*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unipolarDoubleToMIDI14_bit(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  uint32_t *arg2 = 0 ;
  uint32_t *arg3 = 0 ;
  
  SWIG_check_num_args("SynthLab::unipolarDoubleToMIDI14_bit",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::unipolarDoubleToMIDI14_bit",1,"double");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::unipolarDoubleToMIDI14_bit",2,"uint32_t &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::unipolarDoubleToMIDI14_bit",3,"uint32_t &");
  arg1 = (double)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("unipolarDoubleToMIDI14_bit",2,SWIGTYPE_p_uint32_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("unipolarDoubleToMIDI14_bit",3,SWIGTYPE_p_uint32_t);
  }
  
  SynthLab::unipolarDoubleToMIDI14_bit(arg1,*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_midiPitchBendToBipolar(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t *argp1 ;
  uint32_t *argp2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::midiPitchBendToBipolar",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::midiPitchBendToBipolar",1,"uint32_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::midiPitchBendToBipolar",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("midiPitchBendToBipolar",1,SWIGTYPE_p_uint32_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("midiPitchBendToBipolar",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (double)SynthLab::midiPitchBendToBipolar(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_doUnipolarModulationFromMin(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::doUnipolarModulationFromMin",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::doUnipolarModulationFromMin",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::doUnipolarModulationFromMin",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::doUnipolarModulationFromMin",3,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)SynthLab::doUnipolarModulationFromMin(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_doUnipolarModulationFromMax(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::doUnipolarModulationFromMax",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::doUnipolarModulationFromMax",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::doUnipolarModulationFromMax",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::doUnipolarModulationFromMax",3,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)SynthLab::doUnipolarModulationFromMax(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_doBipolarModulation(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::doBipolarModulation",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::doBipolarModulation",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::doBipolarModulation",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::doBipolarModulation",3,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)SynthLab::doBipolarModulation(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_splitBipolar(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::splitBipolar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::splitBipolar",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)SynthLab::splitBipolar(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bipolar(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::bipolar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::bipolar",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)SynthLab::bipolar(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bipolarXForm(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  
  SWIG_check_num_args("SynthLab::bipolarXForm",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::bipolarXForm",1,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("bipolarXForm",1,SWIGTYPE_p_double);
  }
  
  SynthLab::bipolarXForm(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unipolar(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::unipolar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::unipolar",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)SynthLab::unipolar(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unipolarXForm(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  
  SWIG_check_num_args("SynthLab::unipolarXForm",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::unipolarXForm",1,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("unipolarXForm",1,SWIGTYPE_p_double);
  }
  
  SynthLab::unipolarXForm(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw2dB(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::raw2dB",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::raw2dB",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)SynthLab::raw2dB(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dB2Raw(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::dB2Raw",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::dB2Raw",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)SynthLab::dB2Raw(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_peakGainFor_Q(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::peakGainFor_Q",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::peakGainFor_Q",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)SynthLab::peakGainFor_Q(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dBPeakGainFor_Q(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::dBPeakGainFor_Q",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::dBPeakGainFor_Q",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)SynthLab::dBPeakGainFor_Q(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pdSlope_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::pdSlope",0,0)
  result = (double)(double)SynthLab::pdSlope;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_applyPhaseDistortion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::applyPhaseDistortion",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::applyPhaseDistortion",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::applyPhaseDistortion",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::applyPhaseDistortion",3,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)SynthLab::applyPhaseDistortion(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_applyPhaseDistortion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::applyPhaseDistortion",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::applyPhaseDistortion",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::applyPhaseDistortion",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)SynthLab::applyPhaseDistortion(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_applyPhaseDistortion(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_applyPhaseDistortion__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_applyPhaseDistortion__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'applyPhaseDistortion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::applyPhaseDistortion(double,double,double)\n"
    "    SynthLab::applyPhaseDistortion(double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_sgn(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::sgn",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::sgn",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)SynthLab::sgn(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calcWSGain(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::calcWSGain",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::calcWSGain",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::calcWSGain",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::calcWSGain",3,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)SynthLab::calcWSGain(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanWaveShaper(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::atanWaveShaper",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::atanWaveShaper",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::atanWaveShaper",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)SynthLab::atanWaveShaper(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhWaveShaper(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::tanhWaveShaper",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::tanhWaveShaper",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::tanhWaveShaper",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)SynthLab::tanhWaveShaper(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_softClipWaveShaper(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::softClipWaveShaper",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::softClipWaveShaper",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::softClipWaveShaper",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)SynthLab::softClipWaveShaper(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fuzzExp1WaveShaper(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::fuzzExp1WaveShaper",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::fuzzExp1WaveShaper",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::fuzzExp1WaveShaper",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::fuzzExp1WaveShaper",3,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)SynthLab::fuzzExp1WaveShaper(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copyStingList(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  SWIG_check_num_args("SynthLab::copyStingList",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::copyStingList",1,"std::vector< std::string > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::copyStingList",2,"std::vector< std::string > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("copyStingList",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("copyStingList",2,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  SynthLab::copyStingList(*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_concatStrings(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string *argp1 ;
  std::string *argp2 ;
  std::string result;
  
  SWIG_check_num_args("SynthLab::concatStrings",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::concatStrings",1,"std::string");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::concatStrings",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("concatStrings",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("concatStrings",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  result = SynthLab::concatStrings(arg1,arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReplaceSubStrWithStr(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  SWIG_check_num_args("SynthLab::ReplaceSubStrWithStr",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::ReplaceSubStrWithStr",1,"std::string &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ReplaceSubStrWithStr",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::ReplaceSubStrWithStr",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("ReplaceSubStrWithStr",1,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("ReplaceSubStrWithStr",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("ReplaceSubStrWithStr",3,SWIGTYPE_p_std__string);
  }
  
  SynthLab::ReplaceSubStrWithStr(*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_stripLastFolderFromPath(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  
  SWIG_check_num_args("SynthLab::stripLastFolderFromPath",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::stripLastFolderFromPath",1,"std::string &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("stripLastFolderFromPath",1,SWIGTYPE_p_std__string);
  }
  
  SynthLab::stripLastFolderFromPath(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getPluginContainerFolder(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  
  SWIG_check_num_args("SynthLab::getPluginContainerFolder",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::getPluginContainerFolder",1,"std::string &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("getPluginContainerFolder",1,SWIGTYPE_p_std__string);
  }
  
  SynthLab::getPluginContainerFolder(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_doLinearInterpolation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double result;
  
  SWIG_check_num_args("SynthLab::doLinearInterpolation",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::doLinearInterpolation",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::doLinearInterpolation",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::doLinearInterpolation",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::doLinearInterpolation",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SynthLab::doLinearInterpolation",5,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (double)SynthLab::doLinearInterpolation(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_doLinearInterpolation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::doLinearInterpolation",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::doLinearInterpolation",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::doLinearInterpolation",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::doLinearInterpolation",3,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)SynthLab::doLinearInterpolation(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_doLinearInterpolation(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_doLinearInterpolation__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_doLinearInterpolation__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'doLinearInterpolation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::doLinearInterpolation(double,double,double,double,double)\n"
    "    SynthLab::doLinearInterpolation(double,double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_doLagrangeInterpolation(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  double arg4 ;
  double result;
  
  SWIG_check_num_args("SynthLab::doLagrangeInterpolation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::doLagrangeInterpolation",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::doLagrangeInterpolation",2,"double *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::doLagrangeInterpolation",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::doLagrangeInterpolation",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("doLagrangeInterpolation",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("doLagrangeInterpolation",2,SWIGTYPE_p_double);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (double)SynthLab::doLagrangeInterpolation(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_midiNoteNumberFromOscFrequency__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::midiNoteNumberFromOscFrequency",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::midiNoteNumberFromOscFrequency",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::midiNoteNumberFromOscFrequency",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = SynthLab::midiNoteNumberFromOscFrequency(arg1,arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_midiNoteNumberFromOscFrequency__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::midiNoteNumberFromOscFrequency",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::midiNoteNumberFromOscFrequency",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = SynthLab::midiNoteNumberFromOscFrequency(arg1);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_midiNoteNumberFromOscFrequency(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_midiNoteNumberFromOscFrequency__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_midiNoteNumberFromOscFrequency__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'midiNoteNumberFromOscFrequency'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::midiNoteNumberFromOscFrequency(double,double)\n"
    "    SynthLab::midiNoteNumberFromOscFrequency(double)\n");
  lua_error(L);return 0;
}


static int _wrap_midiNoteNumberToOscFrequency__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  double arg2 ;
  uint32_t *argp1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::midiNoteNumberToOscFrequency",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::midiNoteNumberToOscFrequency",1,"uint32_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::midiNoteNumberToOscFrequency",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("midiNoteNumberToOscFrequency",1,SWIGTYPE_p_uint32_t);
  }
  arg1 = *argp1;
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)SynthLab::midiNoteNumberToOscFrequency(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_midiNoteNumberToOscFrequency__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  uint32_t *argp1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::midiNoteNumberToOscFrequency",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::midiNoteNumberToOscFrequency",1,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("midiNoteNumberToOscFrequency",1,SWIGTYPE_p_uint32_t);
  }
  arg1 = *argp1;
  
  result = (double)SynthLab::midiNoteNumberToOscFrequency(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_midiNoteNumberToOscFrequency(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_midiNoteNumberToOscFrequency__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_midiNoteNumberToOscFrequency__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'midiNoteNumberToOscFrequency'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::midiNoteNumberToOscFrequency(uint32_t,double)\n"
    "    SynthLab::midiNoteNumberToOscFrequency(uint32_t)\n");
  lua_error(L);return 0;
}


static int _wrap_calculateWaveTablePhaseInc(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::calculateWaveTablePhaseInc",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::calculateWaveTablePhaseInc",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::calculateWaveTablePhaseInc",2,"double");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::calculateWaveTablePhaseInc",3,"uint32_t");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("calculateWaveTablePhaseInc",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  result = (double)SynthLab::calculateWaveTablePhaseInc(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_checkAndWrapWaveTableIndex(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::checkAndWrapWaveTableIndex",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::checkAndWrapWaveTableIndex",1,"double &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::checkAndWrapWaveTableIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("checkAndWrapWaveTableIndex",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("checkAndWrapWaveTableIndex",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (bool)SynthLab::checkAndWrapWaveTableIndex(*arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_countTrailingZero(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("SynthLab::countTrailingZero",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::countTrailingZero",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)SynthLab::countTrailingZero(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_countTrailingZeros_x64(lua_State* L) {
  int SWIG_arg = 0;
  uint64_t arg1 ;
  uint64_t *argp1 ;
  uint64_t result;
  
  SWIG_check_num_args("SynthLab::countTrailingZeros_x64",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::countTrailingZeros_x64",1,"uint64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint64_t,0))){
    SWIG_fail_ptr("countTrailingZeros_x64",1,SWIGTYPE_p_uint64_t);
  }
  arg1 = *argp1;
  
  result = SynthLab::countTrailingZeros_x64(arg1);
  {
    uint64_t * resultptr = new uint64_t((const uint64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_doSimpleSineLUT(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::doSimpleSineLUT",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::doSimpleSineLUT",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)SynthLab::doSimpleSineLUT(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_doSimpleCosineLUT(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::doSimpleCosineLUT",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::doSimpleCosineLUT",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)SynthLab::doSimpleCosineLUT(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calculatePanValues(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  
  SWIG_check_num_args("SynthLab::calculatePanValues",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::calculatePanValues",1,"double");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::calculatePanValues",2,"double &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::calculatePanValues",3,"double &");
  arg1 = (double)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("calculatePanValues",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("calculatePanValues",3,SWIGTYPE_p_double);
  }
  
  SynthLab::calculatePanValues(arg1,*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calculateConstPwrMixValues(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  
  SWIG_check_num_args("SynthLab::calculateConstPwrMixValues",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::calculateConstPwrMixValues",1,"double");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::calculateConstPwrMixValues",2,"double &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::calculateConstPwrMixValues",3,"double &");
  arg1 = (double)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("calculateConstPwrMixValues",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("calculateConstPwrMixValues",3,SWIGTYPE_p_double);
  }
  
  SynthLab::calculateConstPwrMixValues(arg1,*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_crossfade(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::XFadeType arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  SWIG_check_num_args("SynthLab::crossfade",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::crossfade",1,"SynthLab::XFadeType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::crossfade",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::crossfade",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::crossfade",4,"double");
  arg1 = (SynthLab::XFadeType)(int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (double)SynthLab::crossfade(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_semitonesBetweenFrequencies(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::semitonesBetweenFrequencies",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::semitonesBetweenFrequencies",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::semitonesBetweenFrequencies",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)SynthLab::semitonesBetweenFrequencies(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_noteDurationTable_get(lua_State* L) {
  int SWIG_arg = 0;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::noteDurationTable",0,0)
  result = (double *)(double *)SynthLab::noteDurationTable;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getTimeFromTempo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  SynthLab::NoteDuration arg2 ;
  bool arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::getTimeFromTempo",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::getTimeFromTempo",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::getTimeFromTempo",2,"SynthLab::NoteDuration");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("SynthLab::getTimeFromTempo",3,"bool");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (SynthLab::NoteDuration)(int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (double)SynthLab::getTimeFromTempo(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getTimeFromTempo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  SynthLab::NoteDuration arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::getTimeFromTempo",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::getTimeFromTempo",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::getTimeFromTempo",2,"SynthLab::NoteDuration");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (SynthLab::NoteDuration)(int)lua_tonumber(L, 2);
  result = (double)SynthLab::getTimeFromTempo(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getTimeFromTempo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::getTimeFromTempo",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::getTimeFromTempo",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::getTimeFromTempo",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)SynthLab::getTimeFromTempo(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getTimeFromTempo(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_getTimeFromTempo__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_getTimeFromTempo__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_getTimeFromTempo__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'getTimeFromTempo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::getTimeFromTempo(double,SynthLab::NoteDuration,bool)\n"
    "    SynthLab::getTimeFromTempo(double,SynthLab::NoteDuration)\n"
    "    SynthLab::getTimeFromTempo(double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_quantizeBipolarValue(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::quantizeBipolarValue",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::quantizeBipolarValue",1,"double");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::quantizeBipolarValue",2,"uint32_t");
  arg1 = (double)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("quantizeBipolarValue",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (double)SynthLab::quantizeBipolarValue(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_doubleToUint64(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  uint64_t result;
  
  SWIG_check_num_args("SynthLab::doubleToUint64",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::doubleToUint64",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = SynthLab::doubleToUint64(arg1);
  {
    uint64_t * resultptr = new uint64_t((const uint64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64ToDouble(lua_State* L) {
  int SWIG_arg = 0;
  uint64_t arg1 ;
  uint64_t *argp1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::uint64ToDouble",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::uint64ToDouble",1,"uint64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint64_t,0))){
    SWIG_fail_ptr("uint64ToDouble",1,SWIGTYPE_p_uint64_t);
  }
  arg1 = *argp1;
  
  result = (double)SynthLab::uint64ToDouble(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floatToUint32(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::floatToUint32",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::floatToUint32",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = SynthLab::floatToUint32(arg1);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32ToFloat(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  uint32_t *argp1 ;
  float result;
  
  SWIG_check_num_args("SynthLab::uint32ToFloat",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::uint32ToFloat",1,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("uint32ToFloat",1,SWIGTYPE_p_uint32_t);
  }
  arg1 = *argp1;
  
  result = (float)SynthLab::uint32ToFloat(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inRange(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::inRange",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::inRange",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::inRange",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::inRange",3,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)SynthLab::inRange(arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_wrapMax(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::wrapMax",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::wrapMax",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::wrapMax",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)SynthLab::wrapMax(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_wrapMinMax(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::wrapMinMax",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::wrapMinMax",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::wrapMinMax",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::wrapMinMax",3,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)SynthLab::wrapMinMax(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_charArrayToStringVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char **arg1 = (char **) 0 ;
  uint32_t arg2 ;
  std::string arg3 ;
  uint32_t *argp2 ;
  std::string *argp3 ;
  SwigValueWrapper< std::vector< std::string > > result;
  
  SWIG_check_num_args("SynthLab::charArrayToStringVector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::charArrayToStringVector",1,"char const **");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::charArrayToStringVector",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::charArrayToStringVector",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_char,0))){
    SWIG_fail_ptr("charArrayToStringVector",1,SWIGTYPE_p_p_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("charArrayToStringVector",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("charArrayToStringVector",3,SWIGTYPE_p_std__string);
  }
  arg3 = *argp3;
  
  result = SynthLab::charArrayToStringVector((char const **)arg1,arg2,arg3);
  {
    std::vector< std::string > * resultptr = new std::vector< std::string >((const std::vector< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_charArrayToStringVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char **arg1 = (char **) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  SwigValueWrapper< std::vector< std::string > > result;
  
  SWIG_check_num_args("SynthLab::charArrayToStringVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::charArrayToStringVector",1,"char const **");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::charArrayToStringVector",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_char,0))){
    SWIG_fail_ptr("charArrayToStringVector",1,SWIGTYPE_p_p_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("charArrayToStringVector",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = SynthLab::charArrayToStringVector((char const **)arg1,arg2);
  {
    std::vector< std::string > * resultptr = new std::vector< std::string >((const std::vector< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_charArrayToStringVector(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_p_char, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_charArrayToStringVector__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_p_char, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_charArrayToStringVector__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'charArrayToStringVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::charArrayToStringVector(char const **,uint32_t,std::string)\n"
    "    SynthLab::charArrayToStringVector(char const **,uint32_t)\n");
  lua_error(L);return 0;
}


static int _wrap_appendCharArrayToStringVector(lua_State* L) {
  int SWIG_arg = 0;
  char **arg1 = (char **) 0 ;
  uint32_t arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  std::string arg4 ;
  uint32_t *argp2 ;
  std::string *argp4 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::appendCharArrayToStringVector",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::appendCharArrayToStringVector",1,"char const **");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::appendCharArrayToStringVector",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::appendCharArrayToStringVector",3,"std::vector< std::string > &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SynthLab::appendCharArrayToStringVector",4,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_char,0))){
    SWIG_fail_ptr("appendCharArrayToStringVector",1,SWIGTYPE_p_p_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("appendCharArrayToStringVector",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("appendCharArrayToStringVector",3,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("appendCharArrayToStringVector",4,SWIGTYPE_p_std__string);
  }
  arg4 = *argp4;
  
  result = (bool)SynthLab::appendCharArrayToStringVector((char const **)arg1,arg2,*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mmaMIDItoAtten(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  uint32_t *argp1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::mmaMIDItoAtten",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::mmaMIDItoAtten",1,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("mmaMIDItoAtten",1,SWIGTYPE_p_uint32_t);
  }
  arg1 = *argp1;
  
  result = (double)SynthLab::mmaMIDItoAtten(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXFadeData_vectorA_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VectorXFadeData *arg1 = (SynthLab::VectorXFadeData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::VectorXFadeData::vectorA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VectorXFadeData::vectorA",1,"SynthLab::VectorXFadeData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::VectorXFadeData::vectorA",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VectorXFadeData,0))){
    SWIG_fail_ptr("VectorXFadeData_vectorA_set",1,SWIGTYPE_p_SynthLab__VectorXFadeData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->vectorA = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXFadeData_vectorA_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VectorXFadeData *arg1 = (SynthLab::VectorXFadeData *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::VectorXFadeData::vectorA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VectorXFadeData::vectorA",1,"SynthLab::VectorXFadeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VectorXFadeData,0))){
    SWIG_fail_ptr("VectorXFadeData_vectorA_get",1,SWIGTYPE_p_SynthLab__VectorXFadeData);
  }
  
  result = (double) ((arg1)->vectorA);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXFadeData_vectorB_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VectorXFadeData *arg1 = (SynthLab::VectorXFadeData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::VectorXFadeData::vectorB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VectorXFadeData::vectorB",1,"SynthLab::VectorXFadeData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::VectorXFadeData::vectorB",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VectorXFadeData,0))){
    SWIG_fail_ptr("VectorXFadeData_vectorB_set",1,SWIGTYPE_p_SynthLab__VectorXFadeData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->vectorB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXFadeData_vectorB_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VectorXFadeData *arg1 = (SynthLab::VectorXFadeData *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::VectorXFadeData::vectorB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VectorXFadeData::vectorB",1,"SynthLab::VectorXFadeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VectorXFadeData,0))){
    SWIG_fail_ptr("VectorXFadeData_vectorB_get",1,SWIGTYPE_p_SynthLab__VectorXFadeData);
  }
  
  result = (double) ((arg1)->vectorB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXFadeData_vectorC_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VectorXFadeData *arg1 = (SynthLab::VectorXFadeData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::VectorXFadeData::vectorC",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VectorXFadeData::vectorC",1,"SynthLab::VectorXFadeData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::VectorXFadeData::vectorC",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VectorXFadeData,0))){
    SWIG_fail_ptr("VectorXFadeData_vectorC_set",1,SWIGTYPE_p_SynthLab__VectorXFadeData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->vectorC = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXFadeData_vectorC_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VectorXFadeData *arg1 = (SynthLab::VectorXFadeData *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::VectorXFadeData::vectorC",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VectorXFadeData::vectorC",1,"SynthLab::VectorXFadeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VectorXFadeData,0))){
    SWIG_fail_ptr("VectorXFadeData_vectorC_get",1,SWIGTYPE_p_SynthLab__VectorXFadeData);
  }
  
  result = (double) ((arg1)->vectorC);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXFadeData_vectorD_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VectorXFadeData *arg1 = (SynthLab::VectorXFadeData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::VectorXFadeData::vectorD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VectorXFadeData::vectorD",1,"SynthLab::VectorXFadeData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::VectorXFadeData::vectorD",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VectorXFadeData,0))){
    SWIG_fail_ptr("VectorXFadeData_vectorD_set",1,SWIGTYPE_p_SynthLab__VectorXFadeData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->vectorD = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXFadeData_vectorD_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VectorXFadeData *arg1 = (SynthLab::VectorXFadeData *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::VectorXFadeData::vectorD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VectorXFadeData::vectorD",1,"SynthLab::VectorXFadeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VectorXFadeData,0))){
    SWIG_fail_ptr("VectorXFadeData_vectorD_get",1,SWIGTYPE_p_SynthLab__VectorXFadeData);
  }
  
  result = (double) ((arg1)->vectorD);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXFadeData_vectorAC_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VectorXFadeData *arg1 = (SynthLab::VectorXFadeData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::VectorXFadeData::vectorAC",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VectorXFadeData::vectorAC",1,"SynthLab::VectorXFadeData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::VectorXFadeData::vectorAC",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VectorXFadeData,0))){
    SWIG_fail_ptr("VectorXFadeData_vectorAC_set",1,SWIGTYPE_p_SynthLab__VectorXFadeData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->vectorAC = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXFadeData_vectorAC_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VectorXFadeData *arg1 = (SynthLab::VectorXFadeData *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::VectorXFadeData::vectorAC",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VectorXFadeData::vectorAC",1,"SynthLab::VectorXFadeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VectorXFadeData,0))){
    SWIG_fail_ptr("VectorXFadeData_vectorAC_get",1,SWIGTYPE_p_SynthLab__VectorXFadeData);
  }
  
  result = (double) ((arg1)->vectorAC);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXFadeData_vectorBD_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VectorXFadeData *arg1 = (SynthLab::VectorXFadeData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::VectorXFadeData::vectorBD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VectorXFadeData::vectorBD",1,"SynthLab::VectorXFadeData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::VectorXFadeData::vectorBD",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VectorXFadeData,0))){
    SWIG_fail_ptr("VectorXFadeData_vectorBD_set",1,SWIGTYPE_p_SynthLab__VectorXFadeData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->vectorBD = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXFadeData_vectorBD_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VectorXFadeData *arg1 = (SynthLab::VectorXFadeData *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::VectorXFadeData::vectorBD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VectorXFadeData::vectorBD",1,"SynthLab::VectorXFadeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VectorXFadeData,0))){
    SWIG_fail_ptr("VectorXFadeData_vectorBD_get",1,SWIGTYPE_p_SynthLab__VectorXFadeData);
  }
  
  result = (double) ((arg1)->vectorBD);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VectorXFadeData(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VectorXFadeData *result = 0 ;
  
  SWIG_check_num_args("SynthLab::VectorXFadeData::VectorXFadeData",0,0)
  result = (SynthLab::VectorXFadeData *)new SynthLab::VectorXFadeData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__VectorXFadeData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VectorXFadeData(void *obj) {
SynthLab::VectorXFadeData *arg1 = (SynthLab::VectorXFadeData *) obj;
delete arg1;
}
static int _proxy__wrap_new_VectorXFadeData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_VectorXFadeData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_VectorXFadeData_attributes[] = {
    { "vectorA", _wrap_VectorXFadeData_vectorA_get, _wrap_VectorXFadeData_vectorA_set },
    { "vectorB", _wrap_VectorXFadeData_vectorB_get, _wrap_VectorXFadeData_vectorB_set },
    { "vectorC", _wrap_VectorXFadeData_vectorC_get, _wrap_VectorXFadeData_vectorC_set },
    { "vectorD", _wrap_VectorXFadeData_vectorD_get, _wrap_VectorXFadeData_vectorD_set },
    { "vectorAC", _wrap_VectorXFadeData_vectorAC_get, _wrap_VectorXFadeData_vectorAC_set },
    { "vectorBD", _wrap_VectorXFadeData_vectorBD_get, _wrap_VectorXFadeData_vectorBD_set },
    {0,0,0}
};
static swig_lua_method swig_VectorXFadeData_methods[]= {
    {0,0}
};
static swig_lua_method swig_VectorXFadeData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_VectorXFadeData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VectorXFadeData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VectorXFadeData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VectorXFadeData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VectorXFadeData_Sf_SwigStatic = {
    "VectorXFadeData",
    swig_VectorXFadeData_Sf_SwigStatic_methods,
    swig_VectorXFadeData_Sf_SwigStatic_attributes,
    swig_VectorXFadeData_Sf_SwigStatic_constants,
    swig_VectorXFadeData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VectorXFadeData_bases[] = {0};
static const char *swig_VectorXFadeData_base_names[] = {0};
static swig_lua_class _wrap_class_VectorXFadeData = { "VectorXFadeData", "VectorXFadeData", &SWIGTYPE_p_SynthLab__VectorXFadeData,_proxy__wrap_new_VectorXFadeData, swig_delete_VectorXFadeData, swig_VectorXFadeData_methods, swig_VectorXFadeData_attributes, &swig_VectorXFadeData_Sf_SwigStatic, swig_VectorXFadeData_meta, swig_VectorXFadeData_bases, swig_VectorXFadeData_base_names };

static int _wrap_calculateVectorMix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  SynthLab::VectorXFadeData result;
  
  SWIG_check_num_args("SynthLab::calculateVectorMix",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::calculateVectorMix",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::calculateVectorMix",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::calculateVectorMix",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::calculateVectorMix",4,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = SynthLab::calculateVectorMix(arg1,arg2,arg3,arg4);
  {
    SynthLab::VectorXFadeData * resultptr = new SynthLab::VectorXFadeData((const SynthLab::VectorXFadeData &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SynthLab__VectorXFadeData,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calculateVectorMix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  SynthLab::VectorXFadeData result;
  
  SWIG_check_num_args("SynthLab::calculateVectorMix",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::calculateVectorMix",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::calculateVectorMix",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::calculateVectorMix",3,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = SynthLab::calculateVectorMix(arg1,arg2,arg3);
  {
    SynthLab::VectorXFadeData * resultptr = new SynthLab::VectorXFadeData((const SynthLab::VectorXFadeData &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SynthLab__VectorXFadeData,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calculateVectorMix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  SynthLab::VectorXFadeData result;
  
  SWIG_check_num_args("SynthLab::calculateVectorMix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::calculateVectorMix",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::calculateVectorMix",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = SynthLab::calculateVectorMix(arg1,arg2);
  {
    SynthLab::VectorXFadeData * resultptr = new SynthLab::VectorXFadeData((const SynthLab::VectorXFadeData &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SynthLab__VectorXFadeData,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calculateVectorMix(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_calculateVectorMix__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_calculateVectorMix__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_calculateVectorMix__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'calculateVectorMix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::calculateVectorMix(double,double,double,double)\n"
    "    SynthLab::calculateVectorMix(double,double,double)\n"
    "    SynthLab::calculateVectorMix(double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_quadraticSine(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::quadraticSine",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::quadraticSine",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)SynthLab::quadraticSine(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_D_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::D",0,0)
  result = (double)(double)SynthLab::D;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BhaskaraISine(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::BhaskaraISine",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::BhaskaraISine",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)SynthLab::BhaskaraISine(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_B_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::B",0,0)
  result = (double)(double)SynthLab::B;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_C_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::C",0,0)
  result = (double)(double)SynthLab::C;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_P_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::P",0,0)
  result = (double)(double)SynthLab::P;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_parabolicSine(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::parabolicSine",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::parabolicSine",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)SynthLab::parabolicSine(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calculatePitchBend__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< std::shared_ptr< SynthLab::MidiInputData > > arg1 ;
  std::shared_ptr< SynthLab::MidiInputData > *argp1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::calculatePitchBend",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::calculatePitchBend",1,"std::shared_ptr< SynthLab::MidiInputData >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiInputData_t,0))){
    SWIG_fail_ptr("calculatePitchBend",1,SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiInputData_t);
  }
  arg1 = *argp1;
  
  result = (double)SynthLab::calculatePitchBend(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calculatePitchBend__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IMidiInputData *arg1 = (SynthLab::IMidiInputData *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::calculatePitchBend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::calculatePitchBend",1,"SynthLab::IMidiInputData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IMidiInputData,0))){
    SWIG_fail_ptr("calculatePitchBend",1,SWIGTYPE_p_SynthLab__IMidiInputData);
  }
  
  result = (double)SynthLab::calculatePitchBend(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calculatePitchBend(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiInputData_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_calculatePitchBend__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__IMidiInputData, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_calculatePitchBend__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'calculatePitchBend'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::calculatePitchBend(std::shared_ptr< SynthLab::MidiInputData >)\n"
    "    SynthLab::calculatePitchBend(SynthLab::IMidiInputData *)\n");
  lua_error(L);return 0;
}


static int _wrap_calculateMasterTuning(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::IMidiInputData *arg1 = (SynthLab::IMidiInputData *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::calculateMasterTuning",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::calculateMasterTuning",1,"SynthLab::IMidiInputData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__IMidiInputData,0))){
    SWIG_fail_ptr("calculateMasterTuning",1,SWIGTYPE_p_SynthLab__IMidiInputData);
  }
  
  result = (double)SynthLab::calculateMasterTuning(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calculateNumTables(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t *argp1 ;
  uint32_t *argp2 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::calculateNumTables",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::calculateNumTables",1,"uint32_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::calculateNumTables",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("calculateNumTables",1,SWIGTYPE_p_uint32_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("calculateNumTables",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = SynthLab::calculateNumTables(arg1,arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xformLUTLen_set(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  uint32_t *argp1 ;
  
  SWIG_check_num_args("SynthLab::xformLUTLen",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::xformLUTLen",1,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("xformLUTLen_set",1,SWIGTYPE_p_uint32_t);
  }
  arg1 = *argp1;
  
  SynthLab::xformLUTLen = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xformLUTLen_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::xformLUTLen",0,0)
  result = SynthLab::xformLUTLen;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_concaveLUT_set(lua_State* L) {
  int SWIG_arg = 0;
  uint64_t *arg1 ;
  
  SWIG_check_num_args("SynthLab::concaveLUT",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::concaveLUT",1,"uint64_t [512]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uint64_t,0))){
    SWIG_fail_ptr("concaveLUT_set",1,SWIGTYPE_p_uint64_t);
  }
  
  {
    size_t ii;
    uint64_t *b = (uint64_t *) SynthLab::concaveLUT;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((uint64_t *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_concaveLUT_get(lua_State* L) {
  int SWIG_arg = 0;
  uint64_t *result = 0 ;
  
  SWIG_check_num_args("SynthLab::concaveLUT",0,0)
  result = (uint64_t *)(uint64_t *)SynthLab::concaveLUT;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint64_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_reverseconcaveLUT_set(lua_State* L) {
  int SWIG_arg = 0;
  uint64_t *arg1 ;
  
  SWIG_check_num_args("SynthLab::reverseconcaveLUT",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::reverseconcaveLUT",1,"uint64_t [512]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uint64_t,0))){
    SWIG_fail_ptr("reverseconcaveLUT_set",1,SWIGTYPE_p_uint64_t);
  }
  
  {
    size_t ii;
    uint64_t *b = (uint64_t *) SynthLab::reverseconcaveLUT;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((uint64_t *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_reverseconcaveLUT_get(lua_State* L) {
  int SWIG_arg = 0;
  uint64_t *result = 0 ;
  
  SWIG_check_num_args("SynthLab::reverseconcaveLUT",0,0)
  result = (uint64_t *)(uint64_t *)SynthLab::reverseconcaveLUT;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint64_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_convexLUT_set(lua_State* L) {
  int SWIG_arg = 0;
  uint64_t *arg1 ;
  
  SWIG_check_num_args("SynthLab::convexLUT",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::convexLUT",1,"uint64_t [512]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uint64_t,0))){
    SWIG_fail_ptr("convexLUT_set",1,SWIGTYPE_p_uint64_t);
  }
  
  {
    size_t ii;
    uint64_t *b = (uint64_t *) SynthLab::convexLUT;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((uint64_t *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_convexLUT_get(lua_State* L) {
  int SWIG_arg = 0;
  uint64_t *result = 0 ;
  
  SWIG_check_num_args("SynthLab::convexLUT",0,0)
  result = (uint64_t *)(uint64_t *)SynthLab::convexLUT;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint64_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_reverseconvexLUT_set(lua_State* L) {
  int SWIG_arg = 0;
  uint64_t *arg1 ;
  
  SWIG_check_num_args("SynthLab::reverseconvexLUT",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::reverseconvexLUT",1,"uint64_t [512]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uint64_t,0))){
    SWIG_fail_ptr("reverseconvexLUT_set",1,SWIGTYPE_p_uint64_t);
  }
  
  {
    size_t ii;
    uint64_t *b = (uint64_t *) SynthLab::reverseconvexLUT;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((uint64_t *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_reverseconvexLUT_get(lua_State* L) {
  int SWIG_arg = 0;
  uint64_t *result = 0 ;
  
  SWIG_check_num_args("SynthLab::reverseconvexLUT",0,0)
  result = (uint64_t *)(uint64_t *)SynthLab::reverseconvexLUT;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint64_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_readHexLUT(lua_State* L) {
  int SWIG_arg = 0;
  uint64_t *arg1 = (uint64_t *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::readHexLUT",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::readHexLUT",1,"uint64_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::readHexLUT",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uint64_t,0))){
    SWIG_fail_ptr("readHexLUT",1,SWIGTYPE_p_uint64_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)SynthLab::readHexLUT(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_concaveXForm__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  bool arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::concaveXForm",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::concaveXForm",1,"double");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::concaveXForm",2,"bool");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (double)SynthLab::concaveXForm(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_concaveXForm__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::concaveXForm",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::concaveXForm",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)SynthLab::concaveXForm(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_concaveXForm(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_concaveXForm__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_concaveXForm__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'concaveXForm'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::concaveXForm(double,bool)\n"
    "    SynthLab::concaveXForm(double)\n");
  lua_error(L);return 0;
}


static int _wrap_bipolarConcaveXForm__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  bool arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::bipolarConcaveXForm",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::bipolarConcaveXForm",1,"double");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::bipolarConcaveXForm",2,"bool");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (double)SynthLab::bipolarConcaveXForm(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bipolarConcaveXForm__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::bipolarConcaveXForm",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::bipolarConcaveXForm",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)SynthLab::bipolarConcaveXForm(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bipolarConcaveXForm(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_bipolarConcaveXForm__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_bipolarConcaveXForm__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'bipolarConcaveXForm'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::bipolarConcaveXForm(double,bool)\n"
    "    SynthLab::bipolarConcaveXForm(double)\n");
  lua_error(L);return 0;
}


static int _wrap_reverseConcaveXForm__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  bool arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::reverseConcaveXForm",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::reverseConcaveXForm",1,"double");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::reverseConcaveXForm",2,"bool");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (double)SynthLab::reverseConcaveXForm(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_reverseConcaveXForm__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::reverseConcaveXForm",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::reverseConcaveXForm",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)SynthLab::reverseConcaveXForm(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_reverseConcaveXForm(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_reverseConcaveXForm__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_reverseConcaveXForm__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'reverseConcaveXForm'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::reverseConcaveXForm(double,bool)\n"
    "    SynthLab::reverseConcaveXForm(double)\n");
  lua_error(L);return 0;
}


static int _wrap_bipolarReverseConcaveXForm__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  bool arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::bipolarReverseConcaveXForm",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::bipolarReverseConcaveXForm",1,"double");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::bipolarReverseConcaveXForm",2,"bool");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (double)SynthLab::bipolarReverseConcaveXForm(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bipolarReverseConcaveXForm__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::bipolarReverseConcaveXForm",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::bipolarReverseConcaveXForm",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)SynthLab::bipolarReverseConcaveXForm(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bipolarReverseConcaveXForm(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_bipolarReverseConcaveXForm__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_bipolarReverseConcaveXForm__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'bipolarReverseConcaveXForm'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::bipolarReverseConcaveXForm(double,bool)\n"
    "    SynthLab::bipolarReverseConcaveXForm(double)\n");
  lua_error(L);return 0;
}


static int _wrap_convexXForm__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  bool arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::convexXForm",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::convexXForm",1,"double");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::convexXForm",2,"bool");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (double)SynthLab::convexXForm(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_convexXForm__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::convexXForm",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::convexXForm",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)SynthLab::convexXForm(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_convexXForm(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_convexXForm__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_convexXForm__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'convexXForm'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::convexXForm(double,bool)\n"
    "    SynthLab::convexXForm(double)\n");
  lua_error(L);return 0;
}


static int _wrap_bipolarConvexXForm__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  bool arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::bipolarConvexXForm",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::bipolarConvexXForm",1,"double");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::bipolarConvexXForm",2,"bool");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (double)SynthLab::bipolarConvexXForm(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bipolarConvexXForm__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::bipolarConvexXForm",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::bipolarConvexXForm",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)SynthLab::bipolarConvexXForm(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bipolarConvexXForm(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_bipolarConvexXForm__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_bipolarConvexXForm__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'bipolarConvexXForm'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::bipolarConvexXForm(double,bool)\n"
    "    SynthLab::bipolarConvexXForm(double)\n");
  lua_error(L);return 0;
}


static int _wrap_reverseConvexXForm__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  bool arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::reverseConvexXForm",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::reverseConvexXForm",1,"double");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::reverseConvexXForm",2,"bool");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (double)SynthLab::reverseConvexXForm(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_reverseConvexXForm__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::reverseConvexXForm",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::reverseConvexXForm",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)SynthLab::reverseConvexXForm(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_reverseConvexXForm(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_reverseConvexXForm__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_reverseConvexXForm__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'reverseConvexXForm'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::reverseConvexXForm(double,bool)\n"
    "    SynthLab::reverseConvexXForm(double)\n");
  lua_error(L);return 0;
}


static int _wrap_bipolarReverseConvexXForm__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  bool arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::bipolarReverseConvexXForm",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::bipolarReverseConvexXForm",1,"double");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::bipolarReverseConvexXForm",2,"bool");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (double)SynthLab::bipolarReverseConvexXForm(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bipolarReverseConvexXForm__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("SynthLab::bipolarReverseConvexXForm",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::bipolarReverseConvexXForm",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)SynthLab::bipolarReverseConvexXForm(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bipolarReverseConvexXForm(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_bipolarReverseConvexXForm__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_bipolarReverseConvexXForm__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'bipolarReverseConvexXForm'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::bipolarReverseConvexXForm(double,bool)\n"
    "    SynthLab::bipolarReverseConvexXForm(double)\n");
  lua_error(L);return 0;
}


static int _wrap_doPolyBLEP_2(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  double result;
  
  SWIG_check_num_args("SynthLab::doPolyBLEP_2",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::doPolyBLEP_2",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::doPolyBLEP_2",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::doPolyBLEP_2",3,"double");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("SynthLab::doPolyBLEP_2",4,"bool");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (double)SynthLab::doPolyBLEP_2(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_doBLEP_N__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  bool arg5 ;
  uint32_t arg6 ;
  bool arg7 ;
  uint32_t *argp1 ;
  uint32_t *argp6 ;
  double result;
  
  SWIG_check_num_args("SynthLab::doBLEP_N",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::doBLEP_N",1,"uint32_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::doBLEP_N",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::doBLEP_N",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::doBLEP_N",4,"double");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("SynthLab::doBLEP_N",5,"bool");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SynthLab::doBLEP_N",6,"uint32_t");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("SynthLab::doBLEP_N",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("doBLEP_N",1,SWIGTYPE_p_uint32_t);
  }
  arg1 = *argp1;
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("doBLEP_N",6,SWIGTYPE_p_uint32_t);
  }
  arg6 = *argp6;
  
  arg7 = (lua_toboolean(L, 7)!=0);
  result = (double)SynthLab::doBLEP_N(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_doBLEP_N__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  bool arg5 ;
  uint32_t arg6 ;
  uint32_t *argp1 ;
  uint32_t *argp6 ;
  double result;
  
  SWIG_check_num_args("SynthLab::doBLEP_N",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::doBLEP_N",1,"uint32_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::doBLEP_N",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::doBLEP_N",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::doBLEP_N",4,"double");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("SynthLab::doBLEP_N",5,"bool");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SynthLab::doBLEP_N",6,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("doBLEP_N",1,SWIGTYPE_p_uint32_t);
  }
  arg1 = *argp1;
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("doBLEP_N",6,SWIGTYPE_p_uint32_t);
  }
  arg6 = *argp6;
  
  result = (double)SynthLab::doBLEP_N(arg1,arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_doBLEP_N(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_doBLEP_N__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_doBLEP_N__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'doBLEP_N'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::doBLEP_N(uint32_t,double,double,double,bool,uint32_t,bool)\n"
    "    SynthLab::doBLEP_N(uint32_t,double,double,double,bool,uint32_t)\n");
  lua_error(L);return 0;
}


static int _wrap_initDMConfig(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< std::shared_ptr< SynthLab::MidiInputData > > arg1 ;
  SynthLab::DMConfig *arg2 = (SynthLab::DMConfig *) 0 ;
  std::shared_ptr< SynthLab::MidiInputData > *argp1 ;
  
  SWIG_check_num_args("SynthLab::initDMConfig",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::initDMConfig",1,"std::shared_ptr< SynthLab::MidiInputData >");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::initDMConfig",2,"SynthLab::DMConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiInputData_t,0))){
    SWIG_fail_ptr("initDMConfig",1,SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiInputData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__DMConfig,0))){
    SWIG_fail_ptr("initDMConfig",2,SWIGTYPE_p_SynthLab__DMConfig);
  }
  
  SynthLab::initDMConfig(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_initMIDIInputData(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< std::shared_ptr< SynthLab::MidiInputData > > arg1 ;
  std::shared_ptr< SynthLab::MidiInputData > *argp1 ;
  
  SWIG_check_num_args("SynthLab::initMIDIInputData",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::initMIDIInputData",1,"std::shared_ptr< SynthLab::MidiInputData >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiInputData_t,0))){
    SWIG_fail_ptr("initMIDIInputData",1,SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiInputData_t);
  }
  arg1 = *argp1;
  
  SynthLab::initMIDIInputData(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_semitonesBetweenFreqs(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::semitonesBetweenFreqs",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::semitonesBetweenFreqs",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::semitonesBetweenFreqs",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)SynthLab::semitonesBetweenFreqs(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MONO_INPUT_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::MONO_INPUT",0,0)
  result = (uint32_t)SynthLab::MONO_INPUT;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MONO_OUTPUT_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::MONO_OUTPUT",0,0)
  result = (uint32_t)SynthLab::MONO_OUTPUT;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STEREO_INPUTS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::STEREO_INPUTS",0,0)
  result = (uint32_t)SynthLab::STEREO_INPUTS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STEREO_OUTPUTS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::STEREO_OUTPUTS",0,0)
  result = (uint32_t)SynthLab::STEREO_OUTPUTS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OscParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *result = 0 ;
  
  SWIG_check_num_args("SynthLab::OscParameters::OscParameters",0,0)
  result = (SynthLab::OscParameters *)new SynthLab::OscParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__OscParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_waveIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::OscParameters::waveIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::waveIndex",1,"SynthLab::OscParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::OscParameters::waveIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_waveIndex_set",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("OscParameters_waveIndex_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->waveIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_waveIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::OscParameters::waveIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::waveIndex",1,"SynthLab::OscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_waveIndex_get",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  result =  ((arg1)->waveIndex);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_octaveDetune_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::OscParameters::octaveDetune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::octaveDetune",1,"SynthLab::OscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::OscParameters::octaveDetune",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_octaveDetune_set",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->octaveDetune = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_octaveDetune_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::OscParameters::octaveDetune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::octaveDetune",1,"SynthLab::OscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_octaveDetune_get",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  result = (double) ((arg1)->octaveDetune);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_coarseDetune_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::OscParameters::coarseDetune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::coarseDetune",1,"SynthLab::OscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::OscParameters::coarseDetune",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_coarseDetune_set",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->coarseDetune = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_coarseDetune_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::OscParameters::coarseDetune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::coarseDetune",1,"SynthLab::OscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_coarseDetune_get",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  result = (double) ((arg1)->coarseDetune);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_fineDetune_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::OscParameters::fineDetune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::fineDetune",1,"SynthLab::OscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::OscParameters::fineDetune",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_fineDetune_set",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->fineDetune = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_fineDetune_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::OscParameters::fineDetune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::fineDetune",1,"SynthLab::OscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_fineDetune_get",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  result = (double) ((arg1)->fineDetune);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_unisonDetuneCents_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::OscParameters::unisonDetuneCents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::unisonDetuneCents",1,"SynthLab::OscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::OscParameters::unisonDetuneCents",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_unisonDetuneCents_set",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->unisonDetuneCents = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_unisonDetuneCents_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::OscParameters::unisonDetuneCents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::unisonDetuneCents",1,"SynthLab::OscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_unisonDetuneCents_get",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  result = (double) ((arg1)->unisonDetuneCents);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_oscSpecificDetune_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::OscParameters::oscSpecificDetune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::oscSpecificDetune",1,"SynthLab::OscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::OscParameters::oscSpecificDetune",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_oscSpecificDetune_set",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->oscSpecificDetune = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_oscSpecificDetune_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::OscParameters::oscSpecificDetune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::oscSpecificDetune",1,"SynthLab::OscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_oscSpecificDetune_get",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  result = (double) ((arg1)->oscSpecificDetune);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_outputAmplitude_dB_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::OscParameters::outputAmplitude_dB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::outputAmplitude_dB",1,"SynthLab::OscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::OscParameters::outputAmplitude_dB",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_outputAmplitude_dB_set",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->outputAmplitude_dB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_outputAmplitude_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::OscParameters::outputAmplitude_dB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::outputAmplitude_dB",1,"SynthLab::OscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_outputAmplitude_dB_get",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  result = (double) ((arg1)->outputAmplitude_dB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_oscillatorShape_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::OscParameters::oscillatorShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::oscillatorShape",1,"SynthLab::OscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::OscParameters::oscillatorShape",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_oscillatorShape_set",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->oscillatorShape = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_oscillatorShape_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::OscParameters::oscillatorShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::oscillatorShape",1,"SynthLab::OscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_oscillatorShape_get",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  result = (double) ((arg1)->oscillatorShape);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_hardSyncRatio_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::OscParameters::hardSyncRatio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::hardSyncRatio",1,"SynthLab::OscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::OscParameters::hardSyncRatio",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_hardSyncRatio_set",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->hardSyncRatio = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_hardSyncRatio_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::OscParameters::hardSyncRatio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::hardSyncRatio",1,"SynthLab::OscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_hardSyncRatio_get",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  result = (double) ((arg1)->hardSyncRatio);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_panValue_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::OscParameters::panValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::panValue",1,"SynthLab::OscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::OscParameters::panValue",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_panValue_set",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->panValue = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_panValue_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::OscParameters::panValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::panValue",1,"SynthLab::OscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_panValue_get",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  result = (double) ((arg1)->panValue);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_phaseModIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::OscParameters::phaseModIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::phaseModIndex",1,"SynthLab::OscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::OscParameters::phaseModIndex",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_phaseModIndex_set",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->phaseModIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_phaseModIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::OscParameters::phaseModIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::phaseModIndex",1,"SynthLab::OscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_phaseModIndex_get",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  result = (double) ((arg1)->phaseModIndex);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_shape_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::OscParameters::shape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::shape",1,"SynthLab::OscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::OscParameters::shape",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_shape_set",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->shape = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_shape_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::OscParameters::shape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::shape",1,"SynthLab::OscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_shape_get",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  result = (double) ((arg1)->shape);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_modKnobValue_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::OscParameters::modKnobValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::modKnobValue",1,"SynthLab::OscParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::OscParameters::modKnobValue",2,"double [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_modKnobValue_set",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("OscParameters_modKnobValue_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->modKnobValue;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_modKnobValue_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::OscParameters::modKnobValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::modKnobValue",1,"SynthLab::OscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_modKnobValue_get",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  result = (double *)(double *) ((arg1)->modKnobValue);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_moduleIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::OscParameters::moduleIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::moduleIndex",1,"SynthLab::OscParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::OscParameters::moduleIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_moduleIndex_set",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("OscParameters_moduleIndex_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->moduleIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_moduleIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::OscParameters::moduleIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::moduleIndex",1,"SynthLab::OscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_moduleIndex_get",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  result =  ((arg1)->moduleIndex);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_forceLoop_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::OscParameters::forceLoop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::forceLoop",1,"SynthLab::OscParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::OscParameters::forceLoop",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_forceLoop_set",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->forceLoop = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscParameters_forceLoop_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::OscParameters::forceLoop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::OscParameters::forceLoop",1,"SynthLab::OscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__OscParameters,0))){
    SWIG_fail_ptr("OscParameters_forceLoop_get",1,SWIGTYPE_p_SynthLab__OscParameters);
  }
  
  result = (bool) ((arg1)->forceLoop);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OscParameters(void *obj) {
SynthLab::OscParameters *arg1 = (SynthLab::OscParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_OscParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OscParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OscParameters_attributes[] = {
    { "waveIndex", _wrap_OscParameters_waveIndex_get, _wrap_OscParameters_waveIndex_set },
    { "octaveDetune", _wrap_OscParameters_octaveDetune_get, _wrap_OscParameters_octaveDetune_set },
    { "coarseDetune", _wrap_OscParameters_coarseDetune_get, _wrap_OscParameters_coarseDetune_set },
    { "fineDetune", _wrap_OscParameters_fineDetune_get, _wrap_OscParameters_fineDetune_set },
    { "unisonDetuneCents", _wrap_OscParameters_unisonDetuneCents_get, _wrap_OscParameters_unisonDetuneCents_set },
    { "oscSpecificDetune", _wrap_OscParameters_oscSpecificDetune_get, _wrap_OscParameters_oscSpecificDetune_set },
    { "outputAmplitude_dB", _wrap_OscParameters_outputAmplitude_dB_get, _wrap_OscParameters_outputAmplitude_dB_set },
    { "oscillatorShape", _wrap_OscParameters_oscillatorShape_get, _wrap_OscParameters_oscillatorShape_set },
    { "hardSyncRatio", _wrap_OscParameters_hardSyncRatio_get, _wrap_OscParameters_hardSyncRatio_set },
    { "panValue", _wrap_OscParameters_panValue_get, _wrap_OscParameters_panValue_set },
    { "phaseModIndex", _wrap_OscParameters_phaseModIndex_get, _wrap_OscParameters_phaseModIndex_set },
    { "shape", _wrap_OscParameters_shape_get, _wrap_OscParameters_shape_set },
    { "modKnobValue", _wrap_OscParameters_modKnobValue_get, _wrap_OscParameters_modKnobValue_set },
    { "moduleIndex", _wrap_OscParameters_moduleIndex_get, _wrap_OscParameters_moduleIndex_set },
    { "forceLoop", _wrap_OscParameters_forceLoop_get, _wrap_OscParameters_forceLoop_set },
    {0,0,0}
};
static swig_lua_method swig_OscParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_OscParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OscParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OscParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OscParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OscParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OscParameters_Sf_SwigStatic = {
    "OscParameters",
    swig_OscParameters_Sf_SwigStatic_methods,
    swig_OscParameters_Sf_SwigStatic_attributes,
    swig_OscParameters_Sf_SwigStatic_constants,
    swig_OscParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OscParameters_bases[] = {0};
static const char *swig_OscParameters_base_names[] = {0};
static swig_lua_class _wrap_class_OscParameters = { "OscParameters", "OscParameters", &SWIGTYPE_p_SynthLab__OscParameters,_proxy__wrap_new_OscParameters, swig_delete_OscParameters, swig_OscParameters_methods, swig_OscParameters_attributes, &swig_OscParameters_Sf_SwigStatic, swig_OscParameters_meta, swig_OscParameters_bases, swig_OscParameters_base_names };

static int _wrap_OSC_FMIN_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::OSC_FMIN",0,0)
  result = (double)(double)SynthLab::OSC_FMIN;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSC_FMAX_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::OSC_FMAX",0,0)
  result = (double)(double)SynthLab::OSC_FMAX;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSC_INPUTS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::OSC_INPUTS",0,0)
  result = (uint32_t)SynthLab::OSC_INPUTS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSC_OUTPUTS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::OSC_OUTPUTS",0,0)
  result = (uint32_t)SynthLab::OSC_OUTPUTS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WT_OSC_MIN_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::WT_OSC_MIN",0,0)
  result = (double)(double)SynthLab::WT_OSC_MIN;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WT_OSC_MAX_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::WT_OSC_MAX",0,0)
  result = (double)(double)SynthLab::WT_OSC_MAX;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WT_OSC_INPUTS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WT_OSC_INPUTS",0,0)
  result = (uint32_t)SynthLab::WT_OSC_INPUTS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WT_OSC_OUTPUTS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WT_OSC_OUTPUTS",0,0)
  result = (uint32_t)SynthLab::WT_OSC_OUTPUTS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WTOscParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::WTOscParameters",0,0)
  result = (SynthLab::WTOscParameters *)new SynthLab::WTOscParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__WTOscParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_waveIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::waveIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::waveIndex",1,"SynthLab::WTOscParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WTOscParameters::waveIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_waveIndex_set",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WTOscParameters_waveIndex_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->waveIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_waveIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::waveIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::waveIndex",1,"SynthLab::WTOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_waveIndex_get",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  result =  ((arg1)->waveIndex);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_octaveDetune_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::octaveDetune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::octaveDetune",1,"SynthLab::WTOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::WTOscParameters::octaveDetune",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_octaveDetune_set",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->octaveDetune = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_octaveDetune_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::octaveDetune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::octaveDetune",1,"SynthLab::WTOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_octaveDetune_get",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  result = (double) ((arg1)->octaveDetune);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_coarseDetune_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::coarseDetune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::coarseDetune",1,"SynthLab::WTOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::WTOscParameters::coarseDetune",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_coarseDetune_set",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->coarseDetune = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_coarseDetune_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::coarseDetune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::coarseDetune",1,"SynthLab::WTOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_coarseDetune_get",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  result = (double) ((arg1)->coarseDetune);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_fineDetune_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::fineDetune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::fineDetune",1,"SynthLab::WTOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::WTOscParameters::fineDetune",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_fineDetune_set",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->fineDetune = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_fineDetune_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::fineDetune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::fineDetune",1,"SynthLab::WTOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_fineDetune_get",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  result = (double) ((arg1)->fineDetune);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_unisonDetuneCents_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::unisonDetuneCents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::unisonDetuneCents",1,"SynthLab::WTOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::WTOscParameters::unisonDetuneCents",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_unisonDetuneCents_set",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->unisonDetuneCents = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_unisonDetuneCents_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::unisonDetuneCents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::unisonDetuneCents",1,"SynthLab::WTOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_unisonDetuneCents_get",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  result = (double) ((arg1)->unisonDetuneCents);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_oscSpecificDetune_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::oscSpecificDetune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::oscSpecificDetune",1,"SynthLab::WTOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::WTOscParameters::oscSpecificDetune",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_oscSpecificDetune_set",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->oscSpecificDetune = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_oscSpecificDetune_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::oscSpecificDetune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::oscSpecificDetune",1,"SynthLab::WTOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_oscSpecificDetune_get",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  result = (double) ((arg1)->oscSpecificDetune);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_outputAmplitude_dB_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::outputAmplitude_dB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::outputAmplitude_dB",1,"SynthLab::WTOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::WTOscParameters::outputAmplitude_dB",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_outputAmplitude_dB_set",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->outputAmplitude_dB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_outputAmplitude_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::outputAmplitude_dB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::outputAmplitude_dB",1,"SynthLab::WTOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_outputAmplitude_dB_get",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  result = (double) ((arg1)->outputAmplitude_dB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_oscillatorShape_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::oscillatorShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::oscillatorShape",1,"SynthLab::WTOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::WTOscParameters::oscillatorShape",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_oscillatorShape_set",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->oscillatorShape = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_oscillatorShape_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::oscillatorShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::oscillatorShape",1,"SynthLab::WTOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_oscillatorShape_get",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  result = (double) ((arg1)->oscillatorShape);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_hardSyncRatio_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::hardSyncRatio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::hardSyncRatio",1,"SynthLab::WTOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::WTOscParameters::hardSyncRatio",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_hardSyncRatio_set",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->hardSyncRatio = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_hardSyncRatio_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::hardSyncRatio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::hardSyncRatio",1,"SynthLab::WTOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_hardSyncRatio_get",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  result = (double) ((arg1)->hardSyncRatio);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_panValue_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::panValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::panValue",1,"SynthLab::WTOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::WTOscParameters::panValue",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_panValue_set",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->panValue = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_panValue_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::panValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::panValue",1,"SynthLab::WTOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_panValue_get",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  result = (double) ((arg1)->panValue);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_phaseModIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::phaseModIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::phaseModIndex",1,"SynthLab::WTOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::WTOscParameters::phaseModIndex",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_phaseModIndex_set",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->phaseModIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_phaseModIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::phaseModIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::phaseModIndex",1,"SynthLab::WTOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_phaseModIndex_get",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  result = (double) ((arg1)->phaseModIndex);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_modKnobValue_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::modKnobValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::modKnobValue",1,"SynthLab::WTOscParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WTOscParameters::modKnobValue",2,"double [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_modKnobValue_set",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("WTOscParameters_modKnobValue_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->modKnobValue;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_modKnobValue_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::modKnobValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::modKnobValue",1,"SynthLab::WTOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_modKnobValue_get",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  result = (double *)(double *) ((arg1)->modKnobValue);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_moduleIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::moduleIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::moduleIndex",1,"SynthLab::WTOscParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WTOscParameters::moduleIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_moduleIndex_set",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WTOscParameters_moduleIndex_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->moduleIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_moduleIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::moduleIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::moduleIndex",1,"SynthLab::WTOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_moduleIndex_get",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  result =  ((arg1)->moduleIndex);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_forceLoop_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::forceLoop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::forceLoop",1,"SynthLab::WTOscParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::WTOscParameters::forceLoop",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_forceLoop_set",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->forceLoop = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscParameters_forceLoop_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WTOscParameters::forceLoop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscParameters::forceLoop",1,"SynthLab::WTOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscParameters,0))){
    SWIG_fail_ptr("WTOscParameters_forceLoop_get",1,SWIGTYPE_p_SynthLab__WTOscParameters);
  }
  
  result = (bool) ((arg1)->forceLoop);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WTOscParameters(void *obj) {
SynthLab::WTOscParameters *arg1 = (SynthLab::WTOscParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_WTOscParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WTOscParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WTOscParameters_attributes[] = {
    { "waveIndex", _wrap_WTOscParameters_waveIndex_get, _wrap_WTOscParameters_waveIndex_set },
    { "octaveDetune", _wrap_WTOscParameters_octaveDetune_get, _wrap_WTOscParameters_octaveDetune_set },
    { "coarseDetune", _wrap_WTOscParameters_coarseDetune_get, _wrap_WTOscParameters_coarseDetune_set },
    { "fineDetune", _wrap_WTOscParameters_fineDetune_get, _wrap_WTOscParameters_fineDetune_set },
    { "unisonDetuneCents", _wrap_WTOscParameters_unisonDetuneCents_get, _wrap_WTOscParameters_unisonDetuneCents_set },
    { "oscSpecificDetune", _wrap_WTOscParameters_oscSpecificDetune_get, _wrap_WTOscParameters_oscSpecificDetune_set },
    { "outputAmplitude_dB", _wrap_WTOscParameters_outputAmplitude_dB_get, _wrap_WTOscParameters_outputAmplitude_dB_set },
    { "oscillatorShape", _wrap_WTOscParameters_oscillatorShape_get, _wrap_WTOscParameters_oscillatorShape_set },
    { "hardSyncRatio", _wrap_WTOscParameters_hardSyncRatio_get, _wrap_WTOscParameters_hardSyncRatio_set },
    { "panValue", _wrap_WTOscParameters_panValue_get, _wrap_WTOscParameters_panValue_set },
    { "phaseModIndex", _wrap_WTOscParameters_phaseModIndex_get, _wrap_WTOscParameters_phaseModIndex_set },
    { "modKnobValue", _wrap_WTOscParameters_modKnobValue_get, _wrap_WTOscParameters_modKnobValue_set },
    { "moduleIndex", _wrap_WTOscParameters_moduleIndex_get, _wrap_WTOscParameters_moduleIndex_set },
    { "forceLoop", _wrap_WTOscParameters_forceLoop_get, _wrap_WTOscParameters_forceLoop_set },
    {0,0,0}
};
static swig_lua_method swig_WTOscParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_WTOscParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WTOscParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WTOscParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WTOscParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WTOscParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WTOscParameters_Sf_SwigStatic = {
    "WTOscParameters",
    swig_WTOscParameters_Sf_SwigStatic_methods,
    swig_WTOscParameters_Sf_SwigStatic_attributes,
    swig_WTOscParameters_Sf_SwigStatic_constants,
    swig_WTOscParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WTOscParameters_bases[] = {0};
static const char *swig_WTOscParameters_base_names[] = {0};
static swig_lua_class _wrap_class_WTOscParameters = { "WTOscParameters", "WTOscParameters", &SWIGTYPE_p_SynthLab__WTOscParameters,_proxy__wrap_new_WTOscParameters, swig_delete_WTOscParameters, swig_WTOscParameters_methods, swig_WTOscParameters_attributes, &swig_WTOscParameters_Sf_SwigStatic, swig_WTOscParameters_meta, swig_WTOscParameters_bases, swig_WTOscParameters_base_names };

static int _wrap_new_WSOscParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscParameters *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WSOscParameters::WSOscParameters",0,0)
  result = (SynthLab::WSOscParameters *)new SynthLab::WSOscParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__WSOscParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscParameters_detuneSemis_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscParameters *arg1 = (SynthLab::WSOscParameters *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::WSOscParameters::detuneSemis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscParameters::detuneSemis",1,"SynthLab::WSOscParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WSOscParameters::detuneSemis",2,"double [8]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscParameters,0))){
    SWIG_fail_ptr("WSOscParameters_detuneSemis_set",1,SWIGTYPE_p_SynthLab__WSOscParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("WSOscParameters_detuneSemis_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->detuneSemis;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscParameters_detuneSemis_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscParameters *arg1 = (SynthLab::WSOscParameters *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WSOscParameters::detuneSemis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscParameters::detuneSemis",1,"SynthLab::WSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscParameters,0))){
    SWIG_fail_ptr("WSOscParameters_detuneSemis_get",1,SWIGTYPE_p_SynthLab__WSOscParameters);
  }
  
  result = (double *)(double *) ((arg1)->detuneSemis);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscParameters_detuneCents_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscParameters *arg1 = (SynthLab::WSOscParameters *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::WSOscParameters::detuneCents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscParameters::detuneCents",1,"SynthLab::WSOscParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WSOscParameters::detuneCents",2,"double [8]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscParameters,0))){
    SWIG_fail_ptr("WSOscParameters_detuneCents_set",1,SWIGTYPE_p_SynthLab__WSOscParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("WSOscParameters_detuneCents_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->detuneCents;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscParameters_detuneCents_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscParameters *arg1 = (SynthLab::WSOscParameters *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WSOscParameters::detuneCents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscParameters::detuneCents",1,"SynthLab::WSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscParameters,0))){
    SWIG_fail_ptr("WSOscParameters_detuneCents_get",1,SWIGTYPE_p_SynthLab__WSOscParameters);
  }
  
  result = (double *)(double *) ((arg1)->detuneCents);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscParameters_oscillatorShape_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscParameters *arg1 = (SynthLab::WSOscParameters *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::WSOscParameters::oscillatorShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscParameters::oscillatorShape",1,"SynthLab::WSOscParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WSOscParameters::oscillatorShape",2,"double [8]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscParameters,0))){
    SWIG_fail_ptr("WSOscParameters_oscillatorShape_set",1,SWIGTYPE_p_SynthLab__WSOscParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("WSOscParameters_oscillatorShape_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->oscillatorShape;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscParameters_oscillatorShape_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscParameters *arg1 = (SynthLab::WSOscParameters *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WSOscParameters::oscillatorShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscParameters::oscillatorShape",1,"SynthLab::WSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscParameters,0))){
    SWIG_fail_ptr("WSOscParameters_oscillatorShape_get",1,SWIGTYPE_p_SynthLab__WSOscParameters);
  }
  
  result = (double *)(double *) ((arg1)->oscillatorShape);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscParameters_hardSyncRatio_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscParameters *arg1 = (SynthLab::WSOscParameters *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::WSOscParameters::hardSyncRatio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscParameters::hardSyncRatio",1,"SynthLab::WSOscParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WSOscParameters::hardSyncRatio",2,"double [8]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscParameters,0))){
    SWIG_fail_ptr("WSOscParameters_hardSyncRatio_set",1,SWIGTYPE_p_SynthLab__WSOscParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("WSOscParameters_hardSyncRatio_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->hardSyncRatio;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscParameters_hardSyncRatio_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscParameters *arg1 = (SynthLab::WSOscParameters *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WSOscParameters::hardSyncRatio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscParameters::hardSyncRatio",1,"SynthLab::WSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscParameters,0))){
    SWIG_fail_ptr("WSOscParameters_hardSyncRatio_get",1,SWIGTYPE_p_SynthLab__WSOscParameters);
  }
  
  result = (double *)(double *) ((arg1)->hardSyncRatio);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscParameters_morphIntensity_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscParameters *arg1 = (SynthLab::WSOscParameters *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::WSOscParameters::morphIntensity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscParameters::morphIntensity",1,"SynthLab::WSOscParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WSOscParameters::morphIntensity",2,"double [8]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscParameters,0))){
    SWIG_fail_ptr("WSOscParameters_morphIntensity_set",1,SWIGTYPE_p_SynthLab__WSOscParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("WSOscParameters_morphIntensity_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->morphIntensity;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscParameters_morphIntensity_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscParameters *arg1 = (SynthLab::WSOscParameters *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WSOscParameters::morphIntensity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscParameters::morphIntensity",1,"SynthLab::WSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscParameters,0))){
    SWIG_fail_ptr("WSOscParameters_morphIntensity_get",1,SWIGTYPE_p_SynthLab__WSOscParameters);
  }
  
  result = (double *)(double *) ((arg1)->morphIntensity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscParameters_panValue_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscParameters *arg1 = (SynthLab::WSOscParameters *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::WSOscParameters::panValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscParameters::panValue",1,"SynthLab::WSOscParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WSOscParameters::panValue",2,"double [8]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscParameters,0))){
    SWIG_fail_ptr("WSOscParameters_panValue_set",1,SWIGTYPE_p_SynthLab__WSOscParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("WSOscParameters_panValue_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->panValue;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscParameters_panValue_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscParameters *arg1 = (SynthLab::WSOscParameters *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WSOscParameters::panValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscParameters::panValue",1,"SynthLab::WSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscParameters,0))){
    SWIG_fail_ptr("WSOscParameters_panValue_get",1,SWIGTYPE_p_SynthLab__WSOscParameters);
  }
  
  result = (double *)(double *) ((arg1)->panValue);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscParameters_doubleOscillator_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscParameters *arg1 = (SynthLab::WSOscParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::WSOscParameters::doubleOscillator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscParameters::doubleOscillator",1,"SynthLab::WSOscParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::WSOscParameters::doubleOscillator",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscParameters,0))){
    SWIG_fail_ptr("WSOscParameters_doubleOscillator_set",1,SWIGTYPE_p_SynthLab__WSOscParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->doubleOscillator = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscParameters_doubleOscillator_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscParameters *arg1 = (SynthLab::WSOscParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WSOscParameters::doubleOscillator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscParameters::doubleOscillator",1,"SynthLab::WSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscParameters,0))){
    SWIG_fail_ptr("WSOscParameters_doubleOscillator_get",1,SWIGTYPE_p_SynthLab__WSOscParameters);
  }
  
  result = (bool) ((arg1)->doubleOscillator);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscParameters_soloWaveWSIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscParameters *arg1 = (SynthLab::WSOscParameters *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WSOscParameters::soloWaveWSIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscParameters::soloWaveWSIndex",1,"SynthLab::WSOscParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WSOscParameters::soloWaveWSIndex",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscParameters,0))){
    SWIG_fail_ptr("WSOscParameters_soloWaveWSIndex_set",1,SWIGTYPE_p_SynthLab__WSOscParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("WSOscParameters_soloWaveWSIndex_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->soloWaveWSIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscParameters_soloWaveWSIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscParameters *arg1 = (SynthLab::WSOscParameters *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("SynthLab::WSOscParameters::soloWaveWSIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscParameters::soloWaveWSIndex",1,"SynthLab::WSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscParameters,0))){
    SWIG_fail_ptr("WSOscParameters_soloWaveWSIndex_get",1,SWIGTYPE_p_SynthLab__WSOscParameters);
  }
  
  result =  ((arg1)->soloWaveWSIndex);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WSOscParameters(void *obj) {
SynthLab::WSOscParameters *arg1 = (SynthLab::WSOscParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_WSOscParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WSOscParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WSOscParameters_attributes[] = {
    { "detuneSemis", _wrap_WSOscParameters_detuneSemis_get, _wrap_WSOscParameters_detuneSemis_set },
    { "detuneCents", _wrap_WSOscParameters_detuneCents_get, _wrap_WSOscParameters_detuneCents_set },
    { "oscillatorShape", _wrap_WSOscParameters_oscillatorShape_get, _wrap_WSOscParameters_oscillatorShape_set },
    { "hardSyncRatio", _wrap_WSOscParameters_hardSyncRatio_get, _wrap_WSOscParameters_hardSyncRatio_set },
    { "morphIntensity", _wrap_WSOscParameters_morphIntensity_get, _wrap_WSOscParameters_morphIntensity_set },
    { "panValue", _wrap_WSOscParameters_panValue_get, _wrap_WSOscParameters_panValue_set },
    { "doubleOscillator", _wrap_WSOscParameters_doubleOscillator_get, _wrap_WSOscParameters_doubleOscillator_set },
    { "soloWaveWSIndex", _wrap_WSOscParameters_soloWaveWSIndex_get, _wrap_WSOscParameters_soloWaveWSIndex_set },
    {0,0,0}
};
static swig_lua_method swig_WSOscParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_WSOscParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WSOscParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WSOscParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WSOscParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WSOscParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WSOscParameters_Sf_SwigStatic = {
    "WSOscParameters",
    swig_WSOscParameters_Sf_SwigStatic_methods,
    swig_WSOscParameters_Sf_SwigStatic_attributes,
    swig_WSOscParameters_Sf_SwigStatic_constants,
    swig_WSOscParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WSOscParameters_bases[] = {0};
static const char *swig_WSOscParameters_base_names[] = {0};
static swig_lua_class _wrap_class_WSOscParameters = { "WSOscParameters", "WSOscParameters", &SWIGTYPE_p_SynthLab__WSOscParameters,_proxy__wrap_new_WSOscParameters, swig_delete_WSOscParameters, swig_WSOscParameters_methods, swig_WSOscParameters_attributes, &swig_WSOscParameters_Sf_SwigStatic, swig_WSOscParameters_meta, swig_WSOscParameters_bases, swig_WSOscParameters_base_names };

static int _wrap_VA_OSC_MIN_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::VA_OSC_MIN",0,0)
  result = (double)(double)SynthLab::VA_OSC_MIN;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VA_OSC_MAX_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::VA_OSC_MAX",0,0)
  result = (double)(double)SynthLab::VA_OSC_MAX;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VA_OSC_INPUTS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::VA_OSC_INPUTS",0,0)
  result = (uint32_t)SynthLab::VA_OSC_INPUTS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VA_OSC_OUTPUTS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::VA_OSC_OUTPUTS",0,0)
  result = (uint32_t)SynthLab::VA_OSC_OUTPUTS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VA_MIN_PW_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::VA_MIN_PW",0,0)
  result = (double)(double)SynthLab::VA_MIN_PW;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VA_MAX_PW_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::VA_MAX_PW",0,0)
  result = (double)(double)SynthLab::VA_MAX_PW;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PW_MOD_RANGE_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::PW_MOD_RANGE",0,0)
  result = (double)(double)SynthLab::PW_MOD_RANGE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HALF_PW_MOD_RANGE_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::HALF_PW_MOD_RANGE",0,0)
  result = (double)(double)SynthLab::HALF_PW_MOD_RANGE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VA1Coeffs_alpha_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VA1Coeffs *arg1 = (SynthLab::VA1Coeffs *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::VA1Coeffs::alpha",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VA1Coeffs::alpha",1,"SynthLab::VA1Coeffs *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::VA1Coeffs::alpha",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VA1Coeffs,0))){
    SWIG_fail_ptr("VA1Coeffs_alpha_set",1,SWIGTYPE_p_SynthLab__VA1Coeffs);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->alpha = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VA1Coeffs_alpha_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VA1Coeffs *arg1 = (SynthLab::VA1Coeffs *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::VA1Coeffs::alpha",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VA1Coeffs::alpha",1,"SynthLab::VA1Coeffs *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VA1Coeffs,0))){
    SWIG_fail_ptr("VA1Coeffs_alpha_get",1,SWIGTYPE_p_SynthLab__VA1Coeffs);
  }
  
  result = (double) ((arg1)->alpha);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VA1Coeffs_beta_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VA1Coeffs *arg1 = (SynthLab::VA1Coeffs *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::VA1Coeffs::beta",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VA1Coeffs::beta",1,"SynthLab::VA1Coeffs *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::VA1Coeffs::beta",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VA1Coeffs,0))){
    SWIG_fail_ptr("VA1Coeffs_beta_set",1,SWIGTYPE_p_SynthLab__VA1Coeffs);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->beta = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VA1Coeffs_beta_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VA1Coeffs *arg1 = (SynthLab::VA1Coeffs *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::VA1Coeffs::beta",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VA1Coeffs::beta",1,"SynthLab::VA1Coeffs *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VA1Coeffs,0))){
    SWIG_fail_ptr("VA1Coeffs_beta_get",1,SWIGTYPE_p_SynthLab__VA1Coeffs);
  }
  
  result = (double) ((arg1)->beta);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VA1Coeffs(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VA1Coeffs *result = 0 ;
  
  SWIG_check_num_args("SynthLab::VA1Coeffs::VA1Coeffs",0,0)
  result = (SynthLab::VA1Coeffs *)new SynthLab::VA1Coeffs();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__VA1Coeffs,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VA1Coeffs(void *obj) {
SynthLab::VA1Coeffs *arg1 = (SynthLab::VA1Coeffs *) obj;
delete arg1;
}
static int _proxy__wrap_new_VA1Coeffs(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_VA1Coeffs);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_VA1Coeffs_attributes[] = {
    { "alpha", _wrap_VA1Coeffs_alpha_get, _wrap_VA1Coeffs_alpha_set },
    { "beta", _wrap_VA1Coeffs_beta_get, _wrap_VA1Coeffs_beta_set },
    {0,0,0}
};
static swig_lua_method swig_VA1Coeffs_methods[]= {
    {0,0}
};
static swig_lua_method swig_VA1Coeffs_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_VA1Coeffs_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VA1Coeffs_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VA1Coeffs_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VA1Coeffs_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VA1Coeffs_Sf_SwigStatic = {
    "VA1Coeffs",
    swig_VA1Coeffs_Sf_SwigStatic_methods,
    swig_VA1Coeffs_Sf_SwigStatic_attributes,
    swig_VA1Coeffs_Sf_SwigStatic_constants,
    swig_VA1Coeffs_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VA1Coeffs_bases[] = {0};
static const char *swig_VA1Coeffs_base_names[] = {0};
static swig_lua_class _wrap_class_VA1Coeffs = { "VA1Coeffs", "VA1Coeffs", &SWIGTYPE_p_SynthLab__VA1Coeffs,_proxy__wrap_new_VA1Coeffs, swig_delete_VA1Coeffs, swig_VA1Coeffs_methods, swig_VA1Coeffs_attributes, &swig_VA1Coeffs_Sf_SwigStatic, swig_VA1Coeffs_meta, swig_VA1Coeffs_bases, swig_VA1Coeffs_base_names };

static int _wrap_new_VAOscParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *result = 0 ;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::VAOscParameters",0,0)
  result = (SynthLab::VAOscParameters *)new SynthLab::VAOscParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__VAOscParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_waveIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::waveIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::waveIndex",1,"SynthLab::VAOscParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::VAOscParameters::waveIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_waveIndex_set",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("VAOscParameters_waveIndex_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->waveIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_waveIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::waveIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::waveIndex",1,"SynthLab::VAOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_waveIndex_get",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  result =  ((arg1)->waveIndex);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_octaveDetune_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::octaveDetune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::octaveDetune",1,"SynthLab::VAOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::VAOscParameters::octaveDetune",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_octaveDetune_set",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->octaveDetune = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_octaveDetune_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::octaveDetune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::octaveDetune",1,"SynthLab::VAOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_octaveDetune_get",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  result = (double) ((arg1)->octaveDetune);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_coarseDetune_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::coarseDetune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::coarseDetune",1,"SynthLab::VAOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::VAOscParameters::coarseDetune",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_coarseDetune_set",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->coarseDetune = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_coarseDetune_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::coarseDetune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::coarseDetune",1,"SynthLab::VAOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_coarseDetune_get",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  result = (double) ((arg1)->coarseDetune);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_fineDetune_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::fineDetune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::fineDetune",1,"SynthLab::VAOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::VAOscParameters::fineDetune",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_fineDetune_set",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->fineDetune = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_fineDetune_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::fineDetune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::fineDetune",1,"SynthLab::VAOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_fineDetune_get",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  result = (double) ((arg1)->fineDetune);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_unisonDetune_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::unisonDetune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::unisonDetune",1,"SynthLab::VAOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::VAOscParameters::unisonDetune",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_unisonDetune_set",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->unisonDetune = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_unisonDetune_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::unisonDetune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::unisonDetune",1,"SynthLab::VAOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_unisonDetune_get",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  result = (double) ((arg1)->unisonDetune);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_pulseWidth_Pct_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::pulseWidth_Pct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::pulseWidth_Pct",1,"SynthLab::VAOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::VAOscParameters::pulseWidth_Pct",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_pulseWidth_Pct_set",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->pulseWidth_Pct = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_pulseWidth_Pct_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::pulseWidth_Pct",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::pulseWidth_Pct",1,"SynthLab::VAOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_pulseWidth_Pct_get",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  result = (double) ((arg1)->pulseWidth_Pct);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_outputAmplitude_dB_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::outputAmplitude_dB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::outputAmplitude_dB",1,"SynthLab::VAOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::VAOscParameters::outputAmplitude_dB",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_outputAmplitude_dB_set",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->outputAmplitude_dB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_outputAmplitude_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::outputAmplitude_dB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::outputAmplitude_dB",1,"SynthLab::VAOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_outputAmplitude_dB_get",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  result = (double) ((arg1)->outputAmplitude_dB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_oscillatorShape_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::oscillatorShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::oscillatorShape",1,"SynthLab::VAOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::VAOscParameters::oscillatorShape",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_oscillatorShape_set",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->oscillatorShape = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_oscillatorShape_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::oscillatorShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::oscillatorShape",1,"SynthLab::VAOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_oscillatorShape_get",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  result = (double) ((arg1)->oscillatorShape);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_hardSyncRatio_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::hardSyncRatio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::hardSyncRatio",1,"SynthLab::VAOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::VAOscParameters::hardSyncRatio",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_hardSyncRatio_set",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->hardSyncRatio = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_hardSyncRatio_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::hardSyncRatio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::hardSyncRatio",1,"SynthLab::VAOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_hardSyncRatio_get",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  result = (double) ((arg1)->hardSyncRatio);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_panValue_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::panValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::panValue",1,"SynthLab::VAOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::VAOscParameters::panValue",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_panValue_set",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->panValue = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_panValue_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::panValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::panValue",1,"SynthLab::VAOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_panValue_get",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  result = (double) ((arg1)->panValue);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_phaseModIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::phaseModIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::phaseModIndex",1,"SynthLab::VAOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::VAOscParameters::phaseModIndex",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_phaseModIndex_set",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->phaseModIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_phaseModIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::phaseModIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::phaseModIndex",1,"SynthLab::VAOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_phaseModIndex_get",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  result = (double) ((arg1)->phaseModIndex);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_waveformMix_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::waveformMix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::waveformMix",1,"SynthLab::VAOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::VAOscParameters::waveformMix",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_waveformMix_set",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->waveformMix = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_waveformMix_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::waveformMix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::waveformMix",1,"SynthLab::VAOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_waveformMix_get",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  result = (double) ((arg1)->waveformMix);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_modKnobValue_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::modKnobValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::modKnobValue",1,"SynthLab::VAOscParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::VAOscParameters::modKnobValue",2,"double [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_modKnobValue_set",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VAOscParameters_modKnobValue_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->modKnobValue;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_modKnobValue_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::modKnobValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::modKnobValue",1,"SynthLab::VAOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_modKnobValue_get",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  result = (double *)(double *) ((arg1)->modKnobValue);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_moduleIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::moduleIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::moduleIndex",1,"SynthLab::VAOscParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::VAOscParameters::moduleIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_moduleIndex_set",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("VAOscParameters_moduleIndex_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->moduleIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscParameters_moduleIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::VAOscParameters::moduleIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscParameters::moduleIndex",1,"SynthLab::VAOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscParameters,0))){
    SWIG_fail_ptr("VAOscParameters_moduleIndex_get",1,SWIGTYPE_p_SynthLab__VAOscParameters);
  }
  
  result =  ((arg1)->moduleIndex);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VAOscParameters(void *obj) {
SynthLab::VAOscParameters *arg1 = (SynthLab::VAOscParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_VAOscParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_VAOscParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_VAOscParameters_attributes[] = {
    { "waveIndex", _wrap_VAOscParameters_waveIndex_get, _wrap_VAOscParameters_waveIndex_set },
    { "octaveDetune", _wrap_VAOscParameters_octaveDetune_get, _wrap_VAOscParameters_octaveDetune_set },
    { "coarseDetune", _wrap_VAOscParameters_coarseDetune_get, _wrap_VAOscParameters_coarseDetune_set },
    { "fineDetune", _wrap_VAOscParameters_fineDetune_get, _wrap_VAOscParameters_fineDetune_set },
    { "unisonDetune", _wrap_VAOscParameters_unisonDetune_get, _wrap_VAOscParameters_unisonDetune_set },
    { "pulseWidth_Pct", _wrap_VAOscParameters_pulseWidth_Pct_get, _wrap_VAOscParameters_pulseWidth_Pct_set },
    { "outputAmplitude_dB", _wrap_VAOscParameters_outputAmplitude_dB_get, _wrap_VAOscParameters_outputAmplitude_dB_set },
    { "oscillatorShape", _wrap_VAOscParameters_oscillatorShape_get, _wrap_VAOscParameters_oscillatorShape_set },
    { "hardSyncRatio", _wrap_VAOscParameters_hardSyncRatio_get, _wrap_VAOscParameters_hardSyncRatio_set },
    { "panValue", _wrap_VAOscParameters_panValue_get, _wrap_VAOscParameters_panValue_set },
    { "phaseModIndex", _wrap_VAOscParameters_phaseModIndex_get, _wrap_VAOscParameters_phaseModIndex_set },
    { "waveformMix", _wrap_VAOscParameters_waveformMix_get, _wrap_VAOscParameters_waveformMix_set },
    { "modKnobValue", _wrap_VAOscParameters_modKnobValue_get, _wrap_VAOscParameters_modKnobValue_set },
    { "moduleIndex", _wrap_VAOscParameters_moduleIndex_get, _wrap_VAOscParameters_moduleIndex_set },
    {0,0,0}
};
static swig_lua_method swig_VAOscParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_VAOscParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_VAOscParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VAOscParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VAOscParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VAOscParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VAOscParameters_Sf_SwigStatic = {
    "VAOscParameters",
    swig_VAOscParameters_Sf_SwigStatic_methods,
    swig_VAOscParameters_Sf_SwigStatic_attributes,
    swig_VAOscParameters_Sf_SwigStatic_constants,
    swig_VAOscParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VAOscParameters_bases[] = {0};
static const char *swig_VAOscParameters_base_names[] = {0};
static swig_lua_class _wrap_class_VAOscParameters = { "VAOscParameters", "VAOscParameters", &SWIGTYPE_p_SynthLab__VAOscParameters,_proxy__wrap_new_VAOscParameters, swig_delete_VAOscParameters, swig_VAOscParameters_methods, swig_VAOscParameters_attributes, &swig_VAOscParameters_Sf_SwigStatic, swig_VAOscParameters_meta, swig_VAOscParameters_bases, swig_VAOscParameters_base_names };

static int _wrap_PCM_OSC_MIN_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::PCM_OSC_MIN",0,0)
  result = (double)(double)SynthLab::PCM_OSC_MIN;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCM_OSC_MAX_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::PCM_OSC_MAX",0,0)
  result = (double)(double)SynthLab::PCM_OSC_MAX;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMPL_OSC_INPUTS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::SMPL_OSC_INPUTS",0,0)
  result = (uint32_t)SynthLab::SMPL_OSC_INPUTS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMPL_OSC_OUTPUTS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::SMPL_OSC_OUTPUTS",0,0)
  result = (uint32_t)SynthLab::SMPL_OSC_OUTPUTS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_waveIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::waveIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::waveIndex",1,"SynthLab::PCMOscParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::PCMOscParameters::waveIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_waveIndex_set",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("PCMOscParameters_waveIndex_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->waveIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_waveIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::waveIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::waveIndex",1,"SynthLab::PCMOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_waveIndex_get",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  result =  ((arg1)->waveIndex);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_octaveDetune_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::octaveDetune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::octaveDetune",1,"SynthLab::PCMOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::PCMOscParameters::octaveDetune",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_octaveDetune_set",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->octaveDetune = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_octaveDetune_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::octaveDetune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::octaveDetune",1,"SynthLab::PCMOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_octaveDetune_get",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  result = (double) ((arg1)->octaveDetune);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_coarseDetune_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::coarseDetune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::coarseDetune",1,"SynthLab::PCMOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::PCMOscParameters::coarseDetune",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_coarseDetune_set",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->coarseDetune = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_coarseDetune_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::coarseDetune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::coarseDetune",1,"SynthLab::PCMOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_coarseDetune_get",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  result = (double) ((arg1)->coarseDetune);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_fineDetune_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::fineDetune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::fineDetune",1,"SynthLab::PCMOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::PCMOscParameters::fineDetune",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_fineDetune_set",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->fineDetune = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_fineDetune_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::fineDetune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::fineDetune",1,"SynthLab::PCMOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_fineDetune_get",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  result = (double) ((arg1)->fineDetune);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_unisonDetune_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::unisonDetune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::unisonDetune",1,"SynthLab::PCMOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::PCMOscParameters::unisonDetune",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_unisonDetune_set",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->unisonDetune = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_unisonDetune_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::unisonDetune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::unisonDetune",1,"SynthLab::PCMOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_unisonDetune_get",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  result = (double) ((arg1)->unisonDetune);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_outputAmplitude_dB_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::outputAmplitude_dB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::outputAmplitude_dB",1,"SynthLab::PCMOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::PCMOscParameters::outputAmplitude_dB",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_outputAmplitude_dB_set",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->outputAmplitude_dB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_outputAmplitude_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::outputAmplitude_dB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::outputAmplitude_dB",1,"SynthLab::PCMOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_outputAmplitude_dB_get",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  result = (double) ((arg1)->outputAmplitude_dB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_oscillatorShape_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::oscillatorShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::oscillatorShape",1,"SynthLab::PCMOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::PCMOscParameters::oscillatorShape",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_oscillatorShape_set",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->oscillatorShape = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_oscillatorShape_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::oscillatorShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::oscillatorShape",1,"SynthLab::PCMOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_oscillatorShape_get",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  result = (double) ((arg1)->oscillatorShape);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_hardSyncRatio_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::hardSyncRatio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::hardSyncRatio",1,"SynthLab::PCMOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::PCMOscParameters::hardSyncRatio",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_hardSyncRatio_set",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->hardSyncRatio = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_hardSyncRatio_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::hardSyncRatio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::hardSyncRatio",1,"SynthLab::PCMOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_hardSyncRatio_get",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  result = (double) ((arg1)->hardSyncRatio);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_phaseModIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::phaseModIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::phaseModIndex",1,"SynthLab::PCMOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::PCMOscParameters::phaseModIndex",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_phaseModIndex_set",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->phaseModIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_phaseModIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::phaseModIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::phaseModIndex",1,"SynthLab::PCMOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_phaseModIndex_get",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  result = (double) ((arg1)->phaseModIndex);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_freqModIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::freqModIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::freqModIndex",1,"SynthLab::PCMOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::PCMOscParameters::freqModIndex",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_freqModIndex_set",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->freqModIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_freqModIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::freqModIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::freqModIndex",1,"SynthLab::PCMOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_freqModIndex_get",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  result = (double) ((arg1)->freqModIndex);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_panValue_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::panValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::panValue",1,"SynthLab::PCMOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::PCMOscParameters::panValue",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_panValue_set",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->panValue = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_panValue_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::panValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::panValue",1,"SynthLab::PCMOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_panValue_get",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  result = (double) ((arg1)->panValue);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_modKnobValue_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::modKnobValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::modKnobValue",1,"SynthLab::PCMOscParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::PCMOscParameters::modKnobValue",2,"double [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_modKnobValue_set",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("PCMOscParameters_modKnobValue_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->modKnobValue;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_modKnobValue_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::modKnobValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::modKnobValue",1,"SynthLab::PCMOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_modKnobValue_get",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  result = (double *)(double *) ((arg1)->modKnobValue);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_moduleIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::moduleIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::moduleIndex",1,"SynthLab::PCMOscParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::PCMOscParameters::moduleIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_moduleIndex_set",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("PCMOscParameters_moduleIndex_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->moduleIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscParameters_moduleIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::moduleIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscParameters::moduleIndex",1,"SynthLab::PCMOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscParameters,0))){
    SWIG_fail_ptr("PCMOscParameters_moduleIndex_get",1,SWIGTYPE_p_SynthLab__PCMOscParameters);
  }
  
  result =  ((arg1)->moduleIndex);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PCMOscParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscParameters *result = 0 ;
  
  SWIG_check_num_args("SynthLab::PCMOscParameters::PCMOscParameters",0,0)
  result = (SynthLab::PCMOscParameters *)new SynthLab::PCMOscParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__PCMOscParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PCMOscParameters(void *obj) {
SynthLab::PCMOscParameters *arg1 = (SynthLab::PCMOscParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_PCMOscParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PCMOscParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PCMOscParameters_attributes[] = {
    { "waveIndex", _wrap_PCMOscParameters_waveIndex_get, _wrap_PCMOscParameters_waveIndex_set },
    { "octaveDetune", _wrap_PCMOscParameters_octaveDetune_get, _wrap_PCMOscParameters_octaveDetune_set },
    { "coarseDetune", _wrap_PCMOscParameters_coarseDetune_get, _wrap_PCMOscParameters_coarseDetune_set },
    { "fineDetune", _wrap_PCMOscParameters_fineDetune_get, _wrap_PCMOscParameters_fineDetune_set },
    { "unisonDetune", _wrap_PCMOscParameters_unisonDetune_get, _wrap_PCMOscParameters_unisonDetune_set },
    { "outputAmplitude_dB", _wrap_PCMOscParameters_outputAmplitude_dB_get, _wrap_PCMOscParameters_outputAmplitude_dB_set },
    { "oscillatorShape", _wrap_PCMOscParameters_oscillatorShape_get, _wrap_PCMOscParameters_oscillatorShape_set },
    { "hardSyncRatio", _wrap_PCMOscParameters_hardSyncRatio_get, _wrap_PCMOscParameters_hardSyncRatio_set },
    { "phaseModIndex", _wrap_PCMOscParameters_phaseModIndex_get, _wrap_PCMOscParameters_phaseModIndex_set },
    { "freqModIndex", _wrap_PCMOscParameters_freqModIndex_get, _wrap_PCMOscParameters_freqModIndex_set },
    { "panValue", _wrap_PCMOscParameters_panValue_get, _wrap_PCMOscParameters_panValue_set },
    { "modKnobValue", _wrap_PCMOscParameters_modKnobValue_get, _wrap_PCMOscParameters_modKnobValue_set },
    { "moduleIndex", _wrap_PCMOscParameters_moduleIndex_get, _wrap_PCMOscParameters_moduleIndex_set },
    {0,0,0}
};
static swig_lua_method swig_PCMOscParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_PCMOscParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PCMOscParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PCMOscParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PCMOscParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PCMOscParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PCMOscParameters_Sf_SwigStatic = {
    "PCMOscParameters",
    swig_PCMOscParameters_Sf_SwigStatic_methods,
    swig_PCMOscParameters_Sf_SwigStatic_attributes,
    swig_PCMOscParameters_Sf_SwigStatic_constants,
    swig_PCMOscParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PCMOscParameters_bases[] = {0};
static const char *swig_PCMOscParameters_base_names[] = {0};
static swig_lua_class _wrap_class_PCMOscParameters = { "PCMOscParameters", "PCMOscParameters", &SWIGTYPE_p_SynthLab__PCMOscParameters,_proxy__wrap_new_PCMOscParameters, swig_delete_PCMOscParameters, swig_PCMOscParameters_methods, swig_PCMOscParameters_attributes, &swig_PCMOscParameters_Sf_SwigStatic, swig_PCMOscParameters_meta, swig_PCMOscParameters_bases, swig_PCMOscParameters_base_names };

static int _wrap_KS_OSC_MIN_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::KS_OSC_MIN",0,0)
  result = (double)(double)SynthLab::KS_OSC_MIN;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KS_OSC_MAX_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::KS_OSC_MAX",0,0)
  result = (double)(double)SynthLab::KS_OSC_MAX;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KS_OSC_INPUTS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::KS_OSC_INPUTS",0,0)
  result = (uint32_t)SynthLab::KS_OSC_INPUTS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KS_OSC_OUTPUTS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::KS_OSC_OUTPUTS",0,0)
  result = (uint32_t)SynthLab::KS_OSC_OUTPUTS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MAX_KSO_ATTACK_MSEC_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::MAX_KSO_ATTACK_MSEC",0,0)
  result = (double)(double)SynthLab::MAX_KSO_ATTACK_MSEC;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MAX_KSO_HOLD_MSEC_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::MAX_KSO_HOLD_MSEC",0,0)
  result = (double)(double)SynthLab::MAX_KSO_HOLD_MSEC;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MAX_KSO_RELEASE_MSEC_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::MAX_KSO_RELEASE_MSEC",0,0)
  result = (double)(double)SynthLab::MAX_KSO_RELEASE_MSEC;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_KSOscParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *result = 0 ;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::KSOscParameters",0,0)
  result = (SynthLab::KSOscParameters *)new SynthLab::KSOscParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__KSOscParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_algorithmIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::algorithmIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::algorithmIndex",1,"SynthLab::KSOscParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::KSOscParameters::algorithmIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_algorithmIndex_set",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("KSOscParameters_algorithmIndex_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->algorithmIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_algorithmIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::algorithmIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::algorithmIndex",1,"SynthLab::KSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_algorithmIndex_get",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  result =  ((arg1)->algorithmIndex);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_attackTime_mSec_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::attackTime_mSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::attackTime_mSec",1,"SynthLab::KSOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::KSOscParameters::attackTime_mSec",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_attackTime_mSec_set",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->attackTime_mSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_attackTime_mSec_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::attackTime_mSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::attackTime_mSec",1,"SynthLab::KSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_attackTime_mSec_get",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  result = (double) ((arg1)->attackTime_mSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_holdTime_mSec_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::holdTime_mSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::holdTime_mSec",1,"SynthLab::KSOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::KSOscParameters::holdTime_mSec",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_holdTime_mSec_set",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->holdTime_mSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_holdTime_mSec_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::holdTime_mSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::holdTime_mSec",1,"SynthLab::KSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_holdTime_mSec_get",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  result = (double) ((arg1)->holdTime_mSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_releaseTime_mSec_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::releaseTime_mSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::releaseTime_mSec",1,"SynthLab::KSOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::KSOscParameters::releaseTime_mSec",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_releaseTime_mSec_set",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->releaseTime_mSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_releaseTime_mSec_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::releaseTime_mSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::releaseTime_mSec",1,"SynthLab::KSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_releaseTime_mSec_get",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  result = (double) ((arg1)->releaseTime_mSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_octaveDetune_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::octaveDetune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::octaveDetune",1,"SynthLab::KSOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::KSOscParameters::octaveDetune",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_octaveDetune_set",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->octaveDetune = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_octaveDetune_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::octaveDetune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::octaveDetune",1,"SynthLab::KSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_octaveDetune_get",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  result = (double) ((arg1)->octaveDetune);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_coarseDetune_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::coarseDetune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::coarseDetune",1,"SynthLab::KSOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::KSOscParameters::coarseDetune",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_coarseDetune_set",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->coarseDetune = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_coarseDetune_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::coarseDetune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::coarseDetune",1,"SynthLab::KSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_coarseDetune_get",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  result = (double) ((arg1)->coarseDetune);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_fineDetune_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::fineDetune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::fineDetune",1,"SynthLab::KSOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::KSOscParameters::fineDetune",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_fineDetune_set",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->fineDetune = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_fineDetune_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::fineDetune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::fineDetune",1,"SynthLab::KSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_fineDetune_get",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  result = (double) ((arg1)->fineDetune);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_unisonDetune_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::unisonDetune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::unisonDetune",1,"SynthLab::KSOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::KSOscParameters::unisonDetune",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_unisonDetune_set",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->unisonDetune = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_unisonDetune_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::unisonDetune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::unisonDetune",1,"SynthLab::KSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_unisonDetune_get",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  result = (double) ((arg1)->unisonDetune);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_outputAmplitude_dB_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::outputAmplitude_dB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::outputAmplitude_dB",1,"SynthLab::KSOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::KSOscParameters::outputAmplitude_dB",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_outputAmplitude_dB_set",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->outputAmplitude_dB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_outputAmplitude_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::outputAmplitude_dB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::outputAmplitude_dB",1,"SynthLab::KSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_outputAmplitude_dB_get",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  result = (double) ((arg1)->outputAmplitude_dB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_oscillatorShape_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::oscillatorShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::oscillatorShape",1,"SynthLab::KSOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::KSOscParameters::oscillatorShape",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_oscillatorShape_set",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->oscillatorShape = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_oscillatorShape_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::oscillatorShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::oscillatorShape",1,"SynthLab::KSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_oscillatorShape_get",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  result = (double) ((arg1)->oscillatorShape);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_hardSyncRatio_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::hardSyncRatio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::hardSyncRatio",1,"SynthLab::KSOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::KSOscParameters::hardSyncRatio",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_hardSyncRatio_set",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->hardSyncRatio = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_hardSyncRatio_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::hardSyncRatio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::hardSyncRatio",1,"SynthLab::KSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_hardSyncRatio_get",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  result = (double) ((arg1)->hardSyncRatio);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_phaseModIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::phaseModIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::phaseModIndex",1,"SynthLab::KSOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::KSOscParameters::phaseModIndex",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_phaseModIndex_set",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->phaseModIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_phaseModIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::phaseModIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::phaseModIndex",1,"SynthLab::KSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_phaseModIndex_get",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  result = (double) ((arg1)->phaseModIndex);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_freqModIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::freqModIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::freqModIndex",1,"SynthLab::KSOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::KSOscParameters::freqModIndex",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_freqModIndex_set",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->freqModIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_freqModIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::freqModIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::freqModIndex",1,"SynthLab::KSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_freqModIndex_get",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  result = (double) ((arg1)->freqModIndex);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_panValue_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::panValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::panValue",1,"SynthLab::KSOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::KSOscParameters::panValue",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_panValue_set",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->panValue = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_panValue_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::panValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::panValue",1,"SynthLab::KSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_panValue_get",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  result = (double) ((arg1)->panValue);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_decay_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::decay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::decay",1,"SynthLab::KSOscParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::KSOscParameters::decay",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_decay_set",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->decay = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_decay_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::decay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::decay",1,"SynthLab::KSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_decay_get",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  result = (double) ((arg1)->decay);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_pluckPosition_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::pluckPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::pluckPosition",1,"SynthLab::KSOscParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::KSOscParameters::pluckPosition",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_pluckPosition_set",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("KSOscParameters_pluckPosition_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pluckPosition = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_pluckPosition_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::pluckPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::pluckPosition",1,"SynthLab::KSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_pluckPosition_get",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  result =  ((arg1)->pluckPosition);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_modKnobValue_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::modKnobValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::modKnobValue",1,"SynthLab::KSOscParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::KSOscParameters::modKnobValue",2,"double [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_modKnobValue_set",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("KSOscParameters_modKnobValue_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->modKnobValue;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_modKnobValue_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::modKnobValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::modKnobValue",1,"SynthLab::KSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_modKnobValue_get",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  result = (double *)(double *) ((arg1)->modKnobValue);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_moduleIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::moduleIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::moduleIndex",1,"SynthLab::KSOscParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::KSOscParameters::moduleIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_moduleIndex_set",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("KSOscParameters_moduleIndex_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->moduleIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscParameters_moduleIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::KSOscParameters::moduleIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscParameters::moduleIndex",1,"SynthLab::KSOscParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscParameters,0))){
    SWIG_fail_ptr("KSOscParameters_moduleIndex_get",1,SWIGTYPE_p_SynthLab__KSOscParameters);
  }
  
  result =  ((arg1)->moduleIndex);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_KSOscParameters(void *obj) {
SynthLab::KSOscParameters *arg1 = (SynthLab::KSOscParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_KSOscParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_KSOscParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_KSOscParameters_attributes[] = {
    { "algorithmIndex", _wrap_KSOscParameters_algorithmIndex_get, _wrap_KSOscParameters_algorithmIndex_set },
    { "attackTime_mSec", _wrap_KSOscParameters_attackTime_mSec_get, _wrap_KSOscParameters_attackTime_mSec_set },
    { "holdTime_mSec", _wrap_KSOscParameters_holdTime_mSec_get, _wrap_KSOscParameters_holdTime_mSec_set },
    { "releaseTime_mSec", _wrap_KSOscParameters_releaseTime_mSec_get, _wrap_KSOscParameters_releaseTime_mSec_set },
    { "octaveDetune", _wrap_KSOscParameters_octaveDetune_get, _wrap_KSOscParameters_octaveDetune_set },
    { "coarseDetune", _wrap_KSOscParameters_coarseDetune_get, _wrap_KSOscParameters_coarseDetune_set },
    { "fineDetune", _wrap_KSOscParameters_fineDetune_get, _wrap_KSOscParameters_fineDetune_set },
    { "unisonDetune", _wrap_KSOscParameters_unisonDetune_get, _wrap_KSOscParameters_unisonDetune_set },
    { "outputAmplitude_dB", _wrap_KSOscParameters_outputAmplitude_dB_get, _wrap_KSOscParameters_outputAmplitude_dB_set },
    { "oscillatorShape", _wrap_KSOscParameters_oscillatorShape_get, _wrap_KSOscParameters_oscillatorShape_set },
    { "hardSyncRatio", _wrap_KSOscParameters_hardSyncRatio_get, _wrap_KSOscParameters_hardSyncRatio_set },
    { "phaseModIndex", _wrap_KSOscParameters_phaseModIndex_get, _wrap_KSOscParameters_phaseModIndex_set },
    { "freqModIndex", _wrap_KSOscParameters_freqModIndex_get, _wrap_KSOscParameters_freqModIndex_set },
    { "panValue", _wrap_KSOscParameters_panValue_get, _wrap_KSOscParameters_panValue_set },
    { "decay", _wrap_KSOscParameters_decay_get, _wrap_KSOscParameters_decay_set },
    { "pluckPosition", _wrap_KSOscParameters_pluckPosition_get, _wrap_KSOscParameters_pluckPosition_set },
    { "modKnobValue", _wrap_KSOscParameters_modKnobValue_get, _wrap_KSOscParameters_modKnobValue_set },
    { "moduleIndex", _wrap_KSOscParameters_moduleIndex_get, _wrap_KSOscParameters_moduleIndex_set },
    {0,0,0}
};
static swig_lua_method swig_KSOscParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_KSOscParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_KSOscParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_KSOscParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_KSOscParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_KSOscParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_KSOscParameters_Sf_SwigStatic = {
    "KSOscParameters",
    swig_KSOscParameters_Sf_SwigStatic_methods,
    swig_KSOscParameters_Sf_SwigStatic_attributes,
    swig_KSOscParameters_Sf_SwigStatic_constants,
    swig_KSOscParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_KSOscParameters_bases[] = {0};
static const char *swig_KSOscParameters_base_names[] = {0};
static swig_lua_class _wrap_class_KSOscParameters = { "KSOscParameters", "KSOscParameters", &SWIGTYPE_p_SynthLab__KSOscParameters,_proxy__wrap_new_KSOscParameters, swig_delete_KSOscParameters, swig_KSOscParameters_methods, swig_KSOscParameters_attributes, &swig_KSOscParameters_Sf_SwigStatic, swig_KSOscParameters_meta, swig_KSOscParameters_bases, swig_KSOscParameters_base_names };

static int _wrap_new_ModSource(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModSource *result = 0 ;
  
  SWIG_check_num_args("SynthLab::ModSource::ModSource",0,0)
  result = (SynthLab::ModSource *)new SynthLab::ModSource();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__ModSource,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModSource_clear(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModSource *arg1 = (SynthLab::ModSource *) 0 ;
  
  SWIG_check_num_args("SynthLab::ModSource::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModSource::clear",1,"SynthLab::ModSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModSource,0))){
    SWIG_fail_ptr("ModSource_clear",1,SWIGTYPE_p_SynthLab__ModSource);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModSource_intensity_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModSource *arg1 = (SynthLab::ModSource *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::ModSource::intensity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModSource::intensity",1,"SynthLab::ModSource *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::ModSource::intensity",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModSource,0))){
    SWIG_fail_ptr("ModSource_intensity_set",1,SWIGTYPE_p_SynthLab__ModSource);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->intensity = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModSource_intensity_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModSource *arg1 = (SynthLab::ModSource *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::ModSource::intensity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModSource::intensity",1,"SynthLab::ModSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModSource,0))){
    SWIG_fail_ptr("ModSource_intensity_get",1,SWIGTYPE_p_SynthLab__ModSource);
  }
  
  result = (double) ((arg1)->intensity);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ModSource(void *obj) {
SynthLab::ModSource *arg1 = (SynthLab::ModSource *) obj;
delete arg1;
}
static int _proxy__wrap_new_ModSource(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ModSource);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ModSource_attributes[] = {
    { "intensity", _wrap_ModSource_intensity_get, _wrap_ModSource_intensity_set },
    {0,0,0}
};
static swig_lua_method swig_ModSource_methods[]= {
    { "clear", _wrap_ModSource_clear},
    {0,0}
};
static swig_lua_method swig_ModSource_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ModSource_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ModSource_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ModSource_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ModSource_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ModSource_Sf_SwigStatic = {
    "ModSource",
    swig_ModSource_Sf_SwigStatic_methods,
    swig_ModSource_Sf_SwigStatic_attributes,
    swig_ModSource_Sf_SwigStatic_constants,
    swig_ModSource_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ModSource_bases[] = {0};
static const char *swig_ModSource_base_names[] = {0};
static swig_lua_class _wrap_class_ModSource = { "ModSource", "ModSource", &SWIGTYPE_p_SynthLab__ModSource,_proxy__wrap_new_ModSource, swig_delete_ModSource, swig_ModSource_methods, swig_ModSource_attributes, &swig_ModSource_Sf_SwigStatic, swig_ModSource_meta, swig_ModSource_bases, swig_ModSource_base_names };

static int _wrap_new_ModDestination(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModDestination *result = 0 ;
  
  SWIG_check_num_args("SynthLab::ModDestination::ModDestination",0,0)
  result = (SynthLab::ModDestination *)new SynthLab::ModDestination();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__ModDestination,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModDestination_clear(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModDestination *arg1 = (SynthLab::ModDestination *) 0 ;
  
  SWIG_check_num_args("SynthLab::ModDestination::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModDestination::clear",1,"SynthLab::ModDestination *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModDestination,0))){
    SWIG_fail_ptr("ModDestination_clear",1,SWIGTYPE_p_SynthLab__ModDestination);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModDestination_channelEnable_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModDestination *arg1 = (SynthLab::ModDestination *) 0 ;
  uint32_t *arg2 ;
  
  SWIG_check_num_args("SynthLab::ModDestination::channelEnable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModDestination::channelEnable",1,"SynthLab::ModDestination *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::ModDestination::channelEnable",2,"uint32_t [SynthLab::MAX_MODULATION_CHANNELS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModDestination,0))){
    SWIG_fail_ptr("ModDestination_channelEnable_set",1,SWIGTYPE_p_SynthLab__ModDestination);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("ModDestination_channelEnable_set",2,SWIGTYPE_p_uint32_t);
  }
  
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->channelEnable;
    for (ii = 0; ii < (size_t)SynthLab::MAX_MODULATION_CHANNELS; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModDestination_channelEnable_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModDestination *arg1 = (SynthLab::ModDestination *) 0 ;
  uint32_t *result = 0 ;
  
  SWIG_check_num_args("SynthLab::ModDestination::channelEnable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModDestination::channelEnable",1,"SynthLab::ModDestination *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModDestination,0))){
    SWIG_fail_ptr("ModDestination_channelEnable_get",1,SWIGTYPE_p_SynthLab__ModDestination);
  }
  
  result = (uint32_t *)(uint32_t *) ((arg1)->channelEnable);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint32_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModDestination_channelIntensity_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModDestination *arg1 = (SynthLab::ModDestination *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::ModDestination::channelIntensity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModDestination::channelIntensity",1,"SynthLab::ModDestination *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::ModDestination::channelIntensity",2,"double [SynthLab::MAX_MODULATION_CHANNELS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModDestination,0))){
    SWIG_fail_ptr("ModDestination_channelIntensity_set",1,SWIGTYPE_p_SynthLab__ModDestination);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ModDestination_channelIntensity_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->channelIntensity;
    for (ii = 0; ii < (size_t)SynthLab::MAX_MODULATION_CHANNELS; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModDestination_channelIntensity_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModDestination *arg1 = (SynthLab::ModDestination *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::ModDestination::channelIntensity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModDestination::channelIntensity",1,"SynthLab::ModDestination *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModDestination,0))){
    SWIG_fail_ptr("ModDestination_channelIntensity_get",1,SWIGTYPE_p_SynthLab__ModDestination);
  }
  
  result = (double *)(double *) ((arg1)->channelIntensity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModDestination_channelHardwire_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModDestination *arg1 = (SynthLab::ModDestination *) 0 ;
  bool *arg2 ;
  
  SWIG_check_num_args("SynthLab::ModDestination::channelHardwire",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModDestination::channelHardwire",1,"SynthLab::ModDestination *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::ModDestination::channelHardwire",2,"bool [SynthLab::MAX_MODULATION_CHANNELS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModDestination,0))){
    SWIG_fail_ptr("ModDestination_channelHardwire_set",1,SWIGTYPE_p_SynthLab__ModDestination);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("ModDestination_channelHardwire_set",2,SWIGTYPE_p_bool);
  }
  
  {
    size_t ii;
    bool *b = (bool *) arg1->channelHardwire;
    for (ii = 0; ii < (size_t)SynthLab::MAX_MODULATION_CHANNELS; ii++) b[ii] = *((bool *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModDestination_channelHardwire_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModDestination *arg1 = (SynthLab::ModDestination *) 0 ;
  bool *result = 0 ;
  
  SWIG_check_num_args("SynthLab::ModDestination::channelHardwire",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModDestination::channelHardwire",1,"SynthLab::ModDestination *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModDestination,0))){
    SWIG_fail_ptr("ModDestination_channelHardwire_get",1,SWIGTYPE_p_SynthLab__ModDestination);
  }
  
  result = (bool *)(bool *) ((arg1)->channelHardwire);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_bool,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModDestination_hardwireIntensity_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModDestination *arg1 = (SynthLab::ModDestination *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::ModDestination::hardwireIntensity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModDestination::hardwireIntensity",1,"SynthLab::ModDestination *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::ModDestination::hardwireIntensity",2,"double [SynthLab::MAX_MODULATION_CHANNELS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModDestination,0))){
    SWIG_fail_ptr("ModDestination_hardwireIntensity_set",1,SWIGTYPE_p_SynthLab__ModDestination);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ModDestination_hardwireIntensity_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->hardwireIntensity;
    for (ii = 0; ii < (size_t)SynthLab::MAX_MODULATION_CHANNELS; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModDestination_hardwireIntensity_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModDestination *arg1 = (SynthLab::ModDestination *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::ModDestination::hardwireIntensity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModDestination::hardwireIntensity",1,"SynthLab::ModDestination *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModDestination,0))){
    SWIG_fail_ptr("ModDestination_hardwireIntensity_get",1,SWIGTYPE_p_SynthLab__ModDestination);
  }
  
  result = (double *)(double *) ((arg1)->hardwireIntensity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModDestination_enableChannelIntensity_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModDestination *arg1 = (SynthLab::ModDestination *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::ModDestination::enableChannelIntensity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModDestination::enableChannelIntensity",1,"SynthLab::ModDestination *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::ModDestination::enableChannelIntensity",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModDestination,0))){
    SWIG_fail_ptr("ModDestination_enableChannelIntensity_set",1,SWIGTYPE_p_SynthLab__ModDestination);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->enableChannelIntensity = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModDestination_enableChannelIntensity_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModDestination *arg1 = (SynthLab::ModDestination *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::ModDestination::enableChannelIntensity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModDestination::enableChannelIntensity",1,"SynthLab::ModDestination *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModDestination,0))){
    SWIG_fail_ptr("ModDestination_enableChannelIntensity_get",1,SWIGTYPE_p_SynthLab__ModDestination);
  }
  
  result = (bool) ((arg1)->enableChannelIntensity);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModDestination_intensity_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModDestination *arg1 = (SynthLab::ModDestination *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::ModDestination::intensity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModDestination::intensity",1,"SynthLab::ModDestination *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::ModDestination::intensity",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModDestination,0))){
    SWIG_fail_ptr("ModDestination_intensity_set",1,SWIGTYPE_p_SynthLab__ModDestination);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->intensity = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModDestination_intensity_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModDestination *arg1 = (SynthLab::ModDestination *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::ModDestination::intensity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModDestination::intensity",1,"SynthLab::ModDestination *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModDestination,0))){
    SWIG_fail_ptr("ModDestination_intensity_get",1,SWIGTYPE_p_SynthLab__ModDestination);
  }
  
  result = (double) ((arg1)->intensity);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModDestination_defautValue_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModDestination *arg1 = (SynthLab::ModDestination *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::ModDestination::defautValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModDestination::defautValue",1,"SynthLab::ModDestination *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::ModDestination::defautValue",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModDestination,0))){
    SWIG_fail_ptr("ModDestination_defautValue_set",1,SWIGTYPE_p_SynthLab__ModDestination);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->defautValue = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModDestination_defautValue_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModDestination *arg1 = (SynthLab::ModDestination *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::ModDestination::defautValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModDestination::defautValue",1,"SynthLab::ModDestination *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModDestination,0))){
    SWIG_fail_ptr("ModDestination_defautValue_get",1,SWIGTYPE_p_SynthLab__ModDestination);
  }
  
  result = (double) ((arg1)->defautValue);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModDestination_priorityModulation_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModDestination *arg1 = (SynthLab::ModDestination *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::ModDestination::priorityModulation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModDestination::priorityModulation",1,"SynthLab::ModDestination *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::ModDestination::priorityModulation",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModDestination,0))){
    SWIG_fail_ptr("ModDestination_priorityModulation_set",1,SWIGTYPE_p_SynthLab__ModDestination);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->priorityModulation = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModDestination_priorityModulation_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModDestination *arg1 = (SynthLab::ModDestination *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::ModDestination::priorityModulation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModDestination::priorityModulation",1,"SynthLab::ModDestination *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModDestination,0))){
    SWIG_fail_ptr("ModDestination_priorityModulation_get",1,SWIGTYPE_p_SynthLab__ModDestination);
  }
  
  result = (bool) ((arg1)->priorityModulation);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ModDestination(void *obj) {
SynthLab::ModDestination *arg1 = (SynthLab::ModDestination *) obj;
delete arg1;
}
static int _proxy__wrap_new_ModDestination(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ModDestination);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ModDestination_attributes[] = {
    { "channelEnable", _wrap_ModDestination_channelEnable_get, _wrap_ModDestination_channelEnable_set },
    { "channelIntensity", _wrap_ModDestination_channelIntensity_get, _wrap_ModDestination_channelIntensity_set },
    { "channelHardwire", _wrap_ModDestination_channelHardwire_get, _wrap_ModDestination_channelHardwire_set },
    { "hardwireIntensity", _wrap_ModDestination_hardwireIntensity_get, _wrap_ModDestination_hardwireIntensity_set },
    { "enableChannelIntensity", _wrap_ModDestination_enableChannelIntensity_get, _wrap_ModDestination_enableChannelIntensity_set },
    { "intensity", _wrap_ModDestination_intensity_get, _wrap_ModDestination_intensity_set },
    { "defautValue", _wrap_ModDestination_defautValue_get, _wrap_ModDestination_defautValue_set },
    { "priorityModulation", _wrap_ModDestination_priorityModulation_get, _wrap_ModDestination_priorityModulation_set },
    {0,0,0}
};
static swig_lua_method swig_ModDestination_methods[]= {
    { "clear", _wrap_ModDestination_clear},
    {0,0}
};
static swig_lua_method swig_ModDestination_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ModDestination_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ModDestination_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ModDestination_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ModDestination_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ModDestination_Sf_SwigStatic = {
    "ModDestination",
    swig_ModDestination_Sf_SwigStatic_methods,
    swig_ModDestination_Sf_SwigStatic_attributes,
    swig_ModDestination_Sf_SwigStatic_constants,
    swig_ModDestination_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ModDestination_bases[] = {0};
static const char *swig_ModDestination_base_names[] = {0};
static swig_lua_class _wrap_class_ModDestination = { "ModDestination", "ModDestination", &SWIGTYPE_p_SynthLab__ModDestination,_proxy__wrap_new_ModDestination, swig_delete_ModDestination, swig_ModDestination_methods, swig_ModDestination_attributes, &swig_ModDestination_Sf_SwigStatic, swig_ModDestination_meta, swig_ModDestination_bases, swig_ModDestination_base_names };

static int _wrap_new_ModMatrixParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModMatrixParameters *result = 0 ;
  
  SWIG_check_num_args("SynthLab::ModMatrixParameters::ModMatrixParameters",0,0)
  result = (SynthLab::ModMatrixParameters *)new SynthLab::ModMatrixParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__ModMatrixParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModMatrixParameters_modSourceRows_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModMatrixParameters *arg1 = (SynthLab::ModMatrixParameters *) 0 ;
  std::shared_ptr< std::array< SynthLab::ModSource,SynthLab::kNumberModSources > > arg2 ;
  std::shared_ptr< std::array< SynthLab::ModSource,SynthLab::kNumberModSources > > *argp2 ;
  
  SWIG_check_num_args("SynthLab::ModMatrixParameters::modSourceRows",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModMatrixParameters::modSourceRows",1,"SynthLab::ModMatrixParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ModMatrixParameters::modSourceRows",2,"std::shared_ptr< std::array< SynthLab::ModSource,SynthLab::kNumberModSources > >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModMatrixParameters,0))){
    SWIG_fail_ptr("ModMatrixParameters_modSourceRows_set",1,SWIGTYPE_p_SynthLab__ModMatrixParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__shared_ptrT_std__arrayT_SynthLab__ModSource_SynthLab__kNumberModSources_t_t,0))){
    SWIG_fail_ptr("ModMatrixParameters_modSourceRows_set",2,SWIGTYPE_p_std__shared_ptrT_std__arrayT_SynthLab__ModSource_SynthLab__kNumberModSources_t_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->modSourceRows = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModMatrixParameters_modSourceRows_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModMatrixParameters *arg1 = (SynthLab::ModMatrixParameters *) 0 ;
  std::shared_ptr< std::array< SynthLab::ModSource,SynthLab::kNumberModSources > > result;
  
  SWIG_check_num_args("SynthLab::ModMatrixParameters::modSourceRows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModMatrixParameters::modSourceRows",1,"SynthLab::ModMatrixParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModMatrixParameters,0))){
    SWIG_fail_ptr("ModMatrixParameters_modSourceRows_get",1,SWIGTYPE_p_SynthLab__ModMatrixParameters);
  }
  
  result =  ((arg1)->modSourceRows);
  {
    std::shared_ptr< std::array< SynthLab::ModSource,SynthLab::kNumberModSources > > * resultptr = new std::shared_ptr< std::array< SynthLab::ModSource,SynthLab::kNumberModSources > >((const std::shared_ptr< std::array< SynthLab::ModSource,SynthLab::kNumberModSources > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_std__arrayT_SynthLab__ModSource_SynthLab__kNumberModSources_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModMatrixParameters_modDestinationColumns_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModMatrixParameters *arg1 = (SynthLab::ModMatrixParameters *) 0 ;
  std::shared_ptr< std::array< SynthLab::ModDestination,SynthLab::kNumberModDestinations > > arg2 ;
  std::shared_ptr< std::array< SynthLab::ModDestination,SynthLab::kNumberModDestinations > > *argp2 ;
  
  SWIG_check_num_args("SynthLab::ModMatrixParameters::modDestinationColumns",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModMatrixParameters::modDestinationColumns",1,"SynthLab::ModMatrixParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ModMatrixParameters::modDestinationColumns",2,"std::shared_ptr< std::array< SynthLab::ModDestination,SynthLab::kNumberModDestinations > >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModMatrixParameters,0))){
    SWIG_fail_ptr("ModMatrixParameters_modDestinationColumns_set",1,SWIGTYPE_p_SynthLab__ModMatrixParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__shared_ptrT_std__arrayT_SynthLab__ModDestination_SynthLab__kNumberModDestinations_t_t,0))){
    SWIG_fail_ptr("ModMatrixParameters_modDestinationColumns_set",2,SWIGTYPE_p_std__shared_ptrT_std__arrayT_SynthLab__ModDestination_SynthLab__kNumberModDestinations_t_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->modDestinationColumns = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModMatrixParameters_modDestinationColumns_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModMatrixParameters *arg1 = (SynthLab::ModMatrixParameters *) 0 ;
  std::shared_ptr< std::array< SynthLab::ModDestination,SynthLab::kNumberModDestinations > > result;
  
  SWIG_check_num_args("SynthLab::ModMatrixParameters::modDestinationColumns",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModMatrixParameters::modDestinationColumns",1,"SynthLab::ModMatrixParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModMatrixParameters,0))){
    SWIG_fail_ptr("ModMatrixParameters_modDestinationColumns_get",1,SWIGTYPE_p_SynthLab__ModMatrixParameters);
  }
  
  result =  ((arg1)->modDestinationColumns);
  {
    std::shared_ptr< std::array< SynthLab::ModDestination,SynthLab::kNumberModDestinations > > * resultptr = new std::shared_ptr< std::array< SynthLab::ModDestination,SynthLab::kNumberModDestinations > >((const std::shared_ptr< std::array< SynthLab::ModDestination,SynthLab::kNumberModDestinations > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_std__arrayT_SynthLab__ModDestination_SynthLab__kNumberModDestinations_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModMatrixParameters_setMM_SourceIntensity(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModMatrixParameters *arg1 = (SynthLab::ModMatrixParameters *) 0 ;
  uint32_t arg2 ;
  double arg3 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::ModMatrixParameters::setMM_SourceIntensity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_SourceIntensity",1,"SynthLab::ModMatrixParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_SourceIntensity",2,"uint32_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_SourceIntensity",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModMatrixParameters,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_SourceIntensity",1,SWIGTYPE_p_SynthLab__ModMatrixParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_SourceIntensity",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setMM_SourceIntensity(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModMatrixParameters_setMM_ChannelEnable(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModMatrixParameters *arg1 = (SynthLab::ModMatrixParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  bool arg4 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  
  SWIG_check_num_args("SynthLab::ModMatrixParameters::setMM_ChannelEnable",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_ChannelEnable",1,"SynthLab::ModMatrixParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_ChannelEnable",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_ChannelEnable",3,"uint32_t");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_ChannelEnable",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModMatrixParameters,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_ChannelEnable",1,SWIGTYPE_p_SynthLab__ModMatrixParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_ChannelEnable",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_ChannelEnable",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->setMM_ChannelEnable(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModMatrixParameters_setMM_HardwireEnable(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModMatrixParameters *arg1 = (SynthLab::ModMatrixParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  bool arg4 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  
  SWIG_check_num_args("SynthLab::ModMatrixParameters::setMM_HardwireEnable",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_HardwireEnable",1,"SynthLab::ModMatrixParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_HardwireEnable",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_HardwireEnable",3,"uint32_t");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_HardwireEnable",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModMatrixParameters,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_HardwireEnable",1,SWIGTYPE_p_SynthLab__ModMatrixParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_HardwireEnable",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_HardwireEnable",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->setMM_HardwireEnable(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModMatrixParameters_setMM_ChannelIntensity(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModMatrixParameters *arg1 = (SynthLab::ModMatrixParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  double arg4 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  
  SWIG_check_num_args("SynthLab::ModMatrixParameters::setMM_ChannelIntensity",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_ChannelIntensity",1,"SynthLab::ModMatrixParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_ChannelIntensity",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_ChannelIntensity",3,"uint32_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_ChannelIntensity",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModMatrixParameters,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_ChannelIntensity",1,SWIGTYPE_p_SynthLab__ModMatrixParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_ChannelIntensity",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_ChannelIntensity",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->setMM_ChannelIntensity(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModMatrixParameters_setMM_DestHardwireIntensity(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModMatrixParameters *arg1 = (SynthLab::ModMatrixParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  double arg4 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  
  SWIG_check_num_args("SynthLab::ModMatrixParameters::setMM_DestHardwireIntensity",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_DestHardwireIntensity",1,"SynthLab::ModMatrixParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_DestHardwireIntensity",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_DestHardwireIntensity",3,"uint32_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_DestHardwireIntensity",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModMatrixParameters,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_DestHardwireIntensity",1,SWIGTYPE_p_SynthLab__ModMatrixParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_DestHardwireIntensity",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_DestHardwireIntensity",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->setMM_DestHardwireIntensity(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModMatrixParameters_setMM_DestIntensity(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModMatrixParameters *arg1 = (SynthLab::ModMatrixParameters *) 0 ;
  uint32_t arg2 ;
  double arg3 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::ModMatrixParameters::setMM_DestIntensity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_DestIntensity",1,"SynthLab::ModMatrixParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_DestIntensity",2,"uint32_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_DestIntensity",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModMatrixParameters,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_DestIntensity",1,SWIGTYPE_p_SynthLab__ModMatrixParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_DestIntensity",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setMM_DestIntensity(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModMatrixParameters_setMM_DestDefaultValue(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModMatrixParameters *arg1 = (SynthLab::ModMatrixParameters *) 0 ;
  uint32_t arg2 ;
  double arg3 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::ModMatrixParameters::setMM_DestDefaultValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_DestDefaultValue",1,"SynthLab::ModMatrixParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_DestDefaultValue",2,"uint32_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_DestDefaultValue",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModMatrixParameters,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_DestDefaultValue",1,SWIGTYPE_p_SynthLab__ModMatrixParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_DestDefaultValue",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setMM_DestDefaultValue(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModMatrixParameters_setMM_DestHighPriority(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModMatrixParameters *arg1 = (SynthLab::ModMatrixParameters *) 0 ;
  uint32_t arg2 ;
  bool arg3 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::ModMatrixParameters::setMM_DestHighPriority",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_DestHighPriority",1,"SynthLab::ModMatrixParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_DestHighPriority",2,"uint32_t");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_DestHighPriority",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModMatrixParameters,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_DestHighPriority",1,SWIGTYPE_p_SynthLab__ModMatrixParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_DestHighPriority",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setMM_DestHighPriority(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModMatrixParameters_setMM_HardwiredRouting__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModMatrixParameters *arg1 = (SynthLab::ModMatrixParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  double arg4 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  
  SWIG_check_num_args("SynthLab::ModMatrixParameters::setMM_HardwiredRouting",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_HardwiredRouting",1,"SynthLab::ModMatrixParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_HardwiredRouting",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_HardwiredRouting",3,"uint32_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_HardwiredRouting",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModMatrixParameters,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_HardwiredRouting",1,SWIGTYPE_p_SynthLab__ModMatrixParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_HardwiredRouting",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_HardwiredRouting",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->setMM_HardwiredRouting(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModMatrixParameters_setMM_HardwiredRouting__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModMatrixParameters *arg1 = (SynthLab::ModMatrixParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  
  SWIG_check_num_args("SynthLab::ModMatrixParameters::setMM_HardwiredRouting",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_HardwiredRouting",1,"SynthLab::ModMatrixParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_HardwiredRouting",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::ModMatrixParameters::setMM_HardwiredRouting",3,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModMatrixParameters,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_HardwiredRouting",1,SWIGTYPE_p_SynthLab__ModMatrixParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_HardwiredRouting",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("ModMatrixParameters_setMM_HardwiredRouting",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  (arg1)->setMM_HardwiredRouting(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModMatrixParameters_setMM_HardwiredRouting(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__ModMatrixParameters, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ModMatrixParameters_setMM_HardwiredRouting__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__ModMatrixParameters, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ModMatrixParameters_setMM_HardwiredRouting__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ModMatrixParameters_setMM_HardwiredRouting'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::ModMatrixParameters::setMM_HardwiredRouting(uint32_t,uint32_t,double)\n"
    "    SynthLab::ModMatrixParameters::setMM_HardwiredRouting(uint32_t,uint32_t)\n");
  lua_error(L);return 0;
}


static void swig_delete_ModMatrixParameters(void *obj) {
SynthLab::ModMatrixParameters *arg1 = (SynthLab::ModMatrixParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_ModMatrixParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ModMatrixParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ModMatrixParameters_attributes[] = {
    { "modSourceRows", _wrap_ModMatrixParameters_modSourceRows_get, _wrap_ModMatrixParameters_modSourceRows_set },
    { "modDestinationColumns", _wrap_ModMatrixParameters_modDestinationColumns_get, _wrap_ModMatrixParameters_modDestinationColumns_set },
    {0,0,0}
};
static swig_lua_method swig_ModMatrixParameters_methods[]= {
    { "setMM_SourceIntensity", _wrap_ModMatrixParameters_setMM_SourceIntensity},
    { "setMM_ChannelEnable", _wrap_ModMatrixParameters_setMM_ChannelEnable},
    { "setMM_HardwireEnable", _wrap_ModMatrixParameters_setMM_HardwireEnable},
    { "setMM_ChannelIntensity", _wrap_ModMatrixParameters_setMM_ChannelIntensity},
    { "setMM_DestHardwireIntensity", _wrap_ModMatrixParameters_setMM_DestHardwireIntensity},
    { "setMM_DestIntensity", _wrap_ModMatrixParameters_setMM_DestIntensity},
    { "setMM_DestDefaultValue", _wrap_ModMatrixParameters_setMM_DestDefaultValue},
    { "setMM_DestHighPriority", _wrap_ModMatrixParameters_setMM_DestHighPriority},
    { "setMM_HardwiredRouting", _wrap_ModMatrixParameters_setMM_HardwiredRouting},
    {0,0}
};
static swig_lua_method swig_ModMatrixParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ModMatrixParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ModMatrixParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ModMatrixParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ModMatrixParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ModMatrixParameters_Sf_SwigStatic = {
    "ModMatrixParameters",
    swig_ModMatrixParameters_Sf_SwigStatic_methods,
    swig_ModMatrixParameters_Sf_SwigStatic_attributes,
    swig_ModMatrixParameters_Sf_SwigStatic_constants,
    swig_ModMatrixParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ModMatrixParameters_bases[] = {0};
static const char *swig_ModMatrixParameters_base_names[] = {0};
static swig_lua_class _wrap_class_ModMatrixParameters = { "ModMatrixParameters", "ModMatrixParameters", &SWIGTYPE_p_SynthLab__ModMatrixParameters,_proxy__wrap_new_ModMatrixParameters, swig_delete_ModMatrixParameters, swig_ModMatrixParameters_methods, swig_ModMatrixParameters_attributes, &swig_ModMatrixParameters_Sf_SwigStatic, swig_ModMatrixParameters_meta, swig_ModMatrixParameters_bases, swig_ModMatrixParameters_base_names };

static int _wrap_NOISE_OSC_INPUTS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::NOISE_OSC_INPUTS",0,0)
  result = (uint32_t)SynthLab::NOISE_OSC_INPUTS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NOISE_OSC_OUTPUTS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::NOISE_OSC_OUTPUTS",0,0)
  result = (uint32_t)SynthLab::NOISE_OSC_OUTPUTS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NoiseOscillatorParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::NoiseOscillatorParameters *result = 0 ;
  
  SWIG_check_num_args("SynthLab::NoiseOscillatorParameters::NoiseOscillatorParameters",0,0)
  result = (SynthLab::NoiseOscillatorParameters *)new SynthLab::NoiseOscillatorParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__NoiseOscillatorParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseOscillatorParameters_waveform_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::NoiseOscillatorParameters *arg1 = (SynthLab::NoiseOscillatorParameters *) 0 ;
  SynthLab::NoiseWaveform arg2 ;
  
  SWIG_check_num_args("SynthLab::NoiseOscillatorParameters::waveform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::NoiseOscillatorParameters::waveform",1,"SynthLab::NoiseOscillatorParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::NoiseOscillatorParameters::waveform",2,"SynthLab::NoiseWaveform");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__NoiseOscillatorParameters,0))){
    SWIG_fail_ptr("NoiseOscillatorParameters_waveform_set",1,SWIGTYPE_p_SynthLab__NoiseOscillatorParameters);
  }
  
  arg2 = (SynthLab::NoiseWaveform)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->waveform = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseOscillatorParameters_waveform_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::NoiseOscillatorParameters *arg1 = (SynthLab::NoiseOscillatorParameters *) 0 ;
  SynthLab::NoiseWaveform result;
  
  SWIG_check_num_args("SynthLab::NoiseOscillatorParameters::waveform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::NoiseOscillatorParameters::waveform",1,"SynthLab::NoiseOscillatorParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__NoiseOscillatorParameters,0))){
    SWIG_fail_ptr("NoiseOscillatorParameters_waveform_get",1,SWIGTYPE_p_SynthLab__NoiseOscillatorParameters);
  }
  
  result = (SynthLab::NoiseWaveform) ((arg1)->waveform);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseOscillatorParameters_outputAmplitude_dB_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::NoiseOscillatorParameters *arg1 = (SynthLab::NoiseOscillatorParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::NoiseOscillatorParameters::outputAmplitude_dB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::NoiseOscillatorParameters::outputAmplitude_dB",1,"SynthLab::NoiseOscillatorParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::NoiseOscillatorParameters::outputAmplitude_dB",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__NoiseOscillatorParameters,0))){
    SWIG_fail_ptr("NoiseOscillatorParameters_outputAmplitude_dB_set",1,SWIGTYPE_p_SynthLab__NoiseOscillatorParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->outputAmplitude_dB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseOscillatorParameters_outputAmplitude_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::NoiseOscillatorParameters *arg1 = (SynthLab::NoiseOscillatorParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::NoiseOscillatorParameters::outputAmplitude_dB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::NoiseOscillatorParameters::outputAmplitude_dB",1,"SynthLab::NoiseOscillatorParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__NoiseOscillatorParameters,0))){
    SWIG_fail_ptr("NoiseOscillatorParameters_outputAmplitude_dB_get",1,SWIGTYPE_p_SynthLab__NoiseOscillatorParameters);
  }
  
  result = (double) ((arg1)->outputAmplitude_dB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NoiseOscillatorParameters(void *obj) {
SynthLab::NoiseOscillatorParameters *arg1 = (SynthLab::NoiseOscillatorParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_NoiseOscillatorParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NoiseOscillatorParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NoiseOscillatorParameters_attributes[] = {
    { "waveform", _wrap_NoiseOscillatorParameters_waveform_get, _wrap_NoiseOscillatorParameters_waveform_set },
    { "outputAmplitude_dB", _wrap_NoiseOscillatorParameters_outputAmplitude_dB_get, _wrap_NoiseOscillatorParameters_outputAmplitude_dB_set },
    {0,0,0}
};
static swig_lua_method swig_NoiseOscillatorParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_NoiseOscillatorParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NoiseOscillatorParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NoiseOscillatorParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NoiseOscillatorParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NoiseOscillatorParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NoiseOscillatorParameters_Sf_SwigStatic = {
    "NoiseOscillatorParameters",
    swig_NoiseOscillatorParameters_Sf_SwigStatic_methods,
    swig_NoiseOscillatorParameters_Sf_SwigStatic_attributes,
    swig_NoiseOscillatorParameters_Sf_SwigStatic_constants,
    swig_NoiseOscillatorParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NoiseOscillatorParameters_bases[] = {0};
static const char *swig_NoiseOscillatorParameters_base_names[] = {0};
static swig_lua_class _wrap_class_NoiseOscillatorParameters = { "NoiseOscillatorParameters", "NoiseOscillatorParameters", &SWIGTYPE_p_SynthLab__NoiseOscillatorParameters,_proxy__wrap_new_NoiseOscillatorParameters, swig_delete_NoiseOscillatorParameters, swig_NoiseOscillatorParameters_methods, swig_NoiseOscillatorParameters_attributes, &swig_NoiseOscillatorParameters_Sf_SwigStatic, swig_NoiseOscillatorParameters_meta, swig_NoiseOscillatorParameters_bases, swig_NoiseOscillatorParameters_base_names };

static int _wrap_freqModLow_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::freqModLow",0,0)
  result = (double)(double)SynthLab::freqModLow;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_freqModHigh_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::freqModHigh",0,0)
  result = (double)(double)SynthLab::freqModHigh;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_freqModSemitoneRange_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::freqModSemitoneRange",0,0)
  result = (double)(double)SynthLab::freqModSemitoneRange;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FILTER_AUDIO_INPUTS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::FILTER_AUDIO_INPUTS",0,0)
  result = (uint32_t)SynthLab::FILTER_AUDIO_INPUTS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FILTER_AUDIO_OUTPUTS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::FILTER_AUDIO_OUTPUTS",0,0)
  result = (uint32_t)SynthLab::FILTER_AUDIO_OUTPUTS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MOOG_SUBFILTERS_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("SynthLab::MOOG_SUBFILTERS",0,0)
  result = (int)(int)SynthLab::MOOG_SUBFILTERS;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DIODE_SUBFILTERS_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("SynthLab::DIODE_SUBFILTERS",0,0)
  result = (int)(int)SynthLab::DIODE_SUBFILTERS;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KORG_SUBFILTERS_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("SynthLab::KORG_SUBFILTERS",0,0)
  result = (int)(int)SynthLab::KORG_SUBFILTERS;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterParameters_filterIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterParameters *arg1 = (SynthLab::FilterParameters *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::FilterParameters::filterIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FilterParameters::filterIndex",1,"SynthLab::FilterParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::FilterParameters::filterIndex",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FilterParameters,0))){
    SWIG_fail_ptr("FilterParameters_filterIndex_set",1,SWIGTYPE_p_SynthLab__FilterParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("FilterParameters_filterIndex_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->filterIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterParameters_filterIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterParameters *arg1 = (SynthLab::FilterParameters *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("SynthLab::FilterParameters::filterIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FilterParameters::filterIndex",1,"SynthLab::FilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FilterParameters,0))){
    SWIG_fail_ptr("FilterParameters_filterIndex_get",1,SWIGTYPE_p_SynthLab__FilterParameters);
  }
  
  result =  ((arg1)->filterIndex);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterParameters_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterParameters *arg1 = (SynthLab::FilterParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::FilterParameters::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FilterParameters::fc",1,"SynthLab::FilterParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::FilterParameters::fc",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FilterParameters,0))){
    SWIG_fail_ptr("FilterParameters_fc_set",1,SWIGTYPE_p_SynthLab__FilterParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterParameters_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterParameters *arg1 = (SynthLab::FilterParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::FilterParameters::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FilterParameters::fc",1,"SynthLab::FilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FilterParameters,0))){
    SWIG_fail_ptr("FilterParameters_fc_get",1,SWIGTYPE_p_SynthLab__FilterParameters);
  }
  
  result = (double) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterParameters_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterParameters *arg1 = (SynthLab::FilterParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::FilterParameters::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FilterParameters::Q",1,"SynthLab::FilterParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::FilterParameters::Q",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FilterParameters,0))){
    SWIG_fail_ptr("FilterParameters_Q_set",1,SWIGTYPE_p_SynthLab__FilterParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterParameters_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterParameters *arg1 = (SynthLab::FilterParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::FilterParameters::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FilterParameters::Q",1,"SynthLab::FilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FilterParameters,0))){
    SWIG_fail_ptr("FilterParameters_Q_get",1,SWIGTYPE_p_SynthLab__FilterParameters);
  }
  
  result = (double) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterParameters_filterOutputGain_dB_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterParameters *arg1 = (SynthLab::FilterParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::FilterParameters::filterOutputGain_dB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FilterParameters::filterOutputGain_dB",1,"SynthLab::FilterParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::FilterParameters::filterOutputGain_dB",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FilterParameters,0))){
    SWIG_fail_ptr("FilterParameters_filterOutputGain_dB_set",1,SWIGTYPE_p_SynthLab__FilterParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->filterOutputGain_dB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterParameters_filterOutputGain_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterParameters *arg1 = (SynthLab::FilterParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::FilterParameters::filterOutputGain_dB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FilterParameters::filterOutputGain_dB",1,"SynthLab::FilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FilterParameters,0))){
    SWIG_fail_ptr("FilterParameters_filterOutputGain_dB_get",1,SWIGTYPE_p_SynthLab__FilterParameters);
  }
  
  result = (double) ((arg1)->filterOutputGain_dB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterParameters_filterDrive_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterParameters *arg1 = (SynthLab::FilterParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::FilterParameters::filterDrive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FilterParameters::filterDrive",1,"SynthLab::FilterParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::FilterParameters::filterDrive",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FilterParameters,0))){
    SWIG_fail_ptr("FilterParameters_filterDrive_set",1,SWIGTYPE_p_SynthLab__FilterParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->filterDrive = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterParameters_filterDrive_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterParameters *arg1 = (SynthLab::FilterParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::FilterParameters::filterDrive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FilterParameters::filterDrive",1,"SynthLab::FilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FilterParameters,0))){
    SWIG_fail_ptr("FilterParameters_filterDrive_get",1,SWIGTYPE_p_SynthLab__FilterParameters);
  }
  
  result = (double) ((arg1)->filterDrive);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterParameters_bassGainComp_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterParameters *arg1 = (SynthLab::FilterParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::FilterParameters::bassGainComp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FilterParameters::bassGainComp",1,"SynthLab::FilterParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::FilterParameters::bassGainComp",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FilterParameters,0))){
    SWIG_fail_ptr("FilterParameters_bassGainComp_set",1,SWIGTYPE_p_SynthLab__FilterParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->bassGainComp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterParameters_bassGainComp_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterParameters *arg1 = (SynthLab::FilterParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::FilterParameters::bassGainComp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FilterParameters::bassGainComp",1,"SynthLab::FilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FilterParameters,0))){
    SWIG_fail_ptr("FilterParameters_bassGainComp_get",1,SWIGTYPE_p_SynthLab__FilterParameters);
  }
  
  result = (double) ((arg1)->bassGainComp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterParameters_analogFGN_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterParameters *arg1 = (SynthLab::FilterParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::FilterParameters::analogFGN",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FilterParameters::analogFGN",1,"SynthLab::FilterParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::FilterParameters::analogFGN",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FilterParameters,0))){
    SWIG_fail_ptr("FilterParameters_analogFGN_set",1,SWIGTYPE_p_SynthLab__FilterParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->analogFGN = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterParameters_analogFGN_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterParameters *arg1 = (SynthLab::FilterParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::FilterParameters::analogFGN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FilterParameters::analogFGN",1,"SynthLab::FilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FilterParameters,0))){
    SWIG_fail_ptr("FilterParameters_analogFGN_get",1,SWIGTYPE_p_SynthLab__FilterParameters);
  }
  
  result = (bool) ((arg1)->analogFGN);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterParameters_enableKeyTrack_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterParameters *arg1 = (SynthLab::FilterParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::FilterParameters::enableKeyTrack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FilterParameters::enableKeyTrack",1,"SynthLab::FilterParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::FilterParameters::enableKeyTrack",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FilterParameters,0))){
    SWIG_fail_ptr("FilterParameters_enableKeyTrack_set",1,SWIGTYPE_p_SynthLab__FilterParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->enableKeyTrack = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterParameters_enableKeyTrack_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterParameters *arg1 = (SynthLab::FilterParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::FilterParameters::enableKeyTrack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FilterParameters::enableKeyTrack",1,"SynthLab::FilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FilterParameters,0))){
    SWIG_fail_ptr("FilterParameters_enableKeyTrack_get",1,SWIGTYPE_p_SynthLab__FilterParameters);
  }
  
  result = (bool) ((arg1)->enableKeyTrack);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterParameters_keyTrackSemis_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterParameters *arg1 = (SynthLab::FilterParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::FilterParameters::keyTrackSemis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FilterParameters::keyTrackSemis",1,"SynthLab::FilterParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::FilterParameters::keyTrackSemis",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FilterParameters,0))){
    SWIG_fail_ptr("FilterParameters_keyTrackSemis_set",1,SWIGTYPE_p_SynthLab__FilterParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->keyTrackSemis = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterParameters_keyTrackSemis_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterParameters *arg1 = (SynthLab::FilterParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::FilterParameters::keyTrackSemis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FilterParameters::keyTrackSemis",1,"SynthLab::FilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FilterParameters,0))){
    SWIG_fail_ptr("FilterParameters_keyTrackSemis_get",1,SWIGTYPE_p_SynthLab__FilterParameters);
  }
  
  result = (double) ((arg1)->keyTrackSemis);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterParameters_modKnobValue_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterParameters *arg1 = (SynthLab::FilterParameters *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::FilterParameters::modKnobValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FilterParameters::modKnobValue",1,"SynthLab::FilterParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::FilterParameters::modKnobValue",2,"double [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FilterParameters,0))){
    SWIG_fail_ptr("FilterParameters_modKnobValue_set",1,SWIGTYPE_p_SynthLab__FilterParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FilterParameters_modKnobValue_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->modKnobValue;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterParameters_modKnobValue_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterParameters *arg1 = (SynthLab::FilterParameters *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::FilterParameters::modKnobValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FilterParameters::modKnobValue",1,"SynthLab::FilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FilterParameters,0))){
    SWIG_fail_ptr("FilterParameters_modKnobValue_get",1,SWIGTYPE_p_SynthLab__FilterParameters);
  }
  
  result = (double *)(double *) ((arg1)->modKnobValue);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterParameters_moduleIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterParameters *arg1 = (SynthLab::FilterParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::FilterParameters::moduleIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FilterParameters::moduleIndex",1,"SynthLab::FilterParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::FilterParameters::moduleIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FilterParameters,0))){
    SWIG_fail_ptr("FilterParameters_moduleIndex_set",1,SWIGTYPE_p_SynthLab__FilterParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("FilterParameters_moduleIndex_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->moduleIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterParameters_moduleIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterParameters *arg1 = (SynthLab::FilterParameters *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::FilterParameters::moduleIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FilterParameters::moduleIndex",1,"SynthLab::FilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FilterParameters,0))){
    SWIG_fail_ptr("FilterParameters_moduleIndex_get",1,SWIGTYPE_p_SynthLab__FilterParameters);
  }
  
  result =  ((arg1)->moduleIndex);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FilterParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FilterParameters *result = 0 ;
  
  SWIG_check_num_args("SynthLab::FilterParameters::FilterParameters",0,0)
  result = (SynthLab::FilterParameters *)new SynthLab::FilterParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__FilterParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FilterParameters(void *obj) {
SynthLab::FilterParameters *arg1 = (SynthLab::FilterParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_FilterParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FilterParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FilterParameters_attributes[] = {
    { "filterIndex", _wrap_FilterParameters_filterIndex_get, _wrap_FilterParameters_filterIndex_set },
    { "fc", _wrap_FilterParameters_fc_get, _wrap_FilterParameters_fc_set },
    { "Q", _wrap_FilterParameters_Q_get, _wrap_FilterParameters_Q_set },
    { "filterOutputGain_dB", _wrap_FilterParameters_filterOutputGain_dB_get, _wrap_FilterParameters_filterOutputGain_dB_set },
    { "filterDrive", _wrap_FilterParameters_filterDrive_get, _wrap_FilterParameters_filterDrive_set },
    { "bassGainComp", _wrap_FilterParameters_bassGainComp_get, _wrap_FilterParameters_bassGainComp_set },
    { "analogFGN", _wrap_FilterParameters_analogFGN_get, _wrap_FilterParameters_analogFGN_set },
    { "enableKeyTrack", _wrap_FilterParameters_enableKeyTrack_get, _wrap_FilterParameters_enableKeyTrack_set },
    { "keyTrackSemis", _wrap_FilterParameters_keyTrackSemis_get, _wrap_FilterParameters_keyTrackSemis_set },
    { "modKnobValue", _wrap_FilterParameters_modKnobValue_get, _wrap_FilterParameters_modKnobValue_set },
    { "moduleIndex", _wrap_FilterParameters_moduleIndex_get, _wrap_FilterParameters_moduleIndex_set },
    {0,0,0}
};
static swig_lua_method swig_FilterParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_FilterParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FilterParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FilterParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FilterParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FilterParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FilterParameters_Sf_SwigStatic = {
    "FilterParameters",
    swig_FilterParameters_Sf_SwigStatic_methods,
    swig_FilterParameters_Sf_SwigStatic_attributes,
    swig_FilterParameters_Sf_SwigStatic_constants,
    swig_FilterParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FilterParameters_bases[] = {0};
static const char *swig_FilterParameters_base_names[] = {0};
static swig_lua_class _wrap_class_FilterParameters = { "FilterParameters", "FilterParameters", &SWIGTYPE_p_SynthLab__FilterParameters,_proxy__wrap_new_FilterParameters, swig_delete_FilterParameters, swig_FilterParameters_methods, swig_FilterParameters_attributes, &swig_FilterParameters_Sf_SwigStatic, swig_FilterParameters_meta, swig_FilterParameters_bases, swig_FilterParameters_base_names };

static int _wrap_MAX_EG_VALUE_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::MAX_EG_VALUE",0,0)
  result = (double)(double)SynthLab::MAX_EG_VALUE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EGParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *result = 0 ;
  
  SWIG_check_num_args("SynthLab::EGParameters::EGParameters",0,0)
  result = (SynthLab::EGParameters *)new SynthLab::EGParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__EGParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_egContourIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::EGParameters::egContourIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::egContourIndex",1,"SynthLab::EGParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::EGParameters::egContourIndex",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_egContourIndex_set",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("EGParameters_egContourIndex_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->egContourIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_egContourIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("SynthLab::EGParameters::egContourIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::egContourIndex",1,"SynthLab::EGParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_egContourIndex_get",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  result =  ((arg1)->egContourIndex);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_resetToZero_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::EGParameters::resetToZero",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::resetToZero",1,"SynthLab::EGParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::EGParameters::resetToZero",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_resetToZero_set",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->resetToZero = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_resetToZero_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::EGParameters::resetToZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::resetToZero",1,"SynthLab::EGParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_resetToZero_get",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  result = (bool) ((arg1)->resetToZero);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_legatoMode_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::EGParameters::legatoMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::legatoMode",1,"SynthLab::EGParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::EGParameters::legatoMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_legatoMode_set",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->legatoMode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_legatoMode_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::EGParameters::legatoMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::legatoMode",1,"SynthLab::EGParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_legatoMode_get",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  result = (bool) ((arg1)->legatoMode);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_velocityToAttackScaling_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::EGParameters::velocityToAttackScaling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::velocityToAttackScaling",1,"SynthLab::EGParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::EGParameters::velocityToAttackScaling",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_velocityToAttackScaling_set",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->velocityToAttackScaling = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_velocityToAttackScaling_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::EGParameters::velocityToAttackScaling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::velocityToAttackScaling",1,"SynthLab::EGParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_velocityToAttackScaling_get",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  result = (bool) ((arg1)->velocityToAttackScaling);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_noteNumberToDecayScaling_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::EGParameters::noteNumberToDecayScaling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::noteNumberToDecayScaling",1,"SynthLab::EGParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::EGParameters::noteNumberToDecayScaling",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_noteNumberToDecayScaling_set",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->noteNumberToDecayScaling = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_noteNumberToDecayScaling_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::EGParameters::noteNumberToDecayScaling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::noteNumberToDecayScaling",1,"SynthLab::EGParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_noteNumberToDecayScaling_get",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  result = (bool) ((arg1)->noteNumberToDecayScaling);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_attackTime_mSec_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::EGParameters::attackTime_mSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::attackTime_mSec",1,"SynthLab::EGParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::EGParameters::attackTime_mSec",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_attackTime_mSec_set",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->attackTime_mSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_attackTime_mSec_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::EGParameters::attackTime_mSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::attackTime_mSec",1,"SynthLab::EGParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_attackTime_mSec_get",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  result = (double) ((arg1)->attackTime_mSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_decayTime_mSec_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::EGParameters::decayTime_mSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::decayTime_mSec",1,"SynthLab::EGParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::EGParameters::decayTime_mSec",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_decayTime_mSec_set",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->decayTime_mSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_decayTime_mSec_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::EGParameters::decayTime_mSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::decayTime_mSec",1,"SynthLab::EGParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_decayTime_mSec_get",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  result = (double) ((arg1)->decayTime_mSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_slopeTime_mSec_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::EGParameters::slopeTime_mSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::slopeTime_mSec",1,"SynthLab::EGParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::EGParameters::slopeTime_mSec",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_slopeTime_mSec_set",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->slopeTime_mSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_slopeTime_mSec_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::EGParameters::slopeTime_mSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::slopeTime_mSec",1,"SynthLab::EGParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_slopeTime_mSec_get",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  result = (double) ((arg1)->slopeTime_mSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_releaseTime_mSec_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::EGParameters::releaseTime_mSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::releaseTime_mSec",1,"SynthLab::EGParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::EGParameters::releaseTime_mSec",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_releaseTime_mSec_set",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->releaseTime_mSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_releaseTime_mSec_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::EGParameters::releaseTime_mSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::releaseTime_mSec",1,"SynthLab::EGParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_releaseTime_mSec_get",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  result = (double) ((arg1)->releaseTime_mSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_startLevel_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::EGParameters::startLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::startLevel",1,"SynthLab::EGParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::EGParameters::startLevel",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_startLevel_set",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->startLevel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_startLevel_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::EGParameters::startLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::startLevel",1,"SynthLab::EGParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_startLevel_get",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  result = (double) ((arg1)->startLevel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_endLevel_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::EGParameters::endLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::endLevel",1,"SynthLab::EGParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::EGParameters::endLevel",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_endLevel_set",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->endLevel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_endLevel_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::EGParameters::endLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::endLevel",1,"SynthLab::EGParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_endLevel_get",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  result = (double) ((arg1)->endLevel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_decayLevel_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::EGParameters::decayLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::decayLevel",1,"SynthLab::EGParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::EGParameters::decayLevel",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_decayLevel_set",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->decayLevel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_decayLevel_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::EGParameters::decayLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::decayLevel",1,"SynthLab::EGParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_decayLevel_get",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  result = (double) ((arg1)->decayLevel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_sustainLevel_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::EGParameters::sustainLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::sustainLevel",1,"SynthLab::EGParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::EGParameters::sustainLevel",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_sustainLevel_set",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->sustainLevel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_sustainLevel_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::EGParameters::sustainLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::sustainLevel",1,"SynthLab::EGParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_sustainLevel_get",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  result = (double) ((arg1)->sustainLevel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_curvature_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::EGParameters::curvature",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::curvature",1,"SynthLab::EGParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::EGParameters::curvature",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_curvature_set",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->curvature = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_curvature_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::EGParameters::curvature",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::curvature",1,"SynthLab::EGParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_curvature_get",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  result = (double) ((arg1)->curvature);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_modKnobValue_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::EGParameters::modKnobValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::modKnobValue",1,"SynthLab::EGParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::EGParameters::modKnobValue",2,"double [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_modKnobValue_set",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("EGParameters_modKnobValue_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->modKnobValue;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_modKnobValue_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::EGParameters::modKnobValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::modKnobValue",1,"SynthLab::EGParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_modKnobValue_get",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  result = (double *)(double *) ((arg1)->modKnobValue);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_moduleIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::EGParameters::moduleIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::moduleIndex",1,"SynthLab::EGParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::EGParameters::moduleIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_moduleIndex_set",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("EGParameters_moduleIndex_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->moduleIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EGParameters_moduleIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::EGParameters::moduleIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EGParameters::moduleIndex",1,"SynthLab::EGParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("EGParameters_moduleIndex_get",1,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  result =  ((arg1)->moduleIndex);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EGParameters(void *obj) {
SynthLab::EGParameters *arg1 = (SynthLab::EGParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_EGParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_EGParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_EGParameters_attributes[] = {
    { "egContourIndex", _wrap_EGParameters_egContourIndex_get, _wrap_EGParameters_egContourIndex_set },
    { "resetToZero", _wrap_EGParameters_resetToZero_get, _wrap_EGParameters_resetToZero_set },
    { "legatoMode", _wrap_EGParameters_legatoMode_get, _wrap_EGParameters_legatoMode_set },
    { "velocityToAttackScaling", _wrap_EGParameters_velocityToAttackScaling_get, _wrap_EGParameters_velocityToAttackScaling_set },
    { "noteNumberToDecayScaling", _wrap_EGParameters_noteNumberToDecayScaling_get, _wrap_EGParameters_noteNumberToDecayScaling_set },
    { "attackTime_mSec", _wrap_EGParameters_attackTime_mSec_get, _wrap_EGParameters_attackTime_mSec_set },
    { "decayTime_mSec", _wrap_EGParameters_decayTime_mSec_get, _wrap_EGParameters_decayTime_mSec_set },
    { "slopeTime_mSec", _wrap_EGParameters_slopeTime_mSec_get, _wrap_EGParameters_slopeTime_mSec_set },
    { "releaseTime_mSec", _wrap_EGParameters_releaseTime_mSec_get, _wrap_EGParameters_releaseTime_mSec_set },
    { "startLevel", _wrap_EGParameters_startLevel_get, _wrap_EGParameters_startLevel_set },
    { "endLevel", _wrap_EGParameters_endLevel_get, _wrap_EGParameters_endLevel_set },
    { "decayLevel", _wrap_EGParameters_decayLevel_get, _wrap_EGParameters_decayLevel_set },
    { "sustainLevel", _wrap_EGParameters_sustainLevel_get, _wrap_EGParameters_sustainLevel_set },
    { "curvature", _wrap_EGParameters_curvature_get, _wrap_EGParameters_curvature_set },
    { "modKnobValue", _wrap_EGParameters_modKnobValue_get, _wrap_EGParameters_modKnobValue_set },
    { "moduleIndex", _wrap_EGParameters_moduleIndex_get, _wrap_EGParameters_moduleIndex_set },
    {0,0,0}
};
static swig_lua_method swig_EGParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_EGParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EGParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EGParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EGParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EGParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EGParameters_Sf_SwigStatic = {
    "EGParameters",
    swig_EGParameters_Sf_SwigStatic_methods,
    swig_EGParameters_Sf_SwigStatic_attributes,
    swig_EGParameters_Sf_SwigStatic_constants,
    swig_EGParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EGParameters_bases[] = {0};
static const char *swig_EGParameters_base_names[] = {0};
static swig_lua_class _wrap_class_EGParameters = { "EGParameters", "EGParameters", &SWIGTYPE_p_SynthLab__EGParameters,_proxy__wrap_new_EGParameters, swig_delete_EGParameters, swig_EGParameters_methods, swig_EGParameters_attributes, &swig_EGParameters_Sf_SwigStatic, swig_EGParameters_meta, swig_EGParameters_bases, swig_EGParameters_base_names };

static int _wrap_ExciterParameters_attackTime_mSec_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ExciterParameters *arg1 = (SynthLab::ExciterParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::ExciterParameters::attackTime_mSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ExciterParameters::attackTime_mSec",1,"SynthLab::ExciterParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::ExciterParameters::attackTime_mSec",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ExciterParameters,0))){
    SWIG_fail_ptr("ExciterParameters_attackTime_mSec_set",1,SWIGTYPE_p_SynthLab__ExciterParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->attackTime_mSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExciterParameters_attackTime_mSec_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ExciterParameters *arg1 = (SynthLab::ExciterParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::ExciterParameters::attackTime_mSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ExciterParameters::attackTime_mSec",1,"SynthLab::ExciterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ExciterParameters,0))){
    SWIG_fail_ptr("ExciterParameters_attackTime_mSec_get",1,SWIGTYPE_p_SynthLab__ExciterParameters);
  }
  
  result = (double) ((arg1)->attackTime_mSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExciterParameters_holdTime_mSec_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ExciterParameters *arg1 = (SynthLab::ExciterParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::ExciterParameters::holdTime_mSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ExciterParameters::holdTime_mSec",1,"SynthLab::ExciterParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::ExciterParameters::holdTime_mSec",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ExciterParameters,0))){
    SWIG_fail_ptr("ExciterParameters_holdTime_mSec_set",1,SWIGTYPE_p_SynthLab__ExciterParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->holdTime_mSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExciterParameters_holdTime_mSec_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ExciterParameters *arg1 = (SynthLab::ExciterParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::ExciterParameters::holdTime_mSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ExciterParameters::holdTime_mSec",1,"SynthLab::ExciterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ExciterParameters,0))){
    SWIG_fail_ptr("ExciterParameters_holdTime_mSec_get",1,SWIGTYPE_p_SynthLab__ExciterParameters);
  }
  
  result = (double) ((arg1)->holdTime_mSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExciterParameters_releaseTime_mSec_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ExciterParameters *arg1 = (SynthLab::ExciterParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::ExciterParameters::releaseTime_mSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ExciterParameters::releaseTime_mSec",1,"SynthLab::ExciterParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::ExciterParameters::releaseTime_mSec",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ExciterParameters,0))){
    SWIG_fail_ptr("ExciterParameters_releaseTime_mSec_set",1,SWIGTYPE_p_SynthLab__ExciterParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->releaseTime_mSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExciterParameters_releaseTime_mSec_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ExciterParameters *arg1 = (SynthLab::ExciterParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::ExciterParameters::releaseTime_mSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ExciterParameters::releaseTime_mSec",1,"SynthLab::ExciterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ExciterParameters,0))){
    SWIG_fail_ptr("ExciterParameters_releaseTime_mSec_get",1,SWIGTYPE_p_SynthLab__ExciterParameters);
  }
  
  result = (double) ((arg1)->releaseTime_mSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ExciterParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ExciterParameters *result = 0 ;
  
  SWIG_check_num_args("SynthLab::ExciterParameters::ExciterParameters",0,0)
  result = (SynthLab::ExciterParameters *)new SynthLab::ExciterParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__ExciterParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ExciterParameters(void *obj) {
SynthLab::ExciterParameters *arg1 = (SynthLab::ExciterParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_ExciterParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ExciterParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ExciterParameters_attributes[] = {
    { "attackTime_mSec", _wrap_ExciterParameters_attackTime_mSec_get, _wrap_ExciterParameters_attackTime_mSec_set },
    { "holdTime_mSec", _wrap_ExciterParameters_holdTime_mSec_get, _wrap_ExciterParameters_holdTime_mSec_set },
    { "releaseTime_mSec", _wrap_ExciterParameters_releaseTime_mSec_get, _wrap_ExciterParameters_releaseTime_mSec_set },
    {0,0,0}
};
static swig_lua_method swig_ExciterParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_ExciterParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ExciterParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ExciterParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ExciterParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ExciterParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ExciterParameters_Sf_SwigStatic = {
    "ExciterParameters",
    swig_ExciterParameters_Sf_SwigStatic_methods,
    swig_ExciterParameters_Sf_SwigStatic_attributes,
    swig_ExciterParameters_Sf_SwigStatic_constants,
    swig_ExciterParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ExciterParameters_bases[] = {0};
static const char *swig_ExciterParameters_base_names[] = {0};
static swig_lua_class _wrap_class_ExciterParameters = { "ExciterParameters", "ExciterParameters", &SWIGTYPE_p_SynthLab__ExciterParameters,_proxy__wrap_new_ExciterParameters, swig_delete_ExciterParameters, swig_ExciterParameters_methods, swig_ExciterParameters_attributes, &swig_ExciterParameters_Sf_SwigStatic, swig_ExciterParameters_meta, swig_ExciterParameters_bases, swig_ExciterParameters_base_names };

static int _wrap_FM_OSC_MIN_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::FM_OSC_MIN",0,0)
  result = (double)(double)SynthLab::FM_OSC_MIN;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FM_OSC_MAX_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::FM_OSC_MAX",0,0)
  result = (double)(double)SynthLab::FM_OSC_MAX;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FM_OSC_INPUTS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::FM_OSC_INPUTS",0,0)
  result = (uint32_t)SynthLab::FM_OSC_INPUTS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FM_OSC_OUTPUTS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::FM_OSC_OUTPUTS",0,0)
  result = (uint32_t)SynthLab::FM_OSC_OUTPUTS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FMOperatorParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *result = 0 ;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::FMOperatorParameters",0,0)
  result = (SynthLab::FMOperatorParameters *)new SynthLab::FMOperatorParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__FMOperatorParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_waveIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::waveIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::waveIndex",1,"SynthLab::FMOperatorParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::FMOperatorParameters::waveIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_waveIndex_set",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("FMOperatorParameters_waveIndex_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->waveIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_waveIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::waveIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::waveIndex",1,"SynthLab::FMOperatorParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_waveIndex_get",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  result =  ((arg1)->waveIndex);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_octaveDetune_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::octaveDetune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::octaveDetune",1,"SynthLab::FMOperatorParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::FMOperatorParameters::octaveDetune",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_octaveDetune_set",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->octaveDetune = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_octaveDetune_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::octaveDetune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::octaveDetune",1,"SynthLab::FMOperatorParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_octaveDetune_get",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  result = (double) ((arg1)->octaveDetune);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_coarseDetune_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::coarseDetune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::coarseDetune",1,"SynthLab::FMOperatorParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::FMOperatorParameters::coarseDetune",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_coarseDetune_set",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->coarseDetune = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_coarseDetune_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::coarseDetune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::coarseDetune",1,"SynthLab::FMOperatorParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_coarseDetune_get",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  result = (double) ((arg1)->coarseDetune);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_fineDetune_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::fineDetune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::fineDetune",1,"SynthLab::FMOperatorParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::FMOperatorParameters::fineDetune",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_fineDetune_set",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->fineDetune = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_fineDetune_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::fineDetune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::fineDetune",1,"SynthLab::FMOperatorParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_fineDetune_get",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  result = (double) ((arg1)->fineDetune);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_unisonDetune_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::unisonDetune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::unisonDetune",1,"SynthLab::FMOperatorParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::FMOperatorParameters::unisonDetune",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_unisonDetune_set",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->unisonDetune = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_unisonDetune_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::unisonDetune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::unisonDetune",1,"SynthLab::FMOperatorParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_unisonDetune_get",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  result = (double) ((arg1)->unisonDetune);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_outputAmplitude_dB_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::outputAmplitude_dB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::outputAmplitude_dB",1,"SynthLab::FMOperatorParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::FMOperatorParameters::outputAmplitude_dB",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_outputAmplitude_dB_set",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->outputAmplitude_dB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_outputAmplitude_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::outputAmplitude_dB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::outputAmplitude_dB",1,"SynthLab::FMOperatorParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_outputAmplitude_dB_get",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  result = (double) ((arg1)->outputAmplitude_dB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_oscillatorShape_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::oscillatorShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::oscillatorShape",1,"SynthLab::FMOperatorParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::FMOperatorParameters::oscillatorShape",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_oscillatorShape_set",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->oscillatorShape = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_oscillatorShape_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::oscillatorShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::oscillatorShape",1,"SynthLab::FMOperatorParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_oscillatorShape_get",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  result = (double) ((arg1)->oscillatorShape);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_panValue_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::panValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::panValue",1,"SynthLab::FMOperatorParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::FMOperatorParameters::panValue",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_panValue_set",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->panValue = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_panValue_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::panValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::panValue",1,"SynthLab::FMOperatorParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_panValue_get",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  result = (double) ((arg1)->panValue);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_phaseModIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::phaseModIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::phaseModIndex",1,"SynthLab::FMOperatorParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::FMOperatorParameters::phaseModIndex",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_phaseModIndex_set",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->phaseModIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_phaseModIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::phaseModIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::phaseModIndex",1,"SynthLab::FMOperatorParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_phaseModIndex_get",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  result = (double) ((arg1)->phaseModIndex);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_modKnobValue_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::modKnobValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::modKnobValue",1,"SynthLab::FMOperatorParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::FMOperatorParameters::modKnobValue",2,"double [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_modKnobValue_set",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FMOperatorParameters_modKnobValue_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->modKnobValue;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_modKnobValue_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::modKnobValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::modKnobValue",1,"SynthLab::FMOperatorParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_modKnobValue_get",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  result = (double *)(double *) ((arg1)->modKnobValue);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_moduleIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::moduleIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::moduleIndex",1,"SynthLab::FMOperatorParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::FMOperatorParameters::moduleIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_moduleIndex_set",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("FMOperatorParameters_moduleIndex_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->moduleIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_moduleIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::moduleIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::moduleIndex",1,"SynthLab::FMOperatorParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_moduleIndex_get",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  result =  ((arg1)->moduleIndex);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_dxEGParameters_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  SynthLab::EGParameters *arg2 = (SynthLab::EGParameters *) 0 ;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::dxEGParameters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::dxEGParameters",1,"SynthLab::FMOperatorParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::FMOperatorParameters::dxEGParameters",2,"SynthLab::EGParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_dxEGParameters_set",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__EGParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_dxEGParameters_set",2,SWIGTYPE_p_SynthLab__EGParameters);
  }
  
  if (arg1) (arg1)->dxEGParameters = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_dxEGParameters_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  SynthLab::EGParameters *result = 0 ;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::dxEGParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::dxEGParameters",1,"SynthLab::FMOperatorParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_dxEGParameters_get",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  result = (SynthLab::EGParameters *)& ((arg1)->dxEGParameters);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__EGParameters,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_ratio_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::ratio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::ratio",1,"SynthLab::FMOperatorParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::FMOperatorParameters::ratio",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_ratio_set",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->ratio = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperatorParameters_ratio_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::FMOperatorParameters::ratio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperatorParameters::ratio",1,"SynthLab::FMOperatorParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperatorParameters,0))){
    SWIG_fail_ptr("FMOperatorParameters_ratio_get",1,SWIGTYPE_p_SynthLab__FMOperatorParameters);
  }
  
  result = (double) ((arg1)->ratio);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FMOperatorParameters(void *obj) {
SynthLab::FMOperatorParameters *arg1 = (SynthLab::FMOperatorParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_FMOperatorParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FMOperatorParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FMOperatorParameters_attributes[] = {
    { "waveIndex", _wrap_FMOperatorParameters_waveIndex_get, _wrap_FMOperatorParameters_waveIndex_set },
    { "octaveDetune", _wrap_FMOperatorParameters_octaveDetune_get, _wrap_FMOperatorParameters_octaveDetune_set },
    { "coarseDetune", _wrap_FMOperatorParameters_coarseDetune_get, _wrap_FMOperatorParameters_coarseDetune_set },
    { "fineDetune", _wrap_FMOperatorParameters_fineDetune_get, _wrap_FMOperatorParameters_fineDetune_set },
    { "unisonDetune", _wrap_FMOperatorParameters_unisonDetune_get, _wrap_FMOperatorParameters_unisonDetune_set },
    { "outputAmplitude_dB", _wrap_FMOperatorParameters_outputAmplitude_dB_get, _wrap_FMOperatorParameters_outputAmplitude_dB_set },
    { "oscillatorShape", _wrap_FMOperatorParameters_oscillatorShape_get, _wrap_FMOperatorParameters_oscillatorShape_set },
    { "panValue", _wrap_FMOperatorParameters_panValue_get, _wrap_FMOperatorParameters_panValue_set },
    { "phaseModIndex", _wrap_FMOperatorParameters_phaseModIndex_get, _wrap_FMOperatorParameters_phaseModIndex_set },
    { "modKnobValue", _wrap_FMOperatorParameters_modKnobValue_get, _wrap_FMOperatorParameters_modKnobValue_set },
    { "moduleIndex", _wrap_FMOperatorParameters_moduleIndex_get, _wrap_FMOperatorParameters_moduleIndex_set },
    { "dxEGParameters", _wrap_FMOperatorParameters_dxEGParameters_get, _wrap_FMOperatorParameters_dxEGParameters_set },
    { "ratio", _wrap_FMOperatorParameters_ratio_get, _wrap_FMOperatorParameters_ratio_set },
    {0,0,0}
};
static swig_lua_method swig_FMOperatorParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_FMOperatorParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FMOperatorParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FMOperatorParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FMOperatorParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FMOperatorParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FMOperatorParameters_Sf_SwigStatic = {
    "FMOperatorParameters",
    swig_FMOperatorParameters_Sf_SwigStatic_methods,
    swig_FMOperatorParameters_Sf_SwigStatic_attributes,
    swig_FMOperatorParameters_Sf_SwigStatic_constants,
    swig_FMOperatorParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FMOperatorParameters_bases[] = {0};
static const char *swig_FMOperatorParameters_base_names[] = {0};
static swig_lua_class _wrap_class_FMOperatorParameters = { "FMOperatorParameters", "FMOperatorParameters", &SWIGTYPE_p_SynthLab__FMOperatorParameters,_proxy__wrap_new_FMOperatorParameters, swig_delete_FMOperatorParameters, swig_FMOperatorParameters_methods, swig_FMOperatorParameters_attributes, &swig_FMOperatorParameters_Sf_SwigStatic, swig_FMOperatorParameters_meta, swig_FMOperatorParameters_bases, swig_FMOperatorParameters_base_names };

static int _wrap_DCA_AUDIO_INPUTS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::DCA_AUDIO_INPUTS",0,0)
  result = (uint32_t)SynthLab::DCA_AUDIO_INPUTS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCA_AUDIO_OUTPUTS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::DCA_AUDIO_OUTPUTS",0,0)
  result = (uint32_t)SynthLab::DCA_AUDIO_OUTPUTS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DCAParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DCAParameters *result = 0 ;
  
  SWIG_check_num_args("SynthLab::DCAParameters::DCAParameters",0,0)
  result = (SynthLab::DCAParameters *)new SynthLab::DCAParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__DCAParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCAParameters_gainValue_dB_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DCAParameters *arg1 = (SynthLab::DCAParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::DCAParameters::gainValue_dB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DCAParameters::gainValue_dB",1,"SynthLab::DCAParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::DCAParameters::gainValue_dB",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DCAParameters,0))){
    SWIG_fail_ptr("DCAParameters_gainValue_dB_set",1,SWIGTYPE_p_SynthLab__DCAParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->gainValue_dB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCAParameters_gainValue_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DCAParameters *arg1 = (SynthLab::DCAParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::DCAParameters::gainValue_dB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DCAParameters::gainValue_dB",1,"SynthLab::DCAParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DCAParameters,0))){
    SWIG_fail_ptr("DCAParameters_gainValue_dB_get",1,SWIGTYPE_p_SynthLab__DCAParameters);
  }
  
  result = (double) ((arg1)->gainValue_dB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCAParameters_panValue_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DCAParameters *arg1 = (SynthLab::DCAParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::DCAParameters::panValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DCAParameters::panValue",1,"SynthLab::DCAParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::DCAParameters::panValue",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DCAParameters,0))){
    SWIG_fail_ptr("DCAParameters_panValue_set",1,SWIGTYPE_p_SynthLab__DCAParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->panValue = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCAParameters_panValue_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DCAParameters *arg1 = (SynthLab::DCAParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::DCAParameters::panValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DCAParameters::panValue",1,"SynthLab::DCAParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DCAParameters,0))){
    SWIG_fail_ptr("DCAParameters_panValue_get",1,SWIGTYPE_p_SynthLab__DCAParameters);
  }
  
  result = (double) ((arg1)->panValue);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCAParameters_ampEGIntensity_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DCAParameters *arg1 = (SynthLab::DCAParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::DCAParameters::ampEGIntensity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DCAParameters::ampEGIntensity",1,"SynthLab::DCAParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::DCAParameters::ampEGIntensity",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DCAParameters,0))){
    SWIG_fail_ptr("DCAParameters_ampEGIntensity_set",1,SWIGTYPE_p_SynthLab__DCAParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->ampEGIntensity = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCAParameters_ampEGIntensity_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DCAParameters *arg1 = (SynthLab::DCAParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::DCAParameters::ampEGIntensity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DCAParameters::ampEGIntensity",1,"SynthLab::DCAParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DCAParameters,0))){
    SWIG_fail_ptr("DCAParameters_ampEGIntensity_get",1,SWIGTYPE_p_SynthLab__DCAParameters);
  }
  
  result = (double) ((arg1)->ampEGIntensity);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCAParameters_ampModIntensity_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DCAParameters *arg1 = (SynthLab::DCAParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::DCAParameters::ampModIntensity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DCAParameters::ampModIntensity",1,"SynthLab::DCAParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::DCAParameters::ampModIntensity",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DCAParameters,0))){
    SWIG_fail_ptr("DCAParameters_ampModIntensity_set",1,SWIGTYPE_p_SynthLab__DCAParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->ampModIntensity = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCAParameters_ampModIntensity_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DCAParameters *arg1 = (SynthLab::DCAParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::DCAParameters::ampModIntensity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DCAParameters::ampModIntensity",1,"SynthLab::DCAParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DCAParameters,0))){
    SWIG_fail_ptr("DCAParameters_ampModIntensity_get",1,SWIGTYPE_p_SynthLab__DCAParameters);
  }
  
  result = (double) ((arg1)->ampModIntensity);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCAParameters_panModIntensity_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DCAParameters *arg1 = (SynthLab::DCAParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::DCAParameters::panModIntensity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DCAParameters::panModIntensity",1,"SynthLab::DCAParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::DCAParameters::panModIntensity",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DCAParameters,0))){
    SWIG_fail_ptr("DCAParameters_panModIntensity_set",1,SWIGTYPE_p_SynthLab__DCAParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->panModIntensity = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCAParameters_panModIntensity_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DCAParameters *arg1 = (SynthLab::DCAParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::DCAParameters::panModIntensity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DCAParameters::panModIntensity",1,"SynthLab::DCAParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DCAParameters,0))){
    SWIG_fail_ptr("DCAParameters_panModIntensity_get",1,SWIGTYPE_p_SynthLab__DCAParameters);
  }
  
  result = (double) ((arg1)->panModIntensity);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCAParameters_moduleIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DCAParameters *arg1 = (SynthLab::DCAParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::DCAParameters::moduleIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DCAParameters::moduleIndex",1,"SynthLab::DCAParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DCAParameters::moduleIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DCAParameters,0))){
    SWIG_fail_ptr("DCAParameters_moduleIndex_set",1,SWIGTYPE_p_SynthLab__DCAParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("DCAParameters_moduleIndex_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->moduleIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCAParameters_moduleIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DCAParameters *arg1 = (SynthLab::DCAParameters *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::DCAParameters::moduleIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DCAParameters::moduleIndex",1,"SynthLab::DCAParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DCAParameters,0))){
    SWIG_fail_ptr("DCAParameters_moduleIndex_get",1,SWIGTYPE_p_SynthLab__DCAParameters);
  }
  
  result =  ((arg1)->moduleIndex);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DCAParameters(void *obj) {
SynthLab::DCAParameters *arg1 = (SynthLab::DCAParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_DCAParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DCAParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DCAParameters_attributes[] = {
    { "gainValue_dB", _wrap_DCAParameters_gainValue_dB_get, _wrap_DCAParameters_gainValue_dB_set },
    { "panValue", _wrap_DCAParameters_panValue_get, _wrap_DCAParameters_panValue_set },
    { "ampEGIntensity", _wrap_DCAParameters_ampEGIntensity_get, _wrap_DCAParameters_ampEGIntensity_set },
    { "ampModIntensity", _wrap_DCAParameters_ampModIntensity_get, _wrap_DCAParameters_ampModIntensity_set },
    { "panModIntensity", _wrap_DCAParameters_panModIntensity_get, _wrap_DCAParameters_panModIntensity_set },
    { "moduleIndex", _wrap_DCAParameters_moduleIndex_get, _wrap_DCAParameters_moduleIndex_set },
    {0,0,0}
};
static swig_lua_method swig_DCAParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_DCAParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DCAParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DCAParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DCAParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DCAParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DCAParameters_Sf_SwigStatic = {
    "DCAParameters",
    swig_DCAParameters_Sf_SwigStatic_methods,
    swig_DCAParameters_Sf_SwigStatic_attributes,
    swig_DCAParameters_Sf_SwigStatic_constants,
    swig_DCAParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DCAParameters_bases[] = {0};
static const char *swig_DCAParameters_base_names[] = {0};
static swig_lua_class _wrap_class_DCAParameters = { "DCAParameters", "DCAParameters", &SWIGTYPE_p_SynthLab__DCAParameters,_proxy__wrap_new_DCAParameters, swig_delete_DCAParameters, swig_DCAParameters_methods, swig_DCAParameters_attributes, &swig_DCAParameters_Sf_SwigStatic, swig_DCAParameters_meta, swig_DCAParameters_bases, swig_DCAParameters_base_names };

static int _wrap_LFO_FCMOD_MIN_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::LFO_FCMOD_MIN",0,0)
  result = (double)(double)SynthLab::LFO_FCMOD_MIN;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_FCMOD_MAX_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::LFO_FCMOD_MAX",0,0)
  result = (double)(double)SynthLab::LFO_FCMOD_MAX;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_RANGE_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::LFO_RANGE",0,0)
  result = (double)(double)SynthLab::LFO_RANGE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_HALF_RANGE_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::LFO_HALF_RANGE",0,0)
  result = (double)(double)SynthLab::LFO_HALF_RANGE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MAX_LFO_DELAY_MSEC_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::MAX_LFO_DELAY_MSEC",0,0)
  result = (double)(double)SynthLab::MAX_LFO_DELAY_MSEC;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MAX_LFO_FADEIN_MSEC_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SynthLab::MAX_LFO_FADEIN_MSEC",0,0)
  result = (double)(double)SynthLab::MAX_LFO_FADEIN_MSEC;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NUM_FMLFO_OPS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::NUM_FMLFO_OPS",0,0)
  result = (uint32_t)SynthLab::NUM_FMLFO_OPS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFOParameters_waveformIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LFOParameters *arg1 = (SynthLab::LFOParameters *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::LFOParameters::waveformIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LFOParameters::waveformIndex",1,"SynthLab::LFOParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LFOParameters::waveformIndex",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LFOParameters,0))){
    SWIG_fail_ptr("LFOParameters_waveformIndex_set",1,SWIGTYPE_p_SynthLab__LFOParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("LFOParameters_waveformIndex_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->waveformIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFOParameters_waveformIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LFOParameters *arg1 = (SynthLab::LFOParameters *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("SynthLab::LFOParameters::waveformIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LFOParameters::waveformIndex",1,"SynthLab::LFOParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LFOParameters,0))){
    SWIG_fail_ptr("LFOParameters_waveformIndex_get",1,SWIGTYPE_p_SynthLab__LFOParameters);
  }
  
  result =  ((arg1)->waveformIndex);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFOParameters_modeIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LFOParameters *arg1 = (SynthLab::LFOParameters *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::LFOParameters::modeIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LFOParameters::modeIndex",1,"SynthLab::LFOParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LFOParameters::modeIndex",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LFOParameters,0))){
    SWIG_fail_ptr("LFOParameters_modeIndex_set",1,SWIGTYPE_p_SynthLab__LFOParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("LFOParameters_modeIndex_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->modeIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFOParameters_modeIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LFOParameters *arg1 = (SynthLab::LFOParameters *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("SynthLab::LFOParameters::modeIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LFOParameters::modeIndex",1,"SynthLab::LFOParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LFOParameters,0))){
    SWIG_fail_ptr("LFOParameters_modeIndex_get",1,SWIGTYPE_p_SynthLab__LFOParameters);
  }
  
  result =  ((arg1)->modeIndex);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFOParameters_frequency_Hz_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LFOParameters *arg1 = (SynthLab::LFOParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::LFOParameters::frequency_Hz",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LFOParameters::frequency_Hz",1,"SynthLab::LFOParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::LFOParameters::frequency_Hz",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LFOParameters,0))){
    SWIG_fail_ptr("LFOParameters_frequency_Hz_set",1,SWIGTYPE_p_SynthLab__LFOParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->frequency_Hz = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFOParameters_frequency_Hz_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LFOParameters *arg1 = (SynthLab::LFOParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::LFOParameters::frequency_Hz",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LFOParameters::frequency_Hz",1,"SynthLab::LFOParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LFOParameters,0))){
    SWIG_fail_ptr("LFOParameters_frequency_Hz_get",1,SWIGTYPE_p_SynthLab__LFOParameters);
  }
  
  result = (double) ((arg1)->frequency_Hz);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFOParameters_outputAmplitude_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LFOParameters *arg1 = (SynthLab::LFOParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::LFOParameters::outputAmplitude",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LFOParameters::outputAmplitude",1,"SynthLab::LFOParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::LFOParameters::outputAmplitude",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LFOParameters,0))){
    SWIG_fail_ptr("LFOParameters_outputAmplitude_set",1,SWIGTYPE_p_SynthLab__LFOParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->outputAmplitude = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFOParameters_outputAmplitude_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LFOParameters *arg1 = (SynthLab::LFOParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::LFOParameters::outputAmplitude",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LFOParameters::outputAmplitude",1,"SynthLab::LFOParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LFOParameters,0))){
    SWIG_fail_ptr("LFOParameters_outputAmplitude_get",1,SWIGTYPE_p_SynthLab__LFOParameters);
  }
  
  result = (double) ((arg1)->outputAmplitude);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFOParameters_quantize_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LFOParameters *arg1 = (SynthLab::LFOParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::LFOParameters::quantize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LFOParameters::quantize",1,"SynthLab::LFOParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LFOParameters::quantize",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LFOParameters,0))){
    SWIG_fail_ptr("LFOParameters_quantize_set",1,SWIGTYPE_p_SynthLab__LFOParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("LFOParameters_quantize_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->quantize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFOParameters_quantize_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LFOParameters *arg1 = (SynthLab::LFOParameters *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::LFOParameters::quantize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LFOParameters::quantize",1,"SynthLab::LFOParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LFOParameters,0))){
    SWIG_fail_ptr("LFOParameters_quantize_get",1,SWIGTYPE_p_SynthLab__LFOParameters);
  }
  
  result =  ((arg1)->quantize);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFOParameters_modKnobValue_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LFOParameters *arg1 = (SynthLab::LFOParameters *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::LFOParameters::modKnobValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LFOParameters::modKnobValue",1,"SynthLab::LFOParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::LFOParameters::modKnobValue",2,"double [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LFOParameters,0))){
    SWIG_fail_ptr("LFOParameters_modKnobValue_set",1,SWIGTYPE_p_SynthLab__LFOParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("LFOParameters_modKnobValue_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->modKnobValue;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFOParameters_modKnobValue_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LFOParameters *arg1 = (SynthLab::LFOParameters *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::LFOParameters::modKnobValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LFOParameters::modKnobValue",1,"SynthLab::LFOParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LFOParameters,0))){
    SWIG_fail_ptr("LFOParameters_modKnobValue_get",1,SWIGTYPE_p_SynthLab__LFOParameters);
  }
  
  result = (double *)(double *) ((arg1)->modKnobValue);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFOParameters_moduleIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LFOParameters *arg1 = (SynthLab::LFOParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::LFOParameters::moduleIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LFOParameters::moduleIndex",1,"SynthLab::LFOParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LFOParameters::moduleIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LFOParameters,0))){
    SWIG_fail_ptr("LFOParameters_moduleIndex_set",1,SWIGTYPE_p_SynthLab__LFOParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("LFOParameters_moduleIndex_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->moduleIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFOParameters_moduleIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LFOParameters *arg1 = (SynthLab::LFOParameters *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::LFOParameters::moduleIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LFOParameters::moduleIndex",1,"SynthLab::LFOParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LFOParameters,0))){
    SWIG_fail_ptr("LFOParameters_moduleIndex_get",1,SWIGTYPE_p_SynthLab__LFOParameters);
  }
  
  result =  ((arg1)->moduleIndex);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LFOParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LFOParameters *result = 0 ;
  
  SWIG_check_num_args("SynthLab::LFOParameters::LFOParameters",0,0)
  result = (SynthLab::LFOParameters *)new SynthLab::LFOParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__LFOParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LFOParameters(void *obj) {
SynthLab::LFOParameters *arg1 = (SynthLab::LFOParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_LFOParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LFOParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LFOParameters_attributes[] = {
    { "waveformIndex", _wrap_LFOParameters_waveformIndex_get, _wrap_LFOParameters_waveformIndex_set },
    { "modeIndex", _wrap_LFOParameters_modeIndex_get, _wrap_LFOParameters_modeIndex_set },
    { "frequency_Hz", _wrap_LFOParameters_frequency_Hz_get, _wrap_LFOParameters_frequency_Hz_set },
    { "outputAmplitude", _wrap_LFOParameters_outputAmplitude_get, _wrap_LFOParameters_outputAmplitude_set },
    { "quantize", _wrap_LFOParameters_quantize_get, _wrap_LFOParameters_quantize_set },
    { "modKnobValue", _wrap_LFOParameters_modKnobValue_get, _wrap_LFOParameters_modKnobValue_set },
    { "moduleIndex", _wrap_LFOParameters_moduleIndex_get, _wrap_LFOParameters_moduleIndex_set },
    {0,0,0}
};
static swig_lua_method swig_LFOParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_LFOParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LFOParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LFOParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LFOParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LFOParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LFOParameters_Sf_SwigStatic = {
    "LFOParameters",
    swig_LFOParameters_Sf_SwigStatic_methods,
    swig_LFOParameters_Sf_SwigStatic_attributes,
    swig_LFOParameters_Sf_SwigStatic_constants,
    swig_LFOParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LFOParameters_bases[] = {0};
static const char *swig_LFOParameters_base_names[] = {0};
static swig_lua_class _wrap_class_LFOParameters = { "LFOParameters", "LFOParameters", &SWIGTYPE_p_SynthLab__LFOParameters,_proxy__wrap_new_LFOParameters, swig_delete_LFOParameters, swig_LFOParameters_methods, swig_LFOParameters_attributes, &swig_LFOParameters_Sf_SwigStatic, swig_LFOParameters_meta, swig_LFOParameters_bases, swig_LFOParameters_base_names };

static int _wrap_DELAY_AUDIO_INPUTS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::DELAY_AUDIO_INPUTS",0,0)
  result = (uint32_t)SynthLab::DELAY_AUDIO_INPUTS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DELAY_AUDIO_OUTPUTS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::DELAY_AUDIO_OUTPUTS",0,0)
  result = (uint32_t)SynthLab::DELAY_AUDIO_OUTPUTS;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AudioDelayParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioDelayParameters *result = 0 ;
  
  SWIG_check_num_args("SynthLab::AudioDelayParameters::AudioDelayParameters",0,0)
  result = (SynthLab::AudioDelayParameters *)new SynthLab::AudioDelayParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__AudioDelayParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDelayParameters_wetLevel_dB_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioDelayParameters *arg1 = (SynthLab::AudioDelayParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::AudioDelayParameters::wetLevel_dB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioDelayParameters::wetLevel_dB",1,"SynthLab::AudioDelayParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::AudioDelayParameters::wetLevel_dB",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioDelayParameters,0))){
    SWIG_fail_ptr("AudioDelayParameters_wetLevel_dB_set",1,SWIGTYPE_p_SynthLab__AudioDelayParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->wetLevel_dB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDelayParameters_wetLevel_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioDelayParameters *arg1 = (SynthLab::AudioDelayParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::AudioDelayParameters::wetLevel_dB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioDelayParameters::wetLevel_dB",1,"SynthLab::AudioDelayParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioDelayParameters,0))){
    SWIG_fail_ptr("AudioDelayParameters_wetLevel_dB_get",1,SWIGTYPE_p_SynthLab__AudioDelayParameters);
  }
  
  result = (double) ((arg1)->wetLevel_dB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDelayParameters_dryLevel_dB_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioDelayParameters *arg1 = (SynthLab::AudioDelayParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::AudioDelayParameters::dryLevel_dB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioDelayParameters::dryLevel_dB",1,"SynthLab::AudioDelayParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::AudioDelayParameters::dryLevel_dB",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioDelayParameters,0))){
    SWIG_fail_ptr("AudioDelayParameters_dryLevel_dB_set",1,SWIGTYPE_p_SynthLab__AudioDelayParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->dryLevel_dB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDelayParameters_dryLevel_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioDelayParameters *arg1 = (SynthLab::AudioDelayParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::AudioDelayParameters::dryLevel_dB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioDelayParameters::dryLevel_dB",1,"SynthLab::AudioDelayParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioDelayParameters,0))){
    SWIG_fail_ptr("AudioDelayParameters_dryLevel_dB_get",1,SWIGTYPE_p_SynthLab__AudioDelayParameters);
  }
  
  result = (double) ((arg1)->dryLevel_dB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDelayParameters_feedback_Pct_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioDelayParameters *arg1 = (SynthLab::AudioDelayParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::AudioDelayParameters::feedback_Pct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioDelayParameters::feedback_Pct",1,"SynthLab::AudioDelayParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::AudioDelayParameters::feedback_Pct",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioDelayParameters,0))){
    SWIG_fail_ptr("AudioDelayParameters_feedback_Pct_set",1,SWIGTYPE_p_SynthLab__AudioDelayParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->feedback_Pct = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDelayParameters_feedback_Pct_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioDelayParameters *arg1 = (SynthLab::AudioDelayParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::AudioDelayParameters::feedback_Pct",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioDelayParameters::feedback_Pct",1,"SynthLab::AudioDelayParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioDelayParameters,0))){
    SWIG_fail_ptr("AudioDelayParameters_feedback_Pct_get",1,SWIGTYPE_p_SynthLab__AudioDelayParameters);
  }
  
  result = (double) ((arg1)->feedback_Pct);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDelayParameters_leftDelay_mSec_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioDelayParameters *arg1 = (SynthLab::AudioDelayParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::AudioDelayParameters::leftDelay_mSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioDelayParameters::leftDelay_mSec",1,"SynthLab::AudioDelayParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::AudioDelayParameters::leftDelay_mSec",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioDelayParameters,0))){
    SWIG_fail_ptr("AudioDelayParameters_leftDelay_mSec_set",1,SWIGTYPE_p_SynthLab__AudioDelayParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->leftDelay_mSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDelayParameters_leftDelay_mSec_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioDelayParameters *arg1 = (SynthLab::AudioDelayParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::AudioDelayParameters::leftDelay_mSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioDelayParameters::leftDelay_mSec",1,"SynthLab::AudioDelayParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioDelayParameters,0))){
    SWIG_fail_ptr("AudioDelayParameters_leftDelay_mSec_get",1,SWIGTYPE_p_SynthLab__AudioDelayParameters);
  }
  
  result = (double) ((arg1)->leftDelay_mSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDelayParameters_rightDelay_mSec_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioDelayParameters *arg1 = (SynthLab::AudioDelayParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::AudioDelayParameters::rightDelay_mSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioDelayParameters::rightDelay_mSec",1,"SynthLab::AudioDelayParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::AudioDelayParameters::rightDelay_mSec",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioDelayParameters,0))){
    SWIG_fail_ptr("AudioDelayParameters_rightDelay_mSec_set",1,SWIGTYPE_p_SynthLab__AudioDelayParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->rightDelay_mSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDelayParameters_rightDelay_mSec_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioDelayParameters *arg1 = (SynthLab::AudioDelayParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::AudioDelayParameters::rightDelay_mSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioDelayParameters::rightDelay_mSec",1,"SynthLab::AudioDelayParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioDelayParameters,0))){
    SWIG_fail_ptr("AudioDelayParameters_rightDelay_mSec_get",1,SWIGTYPE_p_SynthLab__AudioDelayParameters);
  }
  
  result = (double) ((arg1)->rightDelay_mSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AudioDelayParameters(void *obj) {
SynthLab::AudioDelayParameters *arg1 = (SynthLab::AudioDelayParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_AudioDelayParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AudioDelayParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AudioDelayParameters_attributes[] = {
    { "wetLevel_dB", _wrap_AudioDelayParameters_wetLevel_dB_get, _wrap_AudioDelayParameters_wetLevel_dB_set },
    { "dryLevel_dB", _wrap_AudioDelayParameters_dryLevel_dB_get, _wrap_AudioDelayParameters_dryLevel_dB_set },
    { "feedback_Pct", _wrap_AudioDelayParameters_feedback_Pct_get, _wrap_AudioDelayParameters_feedback_Pct_set },
    { "leftDelay_mSec", _wrap_AudioDelayParameters_leftDelay_mSec_get, _wrap_AudioDelayParameters_leftDelay_mSec_set },
    { "rightDelay_mSec", _wrap_AudioDelayParameters_rightDelay_mSec_get, _wrap_AudioDelayParameters_rightDelay_mSec_set },
    {0,0,0}
};
static swig_lua_method swig_AudioDelayParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_AudioDelayParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AudioDelayParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AudioDelayParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AudioDelayParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AudioDelayParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AudioDelayParameters_Sf_SwigStatic = {
    "AudioDelayParameters",
    swig_AudioDelayParameters_Sf_SwigStatic_methods,
    swig_AudioDelayParameters_Sf_SwigStatic_attributes,
    swig_AudioDelayParameters_Sf_SwigStatic_constants,
    swig_AudioDelayParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AudioDelayParameters_bases[] = {0};
static const char *swig_AudioDelayParameters_base_names[] = {0};
static swig_lua_class _wrap_class_AudioDelayParameters = { "AudioDelayParameters", "AudioDelayParameters", &SWIGTYPE_p_SynthLab__AudioDelayParameters,_proxy__wrap_new_AudioDelayParameters, swig_delete_AudioDelayParameters, swig_AudioDelayParameters_methods, swig_AudioDelayParameters_attributes, &swig_AudioDelayParameters_Sf_SwigStatic, swig_AudioDelayParameters_meta, swig_AudioDelayParameters_bases, swig_AudioDelayParameters_base_names };

static int _wrap_new_SynthLabPCMSource__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabPCMSource *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthLabPCMSource::SynthLabPCMSource",0,0)
  result = (SynthLab::SynthLabPCMSource *)new SynthLab::SynthLabPCMSource();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__SynthLabPCMSource,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SynthLabPCMSource__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  bool arg4 ;
  bool arg5 ;
  SynthLab::SynthLabPCMSource *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthLabPCMSource::SynthLabPCMSource",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::SynthLabPCMSource",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::SynthLabPCMSource",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::SynthLabPCMSource",3,"double");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::SynthLabPCMSource",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::SynthLabPCMSource",5,"bool");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (SynthLab::SynthLabPCMSource *)new SynthLab::SynthLabPCMSource((char const *)arg1,(char const *)arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__SynthLabPCMSource,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SynthLabPCMSource__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  bool arg4 ;
  SynthLab::SynthLabPCMSource *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthLabPCMSource::SynthLabPCMSource",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::SynthLabPCMSource",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::SynthLabPCMSource",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::SynthLabPCMSource",3,"double");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::SynthLabPCMSource",4,"bool");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (SynthLab::SynthLabPCMSource *)new SynthLab::SynthLabPCMSource((char const *)arg1,(char const *)arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__SynthLabPCMSource,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SynthLabPCMSource__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  SynthLab::SynthLabPCMSource *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthLabPCMSource::SynthLabPCMSource",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::SynthLabPCMSource",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::SynthLabPCMSource",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::SynthLabPCMSource",3,"double");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (SynthLab::SynthLabPCMSource *)new SynthLab::SynthLabPCMSource((char const *)arg1,(char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__SynthLabPCMSource,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SynthLabPCMSource(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SynthLabPCMSource__SWIG_0(L);
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_SynthLabPCMSource__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_SynthLabPCMSource__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_SynthLabPCMSource__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SynthLabPCMSource'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::SynthLabPCMSource::SynthLabPCMSource()\n"
    "    SynthLab::SynthLabPCMSource::SynthLabPCMSource(char const *,char const *,double,bool,bool)\n"
    "    SynthLab::SynthLabPCMSource::SynthLabPCMSource(char const *,char const *,double,bool)\n"
    "    SynthLab::SynthLabPCMSource::SynthLabPCMSource(char const *,char const *,double)\n");
  lua_error(L);return 0;
}


static int _wrap_SynthLabPCMSource_init__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabPCMSource *arg1 = (SynthLab::SynthLabPCMSource *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  bool arg5 ;
  bool arg6 ;
  
  SWIG_check_num_args("SynthLab::SynthLabPCMSource::init",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::init",1,"SynthLab::SynthLabPCMSource *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::init",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::init",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::init",4,"double");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::init",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::init",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabPCMSource,0))){
    SWIG_fail_ptr("SynthLabPCMSource_init",1,SWIGTYPE_p_SynthLab__SynthLabPCMSource);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  (arg1)->init((char const *)arg2,(char const *)arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLabPCMSource_init__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabPCMSource *arg1 = (SynthLab::SynthLabPCMSource *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("SynthLab::SynthLabPCMSource::init",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::init",1,"SynthLab::SynthLabPCMSource *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::init",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::init",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::init",4,"double");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::init",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabPCMSource,0))){
    SWIG_fail_ptr("SynthLabPCMSource_init",1,SWIGTYPE_p_SynthLab__SynthLabPCMSource);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->init((char const *)arg2,(char const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLabPCMSource_init__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabPCMSource *arg1 = (SynthLab::SynthLabPCMSource *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  
  SWIG_check_num_args("SynthLab::SynthLabPCMSource::init",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::init",1,"SynthLab::SynthLabPCMSource *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::init",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::init",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::init",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabPCMSource,0))){
    SWIG_fail_ptr("SynthLabPCMSource_init",1,SWIGTYPE_p_SynthLab__SynthLabPCMSource);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->init((char const *)arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLabPCMSource_init(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthLabPCMSource, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SynthLabPCMSource_init__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthLabPCMSource, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_SynthLabPCMSource_init__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthLabPCMSource, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_SynthLabPCMSource_init__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SynthLabPCMSource_init'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::SynthLabPCMSource::init(char const *,char const *,double,bool,bool)\n"
    "    SynthLab::SynthLabPCMSource::init(char const *,char const *,double,bool)\n"
    "    SynthLab::SynthLabPCMSource::init(char const *,char const *,double)\n");
  lua_error(L);return 0;
}


static int _wrap_SynthLabPCMSource_deleteSamples(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabPCMSource *arg1 = (SynthLab::SynthLabPCMSource *) 0 ;
  
  SWIG_check_num_args("SynthLab::SynthLabPCMSource::deleteSamples",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::deleteSamples",1,"SynthLab::SynthLabPCMSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabPCMSource,0))){
    SWIG_fail_ptr("SynthLabPCMSource_deleteSamples",1,SWIGTYPE_p_SynthLab__SynthLabPCMSource);
  }
  
  (arg1)->deleteSamples();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLabPCMSource_getValidSampleCount(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabPCMSource *arg1 = (SynthLab::SynthLabPCMSource *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::SynthLabPCMSource::getValidSampleCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::getValidSampleCount",1,"SynthLab::SynthLabPCMSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabPCMSource,0))){
    SWIG_fail_ptr("SynthLabPCMSource_getValidSampleCount",1,SWIGTYPE_p_SynthLab__SynthLabPCMSource);
  }
  
  result = (arg1)->getValidSampleCount();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLabPCMSource_haveValidSamples(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabPCMSource *arg1 = (SynthLab::SynthLabPCMSource *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthLabPCMSource::haveValidSamples",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::haveValidSamples",1,"SynthLab::SynthLabPCMSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabPCMSource,0))){
    SWIG_fail_ptr("SynthLabPCMSource_haveValidSamples",1,SWIGTYPE_p_SynthLab__SynthLabPCMSource);
  }
  
  result = (bool)(arg1)->haveValidSamples();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLabPCMSource_selectSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabPCMSource *arg1 = (SynthLab::SynthLabPCMSource *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::SynthLabPCMSource::selectSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::selectSample",1,"SynthLab::SynthLabPCMSource *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::selectSample",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabPCMSource,0))){
    SWIG_fail_ptr("SynthLabPCMSource_selectSample",1,SWIGTYPE_p_SynthLab__SynthLabPCMSource);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->selectSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLabPCMSource_readSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabPCMSource *arg1 = (SynthLab::SynthLabPCMSource *) 0 ;
  double *arg2 = 0 ;
  double arg3 ;
  SynthLab::PCMSampleOutput result;
  
  SWIG_check_num_args("SynthLab::SynthLabPCMSource::readSample",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::readSample",1,"SynthLab::SynthLabPCMSource *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::readSample",2,"double &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::readSample",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabPCMSource,0))){
    SWIG_fail_ptr("SynthLabPCMSource_readSample",1,SWIGTYPE_p_SynthLab__SynthLabPCMSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("SynthLabPCMSource_readSample",2,SWIGTYPE_p_double);
  }
  
  arg3 = (double)lua_tonumber(L, 3);
  result = (arg1)->readSample(*arg2,arg3);
  {
    SynthLab::PCMSampleOutput * resultptr = new SynthLab::PCMSampleOutput((const SynthLab::PCMSampleOutput &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SynthLab__PCMSampleOutput,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLabPCMSource_setSampleLoopMode(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLabPCMSource *arg1 = (SynthLab::SynthLabPCMSource *) 0 ;
  SynthLab::SampleLoopMode arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthLabPCMSource::setSampleLoopMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::setSampleLoopMode",1,"SynthLab::SynthLabPCMSource *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthLabPCMSource::setSampleLoopMode",2,"SynthLab::SampleLoopMode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLabPCMSource,0))){
    SWIG_fail_ptr("SynthLabPCMSource_setSampleLoopMode",1,SWIGTYPE_p_SynthLab__SynthLabPCMSource);
  }
  
  arg2 = (SynthLab::SampleLoopMode)(int)lua_tonumber(L, 2);
  (arg1)->setSampleLoopMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SynthLabPCMSource(void *obj) {
SynthLab::SynthLabPCMSource *arg1 = (SynthLab::SynthLabPCMSource *) obj;
delete arg1;
}
static int _proxy__wrap_new_SynthLabPCMSource(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SynthLabPCMSource);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SynthLabPCMSource_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SynthLabPCMSource_methods[]= {
    { "init", _wrap_SynthLabPCMSource_init},
    { "deleteSamples", _wrap_SynthLabPCMSource_deleteSamples},
    { "getValidSampleCount", _wrap_SynthLabPCMSource_getValidSampleCount},
    { "haveValidSamples", _wrap_SynthLabPCMSource_haveValidSamples},
    { "selectSample", _wrap_SynthLabPCMSource_selectSample},
    { "readSample", _wrap_SynthLabPCMSource_readSample},
    { "setSampleLoopMode", _wrap_SynthLabPCMSource_setSampleLoopMode},
    {0,0}
};
static swig_lua_method swig_SynthLabPCMSource_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SynthLabPCMSource_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SynthLabPCMSource_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SynthLabPCMSource_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SynthLabPCMSource_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SynthLabPCMSource_Sf_SwigStatic = {
    "SynthLabPCMSource",
    swig_SynthLabPCMSource_Sf_SwigStatic_methods,
    swig_SynthLabPCMSource_Sf_SwigStatic_attributes,
    swig_SynthLabPCMSource_Sf_SwigStatic_constants,
    swig_SynthLabPCMSource_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SynthLabPCMSource_bases[] = {0,0};
static const char *swig_SynthLabPCMSource_base_names[] = {"SynthLab::IPCMSampleSource *",0};
static swig_lua_class _wrap_class_SynthLabPCMSource = { "SynthLabPCMSource", "SynthLabPCMSource", &SWIGTYPE_p_SynthLab__SynthLabPCMSource,_proxy__wrap_new_SynthLabPCMSource, swig_delete_SynthLabPCMSource, swig_SynthLabPCMSource_methods, swig_SynthLabPCMSource_attributes, &swig_SynthLabPCMSource_Sf_SwigStatic, swig_SynthLabPCMSource_meta, swig_SynthLabPCMSource_bases, swig_SynthLabPCMSource_base_names };

static int _wrap_new_StaticTableSource(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::StaticTableSource *result = 0 ;
  
  SWIG_check_num_args("SynthLab::StaticTableSource::StaticTableSource",0,0)
  result = (SynthLab::StaticTableSource *)new SynthLab::StaticTableSource();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__StaticTableSource,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StaticTableSource_getWaveformName(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::StaticTableSource *arg1 = (SynthLab::StaticTableSource *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("SynthLab::StaticTableSource::getWaveformName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::StaticTableSource::getWaveformName",1,"SynthLab::StaticTableSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__StaticTableSource,0))){
    SWIG_fail_ptr("StaticTableSource_getWaveformName",1,SWIGTYPE_p_SynthLab__StaticTableSource);
  }
  
  result = (char *)(arg1)->getWaveformName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StaticTableSource_selectTable(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::StaticTableSource *arg1 = (SynthLab::StaticTableSource *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::StaticTableSource::selectTable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::StaticTableSource::selectTable",1,"SynthLab::StaticTableSource *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::StaticTableSource::selectTable",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__StaticTableSource,0))){
    SWIG_fail_ptr("StaticTableSource_selectTable",1,SWIGTYPE_p_SynthLab__StaticTableSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("StaticTableSource_selectTable",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->selectTable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StaticTableSource_readWaveTable(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::StaticTableSource *arg1 = (SynthLab::StaticTableSource *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::StaticTableSource::readWaveTable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::StaticTableSource::readWaveTable",1,"SynthLab::StaticTableSource *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::StaticTableSource::readWaveTable",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__StaticTableSource,0))){
    SWIG_fail_ptr("StaticTableSource_readWaveTable",1,SWIGTYPE_p_SynthLab__StaticTableSource);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->readWaveTable(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StaticTableSource_getWaveTableLength(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::StaticTableSource *arg1 = (SynthLab::StaticTableSource *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::StaticTableSource::getWaveTableLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::StaticTableSource::getWaveTableLength",1,"SynthLab::StaticTableSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__StaticTableSource,0))){
    SWIG_fail_ptr("StaticTableSource_getWaveTableLength",1,SWIGTYPE_p_SynthLab__StaticTableSource);
  }
  
  result = (arg1)->getWaveTableLength();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StaticTableSource_addSynthLabTableSet(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::StaticTableSource *arg1 = (SynthLab::StaticTableSource *) 0 ;
  SynthLab::SynthLabTableSet *arg2 = (SynthLab::SynthLabTableSet *) 0 ;
  
  SWIG_check_num_args("SynthLab::StaticTableSource::addSynthLabTableSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::StaticTableSource::addSynthLabTableSet",1,"SynthLab::StaticTableSource *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::StaticTableSource::addSynthLabTableSet",2,"SynthLab::SynthLabTableSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__StaticTableSource,0))){
    SWIG_fail_ptr("StaticTableSource_addSynthLabTableSet",1,SWIGTYPE_p_SynthLab__StaticTableSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__SynthLabTableSet,0))){
    SWIG_fail_ptr("StaticTableSource_addSynthLabTableSet",2,SWIGTYPE_p_SynthLab__SynthLabTableSet);
  }
  
  (arg1)->addSynthLabTableSet(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StaticTableSource(void *obj) {
SynthLab::StaticTableSource *arg1 = (SynthLab::StaticTableSource *) obj;
delete arg1;
}
static int _proxy__wrap_new_StaticTableSource(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StaticTableSource);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StaticTableSource_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StaticTableSource_methods[]= {
    { "getWaveformName", _wrap_StaticTableSource_getWaveformName},
    { "selectTable", _wrap_StaticTableSource_selectTable},
    { "readWaveTable", _wrap_StaticTableSource_readWaveTable},
    { "getWaveTableLength", _wrap_StaticTableSource_getWaveTableLength},
    { "addSynthLabTableSet", _wrap_StaticTableSource_addSynthLabTableSet},
    {0,0}
};
static swig_lua_method swig_StaticTableSource_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StaticTableSource_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StaticTableSource_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StaticTableSource_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StaticTableSource_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StaticTableSource_Sf_SwigStatic = {
    "StaticTableSource",
    swig_StaticTableSource_Sf_SwigStatic_methods,
    swig_StaticTableSource_Sf_SwigStatic_attributes,
    swig_StaticTableSource_Sf_SwigStatic_constants,
    swig_StaticTableSource_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StaticTableSource_bases[] = {0,0};
static const char *swig_StaticTableSource_base_names[] = {"SynthLab::IWavetableSource *",0};
static swig_lua_class _wrap_class_StaticTableSource = { "StaticTableSource", "StaticTableSource", &SWIGTYPE_p_SynthLab__StaticTableSource,_proxy__wrap_new_StaticTableSource, swig_delete_StaticTableSource, swig_StaticTableSource_methods, swig_StaticTableSource_attributes, &swig_StaticTableSource_Sf_SwigStatic, swig_StaticTableSource_meta, swig_StaticTableSource_bases, swig_StaticTableSource_base_names };

static int _wrap_new_DrumWTSource(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DrumWTSource *result = 0 ;
  
  SWIG_check_num_args("SynthLab::DrumWTSource::DrumWTSource",0,0)
  result = (SynthLab::DrumWTSource *)new SynthLab::DrumWTSource();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__DrumWTSource,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DrumWTSource_getWaveformName(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DrumWTSource *arg1 = (SynthLab::DrumWTSource *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("SynthLab::DrumWTSource::getWaveformName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DrumWTSource::getWaveformName",1,"SynthLab::DrumWTSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DrumWTSource,0))){
    SWIG_fail_ptr("DrumWTSource_getWaveformName",1,SWIGTYPE_p_SynthLab__DrumWTSource);
  }
  
  result = (char *)(arg1)->getWaveformName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DrumWTSource_selectTable(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DrumWTSource *arg1 = (SynthLab::DrumWTSource *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::DrumWTSource::selectTable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DrumWTSource::selectTable",1,"SynthLab::DrumWTSource *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DrumWTSource::selectTable",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DrumWTSource,0))){
    SWIG_fail_ptr("DrumWTSource_selectTable",1,SWIGTYPE_p_SynthLab__DrumWTSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("DrumWTSource_selectTable",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->selectTable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DrumWTSource_readWaveTable(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DrumWTSource *arg1 = (SynthLab::DrumWTSource *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::DrumWTSource::readWaveTable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DrumWTSource::readWaveTable",1,"SynthLab::DrumWTSource *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::DrumWTSource::readWaveTable",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DrumWTSource,0))){
    SWIG_fail_ptr("DrumWTSource_readWaveTable",1,SWIGTYPE_p_SynthLab__DrumWTSource);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->readWaveTable(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DrumWTSource_getWaveTableLength(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DrumWTSource *arg1 = (SynthLab::DrumWTSource *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::DrumWTSource::getWaveTableLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DrumWTSource::getWaveTableLength",1,"SynthLab::DrumWTSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DrumWTSource,0))){
    SWIG_fail_ptr("DrumWTSource_getWaveTableLength",1,SWIGTYPE_p_SynthLab__DrumWTSource);
  }
  
  result = (arg1)->getWaveTableLength();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DrumWTSource_addWavetable__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DrumWTSource *arg1 = (SynthLab::DrumWTSource *) 0 ;
  double *arg2 = (double *) 0 ;
  uint32_t arg3 ;
  char *arg4 = (char *) 0 ;
  double arg5 ;
  uint32_t *argp3 ;
  
  SWIG_check_num_args("SynthLab::DrumWTSource::addWavetable",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DrumWTSource::addWavetable",1,"SynthLab::DrumWTSource *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::DrumWTSource::addWavetable",2,"double const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::DrumWTSource::addWavetable",3,"uint32_t");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("SynthLab::DrumWTSource::addWavetable",4,"char const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SynthLab::DrumWTSource::addWavetable",5,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DrumWTSource,0))){
    SWIG_fail_ptr("DrumWTSource_addWavetable",1,SWIGTYPE_p_SynthLab__DrumWTSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("DrumWTSource_addWavetable",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("DrumWTSource_addWavetable",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  (arg1)->addWavetable((double const *)arg2,arg3,(char const *)arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DrumWTSource_addWavetable__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DrumWTSource *arg1 = (SynthLab::DrumWTSource *) 0 ;
  double *arg2 = (double *) 0 ;
  uint32_t arg3 ;
  char *arg4 = (char *) 0 ;
  uint32_t *argp3 ;
  
  SWIG_check_num_args("SynthLab::DrumWTSource::addWavetable",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DrumWTSource::addWavetable",1,"SynthLab::DrumWTSource *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::DrumWTSource::addWavetable",2,"double const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::DrumWTSource::addWavetable",3,"uint32_t");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("SynthLab::DrumWTSource::addWavetable",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DrumWTSource,0))){
    SWIG_fail_ptr("DrumWTSource_addWavetable",1,SWIGTYPE_p_SynthLab__DrumWTSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("DrumWTSource_addWavetable",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("DrumWTSource_addWavetable",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  arg4 = (char *)lua_tostring(L, 4);
  (arg1)->addWavetable((double const *)arg2,arg3,(char const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DrumWTSource_addWavetable__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DrumWTSource *arg1 = (SynthLab::DrumWTSource *) 0 ;
  uint64_t *arg2 = (uint64_t *) 0 ;
  uint32_t arg3 ;
  char *arg4 = (char *) 0 ;
  double arg5 ;
  uint32_t *argp3 ;
  
  SWIG_check_num_args("SynthLab::DrumWTSource::addWavetable",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DrumWTSource::addWavetable",1,"SynthLab::DrumWTSource *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::DrumWTSource::addWavetable",2,"uint64_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::DrumWTSource::addWavetable",3,"uint32_t");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("SynthLab::DrumWTSource::addWavetable",4,"char const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SynthLab::DrumWTSource::addWavetable",5,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DrumWTSource,0))){
    SWIG_fail_ptr("DrumWTSource_addWavetable",1,SWIGTYPE_p_SynthLab__DrumWTSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint64_t,0))){
    SWIG_fail_ptr("DrumWTSource_addWavetable",2,SWIGTYPE_p_uint64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("DrumWTSource_addWavetable",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  (arg1)->addWavetable((uint64_t const *)arg2,arg3,(char const *)arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DrumWTSource_addWavetable__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DrumWTSource *arg1 = (SynthLab::DrumWTSource *) 0 ;
  uint64_t *arg2 = (uint64_t *) 0 ;
  uint32_t arg3 ;
  char *arg4 = (char *) 0 ;
  uint32_t *argp3 ;
  
  SWIG_check_num_args("SynthLab::DrumWTSource::addWavetable",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DrumWTSource::addWavetable",1,"SynthLab::DrumWTSource *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::DrumWTSource::addWavetable",2,"uint64_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::DrumWTSource::addWavetable",3,"uint32_t");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("SynthLab::DrumWTSource::addWavetable",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DrumWTSource,0))){
    SWIG_fail_ptr("DrumWTSource_addWavetable",1,SWIGTYPE_p_SynthLab__DrumWTSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint64_t,0))){
    SWIG_fail_ptr("DrumWTSource_addWavetable",2,SWIGTYPE_p_uint64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("DrumWTSource_addWavetable",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  arg4 = (char *)lua_tostring(L, 4);
  (arg1)->addWavetable((uint64_t const *)arg2,arg3,(char const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DrumWTSource_addWavetable(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__DrumWTSource, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_DrumWTSource_addWavetable__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__DrumWTSource, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint64_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_DrumWTSource_addWavetable__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__DrumWTSource, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint64_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_DrumWTSource_addWavetable__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__DrumWTSource, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_DrumWTSource_addWavetable__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DrumWTSource_addWavetable'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::DrumWTSource::addWavetable(double const *,uint32_t,char const *,double)\n"
    "    SynthLab::DrumWTSource::addWavetable(double const *,uint32_t,char const *)\n"
    "    SynthLab::DrumWTSource::addWavetable(uint64_t const *,uint32_t,char const *,double)\n"
    "    SynthLab::DrumWTSource::addWavetable(uint64_t const *,uint32_t,char const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_DrumWTSource(void *obj) {
SynthLab::DrumWTSource *arg1 = (SynthLab::DrumWTSource *) obj;
delete arg1;
}
static int _proxy__wrap_new_DrumWTSource(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DrumWTSource);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DrumWTSource_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DrumWTSource_methods[]= {
    { "getWaveformName", _wrap_DrumWTSource_getWaveformName},
    { "selectTable", _wrap_DrumWTSource_selectTable},
    { "readWaveTable", _wrap_DrumWTSource_readWaveTable},
    { "getWaveTableLength", _wrap_DrumWTSource_getWaveTableLength},
    { "addWavetable", _wrap_DrumWTSource_addWavetable},
    {0,0}
};
static swig_lua_method swig_DrumWTSource_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DrumWTSource_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DrumWTSource_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DrumWTSource_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DrumWTSource_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DrumWTSource_Sf_SwigStatic = {
    "DrumWTSource",
    swig_DrumWTSource_Sf_SwigStatic_methods,
    swig_DrumWTSource_Sf_SwigStatic_attributes,
    swig_DrumWTSource_Sf_SwigStatic_constants,
    swig_DrumWTSource_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DrumWTSource_bases[] = {0,0};
static const char *swig_DrumWTSource_base_names[] = {"SynthLab::IWavetableSource *",0};
static swig_lua_class _wrap_class_DrumWTSource = { "DrumWTSource", "DrumWTSource", &SWIGTYPE_p_SynthLab__DrumWTSource,_proxy__wrap_new_DrumWTSource, swig_delete_DrumWTSource, swig_DrumWTSource_methods, swig_DrumWTSource_attributes, &swig_DrumWTSource_Sf_SwigStatic, swig_DrumWTSource_meta, swig_DrumWTSource_bases, swig_DrumWTSource_base_names };

static int _wrap_MorphBankData_bankName_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MorphBankData *arg1 = (SynthLab::MorphBankData *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("SynthLab::MorphBankData::bankName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MorphBankData::bankName",1,"SynthLab::MorphBankData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MorphBankData::bankName",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MorphBankData,0))){
    SWIG_fail_ptr("MorphBankData_bankName_set",1,SWIGTYPE_p_SynthLab__MorphBankData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("MorphBankData_bankName_set",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->bankName = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphBankData_bankName_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MorphBankData *arg1 = (SynthLab::MorphBankData *) 0 ;
  std::string result;
  
  SWIG_check_num_args("SynthLab::MorphBankData::bankName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MorphBankData::bankName",1,"SynthLab::MorphBankData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MorphBankData,0))){
    SWIG_fail_ptr("MorphBankData_bankName_get",1,SWIGTYPE_p_SynthLab__MorphBankData);
  }
  
  result =  ((arg1)->bankName);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphBankData_numTables_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MorphBankData *arg1 = (SynthLab::MorphBankData *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::MorphBankData::numTables",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MorphBankData::numTables",1,"SynthLab::MorphBankData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MorphBankData::numTables",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MorphBankData,0))){
    SWIG_fail_ptr("MorphBankData_numTables_set",1,SWIGTYPE_p_SynthLab__MorphBankData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("MorphBankData_numTables_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->numTables = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphBankData_numTables_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MorphBankData *arg1 = (SynthLab::MorphBankData *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::MorphBankData::numTables",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MorphBankData::numTables",1,"SynthLab::MorphBankData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MorphBankData,0))){
    SWIG_fail_ptr("MorphBankData_numTables_get",1,SWIGTYPE_p_SynthLab__MorphBankData);
  }
  
  result =  ((arg1)->numTables);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphBankData_tableNames_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MorphBankData *arg1 = (SynthLab::MorphBankData *) 0 ;
  std::string *arg2 ;
  
  SWIG_check_num_args("SynthLab::MorphBankData::tableNames",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MorphBankData::tableNames",1,"SynthLab::MorphBankData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::MorphBankData::tableNames",2,"std::string [SynthLab::MODULE_STRINGS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MorphBankData,0))){
    SWIG_fail_ptr("MorphBankData_tableNames_set",1,SWIGTYPE_p_SynthLab__MorphBankData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("MorphBankData_tableNames_set",2,SWIGTYPE_p_std__string);
  }
  
  {
    size_t ii;
    std::string *b = (std::string *) arg1->tableNames;
    for (ii = 0; ii < (size_t)SynthLab::MODULE_STRINGS; ii++) b[ii] = *((std::string *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphBankData_tableNames_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MorphBankData *arg1 = (SynthLab::MorphBankData *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("SynthLab::MorphBankData::tableNames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MorphBankData::tableNames",1,"SynthLab::MorphBankData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MorphBankData,0))){
    SWIG_fail_ptr("MorphBankData_tableNames_get",1,SWIGTYPE_p_SynthLab__MorphBankData);
  }
  
  result = (std::string *)(std::string *) ((arg1)->tableNames);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphBankData_tableIndexes_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MorphBankData *arg1 = (SynthLab::MorphBankData *) 0 ;
  int32_t *arg2 ;
  
  SWIG_check_num_args("SynthLab::MorphBankData::tableIndexes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MorphBankData::tableIndexes",1,"SynthLab::MorphBankData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::MorphBankData::tableIndexes",2,"int32_t [SynthLab::MODULE_STRINGS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MorphBankData,0))){
    SWIG_fail_ptr("MorphBankData_tableIndexes_set",1,SWIGTYPE_p_SynthLab__MorphBankData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("MorphBankData_tableIndexes_set",2,SWIGTYPE_p_int32_t);
  }
  
  {
    size_t ii;
    int32_t *b = (int32_t *) arg1->tableIndexes;
    for (ii = 0; ii < (size_t)SynthLab::MODULE_STRINGS; ii++) b[ii] = *((int32_t *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphBankData_tableIndexes_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MorphBankData *arg1 = (SynthLab::MorphBankData *) 0 ;
  int32_t *result = 0 ;
  
  SWIG_check_num_args("SynthLab::MorphBankData::tableIndexes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MorphBankData::tableIndexes",1,"SynthLab::MorphBankData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MorphBankData,0))){
    SWIG_fail_ptr("MorphBankData_tableIndexes_get",1,SWIGTYPE_p_SynthLab__MorphBankData);
  }
  
  result = (int32_t *)(int32_t *) ((arg1)->tableIndexes);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int32_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphBankData_staticSources_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MorphBankData *arg1 = (SynthLab::MorphBankData *) 0 ;
  SynthLab::StaticTableSource *arg2 ;
  
  SWIG_check_num_args("SynthLab::MorphBankData::staticSources",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MorphBankData::staticSources",1,"SynthLab::MorphBankData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::MorphBankData::staticSources",2,"SynthLab::StaticTableSource [SynthLab::MODULE_STRINGS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MorphBankData,0))){
    SWIG_fail_ptr("MorphBankData_staticSources_set",1,SWIGTYPE_p_SynthLab__MorphBankData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__StaticTableSource,0))){
    SWIG_fail_ptr("MorphBankData_staticSources_set",2,SWIGTYPE_p_SynthLab__StaticTableSource);
  }
  
  {
    size_t ii;
    SynthLab::StaticTableSource *b = (SynthLab::StaticTableSource *) arg1->staticSources;
    for (ii = 0; ii < (size_t)SynthLab::MODULE_STRINGS; ii++) b[ii] = *((SynthLab::StaticTableSource *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphBankData_staticSources_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MorphBankData *arg1 = (SynthLab::MorphBankData *) 0 ;
  SynthLab::StaticTableSource *result = 0 ;
  
  SWIG_check_num_args("SynthLab::MorphBankData::staticSources",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MorphBankData::staticSources",1,"SynthLab::MorphBankData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MorphBankData,0))){
    SWIG_fail_ptr("MorphBankData_staticSources_get",1,SWIGTYPE_p_SynthLab__MorphBankData);
  }
  
  result = (SynthLab::StaticTableSource *)(SynthLab::StaticTableSource *) ((arg1)->staticSources);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__StaticTableSource,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MorphBankData(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MorphBankData *result = 0 ;
  
  SWIG_check_num_args("SynthLab::MorphBankData::MorphBankData",0,0)
  result = (SynthLab::MorphBankData *)new SynthLab::MorphBankData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__MorphBankData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MorphBankData(void *obj) {
SynthLab::MorphBankData *arg1 = (SynthLab::MorphBankData *) obj;
delete arg1;
}
static int _proxy__wrap_new_MorphBankData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MorphBankData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MorphBankData_attributes[] = {
    { "bankName", _wrap_MorphBankData_bankName_get, _wrap_MorphBankData_bankName_set },
    { "numTables", _wrap_MorphBankData_numTables_get, _wrap_MorphBankData_numTables_set },
    { "tableNames", _wrap_MorphBankData_tableNames_get, _wrap_MorphBankData_tableNames_set },
    { "tableIndexes", _wrap_MorphBankData_tableIndexes_get, _wrap_MorphBankData_tableIndexes_set },
    { "staticSources", _wrap_MorphBankData_staticSources_get, _wrap_MorphBankData_staticSources_set },
    {0,0,0}
};
static swig_lua_method swig_MorphBankData_methods[]= {
    {0,0}
};
static swig_lua_method swig_MorphBankData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MorphBankData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MorphBankData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MorphBankData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MorphBankData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MorphBankData_Sf_SwigStatic = {
    "MorphBankData",
    swig_MorphBankData_Sf_SwigStatic_methods,
    swig_MorphBankData_Sf_SwigStatic_attributes,
    swig_MorphBankData_Sf_SwigStatic_constants,
    swig_MorphBankData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MorphBankData_bases[] = {0};
static const char *swig_MorphBankData_base_names[] = {0};
static swig_lua_class _wrap_class_MorphBankData = { "MorphBankData", "MorphBankData", &SWIGTYPE_p_SynthLab__MorphBankData,_proxy__wrap_new_MorphBankData, swig_delete_MorphBankData, swig_MorphBankData_methods, swig_MorphBankData_attributes, &swig_MorphBankData_Sf_SwigStatic, swig_MorphBankData_meta, swig_MorphBankData_bases, swig_MorphBankData_base_names };

static int _wrap_XFadeData_linearGain_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::XFadeData *arg1 = (SynthLab::XFadeData *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::XFadeData::linearGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::XFadeData::linearGain",1,"SynthLab::XFadeData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::XFadeData::linearGain",2,"double [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__XFadeData,0))){
    SWIG_fail_ptr("XFadeData_linearGain_set",1,SWIGTYPE_p_SynthLab__XFadeData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("XFadeData_linearGain_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->linearGain;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XFadeData_linearGain_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::XFadeData *arg1 = (SynthLab::XFadeData *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::XFadeData::linearGain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::XFadeData::linearGain",1,"SynthLab::XFadeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__XFadeData,0))){
    SWIG_fail_ptr("XFadeData_linearGain_get",1,SWIGTYPE_p_SynthLab__XFadeData);
  }
  
  result = (double *)(double *) ((arg1)->linearGain);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XFadeData_constPwrGain_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::XFadeData *arg1 = (SynthLab::XFadeData *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::XFadeData::constPwrGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::XFadeData::constPwrGain",1,"SynthLab::XFadeData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::XFadeData::constPwrGain",2,"double [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__XFadeData,0))){
    SWIG_fail_ptr("XFadeData_constPwrGain_set",1,SWIGTYPE_p_SynthLab__XFadeData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("XFadeData_constPwrGain_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->constPwrGain;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XFadeData_constPwrGain_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::XFadeData *arg1 = (SynthLab::XFadeData *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::XFadeData::constPwrGain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::XFadeData::constPwrGain",1,"SynthLab::XFadeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__XFadeData,0))){
    SWIG_fail_ptr("XFadeData_constPwrGain_get",1,SWIGTYPE_p_SynthLab__XFadeData);
  }
  
  result = (double *)(double *) ((arg1)->constPwrGain);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XFadeData_squareLawGain_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::XFadeData *arg1 = (SynthLab::XFadeData *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::XFadeData::squareLawGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::XFadeData::squareLawGain",1,"SynthLab::XFadeData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::XFadeData::squareLawGain",2,"double [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__XFadeData,0))){
    SWIG_fail_ptr("XFadeData_squareLawGain_set",1,SWIGTYPE_p_SynthLab__XFadeData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("XFadeData_squareLawGain_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->squareLawGain;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XFadeData_squareLawGain_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::XFadeData *arg1 = (SynthLab::XFadeData *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::XFadeData::squareLawGain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::XFadeData::squareLawGain",1,"SynthLab::XFadeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__XFadeData,0))){
    SWIG_fail_ptr("XFadeData_squareLawGain_get",1,SWIGTYPE_p_SynthLab__XFadeData);
  }
  
  result = (double *)(double *) ((arg1)->squareLawGain);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XFadeData_crossfadeFinished_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::XFadeData *arg1 = (SynthLab::XFadeData *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::XFadeData::crossfadeFinished",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::XFadeData::crossfadeFinished",1,"SynthLab::XFadeData *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::XFadeData::crossfadeFinished",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__XFadeData,0))){
    SWIG_fail_ptr("XFadeData_crossfadeFinished_set",1,SWIGTYPE_p_SynthLab__XFadeData);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->crossfadeFinished = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XFadeData_crossfadeFinished_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::XFadeData *arg1 = (SynthLab::XFadeData *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::XFadeData::crossfadeFinished",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::XFadeData::crossfadeFinished",1,"SynthLab::XFadeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__XFadeData,0))){
    SWIG_fail_ptr("XFadeData_crossfadeFinished_get",1,SWIGTYPE_p_SynthLab__XFadeData);
  }
  
  result = (bool) ((arg1)->crossfadeFinished);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_XFadeData(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::XFadeData *result = 0 ;
  
  SWIG_check_num_args("SynthLab::XFadeData::XFadeData",0,0)
  result = (SynthLab::XFadeData *)new SynthLab::XFadeData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__XFadeData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_XFadeData(void *obj) {
SynthLab::XFadeData *arg1 = (SynthLab::XFadeData *) obj;
delete arg1;
}
static int _proxy__wrap_new_XFadeData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_XFadeData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_XFadeData_attributes[] = {
    { "linearGain", _wrap_XFadeData_linearGain_get, _wrap_XFadeData_linearGain_set },
    { "constPwrGain", _wrap_XFadeData_constPwrGain_get, _wrap_XFadeData_constPwrGain_set },
    { "squareLawGain", _wrap_XFadeData_squareLawGain_get, _wrap_XFadeData_squareLawGain_set },
    { "crossfadeFinished", _wrap_XFadeData_crossfadeFinished_get, _wrap_XFadeData_crossfadeFinished_set },
    {0,0,0}
};
static swig_lua_method swig_XFadeData_methods[]= {
    {0,0}
};
static swig_lua_method swig_XFadeData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_XFadeData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_XFadeData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_XFadeData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_XFadeData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_XFadeData_Sf_SwigStatic = {
    "XFadeData",
    swig_XFadeData_Sf_SwigStatic_methods,
    swig_XFadeData_Sf_SwigStatic_attributes,
    swig_XFadeData_Sf_SwigStatic_constants,
    swig_XFadeData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_XFadeData_bases[] = {0};
static const char *swig_XFadeData_base_names[] = {0};
static swig_lua_class _wrap_class_XFadeData = { "XFadeData", "XFadeData", &SWIGTYPE_p_SynthLab__XFadeData,_proxy__wrap_new_XFadeData, swig_delete_XFadeData, swig_XFadeData_methods, swig_XFadeData_attributes, &swig_XFadeData_Sf_SwigStatic, swig_XFadeData_meta, swig_XFadeData_bases, swig_XFadeData_base_names };

static int _wrap_new_MidiOutputData(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MidiOutputData *result = 0 ;
  
  SWIG_check_num_args("SynthLab::MidiOutputData::MidiOutputData",0,0)
  result = (SynthLab::MidiOutputData *)new SynthLab::MidiOutputData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__MidiOutputData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiOutputData_globalMIDIData_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MidiOutputData *arg1 = (SynthLab::MidiOutputData *) 0 ;
  uint32_t *arg2 ;
  
  SWIG_check_num_args("SynthLab::MidiOutputData::globalMIDIData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MidiOutputData::globalMIDIData",1,"SynthLab::MidiOutputData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::MidiOutputData::globalMIDIData",2,"uint32_t [SynthLab::kNumMIDIGlobals]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MidiOutputData,0))){
    SWIG_fail_ptr("MidiOutputData_globalMIDIData_set",1,SWIGTYPE_p_SynthLab__MidiOutputData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("MidiOutputData_globalMIDIData_set",2,SWIGTYPE_p_uint32_t);
  }
  
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->globalMIDIData;
    for (ii = 0; ii < (size_t)SynthLab::kNumMIDIGlobals; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiOutputData_globalMIDIData_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MidiOutputData *arg1 = (SynthLab::MidiOutputData *) 0 ;
  uint32_t *result = 0 ;
  
  SWIG_check_num_args("SynthLab::MidiOutputData::globalMIDIData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MidiOutputData::globalMIDIData",1,"SynthLab::MidiOutputData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MidiOutputData,0))){
    SWIG_fail_ptr("MidiOutputData_globalMIDIData_get",1,SWIGTYPE_p_SynthLab__MidiOutputData);
  }
  
  result = (uint32_t *)(uint32_t *) ((arg1)->globalMIDIData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint32_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiOutputData_ccMIDIData_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MidiOutputData *arg1 = (SynthLab::MidiOutputData *) 0 ;
  uint32_t *arg2 ;
  
  SWIG_check_num_args("SynthLab::MidiOutputData::ccMIDIData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MidiOutputData::ccMIDIData",1,"SynthLab::MidiOutputData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::MidiOutputData::ccMIDIData",2,"uint32_t [SynthLab::kNumMIDICCs]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MidiOutputData,0))){
    SWIG_fail_ptr("MidiOutputData_ccMIDIData_set",1,SWIGTYPE_p_SynthLab__MidiOutputData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("MidiOutputData_ccMIDIData_set",2,SWIGTYPE_p_uint32_t);
  }
  
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->ccMIDIData;
    for (ii = 0; ii < (size_t)SynthLab::kNumMIDICCs; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiOutputData_ccMIDIData_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MidiOutputData *arg1 = (SynthLab::MidiOutputData *) 0 ;
  uint32_t *result = 0 ;
  
  SWIG_check_num_args("SynthLab::MidiOutputData::ccMIDIData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MidiOutputData::ccMIDIData",1,"SynthLab::MidiOutputData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MidiOutputData,0))){
    SWIG_fail_ptr("MidiOutputData_ccMIDIData_get",1,SWIGTYPE_p_SynthLab__MidiOutputData);
  }
  
  result = (uint32_t *)(uint32_t *) ((arg1)->ccMIDIData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint32_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MidiOutputData(void *obj) {
SynthLab::MidiOutputData *arg1 = (SynthLab::MidiOutputData *) obj;
delete arg1;
}
static int _proxy__wrap_new_MidiOutputData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MidiOutputData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MidiOutputData_attributes[] = {
    { "globalMIDIData", _wrap_MidiOutputData_globalMIDIData_get, _wrap_MidiOutputData_globalMIDIData_set },
    { "ccMIDIData", _wrap_MidiOutputData_ccMIDIData_get, _wrap_MidiOutputData_ccMIDIData_set },
    {0,0,0}
};
static swig_lua_method swig_MidiOutputData_methods[]= {
    {0,0}
};
static swig_lua_method swig_MidiOutputData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MidiOutputData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MidiOutputData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MidiOutputData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MidiOutputData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MidiOutputData_Sf_SwigStatic = {
    "MidiOutputData",
    swig_MidiOutputData_Sf_SwigStatic_methods,
    swig_MidiOutputData_Sf_SwigStatic_attributes,
    swig_MidiOutputData_Sf_SwigStatic_constants,
    swig_MidiOutputData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MidiOutputData_bases[] = {0};
static const char *swig_MidiOutputData_base_names[] = {0};
static swig_lua_class _wrap_class_MidiOutputData = { "MidiOutputData", "MidiOutputData", &SWIGTYPE_p_SynthLab__MidiOutputData,_proxy__wrap_new_MidiOutputData, swig_delete_MidiOutputData, swig_MidiOutputData_methods, swig_MidiOutputData_attributes, &swig_MidiOutputData_Sf_SwigStatic, swig_MidiOutputData_meta, swig_MidiOutputData_bases, swig_MidiOutputData_base_names };

static int _wrap_new_WaveStringData(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t *argp1 ;
  uint32_t *argp2 ;
  SynthLab::WaveStringData *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveStringData::WaveStringData",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::WaveStringData::WaveStringData",1,"uint32_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WaveStringData::WaveStringData",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_WaveStringData",1,SWIGTYPE_p_uint32_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_WaveStringData",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (SynthLab::WaveStringData *)new SynthLab::WaveStringData(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__WaveStringData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveStringData_coreIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveStringData *arg1 = (SynthLab::WaveStringData *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WaveStringData::coreIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveStringData::coreIndex",1,"SynthLab::WaveStringData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WaveStringData::coreIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveStringData,0))){
    SWIG_fail_ptr("WaveStringData_coreIndex_set",1,SWIGTYPE_p_SynthLab__WaveStringData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WaveStringData_coreIndex_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->coreIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveStringData_coreIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveStringData *arg1 = (SynthLab::WaveStringData *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WaveStringData::coreIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveStringData::coreIndex",1,"SynthLab::WaveStringData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveStringData,0))){
    SWIG_fail_ptr("WaveStringData_coreIndex_get",1,SWIGTYPE_p_SynthLab__WaveStringData);
  }
  
  result =  ((arg1)->coreIndex);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveStringData_coreWaveIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveStringData *arg1 = (SynthLab::WaveStringData *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WaveStringData::coreWaveIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveStringData::coreWaveIndex",1,"SynthLab::WaveStringData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WaveStringData::coreWaveIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveStringData,0))){
    SWIG_fail_ptr("WaveStringData_coreWaveIndex_set",1,SWIGTYPE_p_SynthLab__WaveStringData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WaveStringData_coreWaveIndex_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->coreWaveIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveStringData_coreWaveIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveStringData *arg1 = (SynthLab::WaveStringData *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WaveStringData::coreWaveIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveStringData::coreWaveIndex",1,"SynthLab::WaveStringData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveStringData,0))){
    SWIG_fail_ptr("WaveStringData_coreWaveIndex_get",1,SWIGTYPE_p_SynthLab__WaveStringData);
  }
  
  result =  ((arg1)->coreWaveIndex);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WaveStringData(void *obj) {
SynthLab::WaveStringData *arg1 = (SynthLab::WaveStringData *) obj;
delete arg1;
}
static int _proxy__wrap_new_WaveStringData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WaveStringData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WaveStringData_attributes[] = {
    { "coreIndex", _wrap_WaveStringData_coreIndex_get, _wrap_WaveStringData_coreIndex_set },
    { "coreWaveIndex", _wrap_WaveStringData_coreWaveIndex_get, _wrap_WaveStringData_coreWaveIndex_set },
    {0,0,0}
};
static swig_lua_method swig_WaveStringData_methods[]= {
    {0,0}
};
static swig_lua_method swig_WaveStringData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WaveStringData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WaveStringData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WaveStringData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WaveStringData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WaveStringData_Sf_SwigStatic = {
    "WaveStringData",
    swig_WaveStringData_Sf_SwigStatic_methods,
    swig_WaveStringData_Sf_SwigStatic_attributes,
    swig_WaveStringData_Sf_SwigStatic_constants,
    swig_WaveStringData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WaveStringData_bases[] = {0};
static const char *swig_WaveStringData_base_names[] = {0};
static swig_lua_class _wrap_class_WaveStringData = { "WaveStringData", "WaveStringData", &SWIGTYPE_p_SynthLab__WaveStringData,_proxy__wrap_new_WaveStringData, swig_delete_WaveStringData, swig_WaveStringData_methods, swig_WaveStringData_attributes, &swig_WaveStringData_Sf_SwigStatic, swig_WaveStringData_meta, swig_WaveStringData_bases, swig_WaveStringData_base_names };

static int _wrap_new_LookUpTable(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  uint32_t *argp1 ;
  SynthLab::LookUpTable *result = 0 ;
  
  SWIG_check_num_args("SynthLab::LookUpTable::LookUpTable",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::LookUpTable::LookUpTable",1,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_LookUpTable",1,SWIGTYPE_p_uint32_t);
  }
  arg1 = *argp1;
  
  result = (SynthLab::LookUpTable *)new SynthLab::LookUpTable(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__LookUpTable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LookUpTable_tableLength_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LookUpTable *arg1 = (SynthLab::LookUpTable *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::LookUpTable::tableLength",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LookUpTable::tableLength",1,"SynthLab::LookUpTable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LookUpTable::tableLength",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LookUpTable,0))){
    SWIG_fail_ptr("LookUpTable_tableLength_set",1,SWIGTYPE_p_SynthLab__LookUpTable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("LookUpTable_tableLength_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->tableLength = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LookUpTable_tableLength_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LookUpTable *arg1 = (SynthLab::LookUpTable *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::LookUpTable::tableLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LookUpTable::tableLength",1,"SynthLab::LookUpTable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LookUpTable,0))){
    SWIG_fail_ptr("LookUpTable_tableLength_get",1,SWIGTYPE_p_SynthLab__LookUpTable);
  }
  
  result =  ((arg1)->tableLength);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LookUpTable_table_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LookUpTable *arg1 = (SynthLab::LookUpTable *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("SynthLab::LookUpTable::table",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LookUpTable::table",1,"SynthLab::LookUpTable *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::LookUpTable::table",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LookUpTable,0))){
    SWIG_fail_ptr("LookUpTable_table_set",1,SWIGTYPE_p_SynthLab__LookUpTable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("LookUpTable_table_set",2,SWIGTYPE_p_double);
  }
  
  if (arg1) (arg1)->table = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LookUpTable_table_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LookUpTable *arg1 = (SynthLab::LookUpTable *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::LookUpTable::table",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LookUpTable::table",1,"SynthLab::LookUpTable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LookUpTable,0))){
    SWIG_fail_ptr("LookUpTable_table_get",1,SWIGTYPE_p_SynthLab__LookUpTable);
  }
  
  result = (double *) ((arg1)->table);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LookUpTable(void *obj) {
SynthLab::LookUpTable *arg1 = (SynthLab::LookUpTable *) obj;
delete arg1;
}
static int _proxy__wrap_new_LookUpTable(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LookUpTable);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LookUpTable_attributes[] = {
    { "tableLength", _wrap_LookUpTable_tableLength_get, _wrap_LookUpTable_tableLength_set },
    { "table", _wrap_LookUpTable_table_get, _wrap_LookUpTable_table_set },
    {0,0,0}
};
static swig_lua_method swig_LookUpTable_methods[]= {
    {0,0}
};
static swig_lua_method swig_LookUpTable_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LookUpTable_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LookUpTable_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LookUpTable_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LookUpTable_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LookUpTable_Sf_SwigStatic = {
    "LookUpTable",
    swig_LookUpTable_Sf_SwigStatic_methods,
    swig_LookUpTable_Sf_SwigStatic_attributes,
    swig_LookUpTable_Sf_SwigStatic_constants,
    swig_LookUpTable_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LookUpTable_bases[] = {0};
static const char *swig_LookUpTable_base_names[] = {0};
static swig_lua_class _wrap_class_LookUpTable = { "LookUpTable", "LookUpTable", &SWIGTYPE_p_SynthLab__LookUpTable,_proxy__wrap_new_LookUpTable, swig_delete_LookUpTable, swig_LookUpTable_methods, swig_LookUpTable_attributes, &swig_LookUpTable_Sf_SwigStatic, swig_LookUpTable_meta, swig_LookUpTable_bases, swig_LookUpTable_base_names };

static int _wrap_new_PluginInfo(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PluginInfo *result = 0 ;
  
  SWIG_check_num_args("SynthLab::PluginInfo::PluginInfo",0,0)
  result = (SynthLab::PluginInfo *)new SynthLab::PluginInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__PluginInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PluginInfo_pathToDLL_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PluginInfo *arg1 = (SynthLab::PluginInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("SynthLab::PluginInfo::pathToDLL",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PluginInfo::pathToDLL",1,"SynthLab::PluginInfo *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::PluginInfo::pathToDLL",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PluginInfo,0))){
    SWIG_fail_ptr("PluginInfo_pathToDLL_set",1,SWIGTYPE_p_SynthLab__PluginInfo);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if (arg2) {
      arg1->pathToDLL = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->pathToDLL, (const char *)arg2);
    } else {
      arg1->pathToDLL = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PluginInfo_pathToDLL_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PluginInfo *arg1 = (SynthLab::PluginInfo *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("SynthLab::PluginInfo::pathToDLL",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PluginInfo::pathToDLL",1,"SynthLab::PluginInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PluginInfo,0))){
    SWIG_fail_ptr("PluginInfo_pathToDLL_get",1,SWIGTYPE_p_SynthLab__PluginInfo);
  }
  
  result = (char *) ((arg1)->pathToDLL);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PluginInfo(void *obj) {
SynthLab::PluginInfo *arg1 = (SynthLab::PluginInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_PluginInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PluginInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PluginInfo_attributes[] = {
    { "pathToDLL", _wrap_PluginInfo_pathToDLL_get, _wrap_PluginInfo_pathToDLL_set },
    {0,0,0}
};
static swig_lua_method swig_PluginInfo_methods[]= {
    {0,0}
};
static swig_lua_method swig_PluginInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PluginInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PluginInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PluginInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PluginInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PluginInfo_Sf_SwigStatic = {
    "PluginInfo",
    swig_PluginInfo_Sf_SwigStatic_methods,
    swig_PluginInfo_Sf_SwigStatic_attributes,
    swig_PluginInfo_Sf_SwigStatic_constants,
    swig_PluginInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PluginInfo_bases[] = {0};
static const char *swig_PluginInfo_base_names[] = {0};
static swig_lua_class _wrap_class_PluginInfo = { "PluginInfo", "PluginInfo", &SWIGTYPE_p_SynthLab__PluginInfo,_proxy__wrap_new_PluginInfo, swig_delete_PluginInfo, swig_PluginInfo_methods, swig_PluginInfo_attributes, &swig_PluginInfo_Sf_SwigStatic, swig_PluginInfo_meta, swig_PluginInfo_bases, swig_PluginInfo_base_names };

static int _wrap_new_midiEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::midiEvent *result = 0 ;
  
  SWIG_check_num_args("SynthLab::midiEvent::midiEvent",0,0)
  result = (SynthLab::midiEvent *)new SynthLab::midiEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__midiEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_midiEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  uint32_t arg5 ;
  uint32_t *argp1 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  uint32_t *argp4 ;
  uint32_t *argp5 ;
  SynthLab::midiEvent *result = 0 ;
  
  SWIG_check_num_args("SynthLab::midiEvent::midiEvent",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::midiEvent::midiEvent",1,"uint32_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::midiEvent::midiEvent",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::midiEvent::midiEvent",3,"uint32_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SynthLab::midiEvent::midiEvent",4,"uint32_t");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SynthLab::midiEvent::midiEvent",5,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_midiEvent",1,SWIGTYPE_p_uint32_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_midiEvent",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_midiEvent",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_midiEvent",4,SWIGTYPE_p_uint32_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_midiEvent",5,SWIGTYPE_p_uint32_t);
  }
  arg5 = *argp5;
  
  result = (SynthLab::midiEvent *)new SynthLab::midiEvent(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__midiEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_midiEvent__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  uint32_t *argp1 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  uint32_t *argp4 ;
  SynthLab::midiEvent *result = 0 ;
  
  SWIG_check_num_args("SynthLab::midiEvent::midiEvent",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::midiEvent::midiEvent",1,"uint32_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::midiEvent::midiEvent",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::midiEvent::midiEvent",3,"uint32_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SynthLab::midiEvent::midiEvent",4,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_midiEvent",1,SWIGTYPE_p_uint32_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_midiEvent",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_midiEvent",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_midiEvent",4,SWIGTYPE_p_uint32_t);
  }
  arg4 = *argp4;
  
  result = (SynthLab::midiEvent *)new SynthLab::midiEvent(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__midiEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_midiEvent(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_midiEvent__SWIG_0(L);
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_midiEvent__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_new_midiEvent__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_midiEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::midiEvent::midiEvent()\n"
    "    SynthLab::midiEvent::midiEvent(uint32_t,uint32_t,uint32_t,uint32_t,uint32_t)\n"
    "    SynthLab::midiEvent::midiEvent(uint32_t,uint32_t,uint32_t,uint32_t)\n");
  lua_error(L);return 0;
}


static int _wrap_midiEvent_midiMessage_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::midiEvent *arg1 = (SynthLab::midiEvent *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::midiEvent::midiMessage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::midiEvent::midiMessage",1,"SynthLab::midiEvent *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::midiEvent::midiMessage",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__midiEvent,0))){
    SWIG_fail_ptr("midiEvent_midiMessage_set",1,SWIGTYPE_p_SynthLab__midiEvent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("midiEvent_midiMessage_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->midiMessage = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_midiEvent_midiMessage_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::midiEvent *arg1 = (SynthLab::midiEvent *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::midiEvent::midiMessage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::midiEvent::midiMessage",1,"SynthLab::midiEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__midiEvent,0))){
    SWIG_fail_ptr("midiEvent_midiMessage_get",1,SWIGTYPE_p_SynthLab__midiEvent);
  }
  
  result =  ((arg1)->midiMessage);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_midiEvent_midiChannel_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::midiEvent *arg1 = (SynthLab::midiEvent *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::midiEvent::midiChannel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::midiEvent::midiChannel",1,"SynthLab::midiEvent *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::midiEvent::midiChannel",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__midiEvent,0))){
    SWIG_fail_ptr("midiEvent_midiChannel_set",1,SWIGTYPE_p_SynthLab__midiEvent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("midiEvent_midiChannel_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->midiChannel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_midiEvent_midiChannel_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::midiEvent *arg1 = (SynthLab::midiEvent *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::midiEvent::midiChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::midiEvent::midiChannel",1,"SynthLab::midiEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__midiEvent,0))){
    SWIG_fail_ptr("midiEvent_midiChannel_get",1,SWIGTYPE_p_SynthLab__midiEvent);
  }
  
  result =  ((arg1)->midiChannel);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_midiEvent_midiData1_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::midiEvent *arg1 = (SynthLab::midiEvent *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::midiEvent::midiData1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::midiEvent::midiData1",1,"SynthLab::midiEvent *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::midiEvent::midiData1",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__midiEvent,0))){
    SWIG_fail_ptr("midiEvent_midiData1_set",1,SWIGTYPE_p_SynthLab__midiEvent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("midiEvent_midiData1_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->midiData1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_midiEvent_midiData1_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::midiEvent *arg1 = (SynthLab::midiEvent *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::midiEvent::midiData1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::midiEvent::midiData1",1,"SynthLab::midiEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__midiEvent,0))){
    SWIG_fail_ptr("midiEvent_midiData1_get",1,SWIGTYPE_p_SynthLab__midiEvent);
  }
  
  result =  ((arg1)->midiData1);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_midiEvent_midiData2_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::midiEvent *arg1 = (SynthLab::midiEvent *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::midiEvent::midiData2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::midiEvent::midiData2",1,"SynthLab::midiEvent *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::midiEvent::midiData2",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__midiEvent,0))){
    SWIG_fail_ptr("midiEvent_midiData2_set",1,SWIGTYPE_p_SynthLab__midiEvent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("midiEvent_midiData2_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->midiData2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_midiEvent_midiData2_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::midiEvent *arg1 = (SynthLab::midiEvent *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::midiEvent::midiData2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::midiEvent::midiData2",1,"SynthLab::midiEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__midiEvent,0))){
    SWIG_fail_ptr("midiEvent_midiData2_get",1,SWIGTYPE_p_SynthLab__midiEvent);
  }
  
  result =  ((arg1)->midiData2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_midiEvent_midiSampleOffset_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::midiEvent *arg1 = (SynthLab::midiEvent *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::midiEvent::midiSampleOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::midiEvent::midiSampleOffset",1,"SynthLab::midiEvent *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::midiEvent::midiSampleOffset",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__midiEvent,0))){
    SWIG_fail_ptr("midiEvent_midiSampleOffset_set",1,SWIGTYPE_p_SynthLab__midiEvent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("midiEvent_midiSampleOffset_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->midiSampleOffset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_midiEvent_midiSampleOffset_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::midiEvent *arg1 = (SynthLab::midiEvent *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::midiEvent::midiSampleOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::midiEvent::midiSampleOffset",1,"SynthLab::midiEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__midiEvent,0))){
    SWIG_fail_ptr("midiEvent_midiSampleOffset_get",1,SWIGTYPE_p_SynthLab__midiEvent);
  }
  
  result =  ((arg1)->midiSampleOffset);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_midiEvent(void *obj) {
SynthLab::midiEvent *arg1 = (SynthLab::midiEvent *) obj;
delete arg1;
}
static int _proxy__wrap_new_midiEvent(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_midiEvent);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_midiEvent_attributes[] = {
    { "midiMessage", _wrap_midiEvent_midiMessage_get, _wrap_midiEvent_midiMessage_set },
    { "midiChannel", _wrap_midiEvent_midiChannel_get, _wrap_midiEvent_midiChannel_set },
    { "midiData1", _wrap_midiEvent_midiData1_get, _wrap_midiEvent_midiData1_set },
    { "midiData2", _wrap_midiEvent_midiData2_get, _wrap_midiEvent_midiData2_set },
    { "midiSampleOffset", _wrap_midiEvent_midiSampleOffset_get, _wrap_midiEvent_midiSampleOffset_set },
    {0,0,0}
};
static swig_lua_method swig_midiEvent_methods[]= {
    {0,0}
};
static swig_lua_method swig_midiEvent_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_midiEvent_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_midiEvent_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_midiEvent_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_midiEvent_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_midiEvent_Sf_SwigStatic = {
    "midiEvent",
    swig_midiEvent_Sf_SwigStatic_methods,
    swig_midiEvent_Sf_SwigStatic_attributes,
    swig_midiEvent_Sf_SwigStatic_constants,
    swig_midiEvent_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_midiEvent_bases[] = {0};
static const char *swig_midiEvent_base_names[] = {0};
static swig_lua_class _wrap_class_midiEvent = { "midiEvent", "midiEvent", &SWIGTYPE_p_SynthLab__midiEvent,_proxy__wrap_new_midiEvent, swig_delete_midiEvent, swig_midiEvent_methods, swig_midiEvent_attributes, &swig_midiEvent_Sf_SwigStatic, swig_midiEvent_meta, swig_midiEvent_bases, swig_midiEvent_base_names };

static int _wrap_new_MIDINoteEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  SynthLab::MIDINoteEvent *result = 0 ;
  
  SWIG_check_num_args("SynthLab::MIDINoteEvent::MIDINoteEvent",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::MIDINoteEvent::MIDINoteEvent",1,"double");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MIDINoteEvent::MIDINoteEvent",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::MIDINoteEvent::MIDINoteEvent",3,"uint32_t");
  arg1 = (double)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_MIDINoteEvent",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_MIDINoteEvent",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  result = (SynthLab::MIDINoteEvent *)new SynthLab::MIDINoteEvent(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__MIDINoteEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MIDINoteEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  SynthLab::MIDINoteEvent *result = 0 ;
  
  SWIG_check_num_args("SynthLab::MIDINoteEvent::MIDINoteEvent",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::MIDINoteEvent::MIDINoteEvent",1,"double");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MIDINoteEvent::MIDINoteEvent",2,"uint32_t");
  arg1 = (double)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_MIDINoteEvent",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (SynthLab::MIDINoteEvent *)new SynthLab::MIDINoteEvent(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__MIDINoteEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MIDINoteEvent__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  SynthLab::MIDINoteEvent *result = 0 ;
  
  SWIG_check_num_args("SynthLab::MIDINoteEvent::MIDINoteEvent",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SynthLab::MIDINoteEvent::MIDINoteEvent",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (SynthLab::MIDINoteEvent *)new SynthLab::MIDINoteEvent(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__MIDINoteEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MIDINoteEvent__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MIDINoteEvent *result = 0 ;
  
  SWIG_check_num_args("SynthLab::MIDINoteEvent::MIDINoteEvent",0,0)
  result = (SynthLab::MIDINoteEvent *)new SynthLab::MIDINoteEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__MIDINoteEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MIDINoteEvent(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_MIDINoteEvent__SWIG_3(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_MIDINoteEvent__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_MIDINoteEvent__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_MIDINoteEvent__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MIDINoteEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::MIDINoteEvent::MIDINoteEvent(double,uint32_t,uint32_t)\n"
    "    SynthLab::MIDINoteEvent::MIDINoteEvent(double,uint32_t)\n"
    "    SynthLab::MIDINoteEvent::MIDINoteEvent(double)\n"
    "    SynthLab::MIDINoteEvent::MIDINoteEvent()\n");
  lua_error(L);return 0;
}


static int _wrap_MIDINoteEvent_midiPitch_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MIDINoteEvent *arg1 = (SynthLab::MIDINoteEvent *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::MIDINoteEvent::midiPitch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MIDINoteEvent::midiPitch",1,"SynthLab::MIDINoteEvent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::MIDINoteEvent::midiPitch",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("MIDINoteEvent_midiPitch_set",1,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->midiPitch = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MIDINoteEvent_midiPitch_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MIDINoteEvent *arg1 = (SynthLab::MIDINoteEvent *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::MIDINoteEvent::midiPitch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MIDINoteEvent::midiPitch",1,"SynthLab::MIDINoteEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("MIDINoteEvent_midiPitch_get",1,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (double) ((arg1)->midiPitch);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MIDINoteEvent_midiNoteNumber_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MIDINoteEvent *arg1 = (SynthLab::MIDINoteEvent *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::MIDINoteEvent::midiNoteNumber",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MIDINoteEvent::midiNoteNumber",1,"SynthLab::MIDINoteEvent *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MIDINoteEvent::midiNoteNumber",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("MIDINoteEvent_midiNoteNumber_set",1,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("MIDINoteEvent_midiNoteNumber_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->midiNoteNumber = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MIDINoteEvent_midiNoteNumber_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MIDINoteEvent *arg1 = (SynthLab::MIDINoteEvent *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::MIDINoteEvent::midiNoteNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MIDINoteEvent::midiNoteNumber",1,"SynthLab::MIDINoteEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("MIDINoteEvent_midiNoteNumber_get",1,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result =  ((arg1)->midiNoteNumber);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MIDINoteEvent_midiNoteVelocity_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MIDINoteEvent *arg1 = (SynthLab::MIDINoteEvent *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::MIDINoteEvent::midiNoteVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MIDINoteEvent::midiNoteVelocity",1,"SynthLab::MIDINoteEvent *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MIDINoteEvent::midiNoteVelocity",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("MIDINoteEvent_midiNoteVelocity_set",1,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("MIDINoteEvent_midiNoteVelocity_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->midiNoteVelocity = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MIDINoteEvent_midiNoteVelocity_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MIDINoteEvent *arg1 = (SynthLab::MIDINoteEvent *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::MIDINoteEvent::midiNoteVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MIDINoteEvent::midiNoteVelocity",1,"SynthLab::MIDINoteEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("MIDINoteEvent_midiNoteVelocity_get",1,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result =  ((arg1)->midiNoteVelocity);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MIDINoteEvent(void *obj) {
SynthLab::MIDINoteEvent *arg1 = (SynthLab::MIDINoteEvent *) obj;
delete arg1;
}
static int _proxy__wrap_new_MIDINoteEvent(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MIDINoteEvent);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MIDINoteEvent_attributes[] = {
    { "midiPitch", _wrap_MIDINoteEvent_midiPitch_get, _wrap_MIDINoteEvent_midiPitch_set },
    { "midiNoteNumber", _wrap_MIDINoteEvent_midiNoteNumber_get, _wrap_MIDINoteEvent_midiNoteNumber_set },
    { "midiNoteVelocity", _wrap_MIDINoteEvent_midiNoteVelocity_get, _wrap_MIDINoteEvent_midiNoteVelocity_set },
    {0,0,0}
};
static swig_lua_method swig_MIDINoteEvent_methods[]= {
    {0,0}
};
static swig_lua_method swig_MIDINoteEvent_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MIDINoteEvent_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MIDINoteEvent_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MIDINoteEvent_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MIDINoteEvent_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MIDINoteEvent_Sf_SwigStatic = {
    "MIDINoteEvent",
    swig_MIDINoteEvent_Sf_SwigStatic_methods,
    swig_MIDINoteEvent_Sf_SwigStatic_attributes,
    swig_MIDINoteEvent_Sf_SwigStatic_constants,
    swig_MIDINoteEvent_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MIDINoteEvent_bases[] = {0};
static const char *swig_MIDINoteEvent_base_names[] = {0};
static swig_lua_class _wrap_class_MIDINoteEvent = { "MIDINoteEvent", "MIDINoteEvent", &SWIGTYPE_p_SynthLab__MIDINoteEvent,_proxy__wrap_new_MIDINoteEvent, swig_delete_MIDINoteEvent, swig_MIDINoteEvent_methods, swig_MIDINoteEvent_attributes, &swig_MIDINoteEvent_Sf_SwigStatic, swig_MIDINoteEvent_meta, swig_MIDINoteEvent_bases, swig_MIDINoteEvent_base_names };

static int _wrap_new_GlideInfo(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  double arg3 ;
  double arg4 ;
  uint32_t *argp1 ;
  uint32_t *argp2 ;
  SynthLab::GlideInfo *result = 0 ;
  
  SWIG_check_num_args("SynthLab::GlideInfo::GlideInfo",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::GlideInfo::GlideInfo",1,"uint32_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::GlideInfo::GlideInfo",2,"uint32_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::GlideInfo::GlideInfo",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::GlideInfo::GlideInfo",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_GlideInfo",1,SWIGTYPE_p_uint32_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_GlideInfo",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (SynthLab::GlideInfo *)new SynthLab::GlideInfo(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__GlideInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GlideInfo_startMIDINote_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::GlideInfo *arg1 = (SynthLab::GlideInfo *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::GlideInfo::startMIDINote",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::GlideInfo::startMIDINote",1,"SynthLab::GlideInfo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::GlideInfo::startMIDINote",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__GlideInfo,0))){
    SWIG_fail_ptr("GlideInfo_startMIDINote_set",1,SWIGTYPE_p_SynthLab__GlideInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("GlideInfo_startMIDINote_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->startMIDINote = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GlideInfo_startMIDINote_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::GlideInfo *arg1 = (SynthLab::GlideInfo *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::GlideInfo::startMIDINote",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::GlideInfo::startMIDINote",1,"SynthLab::GlideInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__GlideInfo,0))){
    SWIG_fail_ptr("GlideInfo_startMIDINote_get",1,SWIGTYPE_p_SynthLab__GlideInfo);
  }
  
  result =  ((arg1)->startMIDINote);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GlideInfo_endMIDINote_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::GlideInfo *arg1 = (SynthLab::GlideInfo *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::GlideInfo::endMIDINote",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::GlideInfo::endMIDINote",1,"SynthLab::GlideInfo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::GlideInfo::endMIDINote",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__GlideInfo,0))){
    SWIG_fail_ptr("GlideInfo_endMIDINote_set",1,SWIGTYPE_p_SynthLab__GlideInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("GlideInfo_endMIDINote_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->endMIDINote = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GlideInfo_endMIDINote_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::GlideInfo *arg1 = (SynthLab::GlideInfo *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::GlideInfo::endMIDINote",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::GlideInfo::endMIDINote",1,"SynthLab::GlideInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__GlideInfo,0))){
    SWIG_fail_ptr("GlideInfo_endMIDINote_get",1,SWIGTYPE_p_SynthLab__GlideInfo);
  }
  
  result =  ((arg1)->endMIDINote);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GlideInfo_glideTime_mSec_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::GlideInfo *arg1 = (SynthLab::GlideInfo *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::GlideInfo::glideTime_mSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::GlideInfo::glideTime_mSec",1,"SynthLab::GlideInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::GlideInfo::glideTime_mSec",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__GlideInfo,0))){
    SWIG_fail_ptr("GlideInfo_glideTime_mSec_set",1,SWIGTYPE_p_SynthLab__GlideInfo);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->glideTime_mSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GlideInfo_glideTime_mSec_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::GlideInfo *arg1 = (SynthLab::GlideInfo *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::GlideInfo::glideTime_mSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::GlideInfo::glideTime_mSec",1,"SynthLab::GlideInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__GlideInfo,0))){
    SWIG_fail_ptr("GlideInfo_glideTime_mSec_get",1,SWIGTYPE_p_SynthLab__GlideInfo);
  }
  
  result = (double) ((arg1)->glideTime_mSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GlideInfo_sampleRate_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::GlideInfo *arg1 = (SynthLab::GlideInfo *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::GlideInfo::sampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::GlideInfo::sampleRate",1,"SynthLab::GlideInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::GlideInfo::sampleRate",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__GlideInfo,0))){
    SWIG_fail_ptr("GlideInfo_sampleRate_set",1,SWIGTYPE_p_SynthLab__GlideInfo);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->sampleRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GlideInfo_sampleRate_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::GlideInfo *arg1 = (SynthLab::GlideInfo *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::GlideInfo::sampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::GlideInfo::sampleRate",1,"SynthLab::GlideInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__GlideInfo,0))){
    SWIG_fail_ptr("GlideInfo_sampleRate_get",1,SWIGTYPE_p_SynthLab__GlideInfo);
  }
  
  result = (double) ((arg1)->sampleRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GlideInfo(void *obj) {
SynthLab::GlideInfo *arg1 = (SynthLab::GlideInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_GlideInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_GlideInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_GlideInfo_attributes[] = {
    { "startMIDINote", _wrap_GlideInfo_startMIDINote_get, _wrap_GlideInfo_startMIDINote_set },
    { "endMIDINote", _wrap_GlideInfo_endMIDINote_get, _wrap_GlideInfo_endMIDINote_set },
    { "glideTime_mSec", _wrap_GlideInfo_glideTime_mSec_get, _wrap_GlideInfo_glideTime_mSec_set },
    { "sampleRate", _wrap_GlideInfo_sampleRate_get, _wrap_GlideInfo_sampleRate_set },
    {0,0,0}
};
static swig_lua_method swig_GlideInfo_methods[]= {
    {0,0}
};
static swig_lua_method swig_GlideInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_GlideInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GlideInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GlideInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_GlideInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GlideInfo_Sf_SwigStatic = {
    "GlideInfo",
    swig_GlideInfo_Sf_SwigStatic_methods,
    swig_GlideInfo_Sf_SwigStatic_attributes,
    swig_GlideInfo_Sf_SwigStatic_constants,
    swig_GlideInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GlideInfo_bases[] = {0};
static const char *swig_GlideInfo_base_names[] = {0};
static swig_lua_class _wrap_class_GlideInfo = { "GlideInfo", "GlideInfo", &SWIGTYPE_p_SynthLab__GlideInfo,_proxy__wrap_new_GlideInfo, swig_delete_GlideInfo, swig_GlideInfo_methods, swig_GlideInfo_attributes, &swig_GlideInfo_Sf_SwigStatic, swig_GlideInfo_meta, swig_GlideInfo_bases, swig_GlideInfo_base_names };

static int _wrap_ModuleCoreData_moduleStrings_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCoreData *arg1 = (SynthLab::ModuleCoreData *) 0 ;
  char **arg2 ;
  
  SWIG_check_num_args("SynthLab::ModuleCoreData::moduleStrings",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModuleCoreData::moduleStrings",1,"SynthLab::ModuleCoreData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::ModuleCoreData::moduleStrings",2,"char const *[SynthLab::MODULE_STRINGS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModuleCoreData,0))){
    SWIG_fail_ptr("ModuleCoreData_moduleStrings_set",1,SWIGTYPE_p_SynthLab__ModuleCoreData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_char,0))){
    SWIG_fail_ptr("ModuleCoreData_moduleStrings_set",2,SWIGTYPE_p_p_char);
  }
  
  {
    size_t ii;
    char const * *b = (char const * *) arg1->moduleStrings;
    for (ii = 0; ii < (size_t)SynthLab::MODULE_STRINGS; ii++) b[ii] = *((char const * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleCoreData_moduleStrings_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCoreData *arg1 = (SynthLab::ModuleCoreData *) 0 ;
  char **result = 0 ;
  
  SWIG_check_num_args("SynthLab::ModuleCoreData::moduleStrings",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModuleCoreData::moduleStrings",1,"SynthLab::ModuleCoreData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModuleCoreData,0))){
    SWIG_fail_ptr("ModuleCoreData_moduleStrings_get",1,SWIGTYPE_p_SynthLab__ModuleCoreData);
  }
  
  result = (char **)(char **) ((arg1)->moduleStrings);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleCoreData_uniqueIndexes_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCoreData *arg1 = (SynthLab::ModuleCoreData *) 0 ;
  int32_t *arg2 ;
  
  SWIG_check_num_args("SynthLab::ModuleCoreData::uniqueIndexes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModuleCoreData::uniqueIndexes",1,"SynthLab::ModuleCoreData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::ModuleCoreData::uniqueIndexes",2,"int32_t [SynthLab::MODULE_STRINGS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModuleCoreData,0))){
    SWIG_fail_ptr("ModuleCoreData_uniqueIndexes_set",1,SWIGTYPE_p_SynthLab__ModuleCoreData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("ModuleCoreData_uniqueIndexes_set",2,SWIGTYPE_p_int32_t);
  }
  
  {
    size_t ii;
    int32_t *b = (int32_t *) arg1->uniqueIndexes;
    for (ii = 0; ii < (size_t)SynthLab::MODULE_STRINGS; ii++) b[ii] = *((int32_t *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleCoreData_uniqueIndexes_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCoreData *arg1 = (SynthLab::ModuleCoreData *) 0 ;
  int32_t *result = 0 ;
  
  SWIG_check_num_args("SynthLab::ModuleCoreData::uniqueIndexes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModuleCoreData::uniqueIndexes",1,"SynthLab::ModuleCoreData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModuleCoreData,0))){
    SWIG_fail_ptr("ModuleCoreData_uniqueIndexes_get",1,SWIGTYPE_p_SynthLab__ModuleCoreData);
  }
  
  result = (int32_t *)(int32_t *) ((arg1)->uniqueIndexes);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int32_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleCoreData_modKnobStrings_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCoreData *arg1 = (SynthLab::ModuleCoreData *) 0 ;
  char **arg2 ;
  
  SWIG_check_num_args("SynthLab::ModuleCoreData::modKnobStrings",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModuleCoreData::modKnobStrings",1,"SynthLab::ModuleCoreData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::ModuleCoreData::modKnobStrings",2,"char const *[SynthLab::MOD_KNOBS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModuleCoreData,0))){
    SWIG_fail_ptr("ModuleCoreData_modKnobStrings_set",1,SWIGTYPE_p_SynthLab__ModuleCoreData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_char,0))){
    SWIG_fail_ptr("ModuleCoreData_modKnobStrings_set",2,SWIGTYPE_p_p_char);
  }
  
  {
    size_t ii;
    char const * *b = (char const * *) arg1->modKnobStrings;
    for (ii = 0; ii < (size_t)SynthLab::MOD_KNOBS; ii++) b[ii] = *((char const * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleCoreData_modKnobStrings_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCoreData *arg1 = (SynthLab::ModuleCoreData *) 0 ;
  char **result = 0 ;
  
  SWIG_check_num_args("SynthLab::ModuleCoreData::modKnobStrings",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModuleCoreData::modKnobStrings",1,"SynthLab::ModuleCoreData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModuleCoreData,0))){
    SWIG_fail_ptr("ModuleCoreData_modKnobStrings_get",1,SWIGTYPE_p_SynthLab__ModuleCoreData);
  }
  
  result = (char **)(char **) ((arg1)->modKnobStrings);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ModuleCoreData(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModuleCoreData *result = 0 ;
  
  SWIG_check_num_args("SynthLab::ModuleCoreData::ModuleCoreData",0,0)
  result = (SynthLab::ModuleCoreData *)new SynthLab::ModuleCoreData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__ModuleCoreData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ModuleCoreData(void *obj) {
SynthLab::ModuleCoreData *arg1 = (SynthLab::ModuleCoreData *) obj;
delete arg1;
}
static int _proxy__wrap_new_ModuleCoreData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ModuleCoreData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ModuleCoreData_attributes[] = {
    { "moduleStrings", _wrap_ModuleCoreData_moduleStrings_get, _wrap_ModuleCoreData_moduleStrings_set },
    { "uniqueIndexes", _wrap_ModuleCoreData_uniqueIndexes_get, _wrap_ModuleCoreData_uniqueIndexes_set },
    { "modKnobStrings", _wrap_ModuleCoreData_modKnobStrings_get, _wrap_ModuleCoreData_modKnobStrings_set },
    {0,0,0}
};
static swig_lua_method swig_ModuleCoreData_methods[]= {
    {0,0}
};
static swig_lua_method swig_ModuleCoreData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ModuleCoreData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ModuleCoreData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ModuleCoreData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ModuleCoreData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ModuleCoreData_Sf_SwigStatic = {
    "ModuleCoreData",
    swig_ModuleCoreData_Sf_SwigStatic_methods,
    swig_ModuleCoreData_Sf_SwigStatic_attributes,
    swig_ModuleCoreData_Sf_SwigStatic_constants,
    swig_ModuleCoreData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ModuleCoreData_bases[] = {0};
static const char *swig_ModuleCoreData_base_names[] = {0};
static swig_lua_class _wrap_class_ModuleCoreData = { "ModuleCoreData", "ModuleCoreData", &SWIGTYPE_p_SynthLab__ModuleCoreData,_proxy__wrap_new_ModuleCoreData, swig_delete_ModuleCoreData, swig_ModuleCoreData_methods, swig_ModuleCoreData_attributes, &swig_ModuleCoreData_Sf_SwigStatic, swig_ModuleCoreData_meta, swig_ModuleCoreData_bases, swig_ModuleCoreData_base_names };

static int _wrap_new_SynthVoiceParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoiceParameters *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthVoiceParameters::SynthVoiceParameters",0,0)
  result = (SynthLab::SynthVoiceParameters *)new SynthLab::SynthVoiceParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__SynthVoiceParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoiceParameters_synthModeIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoiceParameters *arg1 = (SynthLab::SynthVoiceParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::SynthVoiceParameters::synthModeIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoiceParameters::synthModeIndex",1,"SynthLab::SynthVoiceParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthVoiceParameters::synthModeIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoiceParameters,0))){
    SWIG_fail_ptr("SynthVoiceParameters_synthModeIndex_set",1,SWIGTYPE_p_SynthLab__SynthVoiceParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("SynthVoiceParameters_synthModeIndex_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->synthModeIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoiceParameters_synthModeIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoiceParameters *arg1 = (SynthLab::SynthVoiceParameters *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::SynthVoiceParameters::synthModeIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoiceParameters::synthModeIndex",1,"SynthLab::SynthVoiceParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoiceParameters,0))){
    SWIG_fail_ptr("SynthVoiceParameters_synthModeIndex_get",1,SWIGTYPE_p_SynthLab__SynthVoiceParameters);
  }
  
  result =  ((arg1)->synthModeIndex);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoiceParameters_filterModeIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoiceParameters *arg1 = (SynthLab::SynthVoiceParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::SynthVoiceParameters::filterModeIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoiceParameters::filterModeIndex",1,"SynthLab::SynthVoiceParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthVoiceParameters::filterModeIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoiceParameters,0))){
    SWIG_fail_ptr("SynthVoiceParameters_filterModeIndex_set",1,SWIGTYPE_p_SynthLab__SynthVoiceParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("SynthVoiceParameters_filterModeIndex_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->filterModeIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoiceParameters_filterModeIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoiceParameters *arg1 = (SynthLab::SynthVoiceParameters *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::SynthVoiceParameters::filterModeIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoiceParameters::filterModeIndex",1,"SynthLab::SynthVoiceParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoiceParameters,0))){
    SWIG_fail_ptr("SynthVoiceParameters_filterModeIndex_get",1,SWIGTYPE_p_SynthLab__SynthVoiceParameters);
  }
  
  result =  ((arg1)->filterModeIndex);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoiceParameters_enablePortamento_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoiceParameters *arg1 = (SynthLab::SynthVoiceParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthVoiceParameters::enablePortamento",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoiceParameters::enablePortamento",1,"SynthLab::SynthVoiceParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::SynthVoiceParameters::enablePortamento",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoiceParameters,0))){
    SWIG_fail_ptr("SynthVoiceParameters_enablePortamento_set",1,SWIGTYPE_p_SynthLab__SynthVoiceParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->enablePortamento = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoiceParameters_enablePortamento_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoiceParameters *arg1 = (SynthLab::SynthVoiceParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthVoiceParameters::enablePortamento",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoiceParameters::enablePortamento",1,"SynthLab::SynthVoiceParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoiceParameters,0))){
    SWIG_fail_ptr("SynthVoiceParameters_enablePortamento_get",1,SWIGTYPE_p_SynthLab__SynthVoiceParameters);
  }
  
  result = (bool) ((arg1)->enablePortamento);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoiceParameters_glideTime_mSec_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoiceParameters *arg1 = (SynthLab::SynthVoiceParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthVoiceParameters::glideTime_mSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoiceParameters::glideTime_mSec",1,"SynthLab::SynthVoiceParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthVoiceParameters::glideTime_mSec",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoiceParameters,0))){
    SWIG_fail_ptr("SynthVoiceParameters_glideTime_mSec_set",1,SWIGTYPE_p_SynthLab__SynthVoiceParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->glideTime_mSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoiceParameters_glideTime_mSec_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoiceParameters *arg1 = (SynthLab::SynthVoiceParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::SynthVoiceParameters::glideTime_mSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoiceParameters::glideTime_mSec",1,"SynthLab::SynthVoiceParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoiceParameters,0))){
    SWIG_fail_ptr("SynthVoiceParameters_glideTime_mSec_get",1,SWIGTYPE_p_SynthLab__SynthVoiceParameters);
  }
  
  result = (double) ((arg1)->glideTime_mSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoiceParameters_legatoMode_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoiceParameters *arg1 = (SynthLab::SynthVoiceParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthVoiceParameters::legatoMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoiceParameters::legatoMode",1,"SynthLab::SynthVoiceParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::SynthVoiceParameters::legatoMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoiceParameters,0))){
    SWIG_fail_ptr("SynthVoiceParameters_legatoMode_set",1,SWIGTYPE_p_SynthLab__SynthVoiceParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->legatoMode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoiceParameters_legatoMode_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoiceParameters *arg1 = (SynthLab::SynthVoiceParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthVoiceParameters::legatoMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoiceParameters::legatoMode",1,"SynthLab::SynthVoiceParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoiceParameters,0))){
    SWIG_fail_ptr("SynthVoiceParameters_legatoMode_get",1,SWIGTYPE_p_SynthLab__SynthVoiceParameters);
  }
  
  result = (bool) ((arg1)->legatoMode);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoiceParameters_unisonDetuneCents_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoiceParameters *arg1 = (SynthLab::SynthVoiceParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthVoiceParameters::unisonDetuneCents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoiceParameters::unisonDetuneCents",1,"SynthLab::SynthVoiceParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthVoiceParameters::unisonDetuneCents",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoiceParameters,0))){
    SWIG_fail_ptr("SynthVoiceParameters_unisonDetuneCents_set",1,SWIGTYPE_p_SynthLab__SynthVoiceParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->unisonDetuneCents = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoiceParameters_unisonDetuneCents_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoiceParameters *arg1 = (SynthLab::SynthVoiceParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::SynthVoiceParameters::unisonDetuneCents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoiceParameters::unisonDetuneCents",1,"SynthLab::SynthVoiceParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoiceParameters,0))){
    SWIG_fail_ptr("SynthVoiceParameters_unisonDetuneCents_get",1,SWIGTYPE_p_SynthLab__SynthVoiceParameters);
  }
  
  result = (double) ((arg1)->unisonDetuneCents);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoiceParameters_unisonStartPhase_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoiceParameters *arg1 = (SynthLab::SynthVoiceParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthVoiceParameters::unisonStartPhase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoiceParameters::unisonStartPhase",1,"SynthLab::SynthVoiceParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthVoiceParameters::unisonStartPhase",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoiceParameters,0))){
    SWIG_fail_ptr("SynthVoiceParameters_unisonStartPhase_set",1,SWIGTYPE_p_SynthLab__SynthVoiceParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->unisonStartPhase = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoiceParameters_unisonStartPhase_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoiceParameters *arg1 = (SynthLab::SynthVoiceParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::SynthVoiceParameters::unisonStartPhase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoiceParameters::unisonStartPhase",1,"SynthLab::SynthVoiceParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoiceParameters,0))){
    SWIG_fail_ptr("SynthVoiceParameters_unisonStartPhase_get",1,SWIGTYPE_p_SynthLab__SynthVoiceParameters);
  }
  
  result = (double) ((arg1)->unisonStartPhase);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoiceParameters_unisonPan_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoiceParameters *arg1 = (SynthLab::SynthVoiceParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::SynthVoiceParameters::unisonPan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoiceParameters::unisonPan",1,"SynthLab::SynthVoiceParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthVoiceParameters::unisonPan",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoiceParameters,0))){
    SWIG_fail_ptr("SynthVoiceParameters_unisonPan_set",1,SWIGTYPE_p_SynthLab__SynthVoiceParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->unisonPan = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoiceParameters_unisonPan_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoiceParameters *arg1 = (SynthLab::SynthVoiceParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::SynthVoiceParameters::unisonPan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoiceParameters::unisonPan",1,"SynthLab::SynthVoiceParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoiceParameters,0))){
    SWIG_fail_ptr("SynthVoiceParameters_unisonPan_get",1,SWIGTYPE_p_SynthLab__SynthVoiceParameters);
  }
  
  result = (double) ((arg1)->unisonPan);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SynthVoiceParameters(void *obj) {
SynthLab::SynthVoiceParameters *arg1 = (SynthLab::SynthVoiceParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_SynthVoiceParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SynthVoiceParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SynthVoiceParameters_attributes[] = {
    { "synthModeIndex", _wrap_SynthVoiceParameters_synthModeIndex_get, _wrap_SynthVoiceParameters_synthModeIndex_set },
    { "filterModeIndex", _wrap_SynthVoiceParameters_filterModeIndex_get, _wrap_SynthVoiceParameters_filterModeIndex_set },
    { "enablePortamento", _wrap_SynthVoiceParameters_enablePortamento_get, _wrap_SynthVoiceParameters_enablePortamento_set },
    { "glideTime_mSec", _wrap_SynthVoiceParameters_glideTime_mSec_get, _wrap_SynthVoiceParameters_glideTime_mSec_set },
    { "legatoMode", _wrap_SynthVoiceParameters_legatoMode_get, _wrap_SynthVoiceParameters_legatoMode_set },
    { "unisonDetuneCents", _wrap_SynthVoiceParameters_unisonDetuneCents_get, _wrap_SynthVoiceParameters_unisonDetuneCents_set },
    { "unisonStartPhase", _wrap_SynthVoiceParameters_unisonStartPhase_get, _wrap_SynthVoiceParameters_unisonStartPhase_set },
    { "unisonPan", _wrap_SynthVoiceParameters_unisonPan_get, _wrap_SynthVoiceParameters_unisonPan_set },
    {0,0,0}
};
static swig_lua_method swig_SynthVoiceParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_SynthVoiceParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SynthVoiceParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SynthVoiceParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SynthVoiceParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SynthVoiceParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SynthVoiceParameters_Sf_SwigStatic = {
    "SynthVoiceParameters",
    swig_SynthVoiceParameters_Sf_SwigStatic_methods,
    swig_SynthVoiceParameters_Sf_SwigStatic_attributes,
    swig_SynthVoiceParameters_Sf_SwigStatic_constants,
    swig_SynthVoiceParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SynthVoiceParameters_bases[] = {0};
static const char *swig_SynthVoiceParameters_base_names[] = {0};
static swig_lua_class _wrap_class_SynthVoiceParameters = { "SynthVoiceParameters", "SynthVoiceParameters", &SWIGTYPE_p_SynthLab__SynthVoiceParameters,_proxy__wrap_new_SynthVoiceParameters, swig_delete_SynthVoiceParameters, swig_SynthVoiceParameters_methods, swig_SynthVoiceParameters_attributes, &swig_SynthVoiceParameters_Sf_SwigStatic, swig_SynthVoiceParameters_meta, swig_SynthVoiceParameters_bases, swig_SynthVoiceParameters_base_names };

static int _wrap_new_SynthVoice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< std::shared_ptr< SynthLab::MidiInputData > > arg1 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::MidiOutputData > > arg2 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::SynthVoiceParameters > > arg3 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::WavetableDatabase > > arg4 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::PCMSampleDatabase > > arg5 ;
  uint32_t arg6 ;
  std::shared_ptr< SynthLab::MidiInputData > *argp1 ;
  std::shared_ptr< SynthLab::MidiOutputData > *argp2 ;
  std::shared_ptr< SynthLab::SynthVoiceParameters > *argp3 ;
  std::shared_ptr< SynthLab::WavetableDatabase > *argp4 ;
  std::shared_ptr< SynthLab::PCMSampleDatabase > *argp5 ;
  uint32_t *argp6 ;
  SynthLab::SynthVoice *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthVoice::SynthVoice",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::SynthVoice::SynthVoice",1,"std::shared_ptr< SynthLab::MidiInputData >");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthVoice::SynthVoice",2,"std::shared_ptr< SynthLab::MidiOutputData >");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::SynthVoice::SynthVoice",3,"std::shared_ptr< SynthLab::SynthVoiceParameters >");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SynthLab::SynthVoice::SynthVoice",4,"std::shared_ptr< SynthLab::WavetableDatabase >");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SynthLab::SynthVoice::SynthVoice",5,"std::shared_ptr< SynthLab::PCMSampleDatabase >");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SynthLab::SynthVoice::SynthVoice",6,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiInputData_t,0))){
    SWIG_fail_ptr("new_SynthVoice",1,SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiInputData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiOutputData_t,0))){
    SWIG_fail_ptr("new_SynthVoice",2,SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiOutputData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__shared_ptrT_SynthLab__SynthVoiceParameters_t,0))){
    SWIG_fail_ptr("new_SynthVoice",3,SWIGTYPE_p_std__shared_ptrT_SynthLab__SynthVoiceParameters_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_std__shared_ptrT_SynthLab__WavetableDatabase_t,0))){
    SWIG_fail_ptr("new_SynthVoice",4,SWIGTYPE_p_std__shared_ptrT_SynthLab__WavetableDatabase_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_std__shared_ptrT_SynthLab__PCMSampleDatabase_t,0))){
    SWIG_fail_ptr("new_SynthVoice",5,SWIGTYPE_p_std__shared_ptrT_SynthLab__PCMSampleDatabase_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("new_SynthVoice",6,SWIGTYPE_p_uint32_t);
  }
  arg6 = *argp6;
  
  result = (SynthLab::SynthVoice *)new SynthLab::SynthVoice(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__SynthVoice,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SynthVoice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< std::shared_ptr< SynthLab::MidiInputData > > arg1 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::MidiOutputData > > arg2 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::SynthVoiceParameters > > arg3 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::WavetableDatabase > > arg4 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::PCMSampleDatabase > > arg5 ;
  std::shared_ptr< SynthLab::MidiInputData > *argp1 ;
  std::shared_ptr< SynthLab::MidiOutputData > *argp2 ;
  std::shared_ptr< SynthLab::SynthVoiceParameters > *argp3 ;
  std::shared_ptr< SynthLab::WavetableDatabase > *argp4 ;
  std::shared_ptr< SynthLab::PCMSampleDatabase > *argp5 ;
  SynthLab::SynthVoice *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SynthVoice::SynthVoice",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::SynthVoice::SynthVoice",1,"std::shared_ptr< SynthLab::MidiInputData >");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthVoice::SynthVoice",2,"std::shared_ptr< SynthLab::MidiOutputData >");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::SynthVoice::SynthVoice",3,"std::shared_ptr< SynthLab::SynthVoiceParameters >");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SynthLab::SynthVoice::SynthVoice",4,"std::shared_ptr< SynthLab::WavetableDatabase >");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SynthLab::SynthVoice::SynthVoice",5,"std::shared_ptr< SynthLab::PCMSampleDatabase >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiInputData_t,0))){
    SWIG_fail_ptr("new_SynthVoice",1,SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiInputData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiOutputData_t,0))){
    SWIG_fail_ptr("new_SynthVoice",2,SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiOutputData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__shared_ptrT_SynthLab__SynthVoiceParameters_t,0))){
    SWIG_fail_ptr("new_SynthVoice",3,SWIGTYPE_p_std__shared_ptrT_SynthLab__SynthVoiceParameters_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_std__shared_ptrT_SynthLab__WavetableDatabase_t,0))){
    SWIG_fail_ptr("new_SynthVoice",4,SWIGTYPE_p_std__shared_ptrT_SynthLab__WavetableDatabase_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_std__shared_ptrT_SynthLab__PCMSampleDatabase_t,0))){
    SWIG_fail_ptr("new_SynthVoice",5,SWIGTYPE_p_std__shared_ptrT_SynthLab__PCMSampleDatabase_t);
  }
  arg5 = *argp5;
  
  result = (SynthLab::SynthVoice *)new SynthLab::SynthVoice(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__SynthVoice,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SynthVoice(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiInputData_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiOutputData_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_SynthLab__SynthVoiceParameters_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_SynthLab__WavetableDatabase_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_SynthLab__PCMSampleDatabase_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_new_SynthVoice__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiInputData_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_SynthLab__MidiOutputData_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_SynthLab__SynthVoiceParameters_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_SynthLab__WavetableDatabase_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_SynthLab__PCMSampleDatabase_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_new_SynthVoice__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SynthVoice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::SynthVoice::SynthVoice(std::shared_ptr< SynthLab::MidiInputData >,std::shared_ptr< SynthLab::MidiOutputData >,std::shared_ptr< SynthLab::SynthVoiceParameters >,std::shared_ptr< SynthLab::WavetableDatabase >,std::shared_ptr< SynthLab::PCMSampleDatabase >,uint32_t)\n"
    "    SynthLab::SynthVoice::SynthVoice(std::shared_ptr< SynthLab::MidiInputData >,std::shared_ptr< SynthLab::MidiOutputData >,std::shared_ptr< SynthLab::SynthVoiceParameters >,std::shared_ptr< SynthLab::WavetableDatabase >,std::shared_ptr< SynthLab::PCMSampleDatabase >)\n");
  lua_error(L);return 0;
}


static int _wrap_SynthVoice_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoice *arg1 = (SynthLab::SynthVoice *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthVoice::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoice::reset",1,"SynthLab::SynthVoice *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthVoice::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoice,0))){
    SWIG_fail_ptr("SynthVoice_reset",1,SWIGTYPE_p_SynthLab__SynthVoice);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoice_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoice *arg1 = (SynthLab::SynthVoice *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthVoice::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoice::update",1,"SynthLab::SynthVoice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoice,0))){
    SWIG_fail_ptr("SynthVoice_update",1,SWIGTYPE_p_SynthLab__SynthVoice);
  }
  
  result = (bool)(arg1)->update();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoice_render(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoice *arg1 = (SynthLab::SynthVoice *) 0 ;
  SynthLab::SynthProcessInfo *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthVoice::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoice::render",1,"SynthLab::SynthVoice *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthVoice::render",2,"SynthLab::SynthProcessInfo &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoice,0))){
    SWIG_fail_ptr("SynthVoice_render",1,SWIGTYPE_p_SynthLab__SynthVoice);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__SynthProcessInfo,0))){
    SWIG_fail_ptr("SynthVoice_render",2,SWIGTYPE_p_SynthLab__SynthProcessInfo);
  }
  
  result = (bool)(arg1)->render(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoice_processMIDIEvent(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoice *arg1 = (SynthLab::SynthVoice *) 0 ;
  SynthLab::midiEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthVoice::processMIDIEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoice::processMIDIEvent",1,"SynthLab::SynthVoice *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthVoice::processMIDIEvent",2,"SynthLab::midiEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoice,0))){
    SWIG_fail_ptr("SynthVoice_processMIDIEvent",1,SWIGTYPE_p_SynthLab__SynthVoice);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__midiEvent,0))){
    SWIG_fail_ptr("SynthVoice_processMIDIEvent",2,SWIGTYPE_p_SynthLab__midiEvent);
  }
  
  result = (bool)(arg1)->processMIDIEvent(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoice_initialize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoice *arg1 = (SynthLab::SynthVoice *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthVoice::initialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoice::initialize",1,"SynthLab::SynthVoice *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::SynthVoice::initialize",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoice,0))){
    SWIG_fail_ptr("SynthVoice_initialize",1,SWIGTYPE_p_SynthLab__SynthVoice);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->initialize((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoice_initialize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoice *arg1 = (SynthLab::SynthVoice *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthVoice::initialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoice::initialize",1,"SynthLab::SynthVoice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoice,0))){
    SWIG_fail_ptr("SynthVoice_initialize",1,SWIGTYPE_p_SynthLab__SynthVoice);
  }
  
  result = (bool)(arg1)->initialize();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoice_initialize(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthVoice, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SynthVoice_initialize__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthVoice, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SynthVoice_initialize__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SynthVoice_initialize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::SynthVoice::initialize(char const *)\n"
    "    SynthLab::SynthVoice::initialize()\n");
  lua_error(L);return 0;
}


static int _wrap_SynthVoice_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoice *arg1 = (SynthLab::SynthVoice *) 0 ;
  SynthLab::midiEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthVoice::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoice::doNoteOn",1,"SynthLab::SynthVoice *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthVoice::doNoteOn",2,"SynthLab::midiEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoice,0))){
    SWIG_fail_ptr("SynthVoice_doNoteOn",1,SWIGTYPE_p_SynthLab__SynthVoice);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__midiEvent,0))){
    SWIG_fail_ptr("SynthVoice_doNoteOn",2,SWIGTYPE_p_SynthLab__midiEvent);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoice_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoice *arg1 = (SynthLab::SynthVoice *) 0 ;
  SynthLab::midiEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthVoice::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoice::doNoteOff",1,"SynthLab::SynthVoice *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthVoice::doNoteOff",2,"SynthLab::midiEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoice,0))){
    SWIG_fail_ptr("SynthVoice_doNoteOff",1,SWIGTYPE_p_SynthLab__SynthVoice);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__midiEvent,0))){
    SWIG_fail_ptr("SynthVoice_doNoteOff",2,SWIGTYPE_p_SynthLab__midiEvent);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoice_isVoiceActive(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoice *arg1 = (SynthLab::SynthVoice *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthVoice::isVoiceActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoice::isVoiceActive",1,"SynthLab::SynthVoice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoice,0))){
    SWIG_fail_ptr("SynthVoice_isVoiceActive",1,SWIGTYPE_p_SynthLab__SynthVoice);
  }
  
  result = (bool)(arg1)->isVoiceActive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoice_getVoiceState(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoice *arg1 = (SynthLab::SynthVoice *) 0 ;
  SynthLab::voiceState result;
  
  SWIG_check_num_args("SynthLab::SynthVoice::getVoiceState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoice::getVoiceState",1,"SynthLab::SynthVoice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoice,0))){
    SWIG_fail_ptr("SynthVoice_getVoiceState",1,SWIGTYPE_p_SynthLab__SynthVoice);
  }
  
  result = (SynthLab::voiceState)(arg1)->getVoiceState();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoice_getTimestamp(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoice *arg1 = (SynthLab::SynthVoice *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::SynthVoice::getTimestamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoice::getTimestamp",1,"SynthLab::SynthVoice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoice,0))){
    SWIG_fail_ptr("SynthVoice_getTimestamp",1,SWIGTYPE_p_SynthLab__SynthVoice);
  }
  
  result = (arg1)->getTimestamp();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoice_incrementTimestamp(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoice *arg1 = (SynthLab::SynthVoice *) 0 ;
  
  SWIG_check_num_args("SynthLab::SynthVoice::incrementTimestamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoice::incrementTimestamp",1,"SynthLab::SynthVoice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoice,0))){
    SWIG_fail_ptr("SynthVoice_incrementTimestamp",1,SWIGTYPE_p_SynthLab__SynthVoice);
  }
  
  (arg1)->incrementTimestamp();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoice_clearTimestamp(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoice *arg1 = (SynthLab::SynthVoice *) 0 ;
  
  SWIG_check_num_args("SynthLab::SynthVoice::clearTimestamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoice::clearTimestamp",1,"SynthLab::SynthVoice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoice,0))){
    SWIG_fail_ptr("SynthVoice_clearTimestamp",1,SWIGTYPE_p_SynthLab__SynthVoice);
  }
  
  (arg1)->clearTimestamp();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoice_getMIDINoteNumber(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoice *arg1 = (SynthLab::SynthVoice *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("SynthLab::SynthVoice::getMIDINoteNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoice::getMIDINoteNumber",1,"SynthLab::SynthVoice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoice,0))){
    SWIG_fail_ptr("SynthVoice_getMIDINoteNumber",1,SWIGTYPE_p_SynthLab__SynthVoice);
  }
  
  result = (unsigned int)(arg1)->getMIDINoteNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoice_getStealMIDINoteNumber(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoice *arg1 = (SynthLab::SynthVoice *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("SynthLab::SynthVoice::getStealMIDINoteNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoice::getStealMIDINoteNumber",1,"SynthLab::SynthVoice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoice,0))){
    SWIG_fail_ptr("SynthVoice_getStealMIDINoteNumber",1,SWIGTYPE_p_SynthLab__SynthVoice);
  }
  
  result = (unsigned int)(arg1)->getStealMIDINoteNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthVoice_voiceIsStealing(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthVoice *arg1 = (SynthLab::SynthVoice *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthVoice::voiceIsStealing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthVoice::voiceIsStealing",1,"SynthLab::SynthVoice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthVoice,0))){
    SWIG_fail_ptr("SynthVoice_voiceIsStealing",1,SWIGTYPE_p_SynthLab__SynthVoice);
  }
  
  result = (bool)(arg1)->voiceIsStealing();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SynthVoice(void *obj) {
SynthLab::SynthVoice *arg1 = (SynthLab::SynthVoice *) obj;
delete arg1;
}
static int _proxy__wrap_new_SynthVoice(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SynthVoice);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SynthVoice_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SynthVoice_methods[]= {
    { "reset", _wrap_SynthVoice_reset},
    { "update", _wrap_SynthVoice_update},
    { "render", _wrap_SynthVoice_render},
    { "processMIDIEvent", _wrap_SynthVoice_processMIDIEvent},
    { "initialize", _wrap_SynthVoice_initialize},
    { "doNoteOn", _wrap_SynthVoice_doNoteOn},
    { "doNoteOff", _wrap_SynthVoice_doNoteOff},
    { "isVoiceActive", _wrap_SynthVoice_isVoiceActive},
    { "getVoiceState", _wrap_SynthVoice_getVoiceState},
    { "getTimestamp", _wrap_SynthVoice_getTimestamp},
    { "incrementTimestamp", _wrap_SynthVoice_incrementTimestamp},
    { "clearTimestamp", _wrap_SynthVoice_clearTimestamp},
    { "getMIDINoteNumber", _wrap_SynthVoice_getMIDINoteNumber},
    { "getStealMIDINoteNumber", _wrap_SynthVoice_getStealMIDINoteNumber},
    { "voiceIsStealing", _wrap_SynthVoice_voiceIsStealing},
    {0,0}
};
static swig_lua_method swig_SynthVoice_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SynthVoice_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SynthVoice_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SynthVoice_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SynthVoice_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SynthVoice_Sf_SwigStatic = {
    "SynthVoice",
    swig_SynthVoice_Sf_SwigStatic_methods,
    swig_SynthVoice_Sf_SwigStatic_attributes,
    swig_SynthVoice_Sf_SwigStatic_constants,
    swig_SynthVoice_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SynthVoice_bases[] = {0};
static const char *swig_SynthVoice_base_names[] = {0};
static swig_lua_class _wrap_class_SynthVoice = { "SynthVoice", "SynthVoice", &SWIGTYPE_p_SynthLab__SynthVoice,_proxy__wrap_new_SynthVoice, swig_delete_SynthVoice, swig_SynthVoice_methods, swig_SynthVoice_attributes, &swig_SynthVoice_Sf_SwigStatic, swig_SynthVoice_meta, swig_SynthVoice_bases, swig_SynthVoice_base_names };

static int _wrap_new_AnalogEGCore(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AnalogEGCore *result = 0 ;
  
  SWIG_check_num_args("SynthLab::AnalogEGCore::AnalogEGCore",0,0)
  result = (SynthLab::AnalogEGCore *)new SynthLab::AnalogEGCore();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__AnalogEGCore,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogEGCore_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AnalogEGCore *arg1 = (SynthLab::AnalogEGCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::AnalogEGCore::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AnalogEGCore::reset",1,"SynthLab::AnalogEGCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::AnalogEGCore::reset",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AnalogEGCore,0))){
    SWIG_fail_ptr("AnalogEGCore_reset",1,SWIGTYPE_p_SynthLab__AnalogEGCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("AnalogEGCore_reset",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->reset(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogEGCore_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AnalogEGCore *arg1 = (SynthLab::AnalogEGCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::AnalogEGCore::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AnalogEGCore::update",1,"SynthLab::AnalogEGCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::AnalogEGCore::update",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AnalogEGCore,0))){
    SWIG_fail_ptr("AnalogEGCore_update",1,SWIGTYPE_p_SynthLab__AnalogEGCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("AnalogEGCore_update",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->update(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogEGCore_render(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AnalogEGCore *arg1 = (SynthLab::AnalogEGCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::AnalogEGCore::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AnalogEGCore::render",1,"SynthLab::AnalogEGCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::AnalogEGCore::render",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AnalogEGCore,0))){
    SWIG_fail_ptr("AnalogEGCore_render",1,SWIGTYPE_p_SynthLab__AnalogEGCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("AnalogEGCore_render",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->render(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogEGCore_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AnalogEGCore *arg1 = (SynthLab::AnalogEGCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::AnalogEGCore::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AnalogEGCore::doNoteOn",1,"SynthLab::AnalogEGCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::AnalogEGCore::doNoteOn",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AnalogEGCore,0))){
    SWIG_fail_ptr("AnalogEGCore_doNoteOn",1,SWIGTYPE_p_SynthLab__AnalogEGCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("AnalogEGCore_doNoteOn",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogEGCore_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AnalogEGCore *arg1 = (SynthLab::AnalogEGCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::AnalogEGCore::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AnalogEGCore::doNoteOff",1,"SynthLab::AnalogEGCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::AnalogEGCore::doNoteOff",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AnalogEGCore,0))){
    SWIG_fail_ptr("AnalogEGCore_doNoteOff",1,SWIGTYPE_p_SynthLab__AnalogEGCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("AnalogEGCore_doNoteOff",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogEGCore_getState(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AnalogEGCore *arg1 = (SynthLab::AnalogEGCore *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("SynthLab::AnalogEGCore::getState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AnalogEGCore::getState",1,"SynthLab::AnalogEGCore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AnalogEGCore,0))){
    SWIG_fail_ptr("AnalogEGCore_getState",1,SWIGTYPE_p_SynthLab__AnalogEGCore);
  }
  
  result = (arg1)->getState();
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogEGCore_shutdown(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AnalogEGCore *arg1 = (SynthLab::AnalogEGCore *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::AnalogEGCore::shutdown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AnalogEGCore::shutdown",1,"SynthLab::AnalogEGCore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AnalogEGCore,0))){
    SWIG_fail_ptr("AnalogEGCore_shutdown",1,SWIGTYPE_p_SynthLab__AnalogEGCore);
  }
  
  result = (bool)(arg1)->shutdown();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogEGCore_setSustainOverride(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AnalogEGCore *arg1 = (SynthLab::AnalogEGCore *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::AnalogEGCore::setSustainOverride",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AnalogEGCore::setSustainOverride",1,"SynthLab::AnalogEGCore *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::AnalogEGCore::setSustainOverride",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AnalogEGCore,0))){
    SWIG_fail_ptr("AnalogEGCore_setSustainOverride",1,SWIGTYPE_p_SynthLab__AnalogEGCore);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setSustainOverride(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AnalogEGCore(void *obj) {
SynthLab::AnalogEGCore *arg1 = (SynthLab::AnalogEGCore *) obj;
delete arg1;
}
static int _proxy__wrap_new_AnalogEGCore(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AnalogEGCore);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AnalogEGCore_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AnalogEGCore_methods[]= {
    { "reset", _wrap_AnalogEGCore_reset},
    { "update", _wrap_AnalogEGCore_update},
    { "render", _wrap_AnalogEGCore_render},
    { "doNoteOn", _wrap_AnalogEGCore_doNoteOn},
    { "doNoteOff", _wrap_AnalogEGCore_doNoteOff},
    { "getState", _wrap_AnalogEGCore_getState},
    { "shutdown", _wrap_AnalogEGCore_shutdown},
    { "setSustainOverride", _wrap_AnalogEGCore_setSustainOverride},
    {0,0}
};
static swig_lua_method swig_AnalogEGCore_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AnalogEGCore_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AnalogEGCore_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AnalogEGCore_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AnalogEGCore_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AnalogEGCore_Sf_SwigStatic = {
    "AnalogEGCore",
    swig_AnalogEGCore_Sf_SwigStatic_methods,
    swig_AnalogEGCore_Sf_SwigStatic_attributes,
    swig_AnalogEGCore_Sf_SwigStatic_constants,
    swig_AnalogEGCore_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AnalogEGCore_bases[] = {0,0};
static const char *swig_AnalogEGCore_base_names[] = {"SynthLab::ModuleCore *",0};
static swig_lua_class _wrap_class_AnalogEGCore = { "AnalogEGCore", "AnalogEGCore", &SWIGTYPE_p_SynthLab__AnalogEGCore,_proxy__wrap_new_AnalogEGCore, swig_delete_AnalogEGCore, swig_AnalogEGCore_methods, swig_AnalogEGCore_attributes, &swig_AnalogEGCore_Sf_SwigStatic, swig_AnalogEGCore_meta, swig_AnalogEGCore_bases, swig_AnalogEGCore_base_names };

static int _wrap_AudioDelay_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioDelay *arg1 = (SynthLab::AudioDelay *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::AudioDelay::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioDelay::reset",1,"SynthLab::AudioDelay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::AudioDelay::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioDelay,0))){
    SWIG_fail_ptr("AudioDelay_reset",1,SWIGTYPE_p_SynthLab__AudioDelay);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDelay_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioDelay *arg1 = (SynthLab::AudioDelay *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::AudioDelay::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioDelay::update",1,"SynthLab::AudioDelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioDelay,0))){
    SWIG_fail_ptr("AudioDelay_update",1,SWIGTYPE_p_SynthLab__AudioDelay);
  }
  
  result = (bool)(arg1)->update();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDelay_render__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioDelay *arg1 = (SynthLab::AudioDelay *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::AudioDelay::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioDelay::render",1,"SynthLab::AudioDelay *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::AudioDelay::render",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioDelay,0))){
    SWIG_fail_ptr("AudioDelay_render",1,SWIGTYPE_p_SynthLab__AudioDelay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("AudioDelay_render",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->render(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDelay_render__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioDelay *arg1 = (SynthLab::AudioDelay *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::AudioDelay::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioDelay::render",1,"SynthLab::AudioDelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioDelay,0))){
    SWIG_fail_ptr("AudioDelay_render",1,SWIGTYPE_p_SynthLab__AudioDelay);
  }
  
  result = (bool)(arg1)->render();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDelay_render(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__AudioDelay, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AudioDelay_render__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__AudioDelay, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AudioDelay_render__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudioDelay_render'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::AudioDelay::render(uint32_t)\n"
    "    SynthLab::AudioDelay::render()\n");
  lua_error(L);return 0;
}


static int _wrap_AudioDelay_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioDelay *arg1 = (SynthLab::AudioDelay *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::AudioDelay::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioDelay::doNoteOn",1,"SynthLab::AudioDelay *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::AudioDelay::doNoteOn",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioDelay,0))){
    SWIG_fail_ptr("AudioDelay_doNoteOn",1,SWIGTYPE_p_SynthLab__AudioDelay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("AudioDelay_doNoteOn",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDelay_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioDelay *arg1 = (SynthLab::AudioDelay *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::AudioDelay::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioDelay::doNoteOff",1,"SynthLab::AudioDelay *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::AudioDelay::doNoteOff",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioDelay,0))){
    SWIG_fail_ptr("AudioDelay_doNoteOff",1,SWIGTYPE_p_SynthLab__AudioDelay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("AudioDelay_doNoteOff",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDelay_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::AudioDelay *arg1 = (SynthLab::AudioDelay *) 0 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::AudioDelayParameters > > result;
  
  SWIG_check_num_args("SynthLab::AudioDelay::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::AudioDelay::getParameters",1,"SynthLab::AudioDelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__AudioDelay,0))){
    SWIG_fail_ptr("AudioDelay_getParameters",1,SWIGTYPE_p_SynthLab__AudioDelay);
  }
  
  result = (arg1)->getParameters();
  {
    std::shared_ptr< SynthLab::AudioDelayParameters > * resultptr = new std::shared_ptr< SynthLab::AudioDelayParameters >((const std::shared_ptr< SynthLab::AudioDelayParameters > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioDelayParameters_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AudioDelay(void *obj) {
SynthLab::AudioDelay *arg1 = (SynthLab::AudioDelay *) obj;
delete arg1;
}
static swig_lua_attribute swig_AudioDelay_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AudioDelay_methods[]= {
    { "reset", _wrap_AudioDelay_reset},
    { "update", _wrap_AudioDelay_update},
    { "render", _wrap_AudioDelay_render},
    { "doNoteOn", _wrap_AudioDelay_doNoteOn},
    { "doNoteOff", _wrap_AudioDelay_doNoteOff},
    { "getParameters", _wrap_AudioDelay_getParameters},
    {0,0}
};
static swig_lua_method swig_AudioDelay_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AudioDelay_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AudioDelay_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AudioDelay_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AudioDelay_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AudioDelay_Sf_SwigStatic = {
    "AudioDelay",
    swig_AudioDelay_Sf_SwigStatic_methods,
    swig_AudioDelay_Sf_SwigStatic_attributes,
    swig_AudioDelay_Sf_SwigStatic_constants,
    swig_AudioDelay_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AudioDelay_bases[] = {0,0};
static const char *swig_AudioDelay_base_names[] = {"SynthLab::SynthModule *",0};
static swig_lua_class _wrap_class_AudioDelay = { "AudioDelay", "AudioDelay", &SWIGTYPE_p_SynthLab__AudioDelay,0, swig_delete_AudioDelay, swig_AudioDelay_methods, swig_AudioDelay_attributes, &swig_AudioDelay_Sf_SwigStatic, swig_AudioDelay_meta, swig_AudioDelay_bases, swig_AudioDelay_base_names };

static int _wrap_new_BasicLookupTables(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::BasicLookupTables *result = 0 ;
  
  SWIG_check_num_args("SynthLab::BasicLookupTables::BasicLookupTables",0,0)
  result = (SynthLab::BasicLookupTables *)new SynthLab::BasicLookupTables();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__BasicLookupTables,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicLookupTables_readTableByTablePointer(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::BasicLookupTables *arg1 = (SynthLab::BasicLookupTables *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::BasicLookupTables::readTableByTablePointer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::BasicLookupTables::readTableByTablePointer",1,"SynthLab::BasicLookupTables *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::BasicLookupTables::readTableByTablePointer",2,"double *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::BasicLookupTables::readTableByTablePointer",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__BasicLookupTables,0))){
    SWIG_fail_ptr("BasicLookupTables_readTableByTablePointer",1,SWIGTYPE_p_SynthLab__BasicLookupTables);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("BasicLookupTables_readTableByTablePointer",2,SWIGTYPE_p_double);
  }
  
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->readTableByTablePointer(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicLookupTables_readTableByTableIndex(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::BasicLookupTables *arg1 = (SynthLab::BasicLookupTables *) 0 ;
  uint32_t arg2 ;
  double arg3 ;
  uint32_t *argp2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::BasicLookupTables::readTableByTableIndex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::BasicLookupTables::readTableByTableIndex",1,"SynthLab::BasicLookupTables *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::BasicLookupTables::readTableByTableIndex",2,"uint32_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::BasicLookupTables::readTableByTableIndex",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__BasicLookupTables,0))){
    SWIG_fail_ptr("BasicLookupTables_readTableByTableIndex",1,SWIGTYPE_p_SynthLab__BasicLookupTables);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("BasicLookupTables_readTableByTableIndex",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->readTableByTableIndex(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicLookupTables_readTableByTableIndexNormalized(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::BasicLookupTables *arg1 = (SynthLab::BasicLookupTables *) 0 ;
  uint32_t arg2 ;
  double arg3 ;
  uint32_t *argp2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::BasicLookupTables::readTableByTableIndexNormalized",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::BasicLookupTables::readTableByTableIndexNormalized",1,"SynthLab::BasicLookupTables *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::BasicLookupTables::readTableByTableIndexNormalized",2,"uint32_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::BasicLookupTables::readTableByTableIndexNormalized",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__BasicLookupTables,0))){
    SWIG_fail_ptr("BasicLookupTables_readTableByTableIndexNormalized",1,SWIGTYPE_p_SynthLab__BasicLookupTables);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("BasicLookupTables_readTableByTableIndexNormalized",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->readTableByTableIndexNormalized(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicLookupTables_readHannTableWithNormIndex(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::BasicLookupTables *arg1 = (SynthLab::BasicLookupTables *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::BasicLookupTables::readHannTableWithNormIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::BasicLookupTables::readHannTableWithNormIndex",1,"SynthLab::BasicLookupTables *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::BasicLookupTables::readHannTableWithNormIndex",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__BasicLookupTables,0))){
    SWIG_fail_ptr("BasicLookupTables_readHannTableWithNormIndex",1,SWIGTYPE_p_SynthLab__BasicLookupTables);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->readHannTableWithNormIndex(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicLookupTables_readSineTableWithNormIndex(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::BasicLookupTables *arg1 = (SynthLab::BasicLookupTables *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::BasicLookupTables::readSineTableWithNormIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::BasicLookupTables::readSineTableWithNormIndex",1,"SynthLab::BasicLookupTables *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::BasicLookupTables::readSineTableWithNormIndex",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__BasicLookupTables,0))){
    SWIG_fail_ptr("BasicLookupTables_readSineTableWithNormIndex",1,SWIGTYPE_p_SynthLab__BasicLookupTables);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->readSineTableWithNormIndex(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BasicLookupTables(void *obj) {
SynthLab::BasicLookupTables *arg1 = (SynthLab::BasicLookupTables *) obj;
delete arg1;
}
static int _proxy__wrap_new_BasicLookupTables(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BasicLookupTables);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BasicLookupTables_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BasicLookupTables_methods[]= {
    { "readTableByTablePointer", _wrap_BasicLookupTables_readTableByTablePointer},
    { "readTableByTableIndex", _wrap_BasicLookupTables_readTableByTableIndex},
    { "readTableByTableIndexNormalized", _wrap_BasicLookupTables_readTableByTableIndexNormalized},
    { "readHannTableWithNormIndex", _wrap_BasicLookupTables_readHannTableWithNormIndex},
    { "readSineTableWithNormIndex", _wrap_BasicLookupTables_readSineTableWithNormIndex},
    {0,0}
};
static swig_lua_method swig_BasicLookupTables_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BasicLookupTables_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BasicLookupTables_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BasicLookupTables_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BasicLookupTables_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BasicLookupTables_Sf_SwigStatic = {
    "BasicLookupTables",
    swig_BasicLookupTables_Sf_SwigStatic_methods,
    swig_BasicLookupTables_Sf_SwigStatic_attributes,
    swig_BasicLookupTables_Sf_SwigStatic_constants,
    swig_BasicLookupTables_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BasicLookupTables_bases[] = {0};
static const char *swig_BasicLookupTables_base_names[] = {0};
static swig_lua_class _wrap_class_BasicLookupTables = { "BasicLookupTables", "BasicLookupTables", &SWIGTYPE_p_SynthLab__BasicLookupTables,_proxy__wrap_new_BasicLookupTables, swig_delete_BasicLookupTables, swig_BasicLookupTables_methods, swig_BasicLookupTables_attributes, &swig_BasicLookupTables_Sf_SwigStatic, swig_BasicLookupTables_meta, swig_BasicLookupTables_bases, swig_BasicLookupTables_base_names };

static int _wrap_dBLEPTable_get(lua_State* L) {
  int SWIG_arg = 0;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::dBLEPTable",0,0)
  result = (double *)(double *)SynthLab::dBLEPTable;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dBLEPTable_8_RECT_get(lua_State* L) {
  int SWIG_arg = 0;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::dBLEPTable_8_RECT",0,0)
  result = (double *)(double *)SynthLab::dBLEPTable_8_RECT;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dBLEPTable_8_TRI_get(lua_State* L) {
  int SWIG_arg = 0;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::dBLEPTable_8_TRI",0,0)
  result = (double *)(double *)SynthLab::dBLEPTable_8_TRI;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dBLEPTable_8_HANN_get(lua_State* L) {
  int SWIG_arg = 0;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::dBLEPTable_8_HANN",0,0)
  result = (double *)(double *)SynthLab::dBLEPTable_8_HANN;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dBLEPTable_8_HAMM_get(lua_State* L) {
  int SWIG_arg = 0;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::dBLEPTable_8_HAMM",0,0)
  result = (double *)(double *)SynthLab::dBLEPTable_8_HAMM;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dBLEPTable_8_BLK_get(lua_State* L) {
  int SWIG_arg = 0;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::dBLEPTable_8_BLK",0,0)
  result = (double *)(double *)SynthLab::dBLEPTable_8_BLK;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dBLEPTable_8_BLKHAR_get(lua_State* L) {
  int SWIG_arg = 0;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::dBLEPTable_8_BLKHAR",0,0)
  result = (double *)(double *)SynthLab::dBLEPTable_8_BLKHAR;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dBLEPTable_8_WELCH_get(lua_State* L) {
  int SWIG_arg = 0;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::dBLEPTable_8_WELCH",0,0)
  result = (double *)(double *)SynthLab::dBLEPTable_8_WELCH;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BQFilterCore(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::BQFilterCore *result = 0 ;
  
  SWIG_check_num_args("SynthLab::BQFilterCore::BQFilterCore",0,0)
  result = (SynthLab::BQFilterCore *)new SynthLab::BQFilterCore();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__BQFilterCore,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BQFilterCore_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::BQFilterCore *arg1 = (SynthLab::BQFilterCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::BQFilterCore::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::BQFilterCore::reset",1,"SynthLab::BQFilterCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::BQFilterCore::reset",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__BQFilterCore,0))){
    SWIG_fail_ptr("BQFilterCore_reset",1,SWIGTYPE_p_SynthLab__BQFilterCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("BQFilterCore_reset",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->reset(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BQFilterCore_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::BQFilterCore *arg1 = (SynthLab::BQFilterCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::BQFilterCore::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::BQFilterCore::update",1,"SynthLab::BQFilterCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::BQFilterCore::update",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__BQFilterCore,0))){
    SWIG_fail_ptr("BQFilterCore_update",1,SWIGTYPE_p_SynthLab__BQFilterCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("BQFilterCore_update",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->update(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BQFilterCore_render(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::BQFilterCore *arg1 = (SynthLab::BQFilterCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::BQFilterCore::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::BQFilterCore::render",1,"SynthLab::BQFilterCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::BQFilterCore::render",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__BQFilterCore,0))){
    SWIG_fail_ptr("BQFilterCore_render",1,SWIGTYPE_p_SynthLab__BQFilterCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("BQFilterCore_render",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->render(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BQFilterCore_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::BQFilterCore *arg1 = (SynthLab::BQFilterCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::BQFilterCore::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::BQFilterCore::doNoteOn",1,"SynthLab::BQFilterCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::BQFilterCore::doNoteOn",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__BQFilterCore,0))){
    SWIG_fail_ptr("BQFilterCore_doNoteOn",1,SWIGTYPE_p_SynthLab__BQFilterCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("BQFilterCore_doNoteOn",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BQFilterCore_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::BQFilterCore *arg1 = (SynthLab::BQFilterCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::BQFilterCore::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::BQFilterCore::doNoteOff",1,"SynthLab::BQFilterCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::BQFilterCore::doNoteOff",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__BQFilterCore,0))){
    SWIG_fail_ptr("BQFilterCore_doNoteOff",1,SWIGTYPE_p_SynthLab__BQFilterCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("BQFilterCore_doNoteOff",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BQFilterCore_flushDelays(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::BQFilterCore *arg1 = (SynthLab::BQFilterCore *) 0 ;
  
  SWIG_check_num_args("SynthLab::BQFilterCore::flushDelays",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::BQFilterCore::flushDelays",1,"SynthLab::BQFilterCore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__BQFilterCore,0))){
    SWIG_fail_ptr("BQFilterCore_flushDelays",1,SWIGTYPE_p_SynthLab__BQFilterCore);
  }
  
  (arg1)->flushDelays();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BQFilterCore(void *obj) {
SynthLab::BQFilterCore *arg1 = (SynthLab::BQFilterCore *) obj;
delete arg1;
}
static int _proxy__wrap_new_BQFilterCore(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BQFilterCore);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BQFilterCore_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BQFilterCore_methods[]= {
    { "reset", _wrap_BQFilterCore_reset},
    { "update", _wrap_BQFilterCore_update},
    { "render", _wrap_BQFilterCore_render},
    { "doNoteOn", _wrap_BQFilterCore_doNoteOn},
    { "doNoteOff", _wrap_BQFilterCore_doNoteOff},
    { "flushDelays", _wrap_BQFilterCore_flushDelays},
    {0,0}
};
static swig_lua_method swig_BQFilterCore_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BQFilterCore_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BQFilterCore_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BQFilterCore_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BQFilterCore_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BQFilterCore_Sf_SwigStatic = {
    "BQFilterCore",
    swig_BQFilterCore_Sf_SwigStatic_methods,
    swig_BQFilterCore_Sf_SwigStatic_attributes,
    swig_BQFilterCore_Sf_SwigStatic_constants,
    swig_BQFilterCore_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BQFilterCore_bases[] = {0,0};
static const char *swig_BQFilterCore_base_names[] = {"SynthLab::ModuleCore *",0};
static swig_lua_class _wrap_class_BQFilterCore = { "BQFilterCore", "BQFilterCore", &SWIGTYPE_p_SynthLab__BQFilterCore,_proxy__wrap_new_BQFilterCore, swig_delete_BQFilterCore, swig_BQFilterCore_methods, swig_BQFilterCore_attributes, &swig_BQFilterCore_Sf_SwigStatic, swig_BQFilterCore_meta, swig_BQFilterCore_bases, swig_BQFilterCore_base_names };

static int _wrap_new_ClassicWTCore(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ClassicWTCore *result = 0 ;
  
  SWIG_check_num_args("SynthLab::ClassicWTCore::ClassicWTCore",0,0)
  result = (SynthLab::ClassicWTCore *)new SynthLab::ClassicWTCore();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__ClassicWTCore,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassicWTCore_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ClassicWTCore *arg1 = (SynthLab::ClassicWTCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::ClassicWTCore::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ClassicWTCore::reset",1,"SynthLab::ClassicWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ClassicWTCore::reset",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ClassicWTCore,0))){
    SWIG_fail_ptr("ClassicWTCore_reset",1,SWIGTYPE_p_SynthLab__ClassicWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("ClassicWTCore_reset",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->reset(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassicWTCore_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ClassicWTCore *arg1 = (SynthLab::ClassicWTCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::ClassicWTCore::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ClassicWTCore::update",1,"SynthLab::ClassicWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ClassicWTCore::update",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ClassicWTCore,0))){
    SWIG_fail_ptr("ClassicWTCore_update",1,SWIGTYPE_p_SynthLab__ClassicWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("ClassicWTCore_update",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->update(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassicWTCore_render(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ClassicWTCore *arg1 = (SynthLab::ClassicWTCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::ClassicWTCore::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ClassicWTCore::render",1,"SynthLab::ClassicWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ClassicWTCore::render",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ClassicWTCore,0))){
    SWIG_fail_ptr("ClassicWTCore_render",1,SWIGTYPE_p_SynthLab__ClassicWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("ClassicWTCore_render",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->render(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassicWTCore_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ClassicWTCore *arg1 = (SynthLab::ClassicWTCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::ClassicWTCore::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ClassicWTCore::doNoteOn",1,"SynthLab::ClassicWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ClassicWTCore::doNoteOn",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ClassicWTCore,0))){
    SWIG_fail_ptr("ClassicWTCore_doNoteOn",1,SWIGTYPE_p_SynthLab__ClassicWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("ClassicWTCore_doNoteOn",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassicWTCore_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ClassicWTCore *arg1 = (SynthLab::ClassicWTCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::ClassicWTCore::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ClassicWTCore::doNoteOff",1,"SynthLab::ClassicWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ClassicWTCore::doNoteOff",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ClassicWTCore,0))){
    SWIG_fail_ptr("ClassicWTCore_doNoteOff",1,SWIGTYPE_p_SynthLab__ClassicWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("ClassicWTCore_doNoteOff",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassicWTCore_renderSample__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ClassicWTCore *arg1 = (SynthLab::ClassicWTCore *) 0 ;
  SynthLab::SynthClock *arg2 = 0 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::ClassicWTCore::renderSample",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ClassicWTCore::renderSample",1,"SynthLab::ClassicWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ClassicWTCore::renderSample",2,"SynthLab::SynthClock &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::ClassicWTCore::renderSample",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ClassicWTCore,0))){
    SWIG_fail_ptr("ClassicWTCore_renderSample",1,SWIGTYPE_p_SynthLab__ClassicWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("ClassicWTCore_renderSample",2,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->renderSample(*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassicWTCore_renderSample__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ClassicWTCore *arg1 = (SynthLab::ClassicWTCore *) 0 ;
  SynthLab::SynthClock *arg2 = 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::ClassicWTCore::renderSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ClassicWTCore::renderSample",1,"SynthLab::ClassicWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ClassicWTCore::renderSample",2,"SynthLab::SynthClock &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ClassicWTCore,0))){
    SWIG_fail_ptr("ClassicWTCore_renderSample",1,SWIGTYPE_p_SynthLab__ClassicWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("ClassicWTCore_renderSample",2,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  result = (double)(arg1)->renderSample(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassicWTCore_renderSample(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__ClassicWTCore, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthClock, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ClassicWTCore_renderSample__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__ClassicWTCore, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthClock, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ClassicWTCore_renderSample__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ClassicWTCore_renderSample'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::ClassicWTCore::renderSample(SynthLab::SynthClock &,double)\n"
    "    SynthLab::ClassicWTCore::renderSample(SynthLab::SynthClock &)\n");
  lua_error(L);return 0;
}


static int _wrap_ClassicWTCore_renderHardSyncSample__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ClassicWTCore *arg1 = (SynthLab::ClassicWTCore *) 0 ;
  SynthLab::SynthClock *arg2 = 0 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::ClassicWTCore::renderHardSyncSample",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ClassicWTCore::renderHardSyncSample",1,"SynthLab::ClassicWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ClassicWTCore::renderHardSyncSample",2,"SynthLab::SynthClock &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::ClassicWTCore::renderHardSyncSample",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ClassicWTCore,0))){
    SWIG_fail_ptr("ClassicWTCore_renderHardSyncSample",1,SWIGTYPE_p_SynthLab__ClassicWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("ClassicWTCore_renderHardSyncSample",2,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->renderHardSyncSample(*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassicWTCore_renderHardSyncSample__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ClassicWTCore *arg1 = (SynthLab::ClassicWTCore *) 0 ;
  SynthLab::SynthClock *arg2 = 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::ClassicWTCore::renderHardSyncSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ClassicWTCore::renderHardSyncSample",1,"SynthLab::ClassicWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ClassicWTCore::renderHardSyncSample",2,"SynthLab::SynthClock &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ClassicWTCore,0))){
    SWIG_fail_ptr("ClassicWTCore_renderHardSyncSample",1,SWIGTYPE_p_SynthLab__ClassicWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("ClassicWTCore_renderHardSyncSample",2,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  result = (double)(arg1)->renderHardSyncSample(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassicWTCore_renderHardSyncSample(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__ClassicWTCore, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthClock, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ClassicWTCore_renderHardSyncSample__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__ClassicWTCore, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthClock, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ClassicWTCore_renderHardSyncSample__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ClassicWTCore_renderHardSyncSample'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::ClassicWTCore::renderHardSyncSample(SynthLab::SynthClock &,double)\n"
    "    SynthLab::ClassicWTCore::renderHardSyncSample(SynthLab::SynthClock &)\n");
  lua_error(L);return 0;
}


static void swig_delete_ClassicWTCore(void *obj) {
SynthLab::ClassicWTCore *arg1 = (SynthLab::ClassicWTCore *) obj;
delete arg1;
}
static int _proxy__wrap_new_ClassicWTCore(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ClassicWTCore);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ClassicWTCore_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ClassicWTCore_methods[]= {
    { "reset", _wrap_ClassicWTCore_reset},
    { "update", _wrap_ClassicWTCore_update},
    { "render", _wrap_ClassicWTCore_render},
    { "doNoteOn", _wrap_ClassicWTCore_doNoteOn},
    { "doNoteOff", _wrap_ClassicWTCore_doNoteOff},
    { "renderSample", _wrap_ClassicWTCore_renderSample},
    { "renderHardSyncSample", _wrap_ClassicWTCore_renderHardSyncSample},
    {0,0}
};
static swig_lua_method swig_ClassicWTCore_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ClassicWTCore_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ClassicWTCore_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ClassicWTCore_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ClassicWTCore_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ClassicWTCore_Sf_SwigStatic = {
    "ClassicWTCore",
    swig_ClassicWTCore_Sf_SwigStatic_methods,
    swig_ClassicWTCore_Sf_SwigStatic_attributes,
    swig_ClassicWTCore_Sf_SwigStatic_constants,
    swig_ClassicWTCore_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ClassicWTCore_bases[] = {0,0};
static const char *swig_ClassicWTCore_base_names[] = {"SynthLab::ModuleCore *",0};
static swig_lua_class _wrap_class_ClassicWTCore = { "ClassicWTCore", "ClassicWTCore", &SWIGTYPE_p_SynthLab__ClassicWTCore,_proxy__wrap_new_ClassicWTCore, swig_delete_ClassicWTCore, swig_ClassicWTCore_methods, swig_ClassicWTCore_attributes, &swig_ClassicWTCore_Sf_SwigStatic, swig_ClassicWTCore_meta, swig_ClassicWTCore_bases, swig_ClassicWTCore_base_names };

static int _wrap_DCA_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DCA *arg1 = (SynthLab::DCA *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DCA::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DCA::reset",1,"SynthLab::DCA *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::DCA::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DCA,0))){
    SWIG_fail_ptr("DCA_reset",1,SWIGTYPE_p_SynthLab__DCA);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCA_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DCA *arg1 = (SynthLab::DCA *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DCA::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DCA::update",1,"SynthLab::DCA *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DCA,0))){
    SWIG_fail_ptr("DCA_update",1,SWIGTYPE_p_SynthLab__DCA);
  }
  
  result = (bool)(arg1)->update();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCA_render__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DCA *arg1 = (SynthLab::DCA *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DCA::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DCA::render",1,"SynthLab::DCA *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DCA::render",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DCA,0))){
    SWIG_fail_ptr("DCA_render",1,SWIGTYPE_p_SynthLab__DCA);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("DCA_render",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->render(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCA_render__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DCA *arg1 = (SynthLab::DCA *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DCA::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DCA::render",1,"SynthLab::DCA *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DCA,0))){
    SWIG_fail_ptr("DCA_render",1,SWIGTYPE_p_SynthLab__DCA);
  }
  
  result = (bool)(arg1)->render();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCA_render(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__DCA, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DCA_render__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__DCA, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DCA_render__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DCA_render'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::DCA::render(uint32_t)\n"
    "    SynthLab::DCA::render()\n");
  lua_error(L);return 0;
}


static int _wrap_DCA_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DCA *arg1 = (SynthLab::DCA *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DCA::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DCA::doNoteOn",1,"SynthLab::DCA *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DCA::doNoteOn",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DCA,0))){
    SWIG_fail_ptr("DCA_doNoteOn",1,SWIGTYPE_p_SynthLab__DCA);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("DCA_doNoteOn",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCA_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DCA *arg1 = (SynthLab::DCA *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DCA::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DCA::doNoteOff",1,"SynthLab::DCA *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DCA::doNoteOff",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DCA,0))){
    SWIG_fail_ptr("DCA_doNoteOff",1,SWIGTYPE_p_SynthLab__DCA);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("DCA_doNoteOff",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCA_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DCA *arg1 = (SynthLab::DCA *) 0 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::DCAParameters > > result;
  
  SWIG_check_num_args("SynthLab::DCA::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DCA::getParameters",1,"SynthLab::DCA *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DCA,0))){
    SWIG_fail_ptr("DCA_getParameters",1,SWIGTYPE_p_SynthLab__DCA);
  }
  
  result = (arg1)->getParameters();
  {
    std::shared_ptr< SynthLab::DCAParameters > * resultptr = new std::shared_ptr< SynthLab::DCAParameters >((const std::shared_ptr< SynthLab::DCAParameters > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_SynthLab__DCAParameters_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DCA(void *obj) {
SynthLab::DCA *arg1 = (SynthLab::DCA *) obj;
delete arg1;
}
static swig_lua_attribute swig_DCA_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DCA_methods[]= {
    { "reset", _wrap_DCA_reset},
    { "update", _wrap_DCA_update},
    { "render", _wrap_DCA_render},
    { "doNoteOn", _wrap_DCA_doNoteOn},
    { "doNoteOff", _wrap_DCA_doNoteOff},
    { "getParameters", _wrap_DCA_getParameters},
    {0,0}
};
static swig_lua_method swig_DCA_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DCA_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DCA_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DCA_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DCA_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DCA_Sf_SwigStatic = {
    "DCA",
    swig_DCA_Sf_SwigStatic_methods,
    swig_DCA_Sf_SwigStatic_attributes,
    swig_DCA_Sf_SwigStatic_constants,
    swig_DCA_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DCA_bases[] = {0,0};
static const char *swig_DCA_base_names[] = {"SynthLab::SynthModule *",0};
static swig_lua_class _wrap_class_DCA = { "DCA", "DCA", &SWIGTYPE_p_SynthLab__DCA,0, swig_delete_DCA, swig_DCA_methods, swig_DCA_attributes, &swig_DCA_Sf_SwigStatic, swig_DCA_meta, swig_DCA_bases, swig_DCA_base_names };

static int _wrap_new_DrumWTCore(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DrumWTCore *result = 0 ;
  
  SWIG_check_num_args("SynthLab::DrumWTCore::DrumWTCore",0,0)
  result = (SynthLab::DrumWTCore *)new SynthLab::DrumWTCore();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__DrumWTCore,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DrumWTCore_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DrumWTCore *arg1 = (SynthLab::DrumWTCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DrumWTCore::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DrumWTCore::reset",1,"SynthLab::DrumWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DrumWTCore::reset",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DrumWTCore,0))){
    SWIG_fail_ptr("DrumWTCore_reset",1,SWIGTYPE_p_SynthLab__DrumWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("DrumWTCore_reset",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->reset(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DrumWTCore_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DrumWTCore *arg1 = (SynthLab::DrumWTCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DrumWTCore::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DrumWTCore::update",1,"SynthLab::DrumWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DrumWTCore::update",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DrumWTCore,0))){
    SWIG_fail_ptr("DrumWTCore_update",1,SWIGTYPE_p_SynthLab__DrumWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("DrumWTCore_update",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->update(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DrumWTCore_render(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DrumWTCore *arg1 = (SynthLab::DrumWTCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DrumWTCore::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DrumWTCore::render",1,"SynthLab::DrumWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DrumWTCore::render",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DrumWTCore,0))){
    SWIG_fail_ptr("DrumWTCore_render",1,SWIGTYPE_p_SynthLab__DrumWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("DrumWTCore_render",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->render(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DrumWTCore_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DrumWTCore *arg1 = (SynthLab::DrumWTCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DrumWTCore::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DrumWTCore::doNoteOn",1,"SynthLab::DrumWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DrumWTCore::doNoteOn",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DrumWTCore,0))){
    SWIG_fail_ptr("DrumWTCore_doNoteOn",1,SWIGTYPE_p_SynthLab__DrumWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("DrumWTCore_doNoteOn",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DrumWTCore_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DrumWTCore *arg1 = (SynthLab::DrumWTCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DrumWTCore::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DrumWTCore::doNoteOff",1,"SynthLab::DrumWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DrumWTCore::doNoteOff",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DrumWTCore,0))){
    SWIG_fail_ptr("DrumWTCore_doNoteOff",1,SWIGTYPE_p_SynthLab__DrumWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("DrumWTCore_doNoteOff",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DrumWTCore(void *obj) {
SynthLab::DrumWTCore *arg1 = (SynthLab::DrumWTCore *) obj;
delete arg1;
}
static int _proxy__wrap_new_DrumWTCore(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DrumWTCore);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DrumWTCore_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DrumWTCore_methods[]= {
    { "reset", _wrap_DrumWTCore_reset},
    { "update", _wrap_DrumWTCore_update},
    { "render", _wrap_DrumWTCore_render},
    { "doNoteOn", _wrap_DrumWTCore_doNoteOn},
    { "doNoteOff", _wrap_DrumWTCore_doNoteOff},
    {0,0}
};
static swig_lua_method swig_DrumWTCore_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DrumWTCore_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DrumWTCore_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DrumWTCore_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DrumWTCore_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DrumWTCore_Sf_SwigStatic = {
    "DrumWTCore",
    swig_DrumWTCore_Sf_SwigStatic_methods,
    swig_DrumWTCore_Sf_SwigStatic_attributes,
    swig_DrumWTCore_Sf_SwigStatic_constants,
    swig_DrumWTCore_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DrumWTCore_bases[] = {0,0};
static const char *swig_DrumWTCore_base_names[] = {"SynthLab::ModuleCore *",0};
static swig_lua_class _wrap_class_DrumWTCore = { "DrumWTCore", "DrumWTCore", &SWIGTYPE_p_SynthLab__DrumWTCore,_proxy__wrap_new_DrumWTCore, swig_delete_DrumWTCore, swig_DrumWTCore_methods, swig_DrumWTCore_attributes, &swig_DrumWTCore_Sf_SwigStatic, swig_DrumWTCore_meta, swig_DrumWTCore_bases, swig_DrumWTCore_base_names };

static int _wrap_DXEG_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DXEG *arg1 = (SynthLab::DXEG *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DXEG::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DXEG::reset",1,"SynthLab::DXEG *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::DXEG::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DXEG,0))){
    SWIG_fail_ptr("DXEG_reset",1,SWIGTYPE_p_SynthLab__DXEG);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DXEG_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DXEG *arg1 = (SynthLab::DXEG *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DXEG::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DXEG::update",1,"SynthLab::DXEG *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DXEG,0))){
    SWIG_fail_ptr("DXEG_update",1,SWIGTYPE_p_SynthLab__DXEG);
  }
  
  result = (bool)(arg1)->update();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DXEG_render__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DXEG *arg1 = (SynthLab::DXEG *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DXEG::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DXEG::render",1,"SynthLab::DXEG *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DXEG::render",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DXEG,0))){
    SWIG_fail_ptr("DXEG_render",1,SWIGTYPE_p_SynthLab__DXEG);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("DXEG_render",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->render(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DXEG_render__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DXEG *arg1 = (SynthLab::DXEG *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DXEG::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DXEG::render",1,"SynthLab::DXEG *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DXEG,0))){
    SWIG_fail_ptr("DXEG_render",1,SWIGTYPE_p_SynthLab__DXEG);
  }
  
  result = (bool)(arg1)->render();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DXEG_render(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__DXEG, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DXEG_render__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__DXEG, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DXEG_render__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DXEG_render'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::DXEG::render(uint32_t)\n"
    "    SynthLab::DXEG::render()\n");
  lua_error(L);return 0;
}


static int _wrap_DXEG_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DXEG *arg1 = (SynthLab::DXEG *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DXEG::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DXEG::doNoteOn",1,"SynthLab::DXEG *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DXEG::doNoteOn",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DXEG,0))){
    SWIG_fail_ptr("DXEG_doNoteOn",1,SWIGTYPE_p_SynthLab__DXEG);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("DXEG_doNoteOn",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DXEG_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DXEG *arg1 = (SynthLab::DXEG *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DXEG::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DXEG::doNoteOff",1,"SynthLab::DXEG *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DXEG::doNoteOff",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DXEG,0))){
    SWIG_fail_ptr("DXEG_doNoteOff",1,SWIGTYPE_p_SynthLab__DXEG);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("DXEG_doNoteOff",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DXEG_getState(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DXEG *arg1 = (SynthLab::DXEG *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("SynthLab::DXEG::getState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DXEG::getState",1,"SynthLab::DXEG *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DXEG,0))){
    SWIG_fail_ptr("DXEG_getState",1,SWIGTYPE_p_SynthLab__DXEG);
  }
  
  result = (arg1)->getState();
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DXEG_shutdown(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DXEG *arg1 = (SynthLab::DXEG *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DXEG::shutdown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DXEG::shutdown",1,"SynthLab::DXEG *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DXEG,0))){
    SWIG_fail_ptr("DXEG_shutdown",1,SWIGTYPE_p_SynthLab__DXEG);
  }
  
  result = (bool)(arg1)->shutdown();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DXEG_setSustainOverride(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DXEG *arg1 = (SynthLab::DXEG *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::DXEG::setSustainOverride",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DXEG::setSustainOverride",1,"SynthLab::DXEG *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::DXEG::setSustainOverride",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DXEG,0))){
    SWIG_fail_ptr("DXEG_setSustainOverride",1,SWIGTYPE_p_SynthLab__DXEG);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setSustainOverride(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DXEG_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DXEG *arg1 = (SynthLab::DXEG *) 0 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::EGParameters > > result;
  
  SWIG_check_num_args("SynthLab::DXEG::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DXEG::getParameters",1,"SynthLab::DXEG *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DXEG,0))){
    SWIG_fail_ptr("DXEG_getParameters",1,SWIGTYPE_p_SynthLab__DXEG);
  }
  
  result = (arg1)->getParameters();
  {
    std::shared_ptr< SynthLab::EGParameters > * resultptr = new std::shared_ptr< SynthLab::EGParameters >((const std::shared_ptr< SynthLab::EGParameters > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_SynthLab__EGParameters_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DXEG(void *obj) {
SynthLab::DXEG *arg1 = (SynthLab::DXEG *) obj;
delete arg1;
}
static swig_lua_attribute swig_DXEG_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DXEG_methods[]= {
    { "reset", _wrap_DXEG_reset},
    { "update", _wrap_DXEG_update},
    { "render", _wrap_DXEG_render},
    { "doNoteOn", _wrap_DXEG_doNoteOn},
    { "doNoteOff", _wrap_DXEG_doNoteOff},
    { "getState", _wrap_DXEG_getState},
    { "shutdown", _wrap_DXEG_shutdown},
    { "setSustainOverride", _wrap_DXEG_setSustainOverride},
    { "getParameters", _wrap_DXEG_getParameters},
    {0,0}
};
static swig_lua_method swig_DXEG_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DXEG_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DXEG_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DXEG_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DXEG_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DXEG_Sf_SwigStatic = {
    "DXEG",
    swig_DXEG_Sf_SwigStatic_methods,
    swig_DXEG_Sf_SwigStatic_attributes,
    swig_DXEG_Sf_SwigStatic_constants,
    swig_DXEG_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DXEG_bases[] = {0,0};
static const char *swig_DXEG_base_names[] = {"SynthLab::SynthModule *",0};
static swig_lua_class _wrap_class_DXEG = { "DXEG", "DXEG", &SWIGTYPE_p_SynthLab__DXEG,0, swig_delete_DXEG, swig_DXEG_methods, swig_DXEG_attributes, &swig_DXEG_Sf_SwigStatic, swig_DXEG_meta, swig_DXEG_bases, swig_DXEG_base_names };

static int _wrap_new_DXEGCore(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DXEGCore *result = 0 ;
  
  SWIG_check_num_args("SynthLab::DXEGCore::DXEGCore",0,0)
  result = (SynthLab::DXEGCore *)new SynthLab::DXEGCore();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__DXEGCore,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DXEGCore_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DXEGCore *arg1 = (SynthLab::DXEGCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DXEGCore::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DXEGCore::reset",1,"SynthLab::DXEGCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DXEGCore::reset",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DXEGCore,0))){
    SWIG_fail_ptr("DXEGCore_reset",1,SWIGTYPE_p_SynthLab__DXEGCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("DXEGCore_reset",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->reset(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DXEGCore_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DXEGCore *arg1 = (SynthLab::DXEGCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DXEGCore::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DXEGCore::update",1,"SynthLab::DXEGCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DXEGCore::update",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DXEGCore,0))){
    SWIG_fail_ptr("DXEGCore_update",1,SWIGTYPE_p_SynthLab__DXEGCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("DXEGCore_update",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->update(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DXEGCore_render(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DXEGCore *arg1 = (SynthLab::DXEGCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DXEGCore::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DXEGCore::render",1,"SynthLab::DXEGCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DXEGCore::render",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DXEGCore,0))){
    SWIG_fail_ptr("DXEGCore_render",1,SWIGTYPE_p_SynthLab__DXEGCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("DXEGCore_render",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->render(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DXEGCore_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DXEGCore *arg1 = (SynthLab::DXEGCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DXEGCore::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DXEGCore::doNoteOn",1,"SynthLab::DXEGCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DXEGCore::doNoteOn",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DXEGCore,0))){
    SWIG_fail_ptr("DXEGCore_doNoteOn",1,SWIGTYPE_p_SynthLab__DXEGCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("DXEGCore_doNoteOn",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DXEGCore_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DXEGCore *arg1 = (SynthLab::DXEGCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DXEGCore::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DXEGCore::doNoteOff",1,"SynthLab::DXEGCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DXEGCore::doNoteOff",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DXEGCore,0))){
    SWIG_fail_ptr("DXEGCore_doNoteOff",1,SWIGTYPE_p_SynthLab__DXEGCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("DXEGCore_doNoteOff",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DXEGCore_getState(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DXEGCore *arg1 = (SynthLab::DXEGCore *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("SynthLab::DXEGCore::getState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DXEGCore::getState",1,"SynthLab::DXEGCore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DXEGCore,0))){
    SWIG_fail_ptr("DXEGCore_getState",1,SWIGTYPE_p_SynthLab__DXEGCore);
  }
  
  result = (arg1)->getState();
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DXEGCore_shutdown(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DXEGCore *arg1 = (SynthLab::DXEGCore *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::DXEGCore::shutdown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DXEGCore::shutdown",1,"SynthLab::DXEGCore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DXEGCore,0))){
    SWIG_fail_ptr("DXEGCore_shutdown",1,SWIGTYPE_p_SynthLab__DXEGCore);
  }
  
  result = (bool)(arg1)->shutdown();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DXEGCore_setSustainOverride(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DXEGCore *arg1 = (SynthLab::DXEGCore *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::DXEGCore::setSustainOverride",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DXEGCore::setSustainOverride",1,"SynthLab::DXEGCore *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::DXEGCore::setSustainOverride",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DXEGCore,0))){
    SWIG_fail_ptr("DXEGCore_setSustainOverride",1,SWIGTYPE_p_SynthLab__DXEGCore);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setSustainOverride(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DXEGCore(void *obj) {
SynthLab::DXEGCore *arg1 = (SynthLab::DXEGCore *) obj;
delete arg1;
}
static int _proxy__wrap_new_DXEGCore(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DXEGCore);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DXEGCore_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DXEGCore_methods[]= {
    { "reset", _wrap_DXEGCore_reset},
    { "update", _wrap_DXEGCore_update},
    { "render", _wrap_DXEGCore_render},
    { "doNoteOn", _wrap_DXEGCore_doNoteOn},
    { "doNoteOff", _wrap_DXEGCore_doNoteOff},
    { "getState", _wrap_DXEGCore_getState},
    { "shutdown", _wrap_DXEGCore_shutdown},
    { "setSustainOverride", _wrap_DXEGCore_setSustainOverride},
    {0,0}
};
static swig_lua_method swig_DXEGCore_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DXEGCore_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DXEGCore_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DXEGCore_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DXEGCore_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DXEGCore_Sf_SwigStatic = {
    "DXEGCore",
    swig_DXEGCore_Sf_SwigStatic_methods,
    swig_DXEGCore_Sf_SwigStatic_attributes,
    swig_DXEGCore_Sf_SwigStatic_constants,
    swig_DXEGCore_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DXEGCore_bases[] = {0,0};
static const char *swig_DXEGCore_base_names[] = {"SynthLab::ModuleCore *",0};
static swig_lua_class _wrap_class_DXEGCore = { "DXEGCore", "DXEGCore", &SWIGTYPE_p_SynthLab__DXEGCore,_proxy__wrap_new_DXEGCore, swig_delete_DXEGCore, swig_DXEGCore_methods, swig_DXEGCore_attributes, &swig_DXEGCore_Sf_SwigStatic, swig_DXEGCore_meta, swig_DXEGCore_bases, swig_DXEGCore_base_names };

static int _wrap_new_DynamicTableSource(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DynamicTableSource *result = 0 ;
  
  SWIG_check_num_args("SynthLab::DynamicTableSource::DynamicTableSource",0,0)
  result = (SynthLab::DynamicTableSource *)new SynthLab::DynamicTableSource();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__DynamicTableSource,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicTableSource_getWaveformName(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DynamicTableSource *arg1 = (SynthLab::DynamicTableSource *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("SynthLab::DynamicTableSource::getWaveformName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DynamicTableSource::getWaveformName",1,"SynthLab::DynamicTableSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DynamicTableSource,0))){
    SWIG_fail_ptr("DynamicTableSource_getWaveformName",1,SWIGTYPE_p_SynthLab__DynamicTableSource);
  }
  
  result = (char *)(arg1)->getWaveformName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicTableSource_selectTable(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DynamicTableSource *arg1 = (SynthLab::DynamicTableSource *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::DynamicTableSource::selectTable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DynamicTableSource::selectTable",1,"SynthLab::DynamicTableSource *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DynamicTableSource::selectTable",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DynamicTableSource,0))){
    SWIG_fail_ptr("DynamicTableSource_selectTable",1,SWIGTYPE_p_SynthLab__DynamicTableSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("DynamicTableSource_selectTable",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->selectTable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicTableSource_readWaveTable(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DynamicTableSource *arg1 = (SynthLab::DynamicTableSource *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::DynamicTableSource::readWaveTable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DynamicTableSource::readWaveTable",1,"SynthLab::DynamicTableSource *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::DynamicTableSource::readWaveTable",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DynamicTableSource,0))){
    SWIG_fail_ptr("DynamicTableSource_readWaveTable",1,SWIGTYPE_p_SynthLab__DynamicTableSource);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->readWaveTable(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicTableSource_getWaveTableLength(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DynamicTableSource *arg1 = (SynthLab::DynamicTableSource *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::DynamicTableSource::getWaveTableLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DynamicTableSource::getWaveTableLength",1,"SynthLab::DynamicTableSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DynamicTableSource,0))){
    SWIG_fail_ptr("DynamicTableSource_getWaveTableLength",1,SWIGTYPE_p_SynthLab__DynamicTableSource);
  }
  
  result = (arg1)->getWaveTableLength();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicTableSource_addWavetable(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DynamicTableSource *arg1 = (SynthLab::DynamicTableSource *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  std::shared_ptr< double > arg4 ;
  uint32_t arg5 ;
  char *arg6 = (char *) 0 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  std::shared_ptr< double > *argp4 ;
  uint32_t *argp5 ;
  
  SWIG_check_num_args("SynthLab::DynamicTableSource::addWavetable",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DynamicTableSource::addWavetable",1,"SynthLab::DynamicTableSource *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::DynamicTableSource::addWavetable",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::DynamicTableSource::addWavetable",3,"uint32_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SynthLab::DynamicTableSource::addWavetable",4,"std::shared_ptr< double >");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SynthLab::DynamicTableSource::addWavetable",5,"uint32_t");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("SynthLab::DynamicTableSource::addWavetable",6,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DynamicTableSource,0))){
    SWIG_fail_ptr("DynamicTableSource_addWavetable",1,SWIGTYPE_p_SynthLab__DynamicTableSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("DynamicTableSource_addWavetable",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("DynamicTableSource_addWavetable",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_std__shared_ptrT_double_t,0))){
    SWIG_fail_ptr("DynamicTableSource_addWavetable",4,SWIGTYPE_p_std__shared_ptrT_double_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("DynamicTableSource_addWavetable",5,SWIGTYPE_p_uint32_t);
  }
  arg5 = *argp5;
  
  arg6 = (char *)lua_tostring(L, 6);
  (arg1)->addWavetable(arg2,arg3,arg4,arg5,(char const *)arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicTableSource_clearAllWavetables(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::DynamicTableSource *arg1 = (SynthLab::DynamicTableSource *) 0 ;
  
  SWIG_check_num_args("SynthLab::DynamicTableSource::clearAllWavetables",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::DynamicTableSource::clearAllWavetables",1,"SynthLab::DynamicTableSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__DynamicTableSource,0))){
    SWIG_fail_ptr("DynamicTableSource_clearAllWavetables",1,SWIGTYPE_p_SynthLab__DynamicTableSource);
  }
  
  (arg1)->clearAllWavetables();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DynamicTableSource(void *obj) {
SynthLab::DynamicTableSource *arg1 = (SynthLab::DynamicTableSource *) obj;
delete arg1;
}
static int _proxy__wrap_new_DynamicTableSource(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DynamicTableSource);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DynamicTableSource_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DynamicTableSource_methods[]= {
    { "getWaveformName", _wrap_DynamicTableSource_getWaveformName},
    { "selectTable", _wrap_DynamicTableSource_selectTable},
    { "readWaveTable", _wrap_DynamicTableSource_readWaveTable},
    { "getWaveTableLength", _wrap_DynamicTableSource_getWaveTableLength},
    { "addWavetable", _wrap_DynamicTableSource_addWavetable},
    { "clearAllWavetables", _wrap_DynamicTableSource_clearAllWavetables},
    {0,0}
};
static swig_lua_method swig_DynamicTableSource_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DynamicTableSource_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DynamicTableSource_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DynamicTableSource_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DynamicTableSource_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DynamicTableSource_Sf_SwigStatic = {
    "DynamicTableSource",
    swig_DynamicTableSource_Sf_SwigStatic_methods,
    swig_DynamicTableSource_Sf_SwigStatic_attributes,
    swig_DynamicTableSource_Sf_SwigStatic_constants,
    swig_DynamicTableSource_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DynamicTableSource_bases[] = {0,0};
static const char *swig_DynamicTableSource_base_names[] = {"SynthLab::IWavetableSource *",0};
static swig_lua_class _wrap_class_DynamicTableSource = { "DynamicTableSource", "DynamicTableSource", &SWIGTYPE_p_SynthLab__DynamicTableSource,_proxy__wrap_new_DynamicTableSource, swig_delete_DynamicTableSource, swig_DynamicTableSource_methods, swig_DynamicTableSource_attributes, &swig_DynamicTableSource_Sf_SwigStatic, swig_DynamicTableSource_meta, swig_DynamicTableSource_bases, swig_DynamicTableSource_base_names };

static int _wrap_EnvelopeGenerator_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EnvelopeGenerator *arg1 = (SynthLab::EnvelopeGenerator *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::EnvelopeGenerator::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EnvelopeGenerator::reset",1,"SynthLab::EnvelopeGenerator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::EnvelopeGenerator::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EnvelopeGenerator,0))){
    SWIG_fail_ptr("EnvelopeGenerator_reset",1,SWIGTYPE_p_SynthLab__EnvelopeGenerator);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeGenerator_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EnvelopeGenerator *arg1 = (SynthLab::EnvelopeGenerator *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::EnvelopeGenerator::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EnvelopeGenerator::update",1,"SynthLab::EnvelopeGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EnvelopeGenerator,0))){
    SWIG_fail_ptr("EnvelopeGenerator_update",1,SWIGTYPE_p_SynthLab__EnvelopeGenerator);
  }
  
  result = (bool)(arg1)->update();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeGenerator_render__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EnvelopeGenerator *arg1 = (SynthLab::EnvelopeGenerator *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::EnvelopeGenerator::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EnvelopeGenerator::render",1,"SynthLab::EnvelopeGenerator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::EnvelopeGenerator::render",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EnvelopeGenerator,0))){
    SWIG_fail_ptr("EnvelopeGenerator_render",1,SWIGTYPE_p_SynthLab__EnvelopeGenerator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("EnvelopeGenerator_render",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->render(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeGenerator_render__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EnvelopeGenerator *arg1 = (SynthLab::EnvelopeGenerator *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::EnvelopeGenerator::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EnvelopeGenerator::render",1,"SynthLab::EnvelopeGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EnvelopeGenerator,0))){
    SWIG_fail_ptr("EnvelopeGenerator_render",1,SWIGTYPE_p_SynthLab__EnvelopeGenerator);
  }
  
  result = (bool)(arg1)->render();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeGenerator_render(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__EnvelopeGenerator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_EnvelopeGenerator_render__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__EnvelopeGenerator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EnvelopeGenerator_render__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EnvelopeGenerator_render'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::EnvelopeGenerator::render(uint32_t)\n"
    "    SynthLab::EnvelopeGenerator::render()\n");
  lua_error(L);return 0;
}


static int _wrap_EnvelopeGenerator_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EnvelopeGenerator *arg1 = (SynthLab::EnvelopeGenerator *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::EnvelopeGenerator::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EnvelopeGenerator::doNoteOn",1,"SynthLab::EnvelopeGenerator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::EnvelopeGenerator::doNoteOn",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EnvelopeGenerator,0))){
    SWIG_fail_ptr("EnvelopeGenerator_doNoteOn",1,SWIGTYPE_p_SynthLab__EnvelopeGenerator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("EnvelopeGenerator_doNoteOn",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeGenerator_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EnvelopeGenerator *arg1 = (SynthLab::EnvelopeGenerator *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::EnvelopeGenerator::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EnvelopeGenerator::doNoteOff",1,"SynthLab::EnvelopeGenerator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::EnvelopeGenerator::doNoteOff",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EnvelopeGenerator,0))){
    SWIG_fail_ptr("EnvelopeGenerator_doNoteOff",1,SWIGTYPE_p_SynthLab__EnvelopeGenerator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("EnvelopeGenerator_doNoteOff",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeGenerator_getState(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EnvelopeGenerator *arg1 = (SynthLab::EnvelopeGenerator *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("SynthLab::EnvelopeGenerator::getState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EnvelopeGenerator::getState",1,"SynthLab::EnvelopeGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EnvelopeGenerator,0))){
    SWIG_fail_ptr("EnvelopeGenerator_getState",1,SWIGTYPE_p_SynthLab__EnvelopeGenerator);
  }
  
  result = (arg1)->getState();
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeGenerator_shutdown(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EnvelopeGenerator *arg1 = (SynthLab::EnvelopeGenerator *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::EnvelopeGenerator::shutdown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EnvelopeGenerator::shutdown",1,"SynthLab::EnvelopeGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EnvelopeGenerator,0))){
    SWIG_fail_ptr("EnvelopeGenerator_shutdown",1,SWIGTYPE_p_SynthLab__EnvelopeGenerator);
  }
  
  result = (bool)(arg1)->shutdown();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeGenerator_setSustainOverride(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EnvelopeGenerator *arg1 = (SynthLab::EnvelopeGenerator *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::EnvelopeGenerator::setSustainOverride",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EnvelopeGenerator::setSustainOverride",1,"SynthLab::EnvelopeGenerator *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::EnvelopeGenerator::setSustainOverride",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EnvelopeGenerator,0))){
    SWIG_fail_ptr("EnvelopeGenerator_setSustainOverride",1,SWIGTYPE_p_SynthLab__EnvelopeGenerator);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setSustainOverride(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeGenerator_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::EnvelopeGenerator *arg1 = (SynthLab::EnvelopeGenerator *) 0 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::EGParameters > > result;
  
  SWIG_check_num_args("SynthLab::EnvelopeGenerator::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::EnvelopeGenerator::getParameters",1,"SynthLab::EnvelopeGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__EnvelopeGenerator,0))){
    SWIG_fail_ptr("EnvelopeGenerator_getParameters",1,SWIGTYPE_p_SynthLab__EnvelopeGenerator);
  }
  
  result = (arg1)->getParameters();
  {
    std::shared_ptr< SynthLab::EGParameters > * resultptr = new std::shared_ptr< SynthLab::EGParameters >((const std::shared_ptr< SynthLab::EGParameters > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_SynthLab__EGParameters_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EnvelopeGenerator(void *obj) {
SynthLab::EnvelopeGenerator *arg1 = (SynthLab::EnvelopeGenerator *) obj;
delete arg1;
}
static swig_lua_attribute swig_EnvelopeGenerator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EnvelopeGenerator_methods[]= {
    { "reset", _wrap_EnvelopeGenerator_reset},
    { "update", _wrap_EnvelopeGenerator_update},
    { "render", _wrap_EnvelopeGenerator_render},
    { "doNoteOn", _wrap_EnvelopeGenerator_doNoteOn},
    { "doNoteOff", _wrap_EnvelopeGenerator_doNoteOff},
    { "getState", _wrap_EnvelopeGenerator_getState},
    { "shutdown", _wrap_EnvelopeGenerator_shutdown},
    { "setSustainOverride", _wrap_EnvelopeGenerator_setSustainOverride},
    { "getParameters", _wrap_EnvelopeGenerator_getParameters},
    {0,0}
};
static swig_lua_method swig_EnvelopeGenerator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EnvelopeGenerator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EnvelopeGenerator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EnvelopeGenerator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EnvelopeGenerator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EnvelopeGenerator_Sf_SwigStatic = {
    "EnvelopeGenerator",
    swig_EnvelopeGenerator_Sf_SwigStatic_methods,
    swig_EnvelopeGenerator_Sf_SwigStatic_attributes,
    swig_EnvelopeGenerator_Sf_SwigStatic_constants,
    swig_EnvelopeGenerator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EnvelopeGenerator_bases[] = {0,0};
static const char *swig_EnvelopeGenerator_base_names[] = {"SynthLab::SynthModule *",0};
static swig_lua_class _wrap_class_EnvelopeGenerator = { "EnvelopeGenerator", "EnvelopeGenerator", &SWIGTYPE_p_SynthLab__EnvelopeGenerator,0, swig_delete_EnvelopeGenerator, swig_EnvelopeGenerator_methods, swig_EnvelopeGenerator_attributes, &swig_EnvelopeGenerator_Sf_SwigStatic, swig_EnvelopeGenerator_meta, swig_EnvelopeGenerator_bases, swig_EnvelopeGenerator_base_names };

static int _wrap_new_ExciterEG(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ExciterEG *result = 0 ;
  
  SWIG_check_num_args("SynthLab::ExciterEG::ExciterEG",0,0)
  result = (SynthLab::ExciterEG *)new SynthLab::ExciterEG();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__ExciterEG,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExciterEG_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ExciterEG *arg1 = (SynthLab::ExciterEG *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::ExciterEG::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ExciterEG::reset",1,"SynthLab::ExciterEG *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::ExciterEG::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ExciterEG,0))){
    SWIG_fail_ptr("ExciterEG_reset",1,SWIGTYPE_p_SynthLab__ExciterEG);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExciterEG_render(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ExciterEG *arg1 = (SynthLab::ExciterEG *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::ExciterEG::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ExciterEG::render",1,"SynthLab::ExciterEG *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ExciterEG,0))){
    SWIG_fail_ptr("ExciterEG_render",1,SWIGTYPE_p_SynthLab__ExciterEG);
  }
  
  result = (double)(arg1)->render();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExciterEG_startEG(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ExciterEG *arg1 = (SynthLab::ExciterEG *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::ExciterEG::startEG",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ExciterEG::startEG",1,"SynthLab::ExciterEG *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ExciterEG,0))){
    SWIG_fail_ptr("ExciterEG_startEG",1,SWIGTYPE_p_SynthLab__ExciterEG);
  }
  
  result = (bool)(arg1)->startEG();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExciterEG_setParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ExciterEG *arg1 = (SynthLab::ExciterEG *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("SynthLab::ExciterEG::setParameters",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ExciterEG::setParameters",1,"SynthLab::ExciterEG *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::ExciterEG::setParameters",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::ExciterEG::setParameters",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::ExciterEG::setParameters",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ExciterEG,0))){
    SWIG_fail_ptr("ExciterEG_setParameters",1,SWIGTYPE_p_SynthLab__ExciterEG);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->setParameters(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ExciterEG(void *obj) {
SynthLab::ExciterEG *arg1 = (SynthLab::ExciterEG *) obj;
delete arg1;
}
static int _proxy__wrap_new_ExciterEG(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ExciterEG);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ExciterEG_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ExciterEG_methods[]= {
    { "reset", _wrap_ExciterEG_reset},
    { "render", _wrap_ExciterEG_render},
    { "startEG", _wrap_ExciterEG_startEG},
    { "setParameters", _wrap_ExciterEG_setParameters},
    {0,0}
};
static swig_lua_method swig_ExciterEG_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ExciterEG_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ExciterEG_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ExciterEG_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ExciterEG_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ExciterEG_Sf_SwigStatic = {
    "ExciterEG",
    swig_ExciterEG_Sf_SwigStatic_methods,
    swig_ExciterEG_Sf_SwigStatic_attributes,
    swig_ExciterEG_Sf_SwigStatic_constants,
    swig_ExciterEG_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ExciterEG_bases[] = {0};
static const char *swig_ExciterEG_base_names[] = {0};
static swig_lua_class _wrap_class_ExciterEG = { "ExciterEG", "ExciterEG", &SWIGTYPE_p_SynthLab__ExciterEG,_proxy__wrap_new_ExciterEG, swig_delete_ExciterEG, swig_ExciterEG_methods, swig_ExciterEG_attributes, &swig_ExciterEG_Sf_SwigStatic, swig_ExciterEG_meta, swig_ExciterEG_bases, swig_ExciterEG_base_names };

static int _wrap_new_Exciter(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Exciter *result = 0 ;
  
  SWIG_check_num_args("SynthLab::Exciter::Exciter",0,0)
  result = (SynthLab::Exciter *)new SynthLab::Exciter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__Exciter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Exciter_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Exciter *arg1 = (SynthLab::Exciter *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::Exciter::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Exciter::reset",1,"SynthLab::Exciter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::Exciter::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Exciter,0))){
    SWIG_fail_ptr("Exciter_reset",1,SWIGTYPE_p_SynthLab__Exciter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Exciter_render__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Exciter *arg1 = (SynthLab::Exciter *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::Exciter::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Exciter::render",1,"SynthLab::Exciter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::Exciter::render",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Exciter,0))){
    SWIG_fail_ptr("Exciter_render",1,SWIGTYPE_p_SynthLab__Exciter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->render(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Exciter_render__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Exciter *arg1 = (SynthLab::Exciter *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::Exciter::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Exciter::render",1,"SynthLab::Exciter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Exciter,0))){
    SWIG_fail_ptr("Exciter_render",1,SWIGTYPE_p_SynthLab__Exciter);
  }
  
  result = (double)(arg1)->render();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Exciter_render(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__Exciter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Exciter_render__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__Exciter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Exciter_render__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Exciter_render'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::Exciter::render(double)\n"
    "    SynthLab::Exciter::render()\n");
  lua_error(L);return 0;
}


static int _wrap_Exciter_startExciter(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Exciter *arg1 = (SynthLab::Exciter *) 0 ;
  
  SWIG_check_num_args("SynthLab::Exciter::startExciter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Exciter::startExciter",1,"SynthLab::Exciter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Exciter,0))){
    SWIG_fail_ptr("Exciter_startExciter",1,SWIGTYPE_p_SynthLab__Exciter);
  }
  
  (arg1)->startExciter();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Exciter_setParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Exciter *arg1 = (SynthLab::Exciter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("SynthLab::Exciter::setParameters",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Exciter::setParameters",1,"SynthLab::Exciter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::Exciter::setParameters",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::Exciter::setParameters",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::Exciter::setParameters",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Exciter,0))){
    SWIG_fail_ptr("Exciter_setParameters",1,SWIGTYPE_p_SynthLab__Exciter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->setParameters(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Exciter(void *obj) {
SynthLab::Exciter *arg1 = (SynthLab::Exciter *) obj;
delete arg1;
}
static int _proxy__wrap_new_Exciter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Exciter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Exciter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Exciter_methods[]= {
    { "reset", _wrap_Exciter_reset},
    { "render", _wrap_Exciter_render},
    { "startExciter", _wrap_Exciter_startExciter},
    { "setParameters", _wrap_Exciter_setParameters},
    {0,0}
};
static swig_lua_method swig_Exciter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Exciter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Exciter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Exciter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Exciter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Exciter_Sf_SwigStatic = {
    "Exciter",
    swig_Exciter_Sf_SwigStatic_methods,
    swig_Exciter_Sf_SwigStatic_attributes,
    swig_Exciter_Sf_SwigStatic_constants,
    swig_Exciter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Exciter_bases[] = {0};
static const char *swig_Exciter_base_names[] = {0};
static swig_lua_class _wrap_class_Exciter = { "Exciter", "Exciter", &SWIGTYPE_p_SynthLab__Exciter,_proxy__wrap_new_Exciter, swig_delete_Exciter, swig_Exciter_methods, swig_Exciter_attributes, &swig_Exciter_Sf_SwigStatic, swig_Exciter_meta, swig_Exciter_bases, swig_Exciter_base_names };

static int _wrap_new_FMLFOCore(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMLFOCore *result = 0 ;
  
  SWIG_check_num_args("SynthLab::FMLFOCore::FMLFOCore",0,0)
  result = (SynthLab::FMLFOCore *)new SynthLab::FMLFOCore();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__FMLFOCore,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMLFOCore_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMLFOCore *arg1 = (SynthLab::FMLFOCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::FMLFOCore::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMLFOCore::reset",1,"SynthLab::FMLFOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::FMLFOCore::reset",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMLFOCore,0))){
    SWIG_fail_ptr("FMLFOCore_reset",1,SWIGTYPE_p_SynthLab__FMLFOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("FMLFOCore_reset",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->reset(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMLFOCore_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMLFOCore *arg1 = (SynthLab::FMLFOCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::FMLFOCore::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMLFOCore::update",1,"SynthLab::FMLFOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::FMLFOCore::update",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMLFOCore,0))){
    SWIG_fail_ptr("FMLFOCore_update",1,SWIGTYPE_p_SynthLab__FMLFOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("FMLFOCore_update",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->update(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMLFOCore_render(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMLFOCore *arg1 = (SynthLab::FMLFOCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::FMLFOCore::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMLFOCore::render",1,"SynthLab::FMLFOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::FMLFOCore::render",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMLFOCore,0))){
    SWIG_fail_ptr("FMLFOCore_render",1,SWIGTYPE_p_SynthLab__FMLFOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("FMLFOCore_render",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->render(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMLFOCore_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMLFOCore *arg1 = (SynthLab::FMLFOCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::FMLFOCore::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMLFOCore::doNoteOn",1,"SynthLab::FMLFOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::FMLFOCore::doNoteOn",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMLFOCore,0))){
    SWIG_fail_ptr("FMLFOCore_doNoteOn",1,SWIGTYPE_p_SynthLab__FMLFOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("FMLFOCore_doNoteOn",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMLFOCore_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMLFOCore *arg1 = (SynthLab::FMLFOCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::FMLFOCore::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMLFOCore::doNoteOff",1,"SynthLab::FMLFOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::FMLFOCore::doNoteOff",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMLFOCore,0))){
    SWIG_fail_ptr("FMLFOCore_doNoteOff",1,SWIGTYPE_p_SynthLab__FMLFOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("FMLFOCore_doNoteOff",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FMLFOCore(void *obj) {
SynthLab::FMLFOCore *arg1 = (SynthLab::FMLFOCore *) obj;
delete arg1;
}
static int _proxy__wrap_new_FMLFOCore(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FMLFOCore);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FMLFOCore_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FMLFOCore_methods[]= {
    { "reset", _wrap_FMLFOCore_reset},
    { "update", _wrap_FMLFOCore_update},
    { "render", _wrap_FMLFOCore_render},
    { "doNoteOn", _wrap_FMLFOCore_doNoteOn},
    { "doNoteOff", _wrap_FMLFOCore_doNoteOff},
    {0,0}
};
static swig_lua_method swig_FMLFOCore_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FMLFOCore_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FMLFOCore_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FMLFOCore_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FMLFOCore_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FMLFOCore_Sf_SwigStatic = {
    "FMLFOCore",
    swig_FMLFOCore_Sf_SwigStatic_methods,
    swig_FMLFOCore_Sf_SwigStatic_attributes,
    swig_FMLFOCore_Sf_SwigStatic_constants,
    swig_FMLFOCore_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FMLFOCore_bases[] = {0,0};
static const char *swig_FMLFOCore_base_names[] = {"SynthLab::ModuleCore *",0};
static swig_lua_class _wrap_class_FMLFOCore = { "FMLFOCore", "FMLFOCore", &SWIGTYPE_p_SynthLab__FMLFOCore,_proxy__wrap_new_FMLFOCore, swig_delete_FMLFOCore, swig_FMLFOCore_methods, swig_FMLFOCore_attributes, &swig_FMLFOCore_Sf_SwigStatic, swig_FMLFOCore_meta, swig_FMLFOCore_bases, swig_FMLFOCore_base_names };

static int _wrap_new_FMOCore(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOCore *result = 0 ;
  
  SWIG_check_num_args("SynthLab::FMOCore::FMOCore",0,0)
  result = (SynthLab::FMOCore *)new SynthLab::FMOCore();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__FMOCore,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOCore_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOCore *arg1 = (SynthLab::FMOCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::FMOCore::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOCore::reset",1,"SynthLab::FMOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::FMOCore::reset",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOCore,0))){
    SWIG_fail_ptr("FMOCore_reset",1,SWIGTYPE_p_SynthLab__FMOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("FMOCore_reset",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->reset(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOCore_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOCore *arg1 = (SynthLab::FMOCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::FMOCore::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOCore::update",1,"SynthLab::FMOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::FMOCore::update",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOCore,0))){
    SWIG_fail_ptr("FMOCore_update",1,SWIGTYPE_p_SynthLab__FMOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("FMOCore_update",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->update(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOCore_render(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOCore *arg1 = (SynthLab::FMOCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::FMOCore::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOCore::render",1,"SynthLab::FMOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::FMOCore::render",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOCore,0))){
    SWIG_fail_ptr("FMOCore_render",1,SWIGTYPE_p_SynthLab__FMOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("FMOCore_render",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->render(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOCore_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOCore *arg1 = (SynthLab::FMOCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::FMOCore::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOCore::doNoteOn",1,"SynthLab::FMOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::FMOCore::doNoteOn",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOCore,0))){
    SWIG_fail_ptr("FMOCore_doNoteOn",1,SWIGTYPE_p_SynthLab__FMOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("FMOCore_doNoteOn",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOCore_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOCore *arg1 = (SynthLab::FMOCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::FMOCore::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOCore::doNoteOff",1,"SynthLab::FMOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::FMOCore::doNoteOff",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOCore,0))){
    SWIG_fail_ptr("FMOCore_doNoteOff",1,SWIGTYPE_p_SynthLab__FMOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("FMOCore_doNoteOff",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FMOCore(void *obj) {
SynthLab::FMOCore *arg1 = (SynthLab::FMOCore *) obj;
delete arg1;
}
static int _proxy__wrap_new_FMOCore(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FMOCore);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FMOCore_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FMOCore_methods[]= {
    { "reset", _wrap_FMOCore_reset},
    { "update", _wrap_FMOCore_update},
    { "render", _wrap_FMOCore_render},
    { "doNoteOn", _wrap_FMOCore_doNoteOn},
    { "doNoteOff", _wrap_FMOCore_doNoteOff},
    {0,0}
};
static swig_lua_method swig_FMOCore_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FMOCore_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FMOCore_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FMOCore_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FMOCore_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FMOCore_Sf_SwigStatic = {
    "FMOCore",
    swig_FMOCore_Sf_SwigStatic_methods,
    swig_FMOCore_Sf_SwigStatic_attributes,
    swig_FMOCore_Sf_SwigStatic_constants,
    swig_FMOCore_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FMOCore_bases[] = {0,0};
static const char *swig_FMOCore_base_names[] = {"SynthLab::ModuleCore *",0};
static swig_lua_class _wrap_class_FMOCore = { "FMOCore", "FMOCore", &SWIGTYPE_p_SynthLab__FMOCore,_proxy__wrap_new_FMOCore, swig_delete_FMOCore, swig_FMOCore_methods, swig_FMOCore_attributes, &swig_FMOCore_Sf_SwigStatic, swig_FMOCore_meta, swig_FMOCore_bases, swig_FMOCore_base_names };

static int _wrap_FMOperator_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperator *arg1 = (SynthLab::FMOperator *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::FMOperator::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperator::reset",1,"SynthLab::FMOperator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::FMOperator::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperator,0))){
    SWIG_fail_ptr("FMOperator_reset",1,SWIGTYPE_p_SynthLab__FMOperator);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperator_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperator *arg1 = (SynthLab::FMOperator *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::FMOperator::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperator::update",1,"SynthLab::FMOperator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperator,0))){
    SWIG_fail_ptr("FMOperator_update",1,SWIGTYPE_p_SynthLab__FMOperator);
  }
  
  result = (bool)(arg1)->update();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperator_render__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperator *arg1 = (SynthLab::FMOperator *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::FMOperator::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperator::render",1,"SynthLab::FMOperator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::FMOperator::render",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperator,0))){
    SWIG_fail_ptr("FMOperator_render",1,SWIGTYPE_p_SynthLab__FMOperator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("FMOperator_render",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->render(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperator_render__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperator *arg1 = (SynthLab::FMOperator *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::FMOperator::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperator::render",1,"SynthLab::FMOperator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperator,0))){
    SWIG_fail_ptr("FMOperator_render",1,SWIGTYPE_p_SynthLab__FMOperator);
  }
  
  result = (bool)(arg1)->render();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperator_render(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__FMOperator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FMOperator_render__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__FMOperator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FMOperator_render__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FMOperator_render'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::FMOperator::render(uint32_t)\n"
    "    SynthLab::FMOperator::render()\n");
  lua_error(L);return 0;
}


static int _wrap_FMOperator_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperator *arg1 = (SynthLab::FMOperator *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::FMOperator::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperator::doNoteOn",1,"SynthLab::FMOperator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::FMOperator::doNoteOn",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperator,0))){
    SWIG_fail_ptr("FMOperator_doNoteOn",1,SWIGTYPE_p_SynthLab__FMOperator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("FMOperator_doNoteOn",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperator_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperator *arg1 = (SynthLab::FMOperator *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::FMOperator::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperator::doNoteOff",1,"SynthLab::FMOperator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::FMOperator::doNoteOff",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperator,0))){
    SWIG_fail_ptr("FMOperator_doNoteOff",1,SWIGTYPE_p_SynthLab__FMOperator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("FMOperator_doNoteOff",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMOperator_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FMOperator *arg1 = (SynthLab::FMOperator *) 0 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::FMOperatorParameters > > result;
  
  SWIG_check_num_args("SynthLab::FMOperator::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FMOperator::getParameters",1,"SynthLab::FMOperator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FMOperator,0))){
    SWIG_fail_ptr("FMOperator_getParameters",1,SWIGTYPE_p_SynthLab__FMOperator);
  }
  
  result = (arg1)->getParameters();
  {
    std::shared_ptr< SynthLab::FMOperatorParameters > * resultptr = new std::shared_ptr< SynthLab::FMOperatorParameters >((const std::shared_ptr< SynthLab::FMOperatorParameters > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_SynthLab__FMOperatorParameters_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FMOperator(void *obj) {
SynthLab::FMOperator *arg1 = (SynthLab::FMOperator *) obj;
delete arg1;
}
static swig_lua_attribute swig_FMOperator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FMOperator_methods[]= {
    { "reset", _wrap_FMOperator_reset},
    { "update", _wrap_FMOperator_update},
    { "render", _wrap_FMOperator_render},
    { "doNoteOn", _wrap_FMOperator_doNoteOn},
    { "doNoteOff", _wrap_FMOperator_doNoteOff},
    { "getParameters", _wrap_FMOperator_getParameters},
    {0,0}
};
static swig_lua_method swig_FMOperator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FMOperator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FMOperator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FMOperator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FMOperator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FMOperator_Sf_SwigStatic = {
    "FMOperator",
    swig_FMOperator_Sf_SwigStatic_methods,
    swig_FMOperator_Sf_SwigStatic_attributes,
    swig_FMOperator_Sf_SwigStatic_constants,
    swig_FMOperator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FMOperator_bases[] = {0,0};
static const char *swig_FMOperator_base_names[] = {"SynthLab::SynthModule *",0};
static swig_lua_class _wrap_class_FMOperator = { "FMOperator", "FMOperator", &SWIGTYPE_p_SynthLab__FMOperator,0, swig_delete_FMOperator, swig_FMOperator_methods, swig_FMOperator_attributes, &swig_FMOperator_Sf_SwigStatic, swig_FMOperator_meta, swig_FMOperator_bases, swig_FMOperator_base_names };

static int _wrap_new_FourierWTCore(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FourierWTCore *result = 0 ;
  
  SWIG_check_num_args("SynthLab::FourierWTCore::FourierWTCore",0,0)
  result = (SynthLab::FourierWTCore *)new SynthLab::FourierWTCore();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__FourierWTCore,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FourierWTCore_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FourierWTCore *arg1 = (SynthLab::FourierWTCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::FourierWTCore::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FourierWTCore::reset",1,"SynthLab::FourierWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::FourierWTCore::reset",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FourierWTCore,0))){
    SWIG_fail_ptr("FourierWTCore_reset",1,SWIGTYPE_p_SynthLab__FourierWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("FourierWTCore_reset",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->reset(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FourierWTCore_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FourierWTCore *arg1 = (SynthLab::FourierWTCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::FourierWTCore::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FourierWTCore::update",1,"SynthLab::FourierWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::FourierWTCore::update",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FourierWTCore,0))){
    SWIG_fail_ptr("FourierWTCore_update",1,SWIGTYPE_p_SynthLab__FourierWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("FourierWTCore_update",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->update(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FourierWTCore_render(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FourierWTCore *arg1 = (SynthLab::FourierWTCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::FourierWTCore::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FourierWTCore::render",1,"SynthLab::FourierWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::FourierWTCore::render",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FourierWTCore,0))){
    SWIG_fail_ptr("FourierWTCore_render",1,SWIGTYPE_p_SynthLab__FourierWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("FourierWTCore_render",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->render(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FourierWTCore_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FourierWTCore *arg1 = (SynthLab::FourierWTCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::FourierWTCore::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FourierWTCore::doNoteOn",1,"SynthLab::FourierWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::FourierWTCore::doNoteOn",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FourierWTCore,0))){
    SWIG_fail_ptr("FourierWTCore_doNoteOn",1,SWIGTYPE_p_SynthLab__FourierWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("FourierWTCore_doNoteOn",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FourierWTCore_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FourierWTCore *arg1 = (SynthLab::FourierWTCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::FourierWTCore::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FourierWTCore::doNoteOff",1,"SynthLab::FourierWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::FourierWTCore::doNoteOff",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FourierWTCore,0))){
    SWIG_fail_ptr("FourierWTCore_doNoteOff",1,SWIGTYPE_p_SynthLab__FourierWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("FourierWTCore_doNoteOff",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FourierWTCore_renderSample__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FourierWTCore *arg1 = (SynthLab::FourierWTCore *) 0 ;
  SynthLab::SynthClock *arg2 = 0 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::FourierWTCore::renderSample",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FourierWTCore::renderSample",1,"SynthLab::FourierWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::FourierWTCore::renderSample",2,"SynthLab::SynthClock &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::FourierWTCore::renderSample",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FourierWTCore,0))){
    SWIG_fail_ptr("FourierWTCore_renderSample",1,SWIGTYPE_p_SynthLab__FourierWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("FourierWTCore_renderSample",2,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->renderSample(*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FourierWTCore_renderSample__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FourierWTCore *arg1 = (SynthLab::FourierWTCore *) 0 ;
  SynthLab::SynthClock *arg2 = 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::FourierWTCore::renderSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FourierWTCore::renderSample",1,"SynthLab::FourierWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::FourierWTCore::renderSample",2,"SynthLab::SynthClock &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FourierWTCore,0))){
    SWIG_fail_ptr("FourierWTCore_renderSample",1,SWIGTYPE_p_SynthLab__FourierWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("FourierWTCore_renderSample",2,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  result = (double)(arg1)->renderSample(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FourierWTCore_renderSample(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__FourierWTCore, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthClock, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FourierWTCore_renderSample__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__FourierWTCore, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthClock, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FourierWTCore_renderSample__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FourierWTCore_renderSample'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::FourierWTCore::renderSample(SynthLab::SynthClock &,double)\n"
    "    SynthLab::FourierWTCore::renderSample(SynthLab::SynthClock &)\n");
  lua_error(L);return 0;
}


static int _wrap_FourierWTCore_renderHardSyncSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FourierWTCore *arg1 = (SynthLab::FourierWTCore *) 0 ;
  SynthLab::SynthClock *arg2 = 0 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::FourierWTCore::renderHardSyncSample",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FourierWTCore::renderHardSyncSample",1,"SynthLab::FourierWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::FourierWTCore::renderHardSyncSample",2,"SynthLab::SynthClock &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::FourierWTCore::renderHardSyncSample",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FourierWTCore,0))){
    SWIG_fail_ptr("FourierWTCore_renderHardSyncSample",1,SWIGTYPE_p_SynthLab__FourierWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("FourierWTCore_renderHardSyncSample",2,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->renderHardSyncSample(*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FourierWTCore_createTables__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FourierWTCore *arg1 = (SynthLab::FourierWTCore *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::FourierWTCore::createTables",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FourierWTCore::createTables",1,"SynthLab::FourierWTCore *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::FourierWTCore::createTables",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FourierWTCore,0))){
    SWIG_fail_ptr("FourierWTCore_createTables",1,SWIGTYPE_p_SynthLab__FourierWTCore);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->createTables(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FourierWTCore_createTables__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::FourierWTCore *arg1 = (SynthLab::FourierWTCore *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::FourierWTCore::createTables",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::FourierWTCore::createTables",1,"SynthLab::FourierWTCore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__FourierWTCore,0))){
    SWIG_fail_ptr("FourierWTCore_createTables",1,SWIGTYPE_p_SynthLab__FourierWTCore);
  }
  
  result = (bool)(arg1)->createTables();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FourierWTCore_createTables(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__FourierWTCore, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FourierWTCore_createTables__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__FourierWTCore, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FourierWTCore_createTables__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FourierWTCore_createTables'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::FourierWTCore::createTables(double)\n"
    "    SynthLab::FourierWTCore::createTables()\n");
  lua_error(L);return 0;
}


static void swig_delete_FourierWTCore(void *obj) {
SynthLab::FourierWTCore *arg1 = (SynthLab::FourierWTCore *) obj;
delete arg1;
}
static int _proxy__wrap_new_FourierWTCore(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FourierWTCore);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FourierWTCore_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FourierWTCore_methods[]= {
    { "reset", _wrap_FourierWTCore_reset},
    { "update", _wrap_FourierWTCore_update},
    { "render", _wrap_FourierWTCore_render},
    { "doNoteOn", _wrap_FourierWTCore_doNoteOn},
    { "doNoteOff", _wrap_FourierWTCore_doNoteOff},
    { "renderSample", _wrap_FourierWTCore_renderSample},
    { "renderHardSyncSample", _wrap_FourierWTCore_renderHardSyncSample},
    { "createTables", _wrap_FourierWTCore_createTables},
    {0,0}
};
static swig_lua_method swig_FourierWTCore_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FourierWTCore_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FourierWTCore_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FourierWTCore_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FourierWTCore_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FourierWTCore_Sf_SwigStatic = {
    "FourierWTCore",
    swig_FourierWTCore_Sf_SwigStatic_methods,
    swig_FourierWTCore_Sf_SwigStatic_attributes,
    swig_FourierWTCore_Sf_SwigStatic_constants,
    swig_FourierWTCore_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FourierWTCore_bases[] = {0,0};
static const char *swig_FourierWTCore_base_names[] = {"SynthLab::ModuleCore *",0};
static swig_lua_class _wrap_class_FourierWTCore = { "FourierWTCore", "FourierWTCore", &SWIGTYPE_p_SynthLab__FourierWTCore,_proxy__wrap_new_FourierWTCore, swig_delete_FourierWTCore, swig_FourierWTCore_methods, swig_FourierWTCore_attributes, &swig_FourierWTCore_Sf_SwigStatic, swig_FourierWTCore_meta, swig_FourierWTCore_bases, swig_FourierWTCore_base_names };

static int _wrap_new_KSOCore(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOCore *result = 0 ;
  
  SWIG_check_num_args("SynthLab::KSOCore::KSOCore",0,0)
  result = (SynthLab::KSOCore *)new SynthLab::KSOCore();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__KSOCore,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOCore_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOCore *arg1 = (SynthLab::KSOCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::KSOCore::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOCore::reset",1,"SynthLab::KSOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::KSOCore::reset",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOCore,0))){
    SWIG_fail_ptr("KSOCore_reset",1,SWIGTYPE_p_SynthLab__KSOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("KSOCore_reset",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->reset(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOCore_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOCore *arg1 = (SynthLab::KSOCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::KSOCore::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOCore::update",1,"SynthLab::KSOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::KSOCore::update",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOCore,0))){
    SWIG_fail_ptr("KSOCore_update",1,SWIGTYPE_p_SynthLab__KSOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("KSOCore_update",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->update(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOCore_render(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOCore *arg1 = (SynthLab::KSOCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::KSOCore::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOCore::render",1,"SynthLab::KSOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::KSOCore::render",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOCore,0))){
    SWIG_fail_ptr("KSOCore_render",1,SWIGTYPE_p_SynthLab__KSOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("KSOCore_render",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->render(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOCore_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOCore *arg1 = (SynthLab::KSOCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::KSOCore::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOCore::doNoteOn",1,"SynthLab::KSOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::KSOCore::doNoteOn",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOCore,0))){
    SWIG_fail_ptr("KSOCore_doNoteOn",1,SWIGTYPE_p_SynthLab__KSOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("KSOCore_doNoteOn",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOCore_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOCore *arg1 = (SynthLab::KSOCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::KSOCore::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOCore::doNoteOff",1,"SynthLab::KSOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::KSOCore::doNoteOff",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOCore,0))){
    SWIG_fail_ptr("KSOCore_doNoteOff",1,SWIGTYPE_p_SynthLab__KSOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("KSOCore_doNoteOff",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_KSOCore(void *obj) {
SynthLab::KSOCore *arg1 = (SynthLab::KSOCore *) obj;
delete arg1;
}
static int _proxy__wrap_new_KSOCore(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_KSOCore);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_KSOCore_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_KSOCore_methods[]= {
    { "reset", _wrap_KSOCore_reset},
    { "update", _wrap_KSOCore_update},
    { "render", _wrap_KSOCore_render},
    { "doNoteOn", _wrap_KSOCore_doNoteOn},
    { "doNoteOff", _wrap_KSOCore_doNoteOff},
    {0,0}
};
static swig_lua_method swig_KSOCore_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_KSOCore_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_KSOCore_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_KSOCore_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_KSOCore_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_KSOCore_Sf_SwigStatic = {
    "KSOCore",
    swig_KSOCore_Sf_SwigStatic_methods,
    swig_KSOCore_Sf_SwigStatic_attributes,
    swig_KSOCore_Sf_SwigStatic_constants,
    swig_KSOCore_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_KSOCore_bases[] = {0,0};
static const char *swig_KSOCore_base_names[] = {"SynthLab::ModuleCore *",0};
static swig_lua_class _wrap_class_KSOCore = { "KSOCore", "KSOCore", &SWIGTYPE_p_SynthLab__KSOCore,_proxy__wrap_new_KSOCore, swig_delete_KSOCore, swig_KSOCore_methods, swig_KSOCore_attributes, &swig_KSOCore_Sf_SwigStatic, swig_KSOCore_meta, swig_KSOCore_bases, swig_KSOCore_base_names };

static int _wrap_KSOscillator_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscillator *arg1 = (SynthLab::KSOscillator *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::KSOscillator::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscillator::reset",1,"SynthLab::KSOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::KSOscillator::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscillator,0))){
    SWIG_fail_ptr("KSOscillator_reset",1,SWIGTYPE_p_SynthLab__KSOscillator);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscillator_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscillator *arg1 = (SynthLab::KSOscillator *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::KSOscillator::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscillator::update",1,"SynthLab::KSOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscillator,0))){
    SWIG_fail_ptr("KSOscillator_update",1,SWIGTYPE_p_SynthLab__KSOscillator);
  }
  
  result = (bool)(arg1)->update();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscillator_render__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscillator *arg1 = (SynthLab::KSOscillator *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::KSOscillator::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscillator::render",1,"SynthLab::KSOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::KSOscillator::render",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscillator,0))){
    SWIG_fail_ptr("KSOscillator_render",1,SWIGTYPE_p_SynthLab__KSOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("KSOscillator_render",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->render(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscillator_render__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscillator *arg1 = (SynthLab::KSOscillator *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::KSOscillator::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscillator::render",1,"SynthLab::KSOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscillator,0))){
    SWIG_fail_ptr("KSOscillator_render",1,SWIGTYPE_p_SynthLab__KSOscillator);
  }
  
  result = (bool)(arg1)->render();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscillator_render(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__KSOscillator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_KSOscillator_render__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__KSOscillator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_KSOscillator_render__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'KSOscillator_render'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::KSOscillator::render(uint32_t)\n"
    "    SynthLab::KSOscillator::render()\n");
  lua_error(L);return 0;
}


static int _wrap_KSOscillator_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscillator *arg1 = (SynthLab::KSOscillator *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::KSOscillator::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscillator::doNoteOn",1,"SynthLab::KSOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::KSOscillator::doNoteOn",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscillator,0))){
    SWIG_fail_ptr("KSOscillator_doNoteOn",1,SWIGTYPE_p_SynthLab__KSOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("KSOscillator_doNoteOn",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KSOscillator_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::KSOscillator *arg1 = (SynthLab::KSOscillator *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::KSOscillator::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::KSOscillator::doNoteOff",1,"SynthLab::KSOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::KSOscillator::doNoteOff",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__KSOscillator,0))){
    SWIG_fail_ptr("KSOscillator_doNoteOff",1,SWIGTYPE_p_SynthLab__KSOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("KSOscillator_doNoteOff",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_KSOscillator(void *obj) {
SynthLab::KSOscillator *arg1 = (SynthLab::KSOscillator *) obj;
delete arg1;
}
static swig_lua_attribute swig_KSOscillator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_KSOscillator_methods[]= {
    { "reset", _wrap_KSOscillator_reset},
    { "update", _wrap_KSOscillator_update},
    { "render", _wrap_KSOscillator_render},
    { "doNoteOn", _wrap_KSOscillator_doNoteOn},
    { "doNoteOff", _wrap_KSOscillator_doNoteOff},
    {0,0}
};
static swig_lua_method swig_KSOscillator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_KSOscillator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_KSOscillator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_KSOscillator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_KSOscillator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_KSOscillator_Sf_SwigStatic = {
    "KSOscillator",
    swig_KSOscillator_Sf_SwigStatic_methods,
    swig_KSOscillator_Sf_SwigStatic_attributes,
    swig_KSOscillator_Sf_SwigStatic_constants,
    swig_KSOscillator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_KSOscillator_bases[] = {0,0};
static const char *swig_KSOscillator_base_names[] = {"SynthLab::SynthModule *",0};
static swig_lua_class _wrap_class_KSOscillator = { "KSOscillator", "KSOscillator", &SWIGTYPE_p_SynthLab__KSOscillator,0, swig_delete_KSOscillator, swig_KSOscillator_methods, swig_KSOscillator_attributes, &swig_KSOscillator_Sf_SwigStatic, swig_KSOscillator_meta, swig_KSOscillator_bases, swig_KSOscillator_base_names };

static int _wrap_SynthLFO_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLFO *arg1 = (SynthLab::SynthLFO *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthLFO::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLFO::reset",1,"SynthLab::SynthLFO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SynthLFO::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLFO,0))){
    SWIG_fail_ptr("SynthLFO_reset",1,SWIGTYPE_p_SynthLab__SynthLFO);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLFO_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLFO *arg1 = (SynthLab::SynthLFO *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthLFO::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLFO::update",1,"SynthLab::SynthLFO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLFO,0))){
    SWIG_fail_ptr("SynthLFO_update",1,SWIGTYPE_p_SynthLab__SynthLFO);
  }
  
  result = (bool)(arg1)->update();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLFO_render__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLFO *arg1 = (SynthLab::SynthLFO *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthLFO::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLFO::render",1,"SynthLab::SynthLFO *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthLFO::render",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLFO,0))){
    SWIG_fail_ptr("SynthLFO_render",1,SWIGTYPE_p_SynthLab__SynthLFO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("SynthLFO_render",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->render(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLFO_render__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLFO *arg1 = (SynthLab::SynthLFO *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthLFO::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLFO::render",1,"SynthLab::SynthLFO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLFO,0))){
    SWIG_fail_ptr("SynthLFO_render",1,SWIGTYPE_p_SynthLab__SynthLFO);
  }
  
  result = (bool)(arg1)->render();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLFO_render(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthLFO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SynthLFO_render__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthLFO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SynthLFO_render__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SynthLFO_render'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::SynthLFO::render(uint32_t)\n"
    "    SynthLab::SynthLFO::render()\n");
  lua_error(L);return 0;
}


static int _wrap_SynthLFO_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLFO *arg1 = (SynthLab::SynthLFO *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthLFO::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLFO::doNoteOn",1,"SynthLab::SynthLFO *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthLFO::doNoteOn",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLFO,0))){
    SWIG_fail_ptr("SynthLFO_doNoteOn",1,SWIGTYPE_p_SynthLab__SynthLFO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("SynthLFO_doNoteOn",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLFO_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLFO *arg1 = (SynthLab::SynthLFO *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SynthLFO::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLFO::doNoteOff",1,"SynthLab::SynthLFO *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SynthLFO::doNoteOff",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLFO,0))){
    SWIG_fail_ptr("SynthLFO_doNoteOff",1,SWIGTYPE_p_SynthLab__SynthLFO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("SynthLFO_doNoteOff",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynthLFO_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SynthLFO *arg1 = (SynthLab::SynthLFO *) 0 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::LFOParameters > > result;
  
  SWIG_check_num_args("SynthLab::SynthLFO::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SynthLFO::getParameters",1,"SynthLab::SynthLFO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SynthLFO,0))){
    SWIG_fail_ptr("SynthLFO_getParameters",1,SWIGTYPE_p_SynthLab__SynthLFO);
  }
  
  result = (arg1)->getParameters();
  {
    std::shared_ptr< SynthLab::LFOParameters > * resultptr = new std::shared_ptr< SynthLab::LFOParameters >((const std::shared_ptr< SynthLab::LFOParameters > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_SynthLab__LFOParameters_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SynthLFO(void *obj) {
SynthLab::SynthLFO *arg1 = (SynthLab::SynthLFO *) obj;
delete arg1;
}
static swig_lua_attribute swig_SynthLFO_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SynthLFO_methods[]= {
    { "reset", _wrap_SynthLFO_reset},
    { "update", _wrap_SynthLFO_update},
    { "render", _wrap_SynthLFO_render},
    { "doNoteOn", _wrap_SynthLFO_doNoteOn},
    { "doNoteOff", _wrap_SynthLFO_doNoteOff},
    { "getParameters", _wrap_SynthLFO_getParameters},
    {0,0}
};
static swig_lua_method swig_SynthLFO_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SynthLFO_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SynthLFO_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SynthLFO_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SynthLFO_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SynthLFO_Sf_SwigStatic = {
    "SynthLFO",
    swig_SynthLFO_Sf_SwigStatic_methods,
    swig_SynthLFO_Sf_SwigStatic_attributes,
    swig_SynthLFO_Sf_SwigStatic_constants,
    swig_SynthLFO_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SynthLFO_bases[] = {0,0};
static const char *swig_SynthLFO_base_names[] = {"SynthLab::SynthModule *",0};
static swig_lua_class _wrap_class_SynthLFO = { "SynthLFO", "SynthLFO", &SWIGTYPE_p_SynthLab__SynthLFO,0, swig_delete_SynthLFO, swig_SynthLFO_methods, swig_SynthLFO_attributes, &swig_SynthLFO_Sf_SwigStatic, swig_SynthLFO_meta, swig_SynthLFO_bases, swig_SynthLFO_base_names };

static int _wrap_new_LFOCore(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LFOCore *result = 0 ;
  
  SWIG_check_num_args("SynthLab::LFOCore::LFOCore",0,0)
  result = (SynthLab::LFOCore *)new SynthLab::LFOCore();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__LFOCore,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFOCore_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LFOCore *arg1 = (SynthLab::LFOCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::LFOCore::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LFOCore::reset",1,"SynthLab::LFOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LFOCore::reset",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LFOCore,0))){
    SWIG_fail_ptr("LFOCore_reset",1,SWIGTYPE_p_SynthLab__LFOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("LFOCore_reset",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->reset(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFOCore_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LFOCore *arg1 = (SynthLab::LFOCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::LFOCore::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LFOCore::update",1,"SynthLab::LFOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LFOCore::update",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LFOCore,0))){
    SWIG_fail_ptr("LFOCore_update",1,SWIGTYPE_p_SynthLab__LFOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("LFOCore_update",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->update(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFOCore_render(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LFOCore *arg1 = (SynthLab::LFOCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::LFOCore::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LFOCore::render",1,"SynthLab::LFOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LFOCore::render",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LFOCore,0))){
    SWIG_fail_ptr("LFOCore_render",1,SWIGTYPE_p_SynthLab__LFOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("LFOCore_render",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->render(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFOCore_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LFOCore *arg1 = (SynthLab::LFOCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::LFOCore::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LFOCore::doNoteOn",1,"SynthLab::LFOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LFOCore::doNoteOn",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LFOCore,0))){
    SWIG_fail_ptr("LFOCore_doNoteOn",1,SWIGTYPE_p_SynthLab__LFOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("LFOCore_doNoteOn",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFOCore_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LFOCore *arg1 = (SynthLab::LFOCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::LFOCore::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LFOCore::doNoteOff",1,"SynthLab::LFOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LFOCore::doNoteOff",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LFOCore,0))){
    SWIG_fail_ptr("LFOCore_doNoteOff",1,SWIGTYPE_p_SynthLab__LFOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("LFOCore_doNoteOff",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LFOCore(void *obj) {
SynthLab::LFOCore *arg1 = (SynthLab::LFOCore *) obj;
delete arg1;
}
static int _proxy__wrap_new_LFOCore(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LFOCore);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LFOCore_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LFOCore_methods[]= {
    { "reset", _wrap_LFOCore_reset},
    { "update", _wrap_LFOCore_update},
    { "render", _wrap_LFOCore_render},
    { "doNoteOn", _wrap_LFOCore_doNoteOn},
    { "doNoteOff", _wrap_LFOCore_doNoteOff},
    {0,0}
};
static swig_lua_method swig_LFOCore_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LFOCore_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LFOCore_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LFOCore_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LFOCore_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LFOCore_Sf_SwigStatic = {
    "LFOCore",
    swig_LFOCore_Sf_SwigStatic_methods,
    swig_LFOCore_Sf_SwigStatic_attributes,
    swig_LFOCore_Sf_SwigStatic_constants,
    swig_LFOCore_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LFOCore_bases[] = {0,0};
static const char *swig_LFOCore_base_names[] = {"SynthLab::ModuleCore *",0};
static swig_lua_class _wrap_class_LFOCore = { "LFOCore", "LFOCore", &SWIGTYPE_p_SynthLab__LFOCore,_proxy__wrap_new_LFOCore, swig_delete_LFOCore, swig_LFOCore_methods, swig_LFOCore_attributes, &swig_LFOCore_Sf_SwigStatic, swig_LFOCore_meta, swig_LFOCore_bases, swig_LFOCore_base_names };

static int _wrap_new_SimpleLPF(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SimpleLPF *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SimpleLPF::SimpleLPF",0,0)
  result = (SynthLab::SimpleLPF *)new SynthLab::SimpleLPF();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__SimpleLPF,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleLPF_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SimpleLPF *arg1 = (SynthLab::SimpleLPF *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SimpleLPF::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SimpleLPF::reset",1,"SynthLab::SimpleLPF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SimpleLPF::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SimpleLPF,0))){
    SWIG_fail_ptr("SimpleLPF_reset",1,SWIGTYPE_p_SynthLab__SimpleLPF);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleLPF_setLPF_g(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SimpleLPF *arg1 = (SynthLab::SimpleLPF *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::SimpleLPF::setLPF_g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SimpleLPF::setLPF_g",1,"SynthLab::SimpleLPF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SimpleLPF::setLPF_g",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SimpleLPF,0))){
    SWIG_fail_ptr("SimpleLPF_setLPF_g",1,SWIGTYPE_p_SynthLab__SimpleLPF);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setLPF_g(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleLPF_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SimpleLPF *arg1 = (SynthLab::SimpleLPF *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::SimpleLPF::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SimpleLPF::processAudioSample",1,"SynthLab::SimpleLPF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SimpleLPF::processAudioSample",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SimpleLPF,0))){
    SWIG_fail_ptr("SimpleLPF_processAudioSample",1,SWIGTYPE_p_SynthLab__SimpleLPF);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SimpleLPF(void *obj) {
SynthLab::SimpleLPF *arg1 = (SynthLab::SimpleLPF *) obj;
delete arg1;
}
static int _proxy__wrap_new_SimpleLPF(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SimpleLPF);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SimpleLPF_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SimpleLPF_methods[]= {
    { "reset", _wrap_SimpleLPF_reset},
    { "setLPF_g", _wrap_SimpleLPF_setLPF_g},
    { "processAudioSample", _wrap_SimpleLPF_processAudioSample},
    {0,0}
};
static swig_lua_method swig_SimpleLPF_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SimpleLPF_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SimpleLPF_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SimpleLPF_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SimpleLPF_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SimpleLPF_Sf_SwigStatic = {
    "SimpleLPF",
    swig_SimpleLPF_Sf_SwigStatic_methods,
    swig_SimpleLPF_Sf_SwigStatic_attributes,
    swig_SimpleLPF_Sf_SwigStatic_constants,
    swig_SimpleLPF_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SimpleLPF_bases[] = {0};
static const char *swig_SimpleLPF_base_names[] = {0};
static swig_lua_class _wrap_class_SimpleLPF = { "SimpleLPF", "SimpleLPF", &SWIGTYPE_p_SynthLab__SimpleLPF,_proxy__wrap_new_SimpleLPF, swig_delete_SimpleLPF, swig_SimpleLPF_methods, swig_SimpleLPF_attributes, &swig_SimpleLPF_Sf_SwigStatic, swig_SimpleLPF_meta, swig_SimpleLPF_bases, swig_SimpleLPF_base_names };

static int _wrap_new_LogPeakDetector(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LogPeakDetector *result = 0 ;
  
  SWIG_check_num_args("SynthLab::LogPeakDetector::LogPeakDetector",0,0)
  result = (SynthLab::LogPeakDetector *)new SynthLab::LogPeakDetector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__LogPeakDetector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogPeakDetector_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LogPeakDetector *arg1 = (SynthLab::LogPeakDetector *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::LogPeakDetector::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LogPeakDetector::reset",1,"SynthLab::LogPeakDetector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::LogPeakDetector::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LogPeakDetector,0))){
    SWIG_fail_ptr("LogPeakDetector_reset",1,SWIGTYPE_p_SynthLab__LogPeakDetector);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogPeakDetector_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LogPeakDetector *arg1 = (SynthLab::LogPeakDetector *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::LogPeakDetector::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LogPeakDetector::processAudioSample",1,"SynthLab::LogPeakDetector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::LogPeakDetector::processAudioSample",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LogPeakDetector,0))){
    SWIG_fail_ptr("LogPeakDetector_processAudioSample",1,SWIGTYPE_p_SynthLab__LogPeakDetector);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogPeakDetector_setAttackReleaseTimes(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LogPeakDetector *arg1 = (SynthLab::LogPeakDetector *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("SynthLab::LogPeakDetector::setAttackReleaseTimes",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LogPeakDetector::setAttackReleaseTimes",1,"SynthLab::LogPeakDetector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::LogPeakDetector::setAttackReleaseTimes",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::LogPeakDetector::setAttackReleaseTimes",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LogPeakDetector,0))){
    SWIG_fail_ptr("LogPeakDetector_setAttackReleaseTimes",1,SWIGTYPE_p_SynthLab__LogPeakDetector);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setAttackReleaseTimes(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogPeakDetector_kSmallestPositiveFloatValue_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LogPeakDetector *arg1 = (SynthLab::LogPeakDetector *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::LogPeakDetector::kSmallestPositiveFloatValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LogPeakDetector::kSmallestPositiveFloatValue",1,"SynthLab::LogPeakDetector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LogPeakDetector,0))){
    SWIG_fail_ptr("LogPeakDetector_kSmallestPositiveFloatValue_get",1,SWIGTYPE_p_SynthLab__LogPeakDetector);
  }
  
  result = (double)(double) ((arg1)->kSmallestPositiveFloatValue);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogPeakDetector_kSmallestNegativeFloatValue_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LogPeakDetector *arg1 = (SynthLab::LogPeakDetector *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::LogPeakDetector::kSmallestNegativeFloatValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LogPeakDetector::kSmallestNegativeFloatValue",1,"SynthLab::LogPeakDetector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LogPeakDetector,0))){
    SWIG_fail_ptr("LogPeakDetector_kSmallestNegativeFloatValue_get",1,SWIGTYPE_p_SynthLab__LogPeakDetector);
  }
  
  result = (double)(double) ((arg1)->kSmallestNegativeFloatValue);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogPeakDetector_checkFloatUnderflow(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LogPeakDetector *arg1 = (SynthLab::LogPeakDetector *) 0 ;
  double *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::LogPeakDetector::checkFloatUnderflow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LogPeakDetector::checkFloatUnderflow",1,"SynthLab::LogPeakDetector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LogPeakDetector::checkFloatUnderflow",2,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LogPeakDetector,0))){
    SWIG_fail_ptr("LogPeakDetector_checkFloatUnderflow",1,SWIGTYPE_p_SynthLab__LogPeakDetector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("LogPeakDetector_checkFloatUnderflow",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->checkFloatUnderflow(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LogPeakDetector(void *obj) {
SynthLab::LogPeakDetector *arg1 = (SynthLab::LogPeakDetector *) obj;
delete arg1;
}
static int _proxy__wrap_new_LogPeakDetector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LogPeakDetector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LogPeakDetector_attributes[] = {
    { "kSmallestPositiveFloatValue", _wrap_LogPeakDetector_kSmallestPositiveFloatValue_get, SWIG_Lua_set_immutable },
    { "kSmallestNegativeFloatValue", _wrap_LogPeakDetector_kSmallestNegativeFloatValue_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_method swig_LogPeakDetector_methods[]= {
    { "reset", _wrap_LogPeakDetector_reset},
    { "processAudioSample", _wrap_LogPeakDetector_processAudioSample},
    { "setAttackReleaseTimes", _wrap_LogPeakDetector_setAttackReleaseTimes},
    { "checkFloatUnderflow", _wrap_LogPeakDetector_checkFloatUnderflow},
    {0,0}
};
static swig_lua_method swig_LogPeakDetector_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LogPeakDetector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LogPeakDetector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LogPeakDetector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LogPeakDetector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LogPeakDetector_Sf_SwigStatic = {
    "LogPeakDetector",
    swig_LogPeakDetector_Sf_SwigStatic_methods,
    swig_LogPeakDetector_Sf_SwigStatic_attributes,
    swig_LogPeakDetector_Sf_SwigStatic_constants,
    swig_LogPeakDetector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LogPeakDetector_bases[] = {0};
static const char *swig_LogPeakDetector_base_names[] = {0};
static swig_lua_class _wrap_class_LogPeakDetector = { "LogPeakDetector", "LogPeakDetector", &SWIGTYPE_p_SynthLab__LogPeakDetector,_proxy__wrap_new_LogPeakDetector, swig_delete_LogPeakDetector, swig_LogPeakDetector_methods, swig_LogPeakDetector_attributes, &swig_LogPeakDetector_Sf_SwigStatic, swig_LogPeakDetector_meta, swig_LogPeakDetector_bases, swig_LogPeakDetector_base_names };

static int _wrap_new_LinPeakDetector(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LinPeakDetector *result = 0 ;
  
  SWIG_check_num_args("SynthLab::LinPeakDetector::LinPeakDetector",0,0)
  result = (SynthLab::LinPeakDetector *)new SynthLab::LinPeakDetector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__LinPeakDetector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LinPeakDetector_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LinPeakDetector *arg1 = (SynthLab::LinPeakDetector *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::LinPeakDetector::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LinPeakDetector::reset",1,"SynthLab::LinPeakDetector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::LinPeakDetector::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LinPeakDetector,0))){
    SWIG_fail_ptr("LinPeakDetector_reset",1,SWIGTYPE_p_SynthLab__LinPeakDetector);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LinPeakDetector_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LinPeakDetector *arg1 = (SynthLab::LinPeakDetector *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::LinPeakDetector::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LinPeakDetector::processAudioSample",1,"SynthLab::LinPeakDetector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::LinPeakDetector::processAudioSample",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LinPeakDetector,0))){
    SWIG_fail_ptr("LinPeakDetector_processAudioSample",1,SWIGTYPE_p_SynthLab__LinPeakDetector);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LinPeakDetector_setAttackReleaseTimes(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LinPeakDetector *arg1 = (SynthLab::LinPeakDetector *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("SynthLab::LinPeakDetector::setAttackReleaseTimes",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LinPeakDetector::setAttackReleaseTimes",1,"SynthLab::LinPeakDetector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::LinPeakDetector::setAttackReleaseTimes",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::LinPeakDetector::setAttackReleaseTimes",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LinPeakDetector,0))){
    SWIG_fail_ptr("LinPeakDetector_setAttackReleaseTimes",1,SWIGTYPE_p_SynthLab__LinPeakDetector);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setAttackReleaseTimes(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LinPeakDetector_kSmallestPositiveFloatValue_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LinPeakDetector *arg1 = (SynthLab::LinPeakDetector *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::LinPeakDetector::kSmallestPositiveFloatValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LinPeakDetector::kSmallestPositiveFloatValue",1,"SynthLab::LinPeakDetector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LinPeakDetector,0))){
    SWIG_fail_ptr("LinPeakDetector_kSmallestPositiveFloatValue_get",1,SWIGTYPE_p_SynthLab__LinPeakDetector);
  }
  
  result = (double)(double) ((arg1)->kSmallestPositiveFloatValue);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LinPeakDetector_kSmallestNegativeFloatValue_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LinPeakDetector *arg1 = (SynthLab::LinPeakDetector *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::LinPeakDetector::kSmallestNegativeFloatValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LinPeakDetector::kSmallestNegativeFloatValue",1,"SynthLab::LinPeakDetector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LinPeakDetector,0))){
    SWIG_fail_ptr("LinPeakDetector_kSmallestNegativeFloatValue_get",1,SWIGTYPE_p_SynthLab__LinPeakDetector);
  }
  
  result = (double)(double) ((arg1)->kSmallestNegativeFloatValue);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LinPeakDetector_checkFloatUnderflow(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LinPeakDetector *arg1 = (SynthLab::LinPeakDetector *) 0 ;
  double *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::LinPeakDetector::checkFloatUnderflow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LinPeakDetector::checkFloatUnderflow",1,"SynthLab::LinPeakDetector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LinPeakDetector::checkFloatUnderflow",2,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LinPeakDetector,0))){
    SWIG_fail_ptr("LinPeakDetector_checkFloatUnderflow",1,SWIGTYPE_p_SynthLab__LinPeakDetector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("LinPeakDetector_checkFloatUnderflow",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->checkFloatUnderflow(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LinPeakDetector(void *obj) {
SynthLab::LinPeakDetector *arg1 = (SynthLab::LinPeakDetector *) obj;
delete arg1;
}
static int _proxy__wrap_new_LinPeakDetector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LinPeakDetector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LinPeakDetector_attributes[] = {
    { "kSmallestPositiveFloatValue", _wrap_LinPeakDetector_kSmallestPositiveFloatValue_get, SWIG_Lua_set_immutable },
    { "kSmallestNegativeFloatValue", _wrap_LinPeakDetector_kSmallestNegativeFloatValue_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_method swig_LinPeakDetector_methods[]= {
    { "reset", _wrap_LinPeakDetector_reset},
    { "processAudioSample", _wrap_LinPeakDetector_processAudioSample},
    { "setAttackReleaseTimes", _wrap_LinPeakDetector_setAttackReleaseTimes},
    { "checkFloatUnderflow", _wrap_LinPeakDetector_checkFloatUnderflow},
    {0,0}
};
static swig_lua_method swig_LinPeakDetector_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LinPeakDetector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LinPeakDetector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LinPeakDetector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LinPeakDetector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LinPeakDetector_Sf_SwigStatic = {
    "LinPeakDetector",
    swig_LinPeakDetector_Sf_SwigStatic_methods,
    swig_LinPeakDetector_Sf_SwigStatic_attributes,
    swig_LinPeakDetector_Sf_SwigStatic_constants,
    swig_LinPeakDetector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LinPeakDetector_bases[] = {0};
static const char *swig_LinPeakDetector_base_names[] = {0};
static swig_lua_class _wrap_class_LinPeakDetector = { "LinPeakDetector", "LinPeakDetector", &SWIGTYPE_p_SynthLab__LinPeakDetector,_proxy__wrap_new_LinPeakDetector, swig_delete_LinPeakDetector, swig_LinPeakDetector_methods, swig_LinPeakDetector_attributes, &swig_LinPeakDetector_Sf_SwigStatic, swig_LinPeakDetector_meta, swig_LinPeakDetector_bases, swig_LinPeakDetector_base_names };

static int _wrap_new_Limiter(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Limiter *result = 0 ;
  
  SWIG_check_num_args("SynthLab::Limiter::Limiter",0,0)
  result = (SynthLab::Limiter *)new SynthLab::Limiter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__Limiter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Limiter_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Limiter *arg1 = (SynthLab::Limiter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::Limiter::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Limiter::reset",1,"SynthLab::Limiter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::Limiter::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Limiter,0))){
    SWIG_fail_ptr("Limiter_reset",1,SWIGTYPE_p_SynthLab__Limiter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->reset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Limiter_setThreshold_dB(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Limiter *arg1 = (SynthLab::Limiter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::Limiter::setThreshold_dB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Limiter::setThreshold_dB",1,"SynthLab::Limiter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::Limiter::setThreshold_dB",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Limiter,0))){
    SWIG_fail_ptr("Limiter_setThreshold_dB",1,SWIGTYPE_p_SynthLab__Limiter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setThreshold_dB(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Limiter_setThreshold(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Limiter *arg1 = (SynthLab::Limiter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::Limiter::setThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Limiter::setThreshold",1,"SynthLab::Limiter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::Limiter::setThreshold",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Limiter,0))){
    SWIG_fail_ptr("Limiter_setThreshold",1,SWIGTYPE_p_SynthLab__Limiter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setThreshold(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Limiter_calcLimiterGaindB(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Limiter *arg1 = (SynthLab::Limiter *) 0 ;
  float arg2 ;
  float arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::Limiter::calcLimiterGaindB",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Limiter::calcLimiterGaindB",1,"SynthLab::Limiter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::Limiter::calcLimiterGaindB",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::Limiter::calcLimiterGaindB",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Limiter,0))){
    SWIG_fail_ptr("Limiter_calcLimiterGaindB",1,SWIGTYPE_p_SynthLab__Limiter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (double)(arg1)->calcLimiterGaindB(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Limiter_calcLimiterGain(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Limiter *arg1 = (SynthLab::Limiter *) 0 ;
  float arg2 ;
  float arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::Limiter::calcLimiterGain",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Limiter::calcLimiterGain",1,"SynthLab::Limiter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::Limiter::calcLimiterGain",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::Limiter::calcLimiterGain",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Limiter,0))){
    SWIG_fail_ptr("Limiter_calcLimiterGain",1,SWIGTYPE_p_SynthLab__Limiter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (double)(arg1)->calcLimiterGain(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Limiter_process(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Limiter *arg1 = (SynthLab::Limiter *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::Limiter::process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Limiter::process",1,"SynthLab::Limiter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::Limiter::process",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Limiter,0))){
    SWIG_fail_ptr("Limiter_process",1,SWIGTYPE_p_SynthLab__Limiter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Limiter(void *obj) {
SynthLab::Limiter *arg1 = (SynthLab::Limiter *) obj;
delete arg1;
}
static int _proxy__wrap_new_Limiter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Limiter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Limiter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Limiter_methods[]= {
    { "reset", _wrap_Limiter_reset},
    { "setThreshold_dB", _wrap_Limiter_setThreshold_dB},
    { "setThreshold", _wrap_Limiter_setThreshold},
    { "calcLimiterGaindB", _wrap_Limiter_calcLimiterGaindB},
    { "calcLimiterGain", _wrap_Limiter_calcLimiterGain},
    { "process", _wrap_Limiter_process},
    {0,0}
};
static swig_lua_method swig_Limiter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Limiter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Limiter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Limiter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Limiter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Limiter_Sf_SwigStatic = {
    "Limiter",
    swig_Limiter_Sf_SwigStatic_methods,
    swig_Limiter_Sf_SwigStatic_attributes,
    swig_Limiter_Sf_SwigStatic_constants,
    swig_Limiter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Limiter_bases[] = {0};
static const char *swig_Limiter_base_names[] = {0};
static swig_lua_class _wrap_class_Limiter = { "Limiter", "Limiter", &SWIGTYPE_p_SynthLab__Limiter,_proxy__wrap_new_Limiter, swig_delete_Limiter, swig_Limiter_methods, swig_Limiter_attributes, &swig_Limiter_Sf_SwigStatic, swig_Limiter_meta, swig_Limiter_bases, swig_Limiter_base_names };

static int _wrap_new_LinearEGCore(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LinearEGCore *result = 0 ;
  
  SWIG_check_num_args("SynthLab::LinearEGCore::LinearEGCore",0,0)
  result = (SynthLab::LinearEGCore *)new SynthLab::LinearEGCore();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__LinearEGCore,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LinearEGCore_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LinearEGCore *arg1 = (SynthLab::LinearEGCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::LinearEGCore::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LinearEGCore::reset",1,"SynthLab::LinearEGCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LinearEGCore::reset",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LinearEGCore,0))){
    SWIG_fail_ptr("LinearEGCore_reset",1,SWIGTYPE_p_SynthLab__LinearEGCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("LinearEGCore_reset",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->reset(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LinearEGCore_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LinearEGCore *arg1 = (SynthLab::LinearEGCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::LinearEGCore::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LinearEGCore::update",1,"SynthLab::LinearEGCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LinearEGCore::update",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LinearEGCore,0))){
    SWIG_fail_ptr("LinearEGCore_update",1,SWIGTYPE_p_SynthLab__LinearEGCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("LinearEGCore_update",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->update(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LinearEGCore_render(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LinearEGCore *arg1 = (SynthLab::LinearEGCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::LinearEGCore::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LinearEGCore::render",1,"SynthLab::LinearEGCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LinearEGCore::render",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LinearEGCore,0))){
    SWIG_fail_ptr("LinearEGCore_render",1,SWIGTYPE_p_SynthLab__LinearEGCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("LinearEGCore_render",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->render(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LinearEGCore_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LinearEGCore *arg1 = (SynthLab::LinearEGCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::LinearEGCore::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LinearEGCore::doNoteOn",1,"SynthLab::LinearEGCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LinearEGCore::doNoteOn",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LinearEGCore,0))){
    SWIG_fail_ptr("LinearEGCore_doNoteOn",1,SWIGTYPE_p_SynthLab__LinearEGCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("LinearEGCore_doNoteOn",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LinearEGCore_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LinearEGCore *arg1 = (SynthLab::LinearEGCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::LinearEGCore::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LinearEGCore::doNoteOff",1,"SynthLab::LinearEGCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LinearEGCore::doNoteOff",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LinearEGCore,0))){
    SWIG_fail_ptr("LinearEGCore_doNoteOff",1,SWIGTYPE_p_SynthLab__LinearEGCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("LinearEGCore_doNoteOff",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LinearEGCore_getState(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LinearEGCore *arg1 = (SynthLab::LinearEGCore *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("SynthLab::LinearEGCore::getState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LinearEGCore::getState",1,"SynthLab::LinearEGCore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LinearEGCore,0))){
    SWIG_fail_ptr("LinearEGCore_getState",1,SWIGTYPE_p_SynthLab__LinearEGCore);
  }
  
  result = (arg1)->getState();
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LinearEGCore_shutdown(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LinearEGCore *arg1 = (SynthLab::LinearEGCore *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::LinearEGCore::shutdown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LinearEGCore::shutdown",1,"SynthLab::LinearEGCore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LinearEGCore,0))){
    SWIG_fail_ptr("LinearEGCore_shutdown",1,SWIGTYPE_p_SynthLab__LinearEGCore);
  }
  
  result = (bool)(arg1)->shutdown();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LinearEGCore_setSustainOverride(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LinearEGCore *arg1 = (SynthLab::LinearEGCore *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::LinearEGCore::setSustainOverride",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LinearEGCore::setSustainOverride",1,"SynthLab::LinearEGCore *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::LinearEGCore::setSustainOverride",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LinearEGCore,0))){
    SWIG_fail_ptr("LinearEGCore_setSustainOverride",1,SWIGTYPE_p_SynthLab__LinearEGCore);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setSustainOverride(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LinearEGCore(void *obj) {
SynthLab::LinearEGCore *arg1 = (SynthLab::LinearEGCore *) obj;
delete arg1;
}
static int _proxy__wrap_new_LinearEGCore(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LinearEGCore);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LinearEGCore_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LinearEGCore_methods[]= {
    { "reset", _wrap_LinearEGCore_reset},
    { "update", _wrap_LinearEGCore_update},
    { "render", _wrap_LinearEGCore_render},
    { "doNoteOn", _wrap_LinearEGCore_doNoteOn},
    { "doNoteOff", _wrap_LinearEGCore_doNoteOff},
    { "getState", _wrap_LinearEGCore_getState},
    { "shutdown", _wrap_LinearEGCore_shutdown},
    { "setSustainOverride", _wrap_LinearEGCore_setSustainOverride},
    {0,0}
};
static swig_lua_method swig_LinearEGCore_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LinearEGCore_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LinearEGCore_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LinearEGCore_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LinearEGCore_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LinearEGCore_Sf_SwigStatic = {
    "LinearEGCore",
    swig_LinearEGCore_Sf_SwigStatic_methods,
    swig_LinearEGCore_Sf_SwigStatic_attributes,
    swig_LinearEGCore_Sf_SwigStatic_constants,
    swig_LinearEGCore_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LinearEGCore_bases[] = {0,0};
static const char *swig_LinearEGCore_base_names[] = {"SynthLab::ModuleCore *",0};
static swig_lua_class _wrap_class_LinearEGCore = { "LinearEGCore", "LinearEGCore", &SWIGTYPE_p_SynthLab__LinearEGCore,_proxy__wrap_new_LinearEGCore, swig_delete_LinearEGCore, swig_LinearEGCore_methods, swig_LinearEGCore_attributes, &swig_LinearEGCore_Sf_SwigStatic, swig_LinearEGCore_meta, swig_LinearEGCore_bases, swig_LinearEGCore_base_names };

static int _wrap_new_MellotronCore(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MellotronCore *result = 0 ;
  
  SWIG_check_num_args("SynthLab::MellotronCore::MellotronCore",0,0)
  result = (SynthLab::MellotronCore *)new SynthLab::MellotronCore();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__MellotronCore,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MellotronCore_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MellotronCore *arg1 = (SynthLab::MellotronCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::MellotronCore::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MellotronCore::reset",1,"SynthLab::MellotronCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MellotronCore::reset",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MellotronCore,0))){
    SWIG_fail_ptr("MellotronCore_reset",1,SWIGTYPE_p_SynthLab__MellotronCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("MellotronCore_reset",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->reset(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MellotronCore_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MellotronCore *arg1 = (SynthLab::MellotronCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::MellotronCore::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MellotronCore::update",1,"SynthLab::MellotronCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MellotronCore::update",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MellotronCore,0))){
    SWIG_fail_ptr("MellotronCore_update",1,SWIGTYPE_p_SynthLab__MellotronCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("MellotronCore_update",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->update(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MellotronCore_render(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MellotronCore *arg1 = (SynthLab::MellotronCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::MellotronCore::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MellotronCore::render",1,"SynthLab::MellotronCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MellotronCore::render",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MellotronCore,0))){
    SWIG_fail_ptr("MellotronCore_render",1,SWIGTYPE_p_SynthLab__MellotronCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("MellotronCore_render",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->render(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MellotronCore_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MellotronCore *arg1 = (SynthLab::MellotronCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::MellotronCore::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MellotronCore::doNoteOn",1,"SynthLab::MellotronCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MellotronCore::doNoteOn",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MellotronCore,0))){
    SWIG_fail_ptr("MellotronCore_doNoteOn",1,SWIGTYPE_p_SynthLab__MellotronCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("MellotronCore_doNoteOn",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MellotronCore_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MellotronCore *arg1 = (SynthLab::MellotronCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::MellotronCore::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MellotronCore::doNoteOff",1,"SynthLab::MellotronCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MellotronCore::doNoteOff",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MellotronCore,0))){
    SWIG_fail_ptr("MellotronCore_doNoteOff",1,SWIGTYPE_p_SynthLab__MellotronCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("MellotronCore_doNoteOff",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MellotronCore(void *obj) {
SynthLab::MellotronCore *arg1 = (SynthLab::MellotronCore *) obj;
delete arg1;
}
static int _proxy__wrap_new_MellotronCore(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MellotronCore);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MellotronCore_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MellotronCore_methods[]= {
    { "reset", _wrap_MellotronCore_reset},
    { "update", _wrap_MellotronCore_update},
    { "render", _wrap_MellotronCore_render},
    { "doNoteOn", _wrap_MellotronCore_doNoteOn},
    { "doNoteOff", _wrap_MellotronCore_doNoteOff},
    {0,0}
};
static swig_lua_method swig_MellotronCore_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MellotronCore_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MellotronCore_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MellotronCore_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MellotronCore_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MellotronCore_Sf_SwigStatic = {
    "MellotronCore",
    swig_MellotronCore_Sf_SwigStatic_methods,
    swig_MellotronCore_Sf_SwigStatic_attributes,
    swig_MellotronCore_Sf_SwigStatic_constants,
    swig_MellotronCore_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MellotronCore_bases[] = {0,0};
static const char *swig_MellotronCore_base_names[] = {"SynthLab::ModuleCore *",0};
static swig_lua_class _wrap_class_MellotronCore = { "MellotronCore", "MellotronCore", &SWIGTYPE_p_SynthLab__MellotronCore,_proxy__wrap_new_MellotronCore, swig_delete_MellotronCore, swig_MellotronCore_methods, swig_MellotronCore_attributes, &swig_MellotronCore_Sf_SwigStatic, swig_MellotronCore_meta, swig_MellotronCore_bases, swig_MellotronCore_base_names };

static int _wrap_new_ModMatrix(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< std::shared_ptr< SynthLab::ModMatrixParameters > > arg1 ;
  std::shared_ptr< SynthLab::ModMatrixParameters > *argp1 ;
  SynthLab::ModMatrix *result = 0 ;
  
  SWIG_check_num_args("SynthLab::ModMatrix::ModMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SynthLab::ModMatrix::ModMatrix",1,"std::shared_ptr< SynthLab::ModMatrixParameters >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__shared_ptrT_SynthLab__ModMatrixParameters_t,0))){
    SWIG_fail_ptr("new_ModMatrix",1,SWIGTYPE_p_std__shared_ptrT_SynthLab__ModMatrixParameters_t);
  }
  arg1 = *argp1;
  
  result = (SynthLab::ModMatrix *)new SynthLab::ModMatrix(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__ModMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModMatrix_addModSource(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModMatrix *arg1 = (SynthLab::ModMatrix *) 0 ;
  uint32_t arg2 ;
  double *arg3 = (double *) 0 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::ModMatrix::addModSource",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModMatrix::addModSource",1,"SynthLab::ModMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ModMatrix::addModSource",2,"uint32_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SynthLab::ModMatrix::addModSource",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModMatrix,0))){
    SWIG_fail_ptr("ModMatrix_addModSource",1,SWIGTYPE_p_SynthLab__ModMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("ModMatrix_addModSource",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ModMatrix_addModSource",3,SWIGTYPE_p_double);
  }
  
  (arg1)->addModSource(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModMatrix_clearModSource(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModMatrix *arg1 = (SynthLab::ModMatrix *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::ModMatrix::clearModSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModMatrix::clearModSource",1,"SynthLab::ModMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ModMatrix::clearModSource",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModMatrix,0))){
    SWIG_fail_ptr("ModMatrix_clearModSource",1,SWIGTYPE_p_SynthLab__ModMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("ModMatrix_clearModSource",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->clearModSource(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModMatrix_addModDestination__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModMatrix *arg1 = (SynthLab::ModMatrix *) 0 ;
  uint32_t arg2 ;
  double *arg3 = (double *) 0 ;
  uint32_t arg4 ;
  uint32_t *argp2 ;
  uint32_t *argp4 ;
  
  SWIG_check_num_args("SynthLab::ModMatrix::addModDestination",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModMatrix::addModDestination",1,"SynthLab::ModMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ModMatrix::addModDestination",2,"uint32_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SynthLab::ModMatrix::addModDestination",3,"double *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SynthLab::ModMatrix::addModDestination",4,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModMatrix,0))){
    SWIG_fail_ptr("ModMatrix_addModDestination",1,SWIGTYPE_p_SynthLab__ModMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("ModMatrix_addModDestination",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ModMatrix_addModDestination",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("ModMatrix_addModDestination",4,SWIGTYPE_p_uint32_t);
  }
  arg4 = *argp4;
  
  (arg1)->addModDestination(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModMatrix_addModDestination__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModMatrix *arg1 = (SynthLab::ModMatrix *) 0 ;
  uint32_t arg2 ;
  double *arg3 = (double *) 0 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::ModMatrix::addModDestination",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModMatrix::addModDestination",1,"SynthLab::ModMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ModMatrix::addModDestination",2,"uint32_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SynthLab::ModMatrix::addModDestination",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModMatrix,0))){
    SWIG_fail_ptr("ModMatrix_addModDestination",1,SWIGTYPE_p_SynthLab__ModMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("ModMatrix_addModDestination",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ModMatrix_addModDestination",3,SWIGTYPE_p_double);
  }
  
  (arg1)->addModDestination(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModMatrix_addModDestination(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__ModMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ModMatrix_addModDestination__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__ModMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ModMatrix_addModDestination__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ModMatrix_addModDestination'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::ModMatrix::addModDestination(uint32_t,double *,uint32_t)\n"
    "    SynthLab::ModMatrix::addModDestination(uint32_t,double *)\n");
  lua_error(L);return 0;
}


static int _wrap_ModMatrix_clearModDestination(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModMatrix *arg1 = (SynthLab::ModMatrix *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::ModMatrix::clearModDestination",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModMatrix::clearModDestination",1,"SynthLab::ModMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::ModMatrix::clearModDestination",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModMatrix,0))){
    SWIG_fail_ptr("ModMatrix_clearModDestination",1,SWIGTYPE_p_SynthLab__ModMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("ModMatrix_clearModDestination",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->clearModDestination(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModMatrix_clearModMatrixArrays(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModMatrix *arg1 = (SynthLab::ModMatrix *) 0 ;
  
  SWIG_check_num_args("SynthLab::ModMatrix::clearModMatrixArrays",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModMatrix::clearModMatrixArrays",1,"SynthLab::ModMatrix *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModMatrix,0))){
    SWIG_fail_ptr("ModMatrix_clearModMatrixArrays",1,SWIGTYPE_p_SynthLab__ModMatrix);
  }
  
  (arg1)->clearModMatrixArrays();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModMatrix_runModMatrix(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModMatrix *arg1 = (SynthLab::ModMatrix *) 0 ;
  
  SWIG_check_num_args("SynthLab::ModMatrix::runModMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModMatrix::runModMatrix",1,"SynthLab::ModMatrix *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModMatrix,0))){
    SWIG_fail_ptr("ModMatrix_runModMatrix",1,SWIGTYPE_p_SynthLab__ModMatrix);
  }
  
  (arg1)->runModMatrix();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModMatrix_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::ModMatrix *arg1 = (SynthLab::ModMatrix *) 0 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::ModMatrixParameters > > result;
  
  SWIG_check_num_args("SynthLab::ModMatrix::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::ModMatrix::getParameters",1,"SynthLab::ModMatrix *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__ModMatrix,0))){
    SWIG_fail_ptr("ModMatrix_getParameters",1,SWIGTYPE_p_SynthLab__ModMatrix);
  }
  
  result = (arg1)->getParameters();
  {
    std::shared_ptr< SynthLab::ModMatrixParameters > * resultptr = new std::shared_ptr< SynthLab::ModMatrixParameters >((const std::shared_ptr< SynthLab::ModMatrixParameters > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_SynthLab__ModMatrixParameters_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ModMatrix(void *obj) {
SynthLab::ModMatrix *arg1 = (SynthLab::ModMatrix *) obj;
delete arg1;
}
static int _proxy__wrap_new_ModMatrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ModMatrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ModMatrix_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ModMatrix_methods[]= {
    { "addModSource", _wrap_ModMatrix_addModSource},
    { "clearModSource", _wrap_ModMatrix_clearModSource},
    { "addModDestination", _wrap_ModMatrix_addModDestination},
    { "clearModDestination", _wrap_ModMatrix_clearModDestination},
    { "clearModMatrixArrays", _wrap_ModMatrix_clearModMatrixArrays},
    { "runModMatrix", _wrap_ModMatrix_runModMatrix},
    { "getParameters", _wrap_ModMatrix_getParameters},
    {0,0}
};
static swig_lua_method swig_ModMatrix_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ModMatrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ModMatrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ModMatrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ModMatrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ModMatrix_Sf_SwigStatic = {
    "ModMatrix",
    swig_ModMatrix_Sf_SwigStatic_methods,
    swig_ModMatrix_Sf_SwigStatic_attributes,
    swig_ModMatrix_Sf_SwigStatic_constants,
    swig_ModMatrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ModMatrix_bases[] = {0};
static const char *swig_ModMatrix_base_names[] = {0};
static swig_lua_class _wrap_class_ModMatrix = { "ModMatrix", "ModMatrix", &SWIGTYPE_p_SynthLab__ModMatrix,_proxy__wrap_new_ModMatrix, swig_delete_ModMatrix, swig_ModMatrix_methods, swig_ModMatrix_attributes, &swig_ModMatrix_Sf_SwigStatic, swig_ModMatrix_meta, swig_ModMatrix_bases, swig_ModMatrix_base_names };

static int _wrap_new_MorphWTCore(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MorphWTCore *result = 0 ;
  
  SWIG_check_num_args("SynthLab::MorphWTCore::MorphWTCore",0,0)
  result = (SynthLab::MorphWTCore *)new SynthLab::MorphWTCore();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__MorphWTCore,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphWTCore_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MorphWTCore *arg1 = (SynthLab::MorphWTCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::MorphWTCore::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MorphWTCore::reset",1,"SynthLab::MorphWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MorphWTCore::reset",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MorphWTCore,0))){
    SWIG_fail_ptr("MorphWTCore_reset",1,SWIGTYPE_p_SynthLab__MorphWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("MorphWTCore_reset",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->reset(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphWTCore_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MorphWTCore *arg1 = (SynthLab::MorphWTCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::MorphWTCore::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MorphWTCore::update",1,"SynthLab::MorphWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MorphWTCore::update",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MorphWTCore,0))){
    SWIG_fail_ptr("MorphWTCore_update",1,SWIGTYPE_p_SynthLab__MorphWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("MorphWTCore_update",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->update(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphWTCore_render(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MorphWTCore *arg1 = (SynthLab::MorphWTCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::MorphWTCore::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MorphWTCore::render",1,"SynthLab::MorphWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MorphWTCore::render",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MorphWTCore,0))){
    SWIG_fail_ptr("MorphWTCore_render",1,SWIGTYPE_p_SynthLab__MorphWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("MorphWTCore_render",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->render(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphWTCore_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MorphWTCore *arg1 = (SynthLab::MorphWTCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::MorphWTCore::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MorphWTCore::doNoteOn",1,"SynthLab::MorphWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MorphWTCore::doNoteOn",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MorphWTCore,0))){
    SWIG_fail_ptr("MorphWTCore_doNoteOn",1,SWIGTYPE_p_SynthLab__MorphWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("MorphWTCore_doNoteOn",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphWTCore_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MorphWTCore *arg1 = (SynthLab::MorphWTCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::MorphWTCore::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MorphWTCore::doNoteOff",1,"SynthLab::MorphWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MorphWTCore::doNoteOff",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MorphWTCore,0))){
    SWIG_fail_ptr("MorphWTCore_doNoteOff",1,SWIGTYPE_p_SynthLab__MorphWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("MorphWTCore_doNoteOff",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphWTCore_renderSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MorphWTCore *arg1 = (SynthLab::MorphWTCore *) 0 ;
  SynthLab::SynthClock *arg2 = 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::MorphWTCore::renderSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MorphWTCore::renderSample",1,"SynthLab::MorphWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MorphWTCore::renderSample",2,"SynthLab::SynthClock &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MorphWTCore,0))){
    SWIG_fail_ptr("MorphWTCore_renderSample",1,SWIGTYPE_p_SynthLab__MorphWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("MorphWTCore_renderSample",2,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  result = (double)(arg1)->renderSample(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphWTCore_renderHardSyncSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::MorphWTCore *arg1 = (SynthLab::MorphWTCore *) 0 ;
  SynthLab::SynthClock *arg2 = 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::MorphWTCore::renderHardSyncSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::MorphWTCore::renderHardSyncSample",1,"SynthLab::MorphWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::MorphWTCore::renderHardSyncSample",2,"SynthLab::SynthClock &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__MorphWTCore,0))){
    SWIG_fail_ptr("MorphWTCore_renderHardSyncSample",1,SWIGTYPE_p_SynthLab__MorphWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("MorphWTCore_renderHardSyncSample",2,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  result = (double)(arg1)->renderHardSyncSample(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MorphWTCore(void *obj) {
SynthLab::MorphWTCore *arg1 = (SynthLab::MorphWTCore *) obj;
delete arg1;
}
static int _proxy__wrap_new_MorphWTCore(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MorphWTCore);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MorphWTCore_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MorphWTCore_methods[]= {
    { "reset", _wrap_MorphWTCore_reset},
    { "update", _wrap_MorphWTCore_update},
    { "render", _wrap_MorphWTCore_render},
    { "doNoteOn", _wrap_MorphWTCore_doNoteOn},
    { "doNoteOff", _wrap_MorphWTCore_doNoteOff},
    { "renderSample", _wrap_MorphWTCore_renderSample},
    { "renderHardSyncSample", _wrap_MorphWTCore_renderHardSyncSample},
    {0,0}
};
static swig_lua_method swig_MorphWTCore_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MorphWTCore_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MorphWTCore_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MorphWTCore_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MorphWTCore_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MorphWTCore_Sf_SwigStatic = {
    "MorphWTCore",
    swig_MorphWTCore_Sf_SwigStatic_methods,
    swig_MorphWTCore_Sf_SwigStatic_attributes,
    swig_MorphWTCore_Sf_SwigStatic_constants,
    swig_MorphWTCore_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MorphWTCore_bases[] = {0,0};
static const char *swig_MorphWTCore_base_names[] = {"SynthLab::ModuleCore *",0};
static swig_lua_class _wrap_class_MorphWTCore = { "MorphWTCore", "MorphWTCore", &SWIGTYPE_p_SynthLab__MorphWTCore,_proxy__wrap_new_MorphWTCore, swig_delete_MorphWTCore, swig_MorphWTCore_methods, swig_MorphWTCore_attributes, &swig_MorphWTCore_Sf_SwigStatic, swig_MorphWTCore_meta, swig_MorphWTCore_bases, swig_MorphWTCore_base_names };

static int _wrap_NoiseOscillator_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::NoiseOscillator *arg1 = (SynthLab::NoiseOscillator *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::NoiseOscillator::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::NoiseOscillator::reset",1,"SynthLab::NoiseOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::NoiseOscillator::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__NoiseOscillator,0))){
    SWIG_fail_ptr("NoiseOscillator_reset",1,SWIGTYPE_p_SynthLab__NoiseOscillator);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseOscillator_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::NoiseOscillator *arg1 = (SynthLab::NoiseOscillator *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::NoiseOscillator::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::NoiseOscillator::update",1,"SynthLab::NoiseOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__NoiseOscillator,0))){
    SWIG_fail_ptr("NoiseOscillator_update",1,SWIGTYPE_p_SynthLab__NoiseOscillator);
  }
  
  result = (bool)(arg1)->update();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseOscillator_render__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::NoiseOscillator *arg1 = (SynthLab::NoiseOscillator *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::NoiseOscillator::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::NoiseOscillator::render",1,"SynthLab::NoiseOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::NoiseOscillator::render",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__NoiseOscillator,0))){
    SWIG_fail_ptr("NoiseOscillator_render",1,SWIGTYPE_p_SynthLab__NoiseOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("NoiseOscillator_render",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->render(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseOscillator_render__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::NoiseOscillator *arg1 = (SynthLab::NoiseOscillator *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::NoiseOscillator::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::NoiseOscillator::render",1,"SynthLab::NoiseOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__NoiseOscillator,0))){
    SWIG_fail_ptr("NoiseOscillator_render",1,SWIGTYPE_p_SynthLab__NoiseOscillator);
  }
  
  result = (bool)(arg1)->render();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseOscillator_render(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__NoiseOscillator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NoiseOscillator_render__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__NoiseOscillator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NoiseOscillator_render__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NoiseOscillator_render'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::NoiseOscillator::render(uint32_t)\n"
    "    SynthLab::NoiseOscillator::render()\n");
  lua_error(L);return 0;
}


static int _wrap_NoiseOscillator_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::NoiseOscillator *arg1 = (SynthLab::NoiseOscillator *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::NoiseOscillator::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::NoiseOscillator::doNoteOn",1,"SynthLab::NoiseOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::NoiseOscillator::doNoteOn",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__NoiseOscillator,0))){
    SWIG_fail_ptr("NoiseOscillator_doNoteOn",1,SWIGTYPE_p_SynthLab__NoiseOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("NoiseOscillator_doNoteOn",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseOscillator_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::NoiseOscillator *arg1 = (SynthLab::NoiseOscillator *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::NoiseOscillator::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::NoiseOscillator::doNoteOff",1,"SynthLab::NoiseOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::NoiseOscillator::doNoteOff",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__NoiseOscillator,0))){
    SWIG_fail_ptr("NoiseOscillator_doNoteOff",1,SWIGTYPE_p_SynthLab__NoiseOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("NoiseOscillator_doNoteOff",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseOscillator_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::NoiseOscillator *arg1 = (SynthLab::NoiseOscillator *) 0 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::NoiseOscillatorParameters > > result;
  
  SWIG_check_num_args("SynthLab::NoiseOscillator::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::NoiseOscillator::getParameters",1,"SynthLab::NoiseOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__NoiseOscillator,0))){
    SWIG_fail_ptr("NoiseOscillator_getParameters",1,SWIGTYPE_p_SynthLab__NoiseOscillator);
  }
  
  result = (arg1)->getParameters();
  {
    std::shared_ptr< SynthLab::NoiseOscillatorParameters > * resultptr = new std::shared_ptr< SynthLab::NoiseOscillatorParameters >((const std::shared_ptr< SynthLab::NoiseOscillatorParameters > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_SynthLab__NoiseOscillatorParameters_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NoiseOscillator(void *obj) {
SynthLab::NoiseOscillator *arg1 = (SynthLab::NoiseOscillator *) obj;
delete arg1;
}
static swig_lua_attribute swig_NoiseOscillator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NoiseOscillator_methods[]= {
    { "reset", _wrap_NoiseOscillator_reset},
    { "update", _wrap_NoiseOscillator_update},
    { "render", _wrap_NoiseOscillator_render},
    { "doNoteOn", _wrap_NoiseOscillator_doNoteOn},
    { "doNoteOff", _wrap_NoiseOscillator_doNoteOff},
    { "getParameters", _wrap_NoiseOscillator_getParameters},
    {0,0}
};
static swig_lua_method swig_NoiseOscillator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NoiseOscillator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NoiseOscillator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NoiseOscillator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NoiseOscillator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NoiseOscillator_Sf_SwigStatic = {
    "NoiseOscillator",
    swig_NoiseOscillator_Sf_SwigStatic_methods,
    swig_NoiseOscillator_Sf_SwigStatic_attributes,
    swig_NoiseOscillator_Sf_SwigStatic_constants,
    swig_NoiseOscillator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NoiseOscillator_bases[] = {0,0};
static const char *swig_NoiseOscillator_base_names[] = {"SynthLab::SynthModule *",0};
static swig_lua_class _wrap_class_NoiseOscillator = { "NoiseOscillator", "NoiseOscillator", &SWIGTYPE_p_SynthLab__NoiseOscillator,0, swig_delete_NoiseOscillator, swig_NoiseOscillator_methods, swig_NoiseOscillator_attributes, &swig_NoiseOscillator_Sf_SwigStatic, swig_NoiseOscillator_meta, swig_NoiseOscillator_bases, swig_NoiseOscillator_base_names };

static int _wrap_Oscillator_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Oscillator *arg1 = (SynthLab::Oscillator *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::Oscillator::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Oscillator::reset",1,"SynthLab::Oscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::Oscillator::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Oscillator,0))){
    SWIG_fail_ptr("Oscillator_reset",1,SWIGTYPE_p_SynthLab__Oscillator);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Oscillator_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Oscillator *arg1 = (SynthLab::Oscillator *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::Oscillator::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Oscillator::update",1,"SynthLab::Oscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Oscillator,0))){
    SWIG_fail_ptr("Oscillator_update",1,SWIGTYPE_p_SynthLab__Oscillator);
  }
  
  result = (bool)(arg1)->update();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Oscillator_render__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Oscillator *arg1 = (SynthLab::Oscillator *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::Oscillator::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Oscillator::render",1,"SynthLab::Oscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::Oscillator::render",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Oscillator,0))){
    SWIG_fail_ptr("Oscillator_render",1,SWIGTYPE_p_SynthLab__Oscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("Oscillator_render",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->render(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Oscillator_render__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Oscillator *arg1 = (SynthLab::Oscillator *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::Oscillator::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Oscillator::render",1,"SynthLab::Oscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Oscillator,0))){
    SWIG_fail_ptr("Oscillator_render",1,SWIGTYPE_p_SynthLab__Oscillator);
  }
  
  result = (bool)(arg1)->render();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Oscillator_render(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__Oscillator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Oscillator_render__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__Oscillator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Oscillator_render__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Oscillator_render'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::Oscillator::render(uint32_t)\n"
    "    SynthLab::Oscillator::render()\n");
  lua_error(L);return 0;
}


static int _wrap_Oscillator_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Oscillator *arg1 = (SynthLab::Oscillator *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::Oscillator::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Oscillator::doNoteOn",1,"SynthLab::Oscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::Oscillator::doNoteOn",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Oscillator,0))){
    SWIG_fail_ptr("Oscillator_doNoteOn",1,SWIGTYPE_p_SynthLab__Oscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("Oscillator_doNoteOn",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Oscillator_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Oscillator *arg1 = (SynthLab::Oscillator *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::Oscillator::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Oscillator::doNoteOff",1,"SynthLab::Oscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::Oscillator::doNoteOff",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Oscillator,0))){
    SWIG_fail_ptr("Oscillator_doNoteOff",1,SWIGTYPE_p_SynthLab__Oscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("Oscillator_doNoteOff",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Oscillator_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Oscillator *arg1 = (SynthLab::Oscillator *) 0 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::OscParameters > > result;
  
  SWIG_check_num_args("SynthLab::Oscillator::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Oscillator::getParameters",1,"SynthLab::Oscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Oscillator,0))){
    SWIG_fail_ptr("Oscillator_getParameters",1,SWIGTYPE_p_SynthLab__Oscillator);
  }
  
  result = (arg1)->getParameters();
  {
    std::shared_ptr< SynthLab::OscParameters > * resultptr = new std::shared_ptr< SynthLab::OscParameters >((const std::shared_ptr< SynthLab::OscParameters > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_SynthLab__OscParameters_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Oscillator(void *obj) {
SynthLab::Oscillator *arg1 = (SynthLab::Oscillator *) obj;
delete arg1;
}
static swig_lua_attribute swig_Oscillator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Oscillator_methods[]= {
    { "reset", _wrap_Oscillator_reset},
    { "update", _wrap_Oscillator_update},
    { "render", _wrap_Oscillator_render},
    { "doNoteOn", _wrap_Oscillator_doNoteOn},
    { "doNoteOff", _wrap_Oscillator_doNoteOff},
    { "getParameters", _wrap_Oscillator_getParameters},
    {0,0}
};
static swig_lua_method swig_Oscillator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Oscillator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Oscillator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Oscillator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Oscillator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Oscillator_Sf_SwigStatic = {
    "Oscillator",
    swig_Oscillator_Sf_SwigStatic_methods,
    swig_Oscillator_Sf_SwigStatic_attributes,
    swig_Oscillator_Sf_SwigStatic_constants,
    swig_Oscillator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Oscillator_bases[] = {0,0};
static const char *swig_Oscillator_base_names[] = {"SynthLab::SynthModule *",0};
static swig_lua_class _wrap_class_Oscillator = { "Oscillator", "Oscillator", &SWIGTYPE_p_SynthLab__Oscillator,0, swig_delete_Oscillator, swig_Oscillator_methods, swig_Oscillator_attributes, &swig_Oscillator_Sf_SwigStatic, swig_Oscillator_meta, swig_Oscillator_bases, swig_Oscillator_base_names };

static int _wrap_new_LegacyPCMCore(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LegacyPCMCore *result = 0 ;
  
  SWIG_check_num_args("SynthLab::LegacyPCMCore::LegacyPCMCore",0,0)
  result = (SynthLab::LegacyPCMCore *)new SynthLab::LegacyPCMCore();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__LegacyPCMCore,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegacyPCMCore_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LegacyPCMCore *arg1 = (SynthLab::LegacyPCMCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::LegacyPCMCore::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LegacyPCMCore::reset",1,"SynthLab::LegacyPCMCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LegacyPCMCore::reset",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LegacyPCMCore,0))){
    SWIG_fail_ptr("LegacyPCMCore_reset",1,SWIGTYPE_p_SynthLab__LegacyPCMCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("LegacyPCMCore_reset",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->reset(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegacyPCMCore_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LegacyPCMCore *arg1 = (SynthLab::LegacyPCMCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::LegacyPCMCore::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LegacyPCMCore::update",1,"SynthLab::LegacyPCMCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LegacyPCMCore::update",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LegacyPCMCore,0))){
    SWIG_fail_ptr("LegacyPCMCore_update",1,SWIGTYPE_p_SynthLab__LegacyPCMCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("LegacyPCMCore_update",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->update(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegacyPCMCore_render(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LegacyPCMCore *arg1 = (SynthLab::LegacyPCMCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::LegacyPCMCore::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LegacyPCMCore::render",1,"SynthLab::LegacyPCMCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LegacyPCMCore::render",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LegacyPCMCore,0))){
    SWIG_fail_ptr("LegacyPCMCore_render",1,SWIGTYPE_p_SynthLab__LegacyPCMCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("LegacyPCMCore_render",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->render(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegacyPCMCore_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LegacyPCMCore *arg1 = (SynthLab::LegacyPCMCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::LegacyPCMCore::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LegacyPCMCore::doNoteOn",1,"SynthLab::LegacyPCMCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LegacyPCMCore::doNoteOn",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LegacyPCMCore,0))){
    SWIG_fail_ptr("LegacyPCMCore_doNoteOn",1,SWIGTYPE_p_SynthLab__LegacyPCMCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("LegacyPCMCore_doNoteOn",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegacyPCMCore_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LegacyPCMCore *arg1 = (SynthLab::LegacyPCMCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::LegacyPCMCore::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LegacyPCMCore::doNoteOff",1,"SynthLab::LegacyPCMCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LegacyPCMCore::doNoteOff",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LegacyPCMCore,0))){
    SWIG_fail_ptr("LegacyPCMCore_doNoteOff",1,SWIGTYPE_p_SynthLab__LegacyPCMCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("LegacyPCMCore_doNoteOff",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LegacyPCMCore(void *obj) {
SynthLab::LegacyPCMCore *arg1 = (SynthLab::LegacyPCMCore *) obj;
delete arg1;
}
static int _proxy__wrap_new_LegacyPCMCore(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LegacyPCMCore);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LegacyPCMCore_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LegacyPCMCore_methods[]= {
    { "reset", _wrap_LegacyPCMCore_reset},
    { "update", _wrap_LegacyPCMCore_update},
    { "render", _wrap_LegacyPCMCore_render},
    { "doNoteOn", _wrap_LegacyPCMCore_doNoteOn},
    { "doNoteOff", _wrap_LegacyPCMCore_doNoteOff},
    {0,0}
};
static swig_lua_method swig_LegacyPCMCore_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LegacyPCMCore_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LegacyPCMCore_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LegacyPCMCore_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LegacyPCMCore_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LegacyPCMCore_Sf_SwigStatic = {
    "LegacyPCMCore",
    swig_LegacyPCMCore_Sf_SwigStatic_methods,
    swig_LegacyPCMCore_Sf_SwigStatic_attributes,
    swig_LegacyPCMCore_Sf_SwigStatic_constants,
    swig_LegacyPCMCore_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LegacyPCMCore_bases[] = {0,0};
static const char *swig_LegacyPCMCore_base_names[] = {"SynthLab::ModuleCore *",0};
static swig_lua_class _wrap_class_LegacyPCMCore = { "LegacyPCMCore", "LegacyPCMCore", &SWIGTYPE_p_SynthLab__LegacyPCMCore,_proxy__wrap_new_LegacyPCMCore, swig_delete_LegacyPCMCore, swig_LegacyPCMCore_methods, swig_LegacyPCMCore_attributes, &swig_LegacyPCMCore_Sf_SwigStatic, swig_LegacyPCMCore_meta, swig_LegacyPCMCore_bases, swig_LegacyPCMCore_base_names };

static int _wrap_PCMOscillator_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscillator *arg1 = (SynthLab::PCMOscillator *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::PCMOscillator::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscillator::reset",1,"SynthLab::PCMOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::PCMOscillator::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscillator,0))){
    SWIG_fail_ptr("PCMOscillator_reset",1,SWIGTYPE_p_SynthLab__PCMOscillator);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscillator_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscillator *arg1 = (SynthLab::PCMOscillator *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::PCMOscillator::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscillator::update",1,"SynthLab::PCMOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscillator,0))){
    SWIG_fail_ptr("PCMOscillator_update",1,SWIGTYPE_p_SynthLab__PCMOscillator);
  }
  
  result = (bool)(arg1)->update();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscillator_render__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscillator *arg1 = (SynthLab::PCMOscillator *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::PCMOscillator::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscillator::render",1,"SynthLab::PCMOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::PCMOscillator::render",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscillator,0))){
    SWIG_fail_ptr("PCMOscillator_render",1,SWIGTYPE_p_SynthLab__PCMOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("PCMOscillator_render",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->render(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscillator_render__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscillator *arg1 = (SynthLab::PCMOscillator *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::PCMOscillator::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscillator::render",1,"SynthLab::PCMOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscillator,0))){
    SWIG_fail_ptr("PCMOscillator_render",1,SWIGTYPE_p_SynthLab__PCMOscillator);
  }
  
  result = (bool)(arg1)->render();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscillator_render(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__PCMOscillator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_PCMOscillator_render__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__PCMOscillator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PCMOscillator_render__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PCMOscillator_render'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::PCMOscillator::render(uint32_t)\n"
    "    SynthLab::PCMOscillator::render()\n");
  lua_error(L);return 0;
}


static int _wrap_PCMOscillator_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscillator *arg1 = (SynthLab::PCMOscillator *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::PCMOscillator::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscillator::doNoteOn",1,"SynthLab::PCMOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::PCMOscillator::doNoteOn",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscillator,0))){
    SWIG_fail_ptr("PCMOscillator_doNoteOn",1,SWIGTYPE_p_SynthLab__PCMOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("PCMOscillator_doNoteOn",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscillator_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscillator *arg1 = (SynthLab::PCMOscillator *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::PCMOscillator::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscillator::doNoteOff",1,"SynthLab::PCMOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::PCMOscillator::doNoteOff",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscillator,0))){
    SWIG_fail_ptr("PCMOscillator_doNoteOff",1,SWIGTYPE_p_SynthLab__PCMOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("PCMOscillator_doNoteOff",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMOscillator_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMOscillator *arg1 = (SynthLab::PCMOscillator *) 0 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::PCMOscParameters > > result;
  
  SWIG_check_num_args("SynthLab::PCMOscillator::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMOscillator::getParameters",1,"SynthLab::PCMOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMOscillator,0))){
    SWIG_fail_ptr("PCMOscillator_getParameters",1,SWIGTYPE_p_SynthLab__PCMOscillator);
  }
  
  result = (arg1)->getParameters();
  {
    std::shared_ptr< SynthLab::PCMOscParameters > * resultptr = new std::shared_ptr< SynthLab::PCMOscParameters >((const std::shared_ptr< SynthLab::PCMOscParameters > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_SynthLab__PCMOscParameters_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PCMOscillator(void *obj) {
SynthLab::PCMOscillator *arg1 = (SynthLab::PCMOscillator *) obj;
delete arg1;
}
static swig_lua_attribute swig_PCMOscillator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PCMOscillator_methods[]= {
    { "reset", _wrap_PCMOscillator_reset},
    { "update", _wrap_PCMOscillator_update},
    { "render", _wrap_PCMOscillator_render},
    { "doNoteOn", _wrap_PCMOscillator_doNoteOn},
    { "doNoteOff", _wrap_PCMOscillator_doNoteOff},
    { "getParameters", _wrap_PCMOscillator_getParameters},
    {0,0}
};
static swig_lua_method swig_PCMOscillator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PCMOscillator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PCMOscillator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PCMOscillator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PCMOscillator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PCMOscillator_Sf_SwigStatic = {
    "PCMOscillator",
    swig_PCMOscillator_Sf_SwigStatic_methods,
    swig_PCMOscillator_Sf_SwigStatic_attributes,
    swig_PCMOscillator_Sf_SwigStatic_constants,
    swig_PCMOscillator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PCMOscillator_bases[] = {0,0};
static const char *swig_PCMOscillator_base_names[] = {"SynthLab::SynthModule *",0};
static swig_lua_class _wrap_class_PCMOscillator = { "PCMOscillator", "PCMOscillator", &SWIGTYPE_p_SynthLab__PCMOscillator,0, swig_delete_PCMOscillator, swig_PCMOscillator_methods, swig_PCMOscillator_attributes, &swig_PCMOscillator_Sf_SwigStatic, swig_PCMOscillator_meta, swig_PCMOscillator_bases, swig_PCMOscillator_base_names };

static int _wrap_RIFF_CHUNK_IdentifierString_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::RIFF_CHUNK *arg1 = (SynthLab::RIFF_CHUNK *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("SynthLab::RIFF_CHUNK::IdentifierString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::RIFF_CHUNK::IdentifierString",1,"SynthLab::RIFF_CHUNK *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::RIFF_CHUNK::IdentifierString",2,"char [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__RIFF_CHUNK,0))){
    SWIG_fail_ptr("RIFF_CHUNK_IdentifierString_set",1,SWIGTYPE_p_SynthLab__RIFF_CHUNK);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->IdentifierString, (const char *)arg2, 4-1);
      arg1->IdentifierString[4-1] = 0;
    } else {
      arg1->IdentifierString[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RIFF_CHUNK_IdentifierString_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::RIFF_CHUNK *arg1 = (SynthLab::RIFF_CHUNK *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("SynthLab::RIFF_CHUNK::IdentifierString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::RIFF_CHUNK::IdentifierString",1,"SynthLab::RIFF_CHUNK *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__RIFF_CHUNK,0))){
    SWIG_fail_ptr("RIFF_CHUNK_IdentifierString_get",1,SWIGTYPE_p_SynthLab__RIFF_CHUNK);
  }
  
  result = (char *)(char *) ((arg1)->IdentifierString);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RIFF_CHUNK_dwLength_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::RIFF_CHUNK *arg1 = (SynthLab::RIFF_CHUNK *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::RIFF_CHUNK::dwLength",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::RIFF_CHUNK::dwLength",1,"SynthLab::RIFF_CHUNK *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::RIFF_CHUNK::dwLength",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__RIFF_CHUNK,0))){
    SWIG_fail_ptr("RIFF_CHUNK_dwLength_set",1,SWIGTYPE_p_SynthLab__RIFF_CHUNK);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("RIFF_CHUNK_dwLength_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->dwLength = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RIFF_CHUNK_dwLength_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::RIFF_CHUNK *arg1 = (SynthLab::RIFF_CHUNK *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::RIFF_CHUNK::dwLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::RIFF_CHUNK::dwLength",1,"SynthLab::RIFF_CHUNK *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__RIFF_CHUNK,0))){
    SWIG_fail_ptr("RIFF_CHUNK_dwLength_get",1,SWIGTYPE_p_SynthLab__RIFF_CHUNK);
  }
  
  result =  ((arg1)->dwLength);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RIFF_CHUNK(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::RIFF_CHUNK *result = 0 ;
  
  SWIG_check_num_args("SynthLab::RIFF_CHUNK::RIFF_CHUNK",0,0)
  result = (SynthLab::RIFF_CHUNK *)new SynthLab::RIFF_CHUNK();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__RIFF_CHUNK,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RIFF_CHUNK(void *obj) {
SynthLab::RIFF_CHUNK *arg1 = (SynthLab::RIFF_CHUNK *) obj;
delete arg1;
}
static int _proxy__wrap_new_RIFF_CHUNK(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RIFF_CHUNK);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RIFF_CHUNK_attributes[] = {
    { "IdentifierString", _wrap_RIFF_CHUNK_IdentifierString_get, _wrap_RIFF_CHUNK_IdentifierString_set },
    { "dwLength", _wrap_RIFF_CHUNK_dwLength_get, _wrap_RIFF_CHUNK_dwLength_set },
    {0,0,0}
};
static swig_lua_method swig_RIFF_CHUNK_methods[]= {
    {0,0}
};
static swig_lua_method swig_RIFF_CHUNK_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RIFF_CHUNK_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RIFF_CHUNK_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RIFF_CHUNK_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RIFF_CHUNK_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RIFF_CHUNK_Sf_SwigStatic = {
    "RIFF_CHUNK",
    swig_RIFF_CHUNK_Sf_SwigStatic_methods,
    swig_RIFF_CHUNK_Sf_SwigStatic_attributes,
    swig_RIFF_CHUNK_Sf_SwigStatic_constants,
    swig_RIFF_CHUNK_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RIFF_CHUNK_bases[] = {0};
static const char *swig_RIFF_CHUNK_base_names[] = {0};
static swig_lua_class _wrap_class_RIFF_CHUNK = { "RIFF_CHUNK", "RIFF_CHUNK", &SWIGTYPE_p_SynthLab__RIFF_CHUNK,_proxy__wrap_new_RIFF_CHUNK, swig_delete_RIFF_CHUNK, swig_RIFF_CHUNK_methods, swig_RIFF_CHUNK_attributes, &swig_RIFF_CHUNK_Sf_SwigStatic, swig_RIFF_CHUNK_meta, swig_RIFF_CHUNK_bases, swig_RIFF_CHUNK_base_names };

static int _wrap_WAVE_FILE_HEADER_wFormatTag_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_FILE_HEADER *arg1 = (SynthLab::WAVE_FILE_HEADER *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WAVE_FILE_HEADER::wFormatTag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVE_FILE_HEADER::wFormatTag",1,"SynthLab::WAVE_FILE_HEADER *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WAVE_FILE_HEADER::wFormatTag",2,"uint16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER,0))){
    SWIG_fail_ptr("WAVE_FILE_HEADER_wFormatTag_set",1,SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint16_t,0))){
    SWIG_fail_ptr("WAVE_FILE_HEADER_wFormatTag_set",2,SWIGTYPE_p_uint16_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->wFormatTag = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_FILE_HEADER_wFormatTag_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_FILE_HEADER *arg1 = (SynthLab::WAVE_FILE_HEADER *) 0 ;
  uint16_t result;
  
  SWIG_check_num_args("SynthLab::WAVE_FILE_HEADER::wFormatTag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVE_FILE_HEADER::wFormatTag",1,"SynthLab::WAVE_FILE_HEADER *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER,0))){
    SWIG_fail_ptr("WAVE_FILE_HEADER_wFormatTag_get",1,SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER);
  }
  
  result =  ((arg1)->wFormatTag);
  {
    uint16_t * resultptr = new uint16_t((const uint16_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_FILE_HEADER_wChannels_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_FILE_HEADER *arg1 = (SynthLab::WAVE_FILE_HEADER *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WAVE_FILE_HEADER::wChannels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVE_FILE_HEADER::wChannels",1,"SynthLab::WAVE_FILE_HEADER *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WAVE_FILE_HEADER::wChannels",2,"uint16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER,0))){
    SWIG_fail_ptr("WAVE_FILE_HEADER_wChannels_set",1,SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint16_t,0))){
    SWIG_fail_ptr("WAVE_FILE_HEADER_wChannels_set",2,SWIGTYPE_p_uint16_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->wChannels = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_FILE_HEADER_wChannels_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_FILE_HEADER *arg1 = (SynthLab::WAVE_FILE_HEADER *) 0 ;
  uint16_t result;
  
  SWIG_check_num_args("SynthLab::WAVE_FILE_HEADER::wChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVE_FILE_HEADER::wChannels",1,"SynthLab::WAVE_FILE_HEADER *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER,0))){
    SWIG_fail_ptr("WAVE_FILE_HEADER_wChannels_get",1,SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER);
  }
  
  result =  ((arg1)->wChannels);
  {
    uint16_t * resultptr = new uint16_t((const uint16_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_FILE_HEADER_dwSamplesPerSec_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_FILE_HEADER *arg1 = (SynthLab::WAVE_FILE_HEADER *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WAVE_FILE_HEADER::dwSamplesPerSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVE_FILE_HEADER::dwSamplesPerSec",1,"SynthLab::WAVE_FILE_HEADER *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WAVE_FILE_HEADER::dwSamplesPerSec",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER,0))){
    SWIG_fail_ptr("WAVE_FILE_HEADER_dwSamplesPerSec_set",1,SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WAVE_FILE_HEADER_dwSamplesPerSec_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->dwSamplesPerSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_FILE_HEADER_dwSamplesPerSec_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_FILE_HEADER *arg1 = (SynthLab::WAVE_FILE_HEADER *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WAVE_FILE_HEADER::dwSamplesPerSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVE_FILE_HEADER::dwSamplesPerSec",1,"SynthLab::WAVE_FILE_HEADER *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER,0))){
    SWIG_fail_ptr("WAVE_FILE_HEADER_dwSamplesPerSec_get",1,SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER);
  }
  
  result =  ((arg1)->dwSamplesPerSec);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_FILE_HEADER_dwAvgBytesPerSec_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_FILE_HEADER *arg1 = (SynthLab::WAVE_FILE_HEADER *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WAVE_FILE_HEADER::dwAvgBytesPerSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVE_FILE_HEADER::dwAvgBytesPerSec",1,"SynthLab::WAVE_FILE_HEADER *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WAVE_FILE_HEADER::dwAvgBytesPerSec",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER,0))){
    SWIG_fail_ptr("WAVE_FILE_HEADER_dwAvgBytesPerSec_set",1,SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WAVE_FILE_HEADER_dwAvgBytesPerSec_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->dwAvgBytesPerSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_FILE_HEADER_dwAvgBytesPerSec_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_FILE_HEADER *arg1 = (SynthLab::WAVE_FILE_HEADER *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WAVE_FILE_HEADER::dwAvgBytesPerSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVE_FILE_HEADER::dwAvgBytesPerSec",1,"SynthLab::WAVE_FILE_HEADER *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER,0))){
    SWIG_fail_ptr("WAVE_FILE_HEADER_dwAvgBytesPerSec_get",1,SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER);
  }
  
  result =  ((arg1)->dwAvgBytesPerSec);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_FILE_HEADER_wBlockAlign_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_FILE_HEADER *arg1 = (SynthLab::WAVE_FILE_HEADER *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WAVE_FILE_HEADER::wBlockAlign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVE_FILE_HEADER::wBlockAlign",1,"SynthLab::WAVE_FILE_HEADER *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WAVE_FILE_HEADER::wBlockAlign",2,"uint16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER,0))){
    SWIG_fail_ptr("WAVE_FILE_HEADER_wBlockAlign_set",1,SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint16_t,0))){
    SWIG_fail_ptr("WAVE_FILE_HEADER_wBlockAlign_set",2,SWIGTYPE_p_uint16_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->wBlockAlign = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_FILE_HEADER_wBlockAlign_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_FILE_HEADER *arg1 = (SynthLab::WAVE_FILE_HEADER *) 0 ;
  uint16_t result;
  
  SWIG_check_num_args("SynthLab::WAVE_FILE_HEADER::wBlockAlign",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVE_FILE_HEADER::wBlockAlign",1,"SynthLab::WAVE_FILE_HEADER *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER,0))){
    SWIG_fail_ptr("WAVE_FILE_HEADER_wBlockAlign_get",1,SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER);
  }
  
  result =  ((arg1)->wBlockAlign);
  {
    uint16_t * resultptr = new uint16_t((const uint16_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_FILE_HEADER_wBitsPerSample_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_FILE_HEADER *arg1 = (SynthLab::WAVE_FILE_HEADER *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WAVE_FILE_HEADER::wBitsPerSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVE_FILE_HEADER::wBitsPerSample",1,"SynthLab::WAVE_FILE_HEADER *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WAVE_FILE_HEADER::wBitsPerSample",2,"uint16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER,0))){
    SWIG_fail_ptr("WAVE_FILE_HEADER_wBitsPerSample_set",1,SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint16_t,0))){
    SWIG_fail_ptr("WAVE_FILE_HEADER_wBitsPerSample_set",2,SWIGTYPE_p_uint16_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->wBitsPerSample = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_FILE_HEADER_wBitsPerSample_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_FILE_HEADER *arg1 = (SynthLab::WAVE_FILE_HEADER *) 0 ;
  uint16_t result;
  
  SWIG_check_num_args("SynthLab::WAVE_FILE_HEADER::wBitsPerSample",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVE_FILE_HEADER::wBitsPerSample",1,"SynthLab::WAVE_FILE_HEADER *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER,0))){
    SWIG_fail_ptr("WAVE_FILE_HEADER_wBitsPerSample_get",1,SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER);
  }
  
  result =  ((arg1)->wBitsPerSample);
  {
    uint16_t * resultptr = new uint16_t((const uint16_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WAVE_FILE_HEADER(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_FILE_HEADER *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WAVE_FILE_HEADER::WAVE_FILE_HEADER",0,0)
  result = (SynthLab::WAVE_FILE_HEADER *)new SynthLab::WAVE_FILE_HEADER();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WAVE_FILE_HEADER(void *obj) {
SynthLab::WAVE_FILE_HEADER *arg1 = (SynthLab::WAVE_FILE_HEADER *) obj;
delete arg1;
}
static int _proxy__wrap_new_WAVE_FILE_HEADER(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WAVE_FILE_HEADER);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WAVE_FILE_HEADER_attributes[] = {
    { "wFormatTag", _wrap_WAVE_FILE_HEADER_wFormatTag_get, _wrap_WAVE_FILE_HEADER_wFormatTag_set },
    { "wChannels", _wrap_WAVE_FILE_HEADER_wChannels_get, _wrap_WAVE_FILE_HEADER_wChannels_set },
    { "dwSamplesPerSec", _wrap_WAVE_FILE_HEADER_dwSamplesPerSec_get, _wrap_WAVE_FILE_HEADER_dwSamplesPerSec_set },
    { "dwAvgBytesPerSec", _wrap_WAVE_FILE_HEADER_dwAvgBytesPerSec_get, _wrap_WAVE_FILE_HEADER_dwAvgBytesPerSec_set },
    { "wBlockAlign", _wrap_WAVE_FILE_HEADER_wBlockAlign_get, _wrap_WAVE_FILE_HEADER_wBlockAlign_set },
    { "wBitsPerSample", _wrap_WAVE_FILE_HEADER_wBitsPerSample_get, _wrap_WAVE_FILE_HEADER_wBitsPerSample_set },
    {0,0,0}
};
static swig_lua_method swig_WAVE_FILE_HEADER_methods[]= {
    {0,0}
};
static swig_lua_method swig_WAVE_FILE_HEADER_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WAVE_FILE_HEADER_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WAVE_FILE_HEADER_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WAVE_FILE_HEADER_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WAVE_FILE_HEADER_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WAVE_FILE_HEADER_Sf_SwigStatic = {
    "WAVE_FILE_HEADER",
    swig_WAVE_FILE_HEADER_Sf_SwigStatic_methods,
    swig_WAVE_FILE_HEADER_Sf_SwigStatic_attributes,
    swig_WAVE_FILE_HEADER_Sf_SwigStatic_constants,
    swig_WAVE_FILE_HEADER_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WAVE_FILE_HEADER_bases[] = {0};
static const char *swig_WAVE_FILE_HEADER_base_names[] = {0};
static swig_lua_class _wrap_class_WAVE_FILE_HEADER = { "WAVE_FILE_HEADER", "WAVE_FILE_HEADER", &SWIGTYPE_p_SynthLab__WAVE_FILE_HEADER,_proxy__wrap_new_WAVE_FILE_HEADER, swig_delete_WAVE_FILE_HEADER, swig_WAVE_FILE_HEADER_methods, swig_WAVE_FILE_HEADER_attributes, &swig_WAVE_FILE_HEADER_Sf_SwigStatic, swig_WAVE_FILE_HEADER_meta, swig_WAVE_FILE_HEADER_bases, swig_WAVE_FILE_HEADER_base_names };

static int _wrap_WAVEFORMATEX_WP_wFormatTag_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVEFORMATEX_WP *arg1 = (SynthLab::WAVEFORMATEX_WP *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WAVEFORMATEX_WP::wFormatTag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVEFORMATEX_WP::wFormatTag",1,"SynthLab::WAVEFORMATEX_WP *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WAVEFORMATEX_WP::wFormatTag",2,"uint16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP,0))){
    SWIG_fail_ptr("WAVEFORMATEX_WP_wFormatTag_set",1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint16_t,0))){
    SWIG_fail_ptr("WAVEFORMATEX_WP_wFormatTag_set",2,SWIGTYPE_p_uint16_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->wFormatTag = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVEFORMATEX_WP_wFormatTag_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVEFORMATEX_WP *arg1 = (SynthLab::WAVEFORMATEX_WP *) 0 ;
  uint16_t result;
  
  SWIG_check_num_args("SynthLab::WAVEFORMATEX_WP::wFormatTag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVEFORMATEX_WP::wFormatTag",1,"SynthLab::WAVEFORMATEX_WP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP,0))){
    SWIG_fail_ptr("WAVEFORMATEX_WP_wFormatTag_get",1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP);
  }
  
  result =  ((arg1)->wFormatTag);
  {
    uint16_t * resultptr = new uint16_t((const uint16_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVEFORMATEX_WP_nChannels_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVEFORMATEX_WP *arg1 = (SynthLab::WAVEFORMATEX_WP *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WAVEFORMATEX_WP::nChannels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVEFORMATEX_WP::nChannels",1,"SynthLab::WAVEFORMATEX_WP *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WAVEFORMATEX_WP::nChannels",2,"uint16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP,0))){
    SWIG_fail_ptr("WAVEFORMATEX_WP_nChannels_set",1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint16_t,0))){
    SWIG_fail_ptr("WAVEFORMATEX_WP_nChannels_set",2,SWIGTYPE_p_uint16_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->nChannels = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVEFORMATEX_WP_nChannels_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVEFORMATEX_WP *arg1 = (SynthLab::WAVEFORMATEX_WP *) 0 ;
  uint16_t result;
  
  SWIG_check_num_args("SynthLab::WAVEFORMATEX_WP::nChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVEFORMATEX_WP::nChannels",1,"SynthLab::WAVEFORMATEX_WP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP,0))){
    SWIG_fail_ptr("WAVEFORMATEX_WP_nChannels_get",1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP);
  }
  
  result =  ((arg1)->nChannels);
  {
    uint16_t * resultptr = new uint16_t((const uint16_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVEFORMATEX_WP_nSamplesPerSec_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVEFORMATEX_WP *arg1 = (SynthLab::WAVEFORMATEX_WP *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WAVEFORMATEX_WP::nSamplesPerSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVEFORMATEX_WP::nSamplesPerSec",1,"SynthLab::WAVEFORMATEX_WP *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WAVEFORMATEX_WP::nSamplesPerSec",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP,0))){
    SWIG_fail_ptr("WAVEFORMATEX_WP_nSamplesPerSec_set",1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WAVEFORMATEX_WP_nSamplesPerSec_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->nSamplesPerSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVEFORMATEX_WP_nSamplesPerSec_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVEFORMATEX_WP *arg1 = (SynthLab::WAVEFORMATEX_WP *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WAVEFORMATEX_WP::nSamplesPerSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVEFORMATEX_WP::nSamplesPerSec",1,"SynthLab::WAVEFORMATEX_WP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP,0))){
    SWIG_fail_ptr("WAVEFORMATEX_WP_nSamplesPerSec_get",1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP);
  }
  
  result =  ((arg1)->nSamplesPerSec);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVEFORMATEX_WP_nAvgBytesPerSec_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVEFORMATEX_WP *arg1 = (SynthLab::WAVEFORMATEX_WP *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WAVEFORMATEX_WP::nAvgBytesPerSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVEFORMATEX_WP::nAvgBytesPerSec",1,"SynthLab::WAVEFORMATEX_WP *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WAVEFORMATEX_WP::nAvgBytesPerSec",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP,0))){
    SWIG_fail_ptr("WAVEFORMATEX_WP_nAvgBytesPerSec_set",1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WAVEFORMATEX_WP_nAvgBytesPerSec_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->nAvgBytesPerSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVEFORMATEX_WP_nAvgBytesPerSec_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVEFORMATEX_WP *arg1 = (SynthLab::WAVEFORMATEX_WP *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WAVEFORMATEX_WP::nAvgBytesPerSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVEFORMATEX_WP::nAvgBytesPerSec",1,"SynthLab::WAVEFORMATEX_WP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP,0))){
    SWIG_fail_ptr("WAVEFORMATEX_WP_nAvgBytesPerSec_get",1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP);
  }
  
  result =  ((arg1)->nAvgBytesPerSec);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVEFORMATEX_WP_nBlockAlign_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVEFORMATEX_WP *arg1 = (SynthLab::WAVEFORMATEX_WP *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WAVEFORMATEX_WP::nBlockAlign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVEFORMATEX_WP::nBlockAlign",1,"SynthLab::WAVEFORMATEX_WP *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WAVEFORMATEX_WP::nBlockAlign",2,"uint16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP,0))){
    SWIG_fail_ptr("WAVEFORMATEX_WP_nBlockAlign_set",1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint16_t,0))){
    SWIG_fail_ptr("WAVEFORMATEX_WP_nBlockAlign_set",2,SWIGTYPE_p_uint16_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->nBlockAlign = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVEFORMATEX_WP_nBlockAlign_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVEFORMATEX_WP *arg1 = (SynthLab::WAVEFORMATEX_WP *) 0 ;
  uint16_t result;
  
  SWIG_check_num_args("SynthLab::WAVEFORMATEX_WP::nBlockAlign",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVEFORMATEX_WP::nBlockAlign",1,"SynthLab::WAVEFORMATEX_WP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP,0))){
    SWIG_fail_ptr("WAVEFORMATEX_WP_nBlockAlign_get",1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP);
  }
  
  result =  ((arg1)->nBlockAlign);
  {
    uint16_t * resultptr = new uint16_t((const uint16_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVEFORMATEX_WP_wBitsPerSample_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVEFORMATEX_WP *arg1 = (SynthLab::WAVEFORMATEX_WP *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WAVEFORMATEX_WP::wBitsPerSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVEFORMATEX_WP::wBitsPerSample",1,"SynthLab::WAVEFORMATEX_WP *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WAVEFORMATEX_WP::wBitsPerSample",2,"uint16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP,0))){
    SWIG_fail_ptr("WAVEFORMATEX_WP_wBitsPerSample_set",1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint16_t,0))){
    SWIG_fail_ptr("WAVEFORMATEX_WP_wBitsPerSample_set",2,SWIGTYPE_p_uint16_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->wBitsPerSample = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVEFORMATEX_WP_wBitsPerSample_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVEFORMATEX_WP *arg1 = (SynthLab::WAVEFORMATEX_WP *) 0 ;
  uint16_t result;
  
  SWIG_check_num_args("SynthLab::WAVEFORMATEX_WP::wBitsPerSample",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVEFORMATEX_WP::wBitsPerSample",1,"SynthLab::WAVEFORMATEX_WP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP,0))){
    SWIG_fail_ptr("WAVEFORMATEX_WP_wBitsPerSample_get",1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP);
  }
  
  result =  ((arg1)->wBitsPerSample);
  {
    uint16_t * resultptr = new uint16_t((const uint16_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVEFORMATEX_WP_cbSize_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVEFORMATEX_WP *arg1 = (SynthLab::WAVEFORMATEX_WP *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WAVEFORMATEX_WP::cbSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVEFORMATEX_WP::cbSize",1,"SynthLab::WAVEFORMATEX_WP *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WAVEFORMATEX_WP::cbSize",2,"uint16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP,0))){
    SWIG_fail_ptr("WAVEFORMATEX_WP_cbSize_set",1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint16_t,0))){
    SWIG_fail_ptr("WAVEFORMATEX_WP_cbSize_set",2,SWIGTYPE_p_uint16_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->cbSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVEFORMATEX_WP_cbSize_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVEFORMATEX_WP *arg1 = (SynthLab::WAVEFORMATEX_WP *) 0 ;
  uint16_t result;
  
  SWIG_check_num_args("SynthLab::WAVEFORMATEX_WP::cbSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVEFORMATEX_WP::cbSize",1,"SynthLab::WAVEFORMATEX_WP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP,0))){
    SWIG_fail_ptr("WAVEFORMATEX_WP_cbSize_get",1,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP);
  }
  
  result =  ((arg1)->cbSize);
  {
    uint16_t * resultptr = new uint16_t((const uint16_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WAVEFORMATEX_WP(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVEFORMATEX_WP *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WAVEFORMATEX_WP::WAVEFORMATEX_WP",0,0)
  result = (SynthLab::WAVEFORMATEX_WP *)new SynthLab::WAVEFORMATEX_WP();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WAVEFORMATEX_WP(void *obj) {
SynthLab::WAVEFORMATEX_WP *arg1 = (SynthLab::WAVEFORMATEX_WP *) obj;
delete arg1;
}
static int _proxy__wrap_new_WAVEFORMATEX_WP(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WAVEFORMATEX_WP);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WAVEFORMATEX_WP_attributes[] = {
    { "wFormatTag", _wrap_WAVEFORMATEX_WP_wFormatTag_get, _wrap_WAVEFORMATEX_WP_wFormatTag_set },
    { "nChannels", _wrap_WAVEFORMATEX_WP_nChannels_get, _wrap_WAVEFORMATEX_WP_nChannels_set },
    { "nSamplesPerSec", _wrap_WAVEFORMATEX_WP_nSamplesPerSec_get, _wrap_WAVEFORMATEX_WP_nSamplesPerSec_set },
    { "nAvgBytesPerSec", _wrap_WAVEFORMATEX_WP_nAvgBytesPerSec_get, _wrap_WAVEFORMATEX_WP_nAvgBytesPerSec_set },
    { "nBlockAlign", _wrap_WAVEFORMATEX_WP_nBlockAlign_get, _wrap_WAVEFORMATEX_WP_nBlockAlign_set },
    { "wBitsPerSample", _wrap_WAVEFORMATEX_WP_wBitsPerSample_get, _wrap_WAVEFORMATEX_WP_wBitsPerSample_set },
    { "cbSize", _wrap_WAVEFORMATEX_WP_cbSize_get, _wrap_WAVEFORMATEX_WP_cbSize_set },
    {0,0,0}
};
static swig_lua_method swig_WAVEFORMATEX_WP_methods[]= {
    {0,0}
};
static swig_lua_method swig_WAVEFORMATEX_WP_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WAVEFORMATEX_WP_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WAVEFORMATEX_WP_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WAVEFORMATEX_WP_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WAVEFORMATEX_WP_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WAVEFORMATEX_WP_Sf_SwigStatic = {
    "WAVEFORMATEX_WP",
    swig_WAVEFORMATEX_WP_Sf_SwigStatic_methods,
    swig_WAVEFORMATEX_WP_Sf_SwigStatic_attributes,
    swig_WAVEFORMATEX_WP_Sf_SwigStatic_constants,
    swig_WAVEFORMATEX_WP_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WAVEFORMATEX_WP_bases[] = {0};
static const char *swig_WAVEFORMATEX_WP_base_names[] = {0};
static swig_lua_class _wrap_class_WAVEFORMATEX_WP = { "WAVEFORMATEX_WP", "WAVEFORMATEX_WP", &SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP,_proxy__wrap_new_WAVEFORMATEX_WP, swig_delete_WAVEFORMATEX_WP, swig_WAVEFORMATEX_WP_methods, swig_WAVEFORMATEX_WP_attributes, &swig_WAVEFORMATEX_WP_Sf_SwigStatic, swig_WAVEFORMATEX_WP_meta, swig_WAVEFORMATEX_WP_bases, swig_WAVEFORMATEX_WP_base_names };

static int _wrap_WAVE_SAMPLE_WaveFormatEx_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_SAMPLE *arg1 = (SynthLab::WAVE_SAMPLE *) 0 ;
  SynthLab::WAVEFORMATEX_WP *arg2 = (SynthLab::WAVEFORMATEX_WP *) 0 ;
  
  SWIG_check_num_args("SynthLab::WAVE_SAMPLE::WaveFormatEx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVE_SAMPLE::WaveFormatEx",1,"SynthLab::WAVE_SAMPLE *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WAVE_SAMPLE::WaveFormatEx",2,"SynthLab::WAVEFORMATEX_WP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVE_SAMPLE,0))){
    SWIG_fail_ptr("WAVE_SAMPLE_WaveFormatEx_set",1,SWIGTYPE_p_SynthLab__WAVE_SAMPLE);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP,0))){
    SWIG_fail_ptr("WAVE_SAMPLE_WaveFormatEx_set",2,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP);
  }
  
  if (arg1) (arg1)->WaveFormatEx = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_SAMPLE_WaveFormatEx_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_SAMPLE *arg1 = (SynthLab::WAVE_SAMPLE *) 0 ;
  SynthLab::WAVEFORMATEX_WP *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WAVE_SAMPLE::WaveFormatEx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVE_SAMPLE::WaveFormatEx",1,"SynthLab::WAVE_SAMPLE *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVE_SAMPLE,0))){
    SWIG_fail_ptr("WAVE_SAMPLE_WaveFormatEx_get",1,SWIGTYPE_p_SynthLab__WAVE_SAMPLE);
  }
  
  result = (SynthLab::WAVEFORMATEX_WP *)& ((arg1)->WaveFormatEx);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__WAVEFORMATEX_WP,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_SAMPLE_pSampleData_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_SAMPLE *arg1 = (SynthLab::WAVE_SAMPLE *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("SynthLab::WAVE_SAMPLE::pSampleData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVE_SAMPLE::pSampleData",1,"SynthLab::WAVE_SAMPLE *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::WAVE_SAMPLE::pSampleData",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVE_SAMPLE,0))){
    SWIG_fail_ptr("WAVE_SAMPLE_pSampleData_set",1,SWIGTYPE_p_SynthLab__WAVE_SAMPLE);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    delete [] arg1->pSampleData;
    if (arg2) {
      arg1->pSampleData = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->pSampleData, (const char *)arg2);
    } else {
      arg1->pSampleData = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_SAMPLE_pSampleData_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_SAMPLE *arg1 = (SynthLab::WAVE_SAMPLE *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WAVE_SAMPLE::pSampleData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVE_SAMPLE::pSampleData",1,"SynthLab::WAVE_SAMPLE *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVE_SAMPLE,0))){
    SWIG_fail_ptr("WAVE_SAMPLE_pSampleData_get",1,SWIGTYPE_p_SynthLab__WAVE_SAMPLE);
  }
  
  result = (char *) ((arg1)->pSampleData);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_SAMPLE_Index_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_SAMPLE *arg1 = (SynthLab::WAVE_SAMPLE *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WAVE_SAMPLE::Index",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVE_SAMPLE::Index",1,"SynthLab::WAVE_SAMPLE *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WAVE_SAMPLE::Index",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVE_SAMPLE,0))){
    SWIG_fail_ptr("WAVE_SAMPLE_Index_set",1,SWIGTYPE_p_SynthLab__WAVE_SAMPLE);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WAVE_SAMPLE_Index_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->Index = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_SAMPLE_Index_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_SAMPLE *arg1 = (SynthLab::WAVE_SAMPLE *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WAVE_SAMPLE::Index",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVE_SAMPLE::Index",1,"SynthLab::WAVE_SAMPLE *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVE_SAMPLE,0))){
    SWIG_fail_ptr("WAVE_SAMPLE_Index_get",1,SWIGTYPE_p_SynthLab__WAVE_SAMPLE);
  }
  
  result =  ((arg1)->Index);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_SAMPLE_Size_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_SAMPLE *arg1 = (SynthLab::WAVE_SAMPLE *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WAVE_SAMPLE::Size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVE_SAMPLE::Size",1,"SynthLab::WAVE_SAMPLE *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WAVE_SAMPLE::Size",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVE_SAMPLE,0))){
    SWIG_fail_ptr("WAVE_SAMPLE_Size_set",1,SWIGTYPE_p_SynthLab__WAVE_SAMPLE);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WAVE_SAMPLE_Size_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->Size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_SAMPLE_Size_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_SAMPLE *arg1 = (SynthLab::WAVE_SAMPLE *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WAVE_SAMPLE::Size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVE_SAMPLE::Size",1,"SynthLab::WAVE_SAMPLE *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVE_SAMPLE,0))){
    SWIG_fail_ptr("WAVE_SAMPLE_Size_get",1,SWIGTYPE_p_SynthLab__WAVE_SAMPLE);
  }
  
  result =  ((arg1)->Size);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_SAMPLE_dwId_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_SAMPLE *arg1 = (SynthLab::WAVE_SAMPLE *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WAVE_SAMPLE::dwId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVE_SAMPLE::dwId",1,"SynthLab::WAVE_SAMPLE *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WAVE_SAMPLE::dwId",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVE_SAMPLE,0))){
    SWIG_fail_ptr("WAVE_SAMPLE_dwId_set",1,SWIGTYPE_p_SynthLab__WAVE_SAMPLE);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WAVE_SAMPLE_dwId_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->dwId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_SAMPLE_dwId_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_SAMPLE *arg1 = (SynthLab::WAVE_SAMPLE *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WAVE_SAMPLE::dwId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVE_SAMPLE::dwId",1,"SynthLab::WAVE_SAMPLE *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVE_SAMPLE,0))){
    SWIG_fail_ptr("WAVE_SAMPLE_dwId_get",1,SWIGTYPE_p_SynthLab__WAVE_SAMPLE);
  }
  
  result =  ((arg1)->dwId);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_SAMPLE_bPlaying_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_SAMPLE *arg1 = (SynthLab::WAVE_SAMPLE *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WAVE_SAMPLE::bPlaying",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVE_SAMPLE::bPlaying",1,"SynthLab::WAVE_SAMPLE *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WAVE_SAMPLE::bPlaying",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVE_SAMPLE,0))){
    SWIG_fail_ptr("WAVE_SAMPLE_bPlaying_set",1,SWIGTYPE_p_SynthLab__WAVE_SAMPLE);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WAVE_SAMPLE_bPlaying_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->bPlaying = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WAVE_SAMPLE_bPlaying_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_SAMPLE *arg1 = (SynthLab::WAVE_SAMPLE *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WAVE_SAMPLE::bPlaying",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WAVE_SAMPLE::bPlaying",1,"SynthLab::WAVE_SAMPLE *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WAVE_SAMPLE,0))){
    SWIG_fail_ptr("WAVE_SAMPLE_bPlaying_get",1,SWIGTYPE_p_SynthLab__WAVE_SAMPLE);
  }
  
  result =  ((arg1)->bPlaying);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WAVE_SAMPLE(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WAVE_SAMPLE *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WAVE_SAMPLE::WAVE_SAMPLE",0,0)
  result = (SynthLab::WAVE_SAMPLE *)new SynthLab::WAVE_SAMPLE();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__WAVE_SAMPLE,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WAVE_SAMPLE(void *obj) {
SynthLab::WAVE_SAMPLE *arg1 = (SynthLab::WAVE_SAMPLE *) obj;
delete arg1;
}
static int _proxy__wrap_new_WAVE_SAMPLE(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WAVE_SAMPLE);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WAVE_SAMPLE_attributes[] = {
    { "WaveFormatEx", _wrap_WAVE_SAMPLE_WaveFormatEx_get, _wrap_WAVE_SAMPLE_WaveFormatEx_set },
    { "pSampleData", _wrap_WAVE_SAMPLE_pSampleData_get, _wrap_WAVE_SAMPLE_pSampleData_set },
    { "Index", _wrap_WAVE_SAMPLE_Index_get, _wrap_WAVE_SAMPLE_Index_set },
    { "Size", _wrap_WAVE_SAMPLE_Size_get, _wrap_WAVE_SAMPLE_Size_set },
    { "dwId", _wrap_WAVE_SAMPLE_dwId_get, _wrap_WAVE_SAMPLE_dwId_set },
    { "bPlaying", _wrap_WAVE_SAMPLE_bPlaying_get, _wrap_WAVE_SAMPLE_bPlaying_set },
    {0,0,0}
};
static swig_lua_method swig_WAVE_SAMPLE_methods[]= {
    {0,0}
};
static swig_lua_method swig_WAVE_SAMPLE_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WAVE_SAMPLE_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WAVE_SAMPLE_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WAVE_SAMPLE_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WAVE_SAMPLE_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WAVE_SAMPLE_Sf_SwigStatic = {
    "WAVE_SAMPLE",
    swig_WAVE_SAMPLE_Sf_SwigStatic_methods,
    swig_WAVE_SAMPLE_Sf_SwigStatic_attributes,
    swig_WAVE_SAMPLE_Sf_SwigStatic_constants,
    swig_WAVE_SAMPLE_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WAVE_SAMPLE_bases[] = {0};
static const char *swig_WAVE_SAMPLE_base_names[] = {0};
static swig_lua_class _wrap_class_WAVE_SAMPLE = { "WAVE_SAMPLE", "WAVE_SAMPLE", &SWIGTYPE_p_SynthLab__WAVE_SAMPLE,_proxy__wrap_new_WAVE_SAMPLE, swig_delete_WAVE_SAMPLE, swig_WAVE_SAMPLE_methods, swig_WAVE_SAMPLE_attributes, &swig_WAVE_SAMPLE_Sf_SwigStatic, swig_WAVE_SAMPLE_meta, swig_WAVE_SAMPLE_bases, swig_WAVE_SAMPLE_base_names };

static int _wrap_UWaveData_f_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::UWaveData *arg1 = (SynthLab::UWaveData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SynthLab::UWaveData::f",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::UWaveData::f",1,"SynthLab::UWaveData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::UWaveData::f",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__UWaveData,0))){
    SWIG_fail_ptr("UWaveData_f_set",1,SWIGTYPE_p_SynthLab__UWaveData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->f = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UWaveData_f_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::UWaveData *arg1 = (SynthLab::UWaveData *) 0 ;
  float result;
  
  SWIG_check_num_args("SynthLab::UWaveData::f",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::UWaveData::f",1,"SynthLab::UWaveData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__UWaveData,0))){
    SWIG_fail_ptr("UWaveData_f_get",1,SWIGTYPE_p_SynthLab__UWaveData);
  }
  
  result = (float) ((arg1)->f);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UWaveData_d_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::UWaveData *arg1 = (SynthLab::UWaveData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::UWaveData::d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::UWaveData::d",1,"SynthLab::UWaveData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::UWaveData::d",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__UWaveData,0))){
    SWIG_fail_ptr("UWaveData_d_set",1,SWIGTYPE_p_SynthLab__UWaveData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->d = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UWaveData_d_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::UWaveData *arg1 = (SynthLab::UWaveData *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::UWaveData::d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::UWaveData::d",1,"SynthLab::UWaveData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__UWaveData,0))){
    SWIG_fail_ptr("UWaveData_d_get",1,SWIGTYPE_p_SynthLab__UWaveData);
  }
  
  result = (double) ((arg1)->d);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UWaveData_n_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::UWaveData *arg1 = (SynthLab::UWaveData *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::UWaveData::n",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::UWaveData::n",1,"SynthLab::UWaveData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::UWaveData::n",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__UWaveData,0))){
    SWIG_fail_ptr("UWaveData_n_set",1,SWIGTYPE_p_SynthLab__UWaveData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("UWaveData_n_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->n = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UWaveData_n_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::UWaveData *arg1 = (SynthLab::UWaveData *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("SynthLab::UWaveData::n",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::UWaveData::n",1,"SynthLab::UWaveData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__UWaveData,0))){
    SWIG_fail_ptr("UWaveData_n_get",1,SWIGTYPE_p_SynthLab__UWaveData);
  }
  
  result =  ((arg1)->n);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UWaveData_u_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::UWaveData *arg1 = (SynthLab::UWaveData *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::UWaveData::u",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::UWaveData::u",1,"SynthLab::UWaveData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::UWaveData::u",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__UWaveData,0))){
    SWIG_fail_ptr("UWaveData_u_set",1,SWIGTYPE_p_SynthLab__UWaveData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("UWaveData_u_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->u = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UWaveData_u_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::UWaveData *arg1 = (SynthLab::UWaveData *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::UWaveData::u",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::UWaveData::u",1,"SynthLab::UWaveData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__UWaveData,0))){
    SWIG_fail_ptr("UWaveData_u_get",1,SWIGTYPE_p_SynthLab__UWaveData);
  }
  
  result =  ((arg1)->u);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UWaveData_u64_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::UWaveData *arg1 = (SynthLab::UWaveData *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::UWaveData::u64",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::UWaveData::u64",1,"SynthLab::UWaveData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::UWaveData::u64",2,"uint64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__UWaveData,0))){
    SWIG_fail_ptr("UWaveData_u64_set",1,SWIGTYPE_p_SynthLab__UWaveData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint64_t,0))){
    SWIG_fail_ptr("UWaveData_u64_set",2,SWIGTYPE_p_uint64_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->u64 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UWaveData_u64_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::UWaveData *arg1 = (SynthLab::UWaveData *) 0 ;
  uint64_t result;
  
  SWIG_check_num_args("SynthLab::UWaveData::u64",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::UWaveData::u64",1,"SynthLab::UWaveData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__UWaveData,0))){
    SWIG_fail_ptr("UWaveData_u64_get",1,SWIGTYPE_p_SynthLab__UWaveData);
  }
  
  result =  ((arg1)->u64);
  {
    uint64_t * resultptr = new uint64_t((const uint64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UWaveData(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::UWaveData *result = 0 ;
  
  SWIG_check_num_args("SynthLab::UWaveData::UWaveData",0,0)
  result = (SynthLab::UWaveData *)new SynthLab::UWaveData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__UWaveData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UWaveData(void *obj) {
SynthLab::UWaveData *arg1 = (SynthLab::UWaveData *) obj;
delete arg1;
}
static int _proxy__wrap_new_UWaveData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UWaveData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UWaveData_attributes[] = {
    { "f", _wrap_UWaveData_f_get, _wrap_UWaveData_f_set },
    { "d", _wrap_UWaveData_d_get, _wrap_UWaveData_d_set },
    { "n", _wrap_UWaveData_n_get, _wrap_UWaveData_n_set },
    { "u", _wrap_UWaveData_u_get, _wrap_UWaveData_u_set },
    { "u64", _wrap_UWaveData_u64_get, _wrap_UWaveData_u64_set },
    {0,0,0}
};
static swig_lua_method swig_UWaveData_methods[]= {
    {0,0}
};
static swig_lua_method swig_UWaveData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_UWaveData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UWaveData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UWaveData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UWaveData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UWaveData_Sf_SwigStatic = {
    "UWaveData",
    swig_UWaveData_Sf_SwigStatic_methods,
    swig_UWaveData_Sf_SwigStatic_attributes,
    swig_UWaveData_Sf_SwigStatic_constants,
    swig_UWaveData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UWaveData_bases[] = {0};
static const char *swig_UWaveData_base_names[] = {0};
static swig_lua_class _wrap_class_UWaveData = { "UWaveData", "UWaveData", &SWIGTYPE_p_SynthLab__UWaveData,_proxy__wrap_new_UWaveData, swig_delete_UWaveData, swig_UWaveData_methods, swig_UWaveData_attributes, &swig_UWaveData_Sf_SwigStatic, swig_UWaveData_meta, swig_UWaveData_bases, swig_UWaveData_base_names };

static int _wrap_new_PCMSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSample *result = 0 ;
  
  SWIG_check_num_args("SynthLab::PCMSample::PCMSample",0,0)
  result = (SynthLab::PCMSample *)new SynthLab::PCMSample();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__PCMSample,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSample_loadPCMSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSample *arg1 = (SynthLab::PCMSample *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::PCMSample::loadPCMSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSample::loadPCMSample",1,"SynthLab::PCMSample *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::PCMSample::loadPCMSample",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSample,0))){
    SWIG_fail_ptr("PCMSample_loadPCMSample",1,SWIGTYPE_p_SynthLab__PCMSample);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->loadPCMSample((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSample_getSampleBuffer(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSample *arg1 = (SynthLab::PCMSample *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("SynthLab::PCMSample::getSampleBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSample::getSampleBuffer",1,"SynthLab::PCMSample *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSample,0))){
    SWIG_fail_ptr("PCMSample_getSampleBuffer",1,SWIGTYPE_p_SynthLab__PCMSample);
  }
  
  result = (float *)(arg1)->getSampleBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSample_setPitchless(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSample *arg1 = (SynthLab::PCMSample *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::PCMSample::setPitchless",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSample::setPitchless",1,"SynthLab::PCMSample *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::PCMSample::setPitchless",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSample,0))){
    SWIG_fail_ptr("PCMSample_setPitchless",1,SWIGTYPE_p_SynthLab__PCMSample);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setPitchless(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSample_isPitchless(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSample *arg1 = (SynthLab::PCMSample *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::PCMSample::isPitchless",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSample::isPitchless",1,"SynthLab::PCMSample *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSample,0))){
    SWIG_fail_ptr("PCMSample_isPitchless",1,SWIGTYPE_p_SynthLab__PCMSample);
  }
  
  result = (bool)(arg1)->isPitchless();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSample_isSampleLoaded(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSample *arg1 = (SynthLab::PCMSample *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::PCMSample::isSampleLoaded",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSample::isSampleLoaded",1,"SynthLab::PCMSample *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSample,0))){
    SWIG_fail_ptr("PCMSample_isSampleLoaded",1,SWIGTYPE_p_SynthLab__PCMSample);
  }
  
  result = (bool)(arg1)->isSampleLoaded();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSample_getNumChannels(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSample *arg1 = (SynthLab::PCMSample *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::PCMSample::getNumChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSample::getNumChannels",1,"SynthLab::PCMSample *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSample,0))){
    SWIG_fail_ptr("PCMSample_getNumChannels",1,SWIGTYPE_p_SynthLab__PCMSample);
  }
  
  result = (arg1)->getNumChannels();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSample_getSampleRate(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSample *arg1 = (SynthLab::PCMSample *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::PCMSample::getSampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSample::getSampleRate",1,"SynthLab::PCMSample *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSample,0))){
    SWIG_fail_ptr("PCMSample_getSampleRate",1,SWIGTYPE_p_SynthLab__PCMSample);
  }
  
  result = (arg1)->getSampleRate();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSample_getSampleCount(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSample *arg1 = (SynthLab::PCMSample *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::PCMSample::getSampleCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSample::getSampleCount",1,"SynthLab::PCMSample *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSample,0))){
    SWIG_fail_ptr("PCMSample_getSampleCount",1,SWIGTYPE_p_SynthLab__PCMSample);
  }
  
  result = (arg1)->getSampleCount();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSample_getLoopType(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSample *arg1 = (SynthLab::PCMSample *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::PCMSample::getLoopType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSample::getLoopType",1,"SynthLab::PCMSample *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSample,0))){
    SWIG_fail_ptr("PCMSample_getLoopType",1,SWIGTYPE_p_SynthLab__PCMSample);
  }
  
  result = (arg1)->getLoopType();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSample_getSmpteFormat(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSample *arg1 = (SynthLab::PCMSample *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::PCMSample::getSmpteFormat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSample::getSmpteFormat",1,"SynthLab::PCMSample *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSample,0))){
    SWIG_fail_ptr("PCMSample_getSmpteFormat",1,SWIGTYPE_p_SynthLab__PCMSample);
  }
  
  result = (arg1)->getSmpteFormat();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSample_getSmpteOffset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSample *arg1 = (SynthLab::PCMSample *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::PCMSample::getSmpteOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSample::getSmpteOffset",1,"SynthLab::PCMSample *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSample,0))){
    SWIG_fail_ptr("PCMSample_getSmpteOffset",1,SWIGTYPE_p_SynthLab__PCMSample);
  }
  
  result = (arg1)->getSmpteOffset();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSample_getLoopCount(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSample *arg1 = (SynthLab::PCMSample *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::PCMSample::getLoopCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSample::getLoopCount",1,"SynthLab::PCMSample *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSample,0))){
    SWIG_fail_ptr("PCMSample_getLoopCount",1,SWIGTYPE_p_SynthLab__PCMSample);
  }
  
  result = (arg1)->getLoopCount();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSample_setLoopCount(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSample *arg1 = (SynthLab::PCMSample *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::PCMSample::setLoopCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSample::setLoopCount",1,"SynthLab::PCMSample *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::PCMSample::setLoopCount",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSample,0))){
    SWIG_fail_ptr("PCMSample_setLoopCount",1,SWIGTYPE_p_SynthLab__PCMSample);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("PCMSample_setLoopCount",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->setLoopCount(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSample_getLoopStartIndex(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSample *arg1 = (SynthLab::PCMSample *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::PCMSample::getLoopStartIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSample::getLoopStartIndex",1,"SynthLab::PCMSample *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSample,0))){
    SWIG_fail_ptr("PCMSample_getLoopStartIndex",1,SWIGTYPE_p_SynthLab__PCMSample);
  }
  
  result = (arg1)->getLoopStartIndex();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSample_setLoopStartIndex(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSample *arg1 = (SynthLab::PCMSample *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::PCMSample::setLoopStartIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSample::setLoopStartIndex",1,"SynthLab::PCMSample *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::PCMSample::setLoopStartIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSample,0))){
    SWIG_fail_ptr("PCMSample_setLoopStartIndex",1,SWIGTYPE_p_SynthLab__PCMSample);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("PCMSample_setLoopStartIndex",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->setLoopStartIndex(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSample_getLoopEndIndex(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSample *arg1 = (SynthLab::PCMSample *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::PCMSample::getLoopEndIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSample::getLoopEndIndex",1,"SynthLab::PCMSample *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSample,0))){
    SWIG_fail_ptr("PCMSample_getLoopEndIndex",1,SWIGTYPE_p_SynthLab__PCMSample);
  }
  
  result = (arg1)->getLoopEndIndex();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSample_setLoopEndIndex(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSample *arg1 = (SynthLab::PCMSample *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::PCMSample::setLoopEndIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSample::setLoopEndIndex",1,"SynthLab::PCMSample *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::PCMSample::setLoopEndIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSample,0))){
    SWIG_fail_ptr("PCMSample_setLoopEndIndex",1,SWIGTYPE_p_SynthLab__PCMSample);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("PCMSample_setLoopEndIndex",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->setLoopEndIndex(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSample_getUnityMIDINote(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSample *arg1 = (SynthLab::PCMSample *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::PCMSample::getUnityMIDINote",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSample::getUnityMIDINote",1,"SynthLab::PCMSample *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSample,0))){
    SWIG_fail_ptr("PCMSample_getUnityMIDINote",1,SWIGTYPE_p_SynthLab__PCMSample);
  }
  
  result = (arg1)->getUnityMIDINote();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSample_setUnityMIDINote(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSample *arg1 = (SynthLab::PCMSample *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::PCMSample::setUnityMIDINote",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSample::setUnityMIDINote",1,"SynthLab::PCMSample *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::PCMSample::setUnityMIDINote",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSample,0))){
    SWIG_fail_ptr("PCMSample_setUnityMIDINote",1,SWIGTYPE_p_SynthLab__PCMSample);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("PCMSample_setUnityMIDINote",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->setUnityMIDINote(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSample_getUnityMIDIPitchFraction(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSample *arg1 = (SynthLab::PCMSample *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::PCMSample::getUnityMIDIPitchFraction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSample::getUnityMIDIPitchFraction",1,"SynthLab::PCMSample *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSample,0))){
    SWIG_fail_ptr("PCMSample_getUnityMIDIPitchFraction",1,SWIGTYPE_p_SynthLab__PCMSample);
  }
  
  result = (arg1)->getUnityMIDIPitchFraction();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCMSample_setUnityMIDIPitchFraction(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::PCMSample *arg1 = (SynthLab::PCMSample *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::PCMSample::setUnityMIDIPitchFraction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::PCMSample::setUnityMIDIPitchFraction",1,"SynthLab::PCMSample *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::PCMSample::setUnityMIDIPitchFraction",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__PCMSample,0))){
    SWIG_fail_ptr("PCMSample_setUnityMIDIPitchFraction",1,SWIGTYPE_p_SynthLab__PCMSample);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("PCMSample_setUnityMIDIPitchFraction",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->setUnityMIDIPitchFraction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PCMSample(void *obj) {
SynthLab::PCMSample *arg1 = (SynthLab::PCMSample *) obj;
delete arg1;
}
static int _proxy__wrap_new_PCMSample(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PCMSample);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PCMSample_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PCMSample_methods[]= {
    { "loadPCMSample", _wrap_PCMSample_loadPCMSample},
    { "getSampleBuffer", _wrap_PCMSample_getSampleBuffer},
    { "setPitchless", _wrap_PCMSample_setPitchless},
    { "isPitchless", _wrap_PCMSample_isPitchless},
    { "isSampleLoaded", _wrap_PCMSample_isSampleLoaded},
    { "getNumChannels", _wrap_PCMSample_getNumChannels},
    { "getSampleRate", _wrap_PCMSample_getSampleRate},
    { "getSampleCount", _wrap_PCMSample_getSampleCount},
    { "getLoopType", _wrap_PCMSample_getLoopType},
    { "getSmpteFormat", _wrap_PCMSample_getSmpteFormat},
    { "getSmpteOffset", _wrap_PCMSample_getSmpteOffset},
    { "getLoopCount", _wrap_PCMSample_getLoopCount},
    { "setLoopCount", _wrap_PCMSample_setLoopCount},
    { "getLoopStartIndex", _wrap_PCMSample_getLoopStartIndex},
    { "setLoopStartIndex", _wrap_PCMSample_setLoopStartIndex},
    { "getLoopEndIndex", _wrap_PCMSample_getLoopEndIndex},
    { "setLoopEndIndex", _wrap_PCMSample_setLoopEndIndex},
    { "getUnityMIDINote", _wrap_PCMSample_getUnityMIDINote},
    { "setUnityMIDINote", _wrap_PCMSample_setUnityMIDINote},
    { "getUnityMIDIPitchFraction", _wrap_PCMSample_getUnityMIDIPitchFraction},
    { "setUnityMIDIPitchFraction", _wrap_PCMSample_setUnityMIDIPitchFraction},
    {0,0}
};
static swig_lua_method swig_PCMSample_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PCMSample_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PCMSample_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PCMSample_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PCMSample_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PCMSample_Sf_SwigStatic = {
    "PCMSample",
    swig_PCMSample_Sf_SwigStatic_methods,
    swig_PCMSample_Sf_SwigStatic_attributes,
    swig_PCMSample_Sf_SwigStatic_constants,
    swig_PCMSample_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PCMSample_bases[] = {0};
static const char *swig_PCMSample_base_names[] = {0};
static swig_lua_class _wrap_class_PCMSample = { "PCMSample", "PCMSample", &SWIGTYPE_p_SynthLab__PCMSample,_proxy__wrap_new_PCMSample, swig_delete_PCMSample, swig_PCMSample_methods, swig_PCMSample_attributes, &swig_PCMSample_Sf_SwigStatic, swig_PCMSample_meta, swig_PCMSample_bases, swig_PCMSample_base_names };

static int _wrap_convertUpper___call(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::convertUpper *arg1 = (SynthLab::convertUpper *) 0 ;
  char *arg2 = 0 ;
  
  SWIG_check_num_args("SynthLab::convertUpper::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::convertUpper::operator ()",1,"SynthLab::convertUpper *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::convertUpper::operator ()",2,"char &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__convertUpper,0))){
    SWIG_fail_ptr("convertUpper___call",1,SWIGTYPE_p_SynthLab__convertUpper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_char,0))){
    SWIG_fail_ptr("convertUpper___call",2,SWIGTYPE_p_char);
  }
  
  (arg1)->operator ()(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_convertUpper(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::convertUpper *result = 0 ;
  
  SWIG_check_num_args("SynthLab::convertUpper::convertUpper",0,0)
  result = (SynthLab::convertUpper *)new SynthLab::convertUpper();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__convertUpper,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_convertUpper(void *obj) {
SynthLab::convertUpper *arg1 = (SynthLab::convertUpper *) obj;
delete arg1;
}
static int _proxy__wrap_new_convertUpper(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_convertUpper);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_convertUpper_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_convertUpper_methods[]= {
    { "__call", _wrap_convertUpper___call},
    {0,0}
};
static swig_lua_method swig_convertUpper_meta[] = {
    { "__call", _wrap_convertUpper___call},
    {0,0}
};

static swig_lua_attribute swig_convertUpper_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_convertUpper_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_convertUpper_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_convertUpper_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_convertUpper_Sf_SwigStatic = {
    "convertUpper",
    swig_convertUpper_Sf_SwigStatic_methods,
    swig_convertUpper_Sf_SwigStatic_attributes,
    swig_convertUpper_Sf_SwigStatic_constants,
    swig_convertUpper_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_convertUpper_bases[] = {0};
static const char *swig_convertUpper_base_names[] = {0};
static swig_lua_class _wrap_class_convertUpper = { "convertUpper", "convertUpper", &SWIGTYPE_p_SynthLab__convertUpper,_proxy__wrap_new_convertUpper, swig_delete_convertUpper, swig_convertUpper_methods, swig_convertUpper_attributes, &swig_convertUpper_Sf_SwigStatic, swig_convertUpper_meta, swig_convertUpper_bases, swig_convertUpper_base_names };

static int _wrap_new_WaveFolder(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  SynthLab::WaveFolder *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveFolder::WaveFolder",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SynthLab::WaveFolder::WaveFolder",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SynthLab::WaveFolder::WaveFolder",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (SynthLab::WaveFolder *)new SynthLab::WaveFolder((char const *)arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__WaveFolder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveFolder_parseFolder__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveFolder *arg1 = (SynthLab::WaveFolder *) 0 ;
  SynthLab::PCMSample **arg2 = (SynthLab::PCMSample **) 0 ;
  bool arg3 ;
  bool arg4 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WaveFolder::parseFolder",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveFolder::parseFolder",1,"SynthLab::WaveFolder *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WaveFolder::parseFolder",2,"SynthLab::PCMSample **");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("SynthLab::WaveFolder::parseFolder",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("SynthLab::WaveFolder::parseFolder",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveFolder,0))){
    SWIG_fail_ptr("WaveFolder_parseFolder",1,SWIGTYPE_p_SynthLab__WaveFolder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_SynthLab__PCMSample,0))){
    SWIG_fail_ptr("WaveFolder_parseFolder",2,SWIGTYPE_p_p_SynthLab__PCMSample);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (arg1)->parseFolder(arg2,arg3,arg4);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveFolder_parseFolder__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveFolder *arg1 = (SynthLab::WaveFolder *) 0 ;
  SynthLab::PCMSample **arg2 = (SynthLab::PCMSample **) 0 ;
  bool arg3 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WaveFolder::parseFolder",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveFolder::parseFolder",1,"SynthLab::WaveFolder *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WaveFolder::parseFolder",2,"SynthLab::PCMSample **");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("SynthLab::WaveFolder::parseFolder",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveFolder,0))){
    SWIG_fail_ptr("WaveFolder_parseFolder",1,SWIGTYPE_p_SynthLab__WaveFolder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_SynthLab__PCMSample,0))){
    SWIG_fail_ptr("WaveFolder_parseFolder",2,SWIGTYPE_p_p_SynthLab__PCMSample);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (arg1)->parseFolder(arg2,arg3);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveFolder_parseFolder(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__WaveFolder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_p_SynthLab__PCMSample, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_WaveFolder_parseFolder__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__WaveFolder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_p_SynthLab__PCMSample, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_WaveFolder_parseFolder__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WaveFolder_parseFolder'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::WaveFolder::parseFolder(SynthLab::PCMSample **,bool,bool)\n"
    "    SynthLab::WaveFolder::parseFolder(SynthLab::PCMSample **,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_WaveFolder_addNextFileToMap(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveFolder *arg1 = (SynthLab::WaveFolder *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool arg4 ;
  std::map< int,std::string > *arg5 = (std::map< int,std::string > *) 0 ;
  int *arg6 = 0 ;
  std::string *argp2 ;
  std::string *argp3 ;
  
  SWIG_check_num_args("SynthLab::WaveFolder::addNextFileToMap",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveFolder::addNextFileToMap",1,"SynthLab::WaveFolder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WaveFolder::addNextFileToMap",2,"std::string");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::WaveFolder::addNextFileToMap",3,"std::string");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("SynthLab::WaveFolder::addNextFileToMap",4,"bool");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SynthLab::WaveFolder::addNextFileToMap",5,"std::map< int,std::string > *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SynthLab::WaveFolder::addNextFileToMap",6,"int &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveFolder,0))){
    SWIG_fail_ptr("WaveFolder_addNextFileToMap",1,SWIGTYPE_p_SynthLab__WaveFolder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("WaveFolder_addNextFileToMap",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("WaveFolder_addNextFileToMap",3,SWIGTYPE_p_std__string);
  }
  arg3 = *argp3;
  
  arg4 = (lua_toboolean(L, 4)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_std__mapT_int_std__string_t,0))){
    SWIG_fail_ptr("WaveFolder_addNextFileToMap",5,SWIGTYPE_p_std__mapT_int_std__string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("WaveFolder_addNextFileToMap",6,SWIGTYPE_p_int);
  }
  
  (arg1)->addNextFileToMap(arg2,arg3,arg4,arg5,*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveFolder_eraseSubStr(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveFolder *arg1 = (SynthLab::WaveFolder *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveFolder::eraseSubStr",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveFolder::eraseSubStr",1,"SynthLab::WaveFolder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WaveFolder::eraseSubStr",2,"std::string &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::WaveFolder::eraseSubStr",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveFolder,0))){
    SWIG_fail_ptr("WaveFolder_eraseSubStr",1,SWIGTYPE_p_SynthLab__WaveFolder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("WaveFolder_eraseSubStr",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("WaveFolder_eraseSubStr",3,SWIGTYPE_p_std__string);
  }
  
  (arg1)->eraseSubStr(*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WaveFolder(void *obj) {
SynthLab::WaveFolder *arg1 = (SynthLab::WaveFolder *) obj;
delete arg1;
}
static int _proxy__wrap_new_WaveFolder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WaveFolder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WaveFolder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WaveFolder_methods[]= {
    { "parseFolder", _wrap_WaveFolder_parseFolder},
    { "addNextFileToMap", _wrap_WaveFolder_addNextFileToMap},
    { "eraseSubStr", _wrap_WaveFolder_eraseSubStr},
    {0,0}
};
static swig_lua_method swig_WaveFolder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WaveFolder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WaveFolder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WaveFolder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WaveFolder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WaveFolder_Sf_SwigStatic = {
    "WaveFolder",
    swig_WaveFolder_Sf_SwigStatic_methods,
    swig_WaveFolder_Sf_SwigStatic_attributes,
    swig_WaveFolder_Sf_SwigStatic_constants,
    swig_WaveFolder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WaveFolder_bases[] = {0};
static const char *swig_WaveFolder_base_names[] = {0};
static swig_lua_class _wrap_class_WaveFolder = { "WaveFolder", "WaveFolder", &SWIGTYPE_p_SynthLab__WaveFolder,_proxy__wrap_new_WaveFolder, swig_delete_WaveFolder, swig_WaveFolder_methods, swig_WaveFolder_attributes, &swig_WaveFolder_Sf_SwigStatic, swig_WaveFolder_meta, swig_WaveFolder_bases, swig_WaveFolder_base_names };

static int _wrap_new_Resonator(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Resonator *result = 0 ;
  
  SWIG_check_num_args("SynthLab::Resonator::Resonator",0,0)
  result = (SynthLab::Resonator *)new SynthLab::Resonator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__Resonator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resonator_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Resonator *arg1 = (SynthLab::Resonator *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::Resonator::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Resonator::reset",1,"SynthLab::Resonator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::Resonator::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Resonator,0))){
    SWIG_fail_ptr("Resonator_reset",1,SWIGTYPE_p_SynthLab__Resonator);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resonator_process(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Resonator *arg1 = (SynthLab::Resonator *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::Resonator::process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Resonator::process",1,"SynthLab::Resonator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::Resonator::process",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Resonator,0))){
    SWIG_fail_ptr("Resonator_process",1,SWIGTYPE_p_SynthLab__Resonator);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resonator_setParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Resonator *arg1 = (SynthLab::Resonator *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::Resonator::setParameters",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Resonator::setParameters",1,"SynthLab::Resonator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::Resonator::setParameters",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SynthLab::Resonator::setParameters",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Resonator,0))){
    SWIG_fail_ptr("Resonator_setParameters",1,SWIGTYPE_p_SynthLab__Resonator);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->setParameters(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resonator_flushDelays(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Resonator *arg1 = (SynthLab::Resonator *) 0 ;
  
  SWIG_check_num_args("SynthLab::Resonator::flushDelays",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Resonator::flushDelays",1,"SynthLab::Resonator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Resonator,0))){
    SWIG_fail_ptr("Resonator_flushDelays",1,SWIGTYPE_p_SynthLab__Resonator);
  }
  
  (arg1)->flushDelays();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Resonator(void *obj) {
SynthLab::Resonator *arg1 = (SynthLab::Resonator *) obj;
delete arg1;
}
static int _proxy__wrap_new_Resonator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Resonator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Resonator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Resonator_methods[]= {
    { "reset", _wrap_Resonator_reset},
    { "process", _wrap_Resonator_process},
    { "setParameters", _wrap_Resonator_setParameters},
    { "flushDelays", _wrap_Resonator_flushDelays},
    {0,0}
};
static swig_lua_method swig_Resonator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Resonator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Resonator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Resonator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Resonator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Resonator_Sf_SwigStatic = {
    "Resonator",
    swig_Resonator_Sf_SwigStatic_methods,
    swig_Resonator_Sf_SwigStatic_attributes,
    swig_Resonator_Sf_SwigStatic_constants,
    swig_Resonator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Resonator_bases[] = {0};
static const char *swig_Resonator_base_names[] = {0};
static swig_lua_class _wrap_class_Resonator = { "Resonator", "Resonator", &SWIGTYPE_p_SynthLab__Resonator,_proxy__wrap_new_Resonator, swig_delete_Resonator, swig_Resonator_methods, swig_Resonator_attributes, &swig_Resonator_Sf_SwigStatic, swig_Resonator_meta, swig_Resonator_bases, swig_Resonator_base_names };

static int _wrap_new_LaneStep(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *result = 0 ;
  
  SWIG_check_num_args("SynthLab::LaneStep::LaneStep",0,0)
  result = (SynthLab::LaneStep *)new SynthLab::LaneStep();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__LaneStep,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_initStepTiming(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  
  SWIG_check_num_args("SynthLab::LaneStep::initStepTiming",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::initStepTiming",1,"SynthLab::LaneStep *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_initStepTiming",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  (arg1)->initStepTiming();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_updateStepDurationSamples(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::LaneStep::updateStepDurationSamples",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::updateStepDurationSamples",1,"SynthLab::LaneStep *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LaneStep::updateStepDurationSamples",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_updateStepDurationSamples",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("LaneStep_updateStepDurationSamples",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->updateStepDurationSamples(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_updateStepXFadeSamples(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::LaneStep::updateStepXFadeSamples",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::updateStepXFadeSamples",1,"SynthLab::LaneStep *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LaneStep::updateStepXFadeSamples",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_updateStepXFadeSamples",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("LaneStep_updateStepXFadeSamples",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->updateStepXFadeSamples(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_stepDurationSamplesRunning_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::LaneStep::stepDurationSamplesRunning",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::stepDurationSamplesRunning",1,"SynthLab::LaneStep *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LaneStep::stepDurationSamplesRunning",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_stepDurationSamplesRunning_set",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("LaneStep_stepDurationSamplesRunning_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->stepDurationSamplesRunning = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_stepDurationSamplesRunning_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::LaneStep::stepDurationSamplesRunning",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::stepDurationSamplesRunning",1,"SynthLab::LaneStep *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_stepDurationSamplesRunning_get",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  result =  ((arg1)->stepDurationSamplesRunning);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_stepDurationMilliSec_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::LaneStep::stepDurationMilliSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::stepDurationMilliSec",1,"SynthLab::LaneStep *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::LaneStep::stepDurationMilliSec",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_stepDurationMilliSec_set",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->stepDurationMilliSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_stepDurationMilliSec_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::LaneStep::stepDurationMilliSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::stepDurationMilliSec",1,"SynthLab::LaneStep *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_stepDurationMilliSec_get",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  result = (double) ((arg1)->stepDurationMilliSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_stepDurationNote_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  SynthLab::NoteDuration arg2 ;
  
  SWIG_check_num_args("SynthLab::LaneStep::stepDurationNote",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::stepDurationNote",1,"SynthLab::LaneStep *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::LaneStep::stepDurationNote",2,"SynthLab::NoteDuration");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_stepDurationNote_set",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  arg2 = (SynthLab::NoteDuration)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->stepDurationNote = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_stepDurationNote_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  SynthLab::NoteDuration result;
  
  SWIG_check_num_args("SynthLab::LaneStep::stepDurationNote",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::stepDurationNote",1,"SynthLab::LaneStep *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_stepDurationNote_get",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  result = (SynthLab::NoteDuration) ((arg1)->stepDurationNote);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_xfadeDurationSamplesRunning_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::LaneStep::xfadeDurationSamplesRunning",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::xfadeDurationSamplesRunning",1,"SynthLab::LaneStep *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LaneStep::xfadeDurationSamplesRunning",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_xfadeDurationSamplesRunning_set",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("LaneStep_xfadeDurationSamplesRunning_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->xfadeDurationSamplesRunning = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_xfadeDurationSamplesRunning_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::LaneStep::xfadeDurationSamplesRunning",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::xfadeDurationSamplesRunning",1,"SynthLab::LaneStep *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_xfadeDurationSamplesRunning_get",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  result =  ((arg1)->xfadeDurationSamplesRunning);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_xfadeDurationMilliSec_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::LaneStep::xfadeDurationMilliSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::xfadeDurationMilliSec",1,"SynthLab::LaneStep *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::LaneStep::xfadeDurationMilliSec",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_xfadeDurationMilliSec_set",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->xfadeDurationMilliSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_xfadeDurationMilliSec_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::LaneStep::xfadeDurationMilliSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::xfadeDurationMilliSec",1,"SynthLab::LaneStep *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_xfadeDurationMilliSec_get",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  result = (double) ((arg1)->xfadeDurationMilliSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_xfadeDurationNote_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  SynthLab::NoteDuration arg2 ;
  
  SWIG_check_num_args("SynthLab::LaneStep::xfadeDurationNote",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::xfadeDurationNote",1,"SynthLab::LaneStep *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::LaneStep::xfadeDurationNote",2,"SynthLab::NoteDuration");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_xfadeDurationNote_set",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  arg2 = (SynthLab::NoteDuration)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->xfadeDurationNote = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_xfadeDurationNote_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  SynthLab::NoteDuration result;
  
  SWIG_check_num_args("SynthLab::LaneStep::xfadeDurationNote",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::xfadeDurationNote",1,"SynthLab::LaneStep *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_xfadeDurationNote_get",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  result = (SynthLab::NoteDuration) ((arg1)->xfadeDurationNote);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_probability_Pct_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::LaneStep::probability_Pct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::probability_Pct",1,"SynthLab::LaneStep *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::LaneStep::probability_Pct",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_probability_Pct_set",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->probability_Pct = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_probability_Pct_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::LaneStep::probability_Pct",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::probability_Pct",1,"SynthLab::LaneStep *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_probability_Pct_get",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  result = (double) ((arg1)->probability_Pct);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_getNextStepIndex(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("SynthLab::LaneStep::getNextStepIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::getNextStepIndex",1,"SynthLab::LaneStep *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_getNextStepIndex",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  result = (arg1)->getNextStepIndex();
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_setNextStepIndex(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::LaneStep::setNextStepIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::setNextStepIndex",1,"SynthLab::LaneStep *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LaneStep::setNextStepIndex",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_setNextStepIndex",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("LaneStep_setNextStepIndex",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  (arg1)->setNextStepIndex(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_getPreviousStepIndex(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("SynthLab::LaneStep::getPreviousStepIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::getPreviousStepIndex",1,"SynthLab::LaneStep *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_getPreviousStepIndex",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  result = (arg1)->getPreviousStepIndex();
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_setPreviousStepIndex(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::LaneStep::setPreviousStepIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::setPreviousStepIndex",1,"SynthLab::LaneStep *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::LaneStep::setPreviousStepIndex",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_setPreviousStepIndex",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("LaneStep_setPreviousStepIndex",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  (arg1)->setPreviousStepIndex(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_getStepValue(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::LaneStep::getStepValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::getStepValue",1,"SynthLab::LaneStep *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_getStepValue",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  result = (double)(arg1)->getStepValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_setStepValue(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::LaneStep::setStepValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::setStepValue",1,"SynthLab::LaneStep *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::LaneStep::setStepValue",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_setStepValue",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setStepValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_updateStepProbability(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  
  SWIG_check_num_args("SynthLab::LaneStep::updateStepProbability",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::updateStepProbability",1,"SynthLab::LaneStep *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_updateStepProbability",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  (arg1)->updateStepProbability();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_getIsNULLStep(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::LaneStep::getIsNULLStep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::getIsNULLStep",1,"SynthLab::LaneStep *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_getIsNULLStep",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  result = (bool)(arg1)->getIsNULLStep();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LaneStep_setNULLStep(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::LaneStep::setNULLStep",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::LaneStep::setNULLStep",1,"SynthLab::LaneStep *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::LaneStep::setNULLStep",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("LaneStep_setNULLStep",1,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setNULLStep(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LaneStep(void *obj) {
SynthLab::LaneStep *arg1 = (SynthLab::LaneStep *) obj;
delete arg1;
}
static int _proxy__wrap_new_LaneStep(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LaneStep);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LaneStep_attributes[] = {
    { "stepDurationSamplesRunning", _wrap_LaneStep_stepDurationSamplesRunning_get, _wrap_LaneStep_stepDurationSamplesRunning_set },
    { "stepDurationMilliSec", _wrap_LaneStep_stepDurationMilliSec_get, _wrap_LaneStep_stepDurationMilliSec_set },
    { "stepDurationNote", _wrap_LaneStep_stepDurationNote_get, _wrap_LaneStep_stepDurationNote_set },
    { "xfadeDurationSamplesRunning", _wrap_LaneStep_xfadeDurationSamplesRunning_get, _wrap_LaneStep_xfadeDurationSamplesRunning_set },
    { "xfadeDurationMilliSec", _wrap_LaneStep_xfadeDurationMilliSec_get, _wrap_LaneStep_xfadeDurationMilliSec_set },
    { "xfadeDurationNote", _wrap_LaneStep_xfadeDurationNote_get, _wrap_LaneStep_xfadeDurationNote_set },
    { "probability_Pct", _wrap_LaneStep_probability_Pct_get, _wrap_LaneStep_probability_Pct_set },
    {0,0,0}
};
static swig_lua_method swig_LaneStep_methods[]= {
    { "initStepTiming", _wrap_LaneStep_initStepTiming},
    { "updateStepDurationSamples", _wrap_LaneStep_updateStepDurationSamples},
    { "updateStepXFadeSamples", _wrap_LaneStep_updateStepXFadeSamples},
    { "getNextStepIndex", _wrap_LaneStep_getNextStepIndex},
    { "setNextStepIndex", _wrap_LaneStep_setNextStepIndex},
    { "getPreviousStepIndex", _wrap_LaneStep_getPreviousStepIndex},
    { "setPreviousStepIndex", _wrap_LaneStep_setPreviousStepIndex},
    { "getStepValue", _wrap_LaneStep_getStepValue},
    { "setStepValue", _wrap_LaneStep_setStepValue},
    { "updateStepProbability", _wrap_LaneStep_updateStepProbability},
    { "getIsNULLStep", _wrap_LaneStep_getIsNULLStep},
    { "setNULLStep", _wrap_LaneStep_setNULLStep},
    {0,0}
};
static swig_lua_method swig_LaneStep_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LaneStep_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LaneStep_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LaneStep_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LaneStep_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LaneStep_SwigStatic = {
    "LaneStep",
    swig_LaneStep_SwigStatic_methods,
    swig_LaneStep_SwigStatic_attributes,
    swig_LaneStep_SwigStatic_constants,
    swig_LaneStep_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LaneStep_bases[] = {0};
static const char *swig_LaneStep_base_names[] = {0};
static swig_lua_class _wrap_class_LaneStep = { "LaneStep", "LaneStep", &SWIGTYPE_p_SynthLab__LaneStep,_proxy__wrap_new_LaneStep, swig_delete_LaneStep, swig_LaneStep_methods, swig_LaneStep_attributes, &swig_LaneStep_SwigStatic, swig_LaneStep_meta, swig_LaneStep_bases, swig_LaneStep_base_names };

static int _wrap_new_Lane(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *result = 0 ;
  
  SWIG_check_num_args("SynthLab::Lane::Lane",0,0)
  result = (SynthLab::Lane *)new SynthLab::Lane();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__Lane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_resetJumpTable(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  
  SWIG_check_num_args("SynthLab::Lane::resetJumpTable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::resetJumpTable",1,"SynthLab::Lane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_resetJumpTable",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  (arg1)->resetJumpTable();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_shuffleJumpTable(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  
  SWIG_check_num_args("SynthLab::Lane::shuffleJumpTable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::shuffleJumpTable",1,"SynthLab::Lane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_shuffleJumpTable",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  (arg1)->shuffleJumpTable();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_updateLaneLoopPoints(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  
  SWIG_check_num_args("SynthLab::Lane::updateLaneLoopPoints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::updateLaneLoopPoints",1,"SynthLab::Lane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_updateLaneLoopPoints",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  (arg1)->updateLaneLoopPoints();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_initStepTiming(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::Lane::initStepTiming",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::initStepTiming",1,"SynthLab::Lane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::Lane::initStepTiming",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_initStepTiming",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("Lane_initStepTiming",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->initStepTiming(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_initCurrentStep(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::Lane::initCurrentStep",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::initCurrentStep",1,"SynthLab::Lane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::Lane::initCurrentStep",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_initCurrentStep",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("Lane_initCurrentStep",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->initCurrentStep(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_initNextStep__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  bool arg4 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  
  SWIG_check_num_args("SynthLab::Lane::initNextStep",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::initNextStep",1,"SynthLab::Lane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::Lane::initNextStep",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::Lane::initNextStep",3,"uint32_t");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("SynthLab::Lane::initNextStep",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_initNextStep",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("Lane_initNextStep",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("Lane_initNextStep",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->initNextStep(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_initNextStep__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  
  SWIG_check_num_args("SynthLab::Lane::initNextStep",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::initNextStep",1,"SynthLab::Lane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::Lane::initNextStep",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::Lane::initNextStep",3,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_initNextStep",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("Lane_initNextStep",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("Lane_initNextStep",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  (arg1)->initNextStep(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_initNextStep(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__Lane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Lane_initNextStep__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__Lane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Lane_initNextStep__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Lane_initNextStep'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::Lane::initNextStep(uint32_t,uint32_t,bool)\n"
    "    SynthLab::Lane::initNextStep(uint32_t,uint32_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Lane_setCurrentStepFromNextStep(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  
  SWIG_check_num_args("SynthLab::Lane::setCurrentStepFromNextStep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::setCurrentStepFromNextStep",1,"SynthLab::Lane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_setCurrentStepFromNextStep",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  (arg1)->setCurrentStepFromNextStep();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_loadNextStep__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  uint32_t arg2 ;
  bool arg3 ;
  uint32_t *argp2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::Lane::loadNextStep",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::loadNextStep",1,"SynthLab::Lane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::Lane::loadNextStep",2,"uint32_t");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("SynthLab::Lane::loadNextStep",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_loadNextStep",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("Lane_loadNextStep",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->loadNextStep(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_loadNextStep__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::Lane::loadNextStep",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::loadNextStep",1,"SynthLab::Lane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::Lane::loadNextStep",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_loadNextStep",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("Lane_loadNextStep",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->loadNextStep(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_loadNextStep(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__Lane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Lane_loadNextStep__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__Lane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Lane_loadNextStep__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Lane_loadNextStep'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::Lane::loadNextStep(uint32_t,bool)\n"
    "    SynthLab::Lane::loadNextStep(uint32_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Lane_getNextStepIndex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  uint32_t *arg2 = 0 ;
  bool arg3 ;
  bool *arg4 = 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::Lane::getNextStepIndex",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::getNextStepIndex",1,"SynthLab::Lane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::Lane::getNextStepIndex",2,"uint32_t &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("SynthLab::Lane::getNextStepIndex",3,"bool");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SynthLab::Lane::getNextStepIndex",4,"bool &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_getNextStepIndex",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("Lane_getNextStepIndex",2,SWIGTYPE_p_uint32_t);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("Lane_getNextStepIndex",4,SWIGTYPE_p_bool);
  }
  
  result = (arg1)->getNextStepIndex(*arg2,arg3,*arg4);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_updateLEDMeterWithCurrentStep(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  
  SWIG_check_num_args("SynthLab::Lane::updateLEDMeterWithCurrentStep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::updateLEDMeterWithCurrentStep",1,"SynthLab::Lane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_updateLEDMeterWithCurrentStep",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  (arg1)->updateLEDMeterWithCurrentStep();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_updateLEDMeterWithNextStep(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  
  SWIG_check_num_args("SynthLab::Lane::updateLEDMeterWithNextStep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::updateLEDMeterWithNextStep",1,"SynthLab::Lane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_updateLEDMeterWithNextStep",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  (arg1)->updateLEDMeterWithNextStep();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_updateStepValues(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  
  SWIG_check_num_args("SynthLab::Lane::updateStepValues",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::updateStepValues",1,"SynthLab::Lane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_updateStepValues",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  (arg1)->updateStepValues();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_setRandomizeSteps(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::Lane::setRandomizeSteps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::setRandomizeSteps",1,"SynthLab::Lane *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::Lane::setRandomizeSteps",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_setRandomizeSteps",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRandomizeSteps(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_startPoint_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::Lane::startPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::startPoint",1,"SynthLab::Lane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::Lane::startPoint",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_startPoint_set",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("Lane_startPoint_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->startPoint = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_startPoint_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::Lane::startPoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::startPoint",1,"SynthLab::Lane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_startPoint_get",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  result =  ((arg1)->startPoint);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_endPoint_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::Lane::endPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::endPoint",1,"SynthLab::Lane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::Lane::endPoint",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_endPoint_set",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("Lane_endPoint_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->endPoint = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_endPoint_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::Lane::endPoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::endPoint",1,"SynthLab::Lane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_endPoint_get",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  result =  ((arg1)->endPoint);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_forwardDirection_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::Lane::forwardDirection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::forwardDirection",1,"SynthLab::Lane *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::Lane::forwardDirection",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_forwardDirection_set",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->forwardDirection = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_forwardDirection_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::Lane::forwardDirection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::forwardDirection",1,"SynthLab::Lane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_forwardDirection_get",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  result = (bool) ((arg1)->forwardDirection);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_laneStep_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  SynthLab::LaneStep *arg2 ;
  
  SWIG_check_num_args("SynthLab::Lane::laneStep",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::laneStep",1,"SynthLab::Lane *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::Lane::laneStep",2,"SynthLab::LaneStep [SynthLab::MAX_SEQ_STEPS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_laneStep_set",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("Lane_laneStep_set",2,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  {
    size_t ii;
    SynthLab::LaneStep *b = (SynthLab::LaneStep *) arg1->laneStep;
    for (ii = 0; ii < (size_t)SynthLab::MAX_SEQ_STEPS; ii++) b[ii] = *((SynthLab::LaneStep *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_laneStep_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  SynthLab::LaneStep *result = 0 ;
  
  SWIG_check_num_args("SynthLab::Lane::laneStep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::laneStep",1,"SynthLab::Lane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_laneStep_get",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  result = (SynthLab::LaneStep *)(SynthLab::LaneStep *) ((arg1)->laneStep);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__LaneStep,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_currentStep_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  SynthLab::LaneStep *arg2 = (SynthLab::LaneStep *) 0 ;
  
  SWIG_check_num_args("SynthLab::Lane::currentStep",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::currentStep",1,"SynthLab::Lane *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::Lane::currentStep",2,"SynthLab::LaneStep *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_currentStep_set",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("Lane_currentStep_set",2,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  if (arg1) (arg1)->currentStep = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_currentStep_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  SynthLab::LaneStep *result = 0 ;
  
  SWIG_check_num_args("SynthLab::Lane::currentStep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::currentStep",1,"SynthLab::Lane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_currentStep_get",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  result = (SynthLab::LaneStep *)& ((arg1)->currentStep);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__LaneStep,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_nextStep_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  SynthLab::LaneStep *arg2 = (SynthLab::LaneStep *) 0 ;
  
  SWIG_check_num_args("SynthLab::Lane::nextStep",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::nextStep",1,"SynthLab::Lane *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::Lane::nextStep",2,"SynthLab::LaneStep *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_nextStep_set",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__LaneStep,0))){
    SWIG_fail_ptr("Lane_nextStep_set",2,SWIGTYPE_p_SynthLab__LaneStep);
  }
  
  if (arg1) (arg1)->nextStep = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_nextStep_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  SynthLab::LaneStep *result = 0 ;
  
  SWIG_check_num_args("SynthLab::Lane::nextStep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::nextStep",1,"SynthLab::Lane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_nextStep_get",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  result = (SynthLab::LaneStep *)& ((arg1)->nextStep);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__LaneStep,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_currentLEDStep_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::Lane::currentLEDStep",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::currentLEDStep",1,"SynthLab::Lane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::Lane::currentLEDStep",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_currentLEDStep_set",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("Lane_currentLEDStep_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->currentLEDStep = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_currentLEDStep_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::Lane::currentLEDStep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::currentLEDStep",1,"SynthLab::Lane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_currentLEDStep_get",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  result =  ((arg1)->currentLEDStep);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_currentLEDStepDuration_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::Lane::currentLEDStepDuration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::currentLEDStepDuration",1,"SynthLab::Lane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::Lane::currentLEDStepDuration",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_currentLEDStepDuration_set",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("Lane_currentLEDStepDuration_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->currentLEDStepDuration = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_currentLEDStepDuration_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::Lane::currentLEDStepDuration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::currentLEDStepDuration",1,"SynthLab::Lane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_currentLEDStepDuration_get",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  result =  ((arg1)->currentLEDStepDuration);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_getCurrentStepIndex(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("SynthLab::Lane::getCurrentStepIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::getCurrentStepIndex",1,"SynthLab::Lane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_getCurrentStepIndex",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  result = (arg1)->getCurrentStepIndex();
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_getNextStepIndex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("SynthLab::Lane::getNextStepIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::getNextStepIndex",1,"SynthLab::Lane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_getNextStepIndex",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  result = (arg1)->getNextStepIndex();
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_getNextStepIndex(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__Lane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Lane_getNextStepIndex__SWIG_1(L);
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__Lane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_bool, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Lane_getNextStepIndex__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Lane_getNextStepIndex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::Lane::getNextStepIndex(uint32_t &,bool,bool &)\n"
    "    SynthLab::Lane::getNextStepIndex()\n");
  lua_error(L);return 0;
}


static int _wrap_Lane_getCurrentStepValue(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::Lane::getCurrentStepValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::getCurrentStepValue",1,"SynthLab::Lane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_getCurrentStepValue",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  result = (double)(arg1)->getCurrentStepValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_getNextStepValue(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::Lane::getNextStepValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::getNextStepValue",1,"SynthLab::Lane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_getNextStepValue",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  result = (double)(arg1)->getNextStepValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lane_getJumpTableValue(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::Lane *arg1 = (SynthLab::Lane *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  int32_t result;
  
  SWIG_check_num_args("SynthLab::Lane::getJumpTableValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::Lane::getJumpTableValue",1,"SynthLab::Lane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::Lane::getJumpTableValue",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__Lane,0))){
    SWIG_fail_ptr("Lane_getJumpTableValue",1,SWIGTYPE_p_SynthLab__Lane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("Lane_getJumpTableValue",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (arg1)->getJumpTableValue(arg2);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Lane(void *obj) {
SynthLab::Lane *arg1 = (SynthLab::Lane *) obj;
delete arg1;
}
static int _proxy__wrap_new_Lane(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Lane);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Lane_attributes[] = {
    { "startPoint", _wrap_Lane_startPoint_get, _wrap_Lane_startPoint_set },
    { "endPoint", _wrap_Lane_endPoint_get, _wrap_Lane_endPoint_set },
    { "forwardDirection", _wrap_Lane_forwardDirection_get, _wrap_Lane_forwardDirection_set },
    { "laneStep", _wrap_Lane_laneStep_get, _wrap_Lane_laneStep_set },
    { "currentStep", _wrap_Lane_currentStep_get, _wrap_Lane_currentStep_set },
    { "nextStep", _wrap_Lane_nextStep_get, _wrap_Lane_nextStep_set },
    { "currentLEDStep", _wrap_Lane_currentLEDStep_get, _wrap_Lane_currentLEDStep_set },
    { "currentLEDStepDuration", _wrap_Lane_currentLEDStepDuration_get, _wrap_Lane_currentLEDStepDuration_set },
    {0,0,0}
};
static swig_lua_method swig_Lane_methods[]= {
    { "resetJumpTable", _wrap_Lane_resetJumpTable},
    { "shuffleJumpTable", _wrap_Lane_shuffleJumpTable},
    { "updateLaneLoopPoints", _wrap_Lane_updateLaneLoopPoints},
    { "initStepTiming", _wrap_Lane_initStepTiming},
    { "initCurrentStep", _wrap_Lane_initCurrentStep},
    { "initNextStep", _wrap_Lane_initNextStep},
    { "setCurrentStepFromNextStep", _wrap_Lane_setCurrentStepFromNextStep},
    { "loadNextStep", _wrap_Lane_loadNextStep},
    { "updateLEDMeterWithCurrentStep", _wrap_Lane_updateLEDMeterWithCurrentStep},
    { "updateLEDMeterWithNextStep", _wrap_Lane_updateLEDMeterWithNextStep},
    { "updateStepValues", _wrap_Lane_updateStepValues},
    { "setRandomizeSteps", _wrap_Lane_setRandomizeSteps},
    { "getCurrentStepIndex", _wrap_Lane_getCurrentStepIndex},
    { "getNextStepIndex", _wrap_Lane_getNextStepIndex},
    { "getCurrentStepValue", _wrap_Lane_getCurrentStepValue},
    { "getNextStepValue", _wrap_Lane_getNextStepValue},
    { "getJumpTableValue", _wrap_Lane_getJumpTableValue},
    {0,0}
};
static swig_lua_method swig_Lane_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Lane_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Lane_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Lane_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Lane_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Lane_Sf_SwigStatic = {
    "Lane",
    swig_Lane_Sf_SwigStatic_methods,
    swig_Lane_Sf_SwigStatic_attributes,
    swig_Lane_Sf_SwigStatic_constants,
    swig_Lane_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Lane_bases[] = {0};
static const char *swig_Lane_base_names[] = {0};
static swig_lua_class _wrap_class_Lane = { "Lane", "Lane", &SWIGTYPE_p_SynthLab__Lane,_proxy__wrap_new_Lane, swig_delete_Lane, swig_Lane_methods, swig_Lane_attributes, &swig_Lane_Sf_SwigStatic, swig_Lane_meta, swig_Lane_bases, swig_Lane_base_names };

static int _wrap_WaveSequencerStatusMeters_timingLaneMeter_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerStatusMeters *arg1 = (SynthLab::WaveSequencerStatusMeters *) 0 ;
  uint32_t *arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerStatusMeters::timingLaneMeter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerStatusMeters::timingLaneMeter",1,"SynthLab::WaveSequencerStatusMeters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerStatusMeters::timingLaneMeter",2,"uint32_t [SynthLab::MAX_SEQ_STEPS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerStatusMeters,0))){
    SWIG_fail_ptr("WaveSequencerStatusMeters_timingLaneMeter_set",1,SWIGTYPE_p_SynthLab__WaveSequencerStatusMeters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WaveSequencerStatusMeters_timingLaneMeter_set",2,SWIGTYPE_p_uint32_t);
  }
  
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->timingLaneMeter;
    for (ii = 0; ii < (size_t)SynthLab::MAX_SEQ_STEPS; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerStatusMeters_timingLaneMeter_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerStatusMeters *arg1 = (SynthLab::WaveSequencerStatusMeters *) 0 ;
  uint32_t *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerStatusMeters::timingLaneMeter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerStatusMeters::timingLaneMeter",1,"SynthLab::WaveSequencerStatusMeters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerStatusMeters,0))){
    SWIG_fail_ptr("WaveSequencerStatusMeters_timingLaneMeter_get",1,SWIGTYPE_p_SynthLab__WaveSequencerStatusMeters);
  }
  
  result = (uint32_t *)(uint32_t *) ((arg1)->timingLaneMeter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint32_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerStatusMeters_waveLaneMeter_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerStatusMeters *arg1 = (SynthLab::WaveSequencerStatusMeters *) 0 ;
  uint32_t *arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerStatusMeters::waveLaneMeter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerStatusMeters::waveLaneMeter",1,"SynthLab::WaveSequencerStatusMeters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerStatusMeters::waveLaneMeter",2,"uint32_t [SynthLab::MAX_SEQ_STEPS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerStatusMeters,0))){
    SWIG_fail_ptr("WaveSequencerStatusMeters_waveLaneMeter_set",1,SWIGTYPE_p_SynthLab__WaveSequencerStatusMeters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WaveSequencerStatusMeters_waveLaneMeter_set",2,SWIGTYPE_p_uint32_t);
  }
  
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->waveLaneMeter;
    for (ii = 0; ii < (size_t)SynthLab::MAX_SEQ_STEPS; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerStatusMeters_waveLaneMeter_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerStatusMeters *arg1 = (SynthLab::WaveSequencerStatusMeters *) 0 ;
  uint32_t *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerStatusMeters::waveLaneMeter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerStatusMeters::waveLaneMeter",1,"SynthLab::WaveSequencerStatusMeters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerStatusMeters,0))){
    SWIG_fail_ptr("WaveSequencerStatusMeters_waveLaneMeter_get",1,SWIGTYPE_p_SynthLab__WaveSequencerStatusMeters);
  }
  
  result = (uint32_t *)(uint32_t *) ((arg1)->waveLaneMeter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint32_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerStatusMeters_pitchLaneMeter_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerStatusMeters *arg1 = (SynthLab::WaveSequencerStatusMeters *) 0 ;
  uint32_t *arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerStatusMeters::pitchLaneMeter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerStatusMeters::pitchLaneMeter",1,"SynthLab::WaveSequencerStatusMeters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerStatusMeters::pitchLaneMeter",2,"uint32_t [SynthLab::MAX_SEQ_STEPS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerStatusMeters,0))){
    SWIG_fail_ptr("WaveSequencerStatusMeters_pitchLaneMeter_set",1,SWIGTYPE_p_SynthLab__WaveSequencerStatusMeters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WaveSequencerStatusMeters_pitchLaneMeter_set",2,SWIGTYPE_p_uint32_t);
  }
  
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->pitchLaneMeter;
    for (ii = 0; ii < (size_t)SynthLab::MAX_SEQ_STEPS; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerStatusMeters_pitchLaneMeter_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerStatusMeters *arg1 = (SynthLab::WaveSequencerStatusMeters *) 0 ;
  uint32_t *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerStatusMeters::pitchLaneMeter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerStatusMeters::pitchLaneMeter",1,"SynthLab::WaveSequencerStatusMeters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerStatusMeters,0))){
    SWIG_fail_ptr("WaveSequencerStatusMeters_pitchLaneMeter_get",1,SWIGTYPE_p_SynthLab__WaveSequencerStatusMeters);
  }
  
  result = (uint32_t *)(uint32_t *) ((arg1)->pitchLaneMeter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint32_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerStatusMeters_stepSeqLaneMeter_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerStatusMeters *arg1 = (SynthLab::WaveSequencerStatusMeters *) 0 ;
  uint32_t *arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerStatusMeters::stepSeqLaneMeter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerStatusMeters::stepSeqLaneMeter",1,"SynthLab::WaveSequencerStatusMeters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerStatusMeters::stepSeqLaneMeter",2,"uint32_t [SynthLab::MAX_SEQ_STEPS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerStatusMeters,0))){
    SWIG_fail_ptr("WaveSequencerStatusMeters_stepSeqLaneMeter_set",1,SWIGTYPE_p_SynthLab__WaveSequencerStatusMeters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WaveSequencerStatusMeters_stepSeqLaneMeter_set",2,SWIGTYPE_p_uint32_t);
  }
  
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->stepSeqLaneMeter;
    for (ii = 0; ii < (size_t)SynthLab::MAX_SEQ_STEPS; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerStatusMeters_stepSeqLaneMeter_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerStatusMeters *arg1 = (SynthLab::WaveSequencerStatusMeters *) 0 ;
  uint32_t *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerStatusMeters::stepSeqLaneMeter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerStatusMeters::stepSeqLaneMeter",1,"SynthLab::WaveSequencerStatusMeters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerStatusMeters,0))){
    SWIG_fail_ptr("WaveSequencerStatusMeters_stepSeqLaneMeter_get",1,SWIGTYPE_p_SynthLab__WaveSequencerStatusMeters);
  }
  
  result = (uint32_t *)(uint32_t *) ((arg1)->stepSeqLaneMeter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint32_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WaveSequencerStatusMeters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerStatusMeters *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerStatusMeters::WaveSequencerStatusMeters",0,0)
  result = (SynthLab::WaveSequencerStatusMeters *)new SynthLab::WaveSequencerStatusMeters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__WaveSequencerStatusMeters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WaveSequencerStatusMeters(void *obj) {
SynthLab::WaveSequencerStatusMeters *arg1 = (SynthLab::WaveSequencerStatusMeters *) obj;
delete arg1;
}
static int _proxy__wrap_new_WaveSequencerStatusMeters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WaveSequencerStatusMeters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WaveSequencerStatusMeters_attributes[] = {
    { "timingLaneMeter", _wrap_WaveSequencerStatusMeters_timingLaneMeter_get, _wrap_WaveSequencerStatusMeters_timingLaneMeter_set },
    { "waveLaneMeter", _wrap_WaveSequencerStatusMeters_waveLaneMeter_get, _wrap_WaveSequencerStatusMeters_waveLaneMeter_set },
    { "pitchLaneMeter", _wrap_WaveSequencerStatusMeters_pitchLaneMeter_get, _wrap_WaveSequencerStatusMeters_pitchLaneMeter_set },
    { "stepSeqLaneMeter", _wrap_WaveSequencerStatusMeters_stepSeqLaneMeter_get, _wrap_WaveSequencerStatusMeters_stepSeqLaneMeter_set },
    {0,0,0}
};
static swig_lua_method swig_WaveSequencerStatusMeters_methods[]= {
    {0,0}
};
static swig_lua_method swig_WaveSequencerStatusMeters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WaveSequencerStatusMeters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WaveSequencerStatusMeters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WaveSequencerStatusMeters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WaveSequencerStatusMeters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WaveSequencerStatusMeters_Sf_SwigStatic = {
    "WaveSequencerStatusMeters",
    swig_WaveSequencerStatusMeters_Sf_SwigStatic_methods,
    swig_WaveSequencerStatusMeters_Sf_SwigStatic_attributes,
    swig_WaveSequencerStatusMeters_Sf_SwigStatic_constants,
    swig_WaveSequencerStatusMeters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WaveSequencerStatusMeters_bases[] = {0};
static const char *swig_WaveSequencerStatusMeters_base_names[] = {0};
static swig_lua_class _wrap_class_WaveSequencerStatusMeters = { "WaveSequencerStatusMeters", "WaveSequencerStatusMeters", &SWIGTYPE_p_SynthLab__WaveSequencerStatusMeters,_proxy__wrap_new_WaveSequencerStatusMeters, swig_delete_WaveSequencerStatusMeters, swig_WaveSequencerStatusMeters_methods, swig_WaveSequencerStatusMeters_attributes, &swig_WaveSequencerStatusMeters_Sf_SwigStatic, swig_WaveSequencerStatusMeters_meta, swig_WaveSequencerStatusMeters_bases, swig_WaveSequencerStatusMeters_base_names };

static int _wrap_new_WaveSequencerParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::WaveSequencerParameters",0,0)
  result = (SynthLab::WaveSequencerParameters *)new SynthLab::WaveSequencerParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__WaveSequencerParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_statusMeters_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  SynthLab::WaveSequencerStatusMeters *arg2 = (SynthLab::WaveSequencerStatusMeters *) 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::statusMeters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::statusMeters",1,"SynthLab::WaveSequencerParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::statusMeters",2,"SynthLab::WaveSequencerStatusMeters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_statusMeters_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__WaveSequencerStatusMeters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_statusMeters_set",2,SWIGTYPE_p_SynthLab__WaveSequencerStatusMeters);
  }
  
  if (arg1) (arg1)->statusMeters = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_statusMeters_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  SynthLab::WaveSequencerStatusMeters *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::statusMeters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::statusMeters",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_statusMeters_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result = (SynthLab::WaveSequencerStatusMeters *)& ((arg1)->statusMeters);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__WaveSequencerStatusMeters,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_haltSequencer_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::haltSequencer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::haltSequencer",1,"SynthLab::WaveSequencerParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::haltSequencer",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_haltSequencer_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->haltSequencer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_haltSequencer_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::haltSequencer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::haltSequencer",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_haltSequencer_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result = (bool) ((arg1)->haltSequencer);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_BPM_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::BPM",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::BPM",1,"SynthLab::WaveSequencerParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::BPM",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_BPM_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->BPM = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_BPM_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::BPM",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::BPM",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_BPM_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result = (double) ((arg1)->BPM);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_timeStretch_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::timeStretch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::timeStretch",1,"SynthLab::WaveSequencerParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::timeStretch",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_timeStretch_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->timeStretch = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_timeStretch_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::timeStretch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::timeStretch",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_timeStretch_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result = (double) ((arg1)->timeStretch);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_interpolateStepSeqMod_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::interpolateStepSeqMod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::interpolateStepSeqMod",1,"SynthLab::WaveSequencerParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::interpolateStepSeqMod",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_interpolateStepSeqMod_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->interpolateStepSeqMod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_interpolateStepSeqMod_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::interpolateStepSeqMod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::interpolateStepSeqMod",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_interpolateStepSeqMod_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result = (bool) ((arg1)->interpolateStepSeqMod);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_randomizeStepOrder_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::randomizeStepOrder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::randomizeStepOrder",1,"SynthLab::WaveSequencerParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::randomizeStepOrder",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_randomizeStepOrder_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->randomizeStepOrder = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_randomizeStepOrder_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::randomizeStepOrder",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::randomizeStepOrder",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_randomizeStepOrder_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result = (bool) ((arg1)->randomizeStepOrder);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_randomizePitchOrder_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::randomizePitchOrder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::randomizePitchOrder",1,"SynthLab::WaveSequencerParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::randomizePitchOrder",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_randomizePitchOrder_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->randomizePitchOrder = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_randomizePitchOrder_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::randomizePitchOrder",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::randomizePitchOrder",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_randomizePitchOrder_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result = (bool) ((arg1)->randomizePitchOrder);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_randomizeWaveOrder_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::randomizeWaveOrder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::randomizeWaveOrder",1,"SynthLab::WaveSequencerParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::randomizeWaveOrder",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_randomizeWaveOrder_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->randomizeWaveOrder = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_randomizeWaveOrder_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::randomizeWaveOrder",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::randomizeWaveOrder",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_randomizeWaveOrder_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result = (bool) ((arg1)->randomizeWaveOrder);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_randomizeSSModOrder_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::randomizeSSModOrder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::randomizeSSModOrder",1,"SynthLab::WaveSequencerParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::randomizeSSModOrder",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_randomizeSSModOrder_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->randomizeSSModOrder = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_randomizeSSModOrder_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::randomizeSSModOrder",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::randomizeSSModOrder",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_randomizeSSModOrder_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result = (bool) ((arg1)->randomizeSSModOrder);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_timingLoopStart_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::timingLoopStart",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::timingLoopStart",1,"SynthLab::WaveSequencerParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::timingLoopStart",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_timingLoopStart_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WaveSequencerParameters_timingLoopStart_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->timingLoopStart = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_timingLoopStart_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::timingLoopStart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::timingLoopStart",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_timingLoopStart_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result =  ((arg1)->timingLoopStart);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_timingLoopEnd_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::timingLoopEnd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::timingLoopEnd",1,"SynthLab::WaveSequencerParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::timingLoopEnd",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_timingLoopEnd_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WaveSequencerParameters_timingLoopEnd_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->timingLoopEnd = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_timingLoopEnd_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::timingLoopEnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::timingLoopEnd",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_timingLoopEnd_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result =  ((arg1)->timingLoopEnd);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_timingLoopDirIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::timingLoopDirIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::timingLoopDirIndex",1,"SynthLab::WaveSequencerParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::timingLoopDirIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_timingLoopDirIndex_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WaveSequencerParameters_timingLoopDirIndex_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->timingLoopDirIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_timingLoopDirIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::timingLoopDirIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::timingLoopDirIndex",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_timingLoopDirIndex_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result =  ((arg1)->timingLoopDirIndex);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_stepDurationMilliSec_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::stepDurationMilliSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::stepDurationMilliSec",1,"SynthLab::WaveSequencerParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::stepDurationMilliSec",2,"double [SynthLab::MAX_SEQ_STEPS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_stepDurationMilliSec_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("WaveSequencerParameters_stepDurationMilliSec_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->stepDurationMilliSec;
    for (ii = 0; ii < (size_t)SynthLab::MAX_SEQ_STEPS; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_stepDurationMilliSec_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::stepDurationMilliSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::stepDurationMilliSec",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_stepDurationMilliSec_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result = (double *)(double *) ((arg1)->stepDurationMilliSec);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_stepDurationNoteIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  uint32_t *arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::stepDurationNoteIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::stepDurationNoteIndex",1,"SynthLab::WaveSequencerParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::stepDurationNoteIndex",2,"uint32_t [SynthLab::MAX_SEQ_STEPS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_stepDurationNoteIndex_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WaveSequencerParameters_stepDurationNoteIndex_set",2,SWIGTYPE_p_uint32_t);
  }
  
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->stepDurationNoteIndex;
    for (ii = 0; ii < (size_t)SynthLab::MAX_SEQ_STEPS; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_stepDurationNoteIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  uint32_t *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::stepDurationNoteIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::stepDurationNoteIndex",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_stepDurationNoteIndex_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result = (uint32_t *)(uint32_t *) ((arg1)->stepDurationNoteIndex);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint32_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_stepType_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  uint32_t *arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::stepType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::stepType",1,"SynthLab::WaveSequencerParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::stepType",2,"uint32_t [SynthLab::MAX_SEQ_STEPS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_stepType_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WaveSequencerParameters_stepType_set",2,SWIGTYPE_p_uint32_t);
  }
  
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->stepType;
    for (ii = 0; ii < (size_t)SynthLab::MAX_SEQ_STEPS; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_stepType_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  uint32_t *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::stepType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::stepType",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_stepType_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result = (uint32_t *)(uint32_t *) ((arg1)->stepType);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint32_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_xfadeDurationMilliSec_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::xfadeDurationMilliSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::xfadeDurationMilliSec",1,"SynthLab::WaveSequencerParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::xfadeDurationMilliSec",2,"double [SynthLab::MAX_SEQ_STEPS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_xfadeDurationMilliSec_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("WaveSequencerParameters_xfadeDurationMilliSec_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->xfadeDurationMilliSec;
    for (ii = 0; ii < (size_t)SynthLab::MAX_SEQ_STEPS; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_xfadeDurationMilliSec_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::xfadeDurationMilliSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::xfadeDurationMilliSec",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_xfadeDurationMilliSec_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result = (double *)(double *) ((arg1)->xfadeDurationMilliSec);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_xfadeDurationNoteIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  uint32_t *arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::xfadeDurationNoteIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::xfadeDurationNoteIndex",1,"SynthLab::WaveSequencerParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::xfadeDurationNoteIndex",2,"uint32_t [SynthLab::MAX_SEQ_STEPS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_xfadeDurationNoteIndex_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WaveSequencerParameters_xfadeDurationNoteIndex_set",2,SWIGTYPE_p_uint32_t);
  }
  
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->xfadeDurationNoteIndex;
    for (ii = 0; ii < (size_t)SynthLab::MAX_SEQ_STEPS; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_xfadeDurationNoteIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  uint32_t *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::xfadeDurationNoteIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::xfadeDurationNoteIndex",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_xfadeDurationNoteIndex_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result = (uint32_t *)(uint32_t *) ((arg1)->xfadeDurationNoteIndex);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint32_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_modLoopStart_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  uint32_t *arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::modLoopStart",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::modLoopStart",1,"SynthLab::WaveSequencerParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::modLoopStart",2,"uint32_t [SynthLab::NUM_MOD_LANES]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_modLoopStart_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WaveSequencerParameters_modLoopStart_set",2,SWIGTYPE_p_uint32_t);
  }
  
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->modLoopStart;
    for (ii = 0; ii < (size_t)SynthLab::NUM_MOD_LANES; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_modLoopStart_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  uint32_t *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::modLoopStart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::modLoopStart",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_modLoopStart_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result = (uint32_t *)(uint32_t *) ((arg1)->modLoopStart);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint32_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_modLoopEnd_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  uint32_t *arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::modLoopEnd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::modLoopEnd",1,"SynthLab::WaveSequencerParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::modLoopEnd",2,"uint32_t [SynthLab::NUM_MOD_LANES]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_modLoopEnd_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WaveSequencerParameters_modLoopEnd_set",2,SWIGTYPE_p_uint32_t);
  }
  
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->modLoopEnd;
    for (ii = 0; ii < (size_t)SynthLab::NUM_MOD_LANES; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_modLoopEnd_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  uint32_t *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::modLoopEnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::modLoopEnd",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_modLoopEnd_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result = (uint32_t *)(uint32_t *) ((arg1)->modLoopEnd);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint32_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_modLoopDirIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  uint32_t *arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::modLoopDirIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::modLoopDirIndex",1,"SynthLab::WaveSequencerParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::modLoopDirIndex",2,"uint32_t [SynthLab::NUM_MOD_LANES]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_modLoopDirIndex_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WaveSequencerParameters_modLoopDirIndex_set",2,SWIGTYPE_p_uint32_t);
  }
  
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->modLoopDirIndex;
    for (ii = 0; ii < (size_t)SynthLab::NUM_MOD_LANES; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_modLoopDirIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  uint32_t *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::modLoopDirIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::modLoopDirIndex",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_modLoopDirIndex_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result = (uint32_t *)(uint32_t *) ((arg1)->modLoopDirIndex);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint32_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_waveLaneAmp_dB_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::waveLaneAmp_dB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::waveLaneAmp_dB",1,"SynthLab::WaveSequencerParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::waveLaneAmp_dB",2,"double [SynthLab::MAX_SEQ_STEPS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_waveLaneAmp_dB_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("WaveSequencerParameters_waveLaneAmp_dB_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->waveLaneAmp_dB;
    for (ii = 0; ii < (size_t)SynthLab::MAX_SEQ_STEPS; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_waveLaneAmp_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::waveLaneAmp_dB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::waveLaneAmp_dB",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_waveLaneAmp_dB_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result = (double *)(double *) ((arg1)->waveLaneAmp_dB);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_waveLaneValue_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::waveLaneValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::waveLaneValue",1,"SynthLab::WaveSequencerParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::waveLaneValue",2,"double [SynthLab::MAX_SEQ_STEPS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_waveLaneValue_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("WaveSequencerParameters_waveLaneValue_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->waveLaneValue;
    for (ii = 0; ii < (size_t)SynthLab::MAX_SEQ_STEPS; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_waveLaneValue_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::waveLaneValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::waveLaneValue",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_waveLaneValue_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result = (double *)(double *) ((arg1)->waveLaneValue);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_waveLaneProbability_pct_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::waveLaneProbability_pct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::waveLaneProbability_pct",1,"SynthLab::WaveSequencerParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::waveLaneProbability_pct",2,"double [SynthLab::MAX_SEQ_STEPS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_waveLaneProbability_pct_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("WaveSequencerParameters_waveLaneProbability_pct_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->waveLaneProbability_pct;
    for (ii = 0; ii < (size_t)SynthLab::MAX_SEQ_STEPS; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_waveLaneProbability_pct_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::waveLaneProbability_pct",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::waveLaneProbability_pct",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_waveLaneProbability_pct_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result = (double *)(double *) ((arg1)->waveLaneProbability_pct);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_pitchLaneValue_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::pitchLaneValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::pitchLaneValue",1,"SynthLab::WaveSequencerParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::pitchLaneValue",2,"double [SynthLab::MAX_SEQ_STEPS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_pitchLaneValue_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("WaveSequencerParameters_pitchLaneValue_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->pitchLaneValue;
    for (ii = 0; ii < (size_t)SynthLab::MAX_SEQ_STEPS; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_pitchLaneValue_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::pitchLaneValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::pitchLaneValue",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_pitchLaneValue_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result = (double *)(double *) ((arg1)->pitchLaneValue);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_pitchLaneProbability_pct_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::pitchLaneProbability_pct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::pitchLaneProbability_pct",1,"SynthLab::WaveSequencerParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::pitchLaneProbability_pct",2,"double [SynthLab::MAX_SEQ_STEPS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_pitchLaneProbability_pct_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("WaveSequencerParameters_pitchLaneProbability_pct_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->pitchLaneProbability_pct;
    for (ii = 0; ii < (size_t)SynthLab::MAX_SEQ_STEPS; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_pitchLaneProbability_pct_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::pitchLaneProbability_pct",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::pitchLaneProbability_pct",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_pitchLaneProbability_pct_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result = (double *)(double *) ((arg1)->pitchLaneProbability_pct);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_stepSeqValue_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::stepSeqValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::stepSeqValue",1,"SynthLab::WaveSequencerParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::stepSeqValue",2,"double [SynthLab::MAX_SEQ_STEPS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_stepSeqValue_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("WaveSequencerParameters_stepSeqValue_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->stepSeqValue;
    for (ii = 0; ii < (size_t)SynthLab::MAX_SEQ_STEPS; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_stepSeqValue_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::stepSeqValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::stepSeqValue",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_stepSeqValue_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result = (double *)(double *) ((arg1)->stepSeqValue);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_stepSeqProbability_pct_set(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::stepSeqProbability_pct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::stepSeqProbability_pct",1,"SynthLab::WaveSequencerParameters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::stepSeqProbability_pct",2,"double [SynthLab::MAX_SEQ_STEPS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_stepSeqProbability_pct_set",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("WaveSequencerParameters_stepSeqProbability_pct_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->stepSeqProbability_pct;
    for (ii = 0; ii < (size_t)SynthLab::MAX_SEQ_STEPS; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencerParameters_stepSeqProbability_pct_get(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencerParameters::stepSeqProbability_pct",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencerParameters::stepSeqProbability_pct",1,"SynthLab::WaveSequencerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencerParameters,0))){
    SWIG_fail_ptr("WaveSequencerParameters_stepSeqProbability_pct_get",1,SWIGTYPE_p_SynthLab__WaveSequencerParameters);
  }
  
  result = (double *)(double *) ((arg1)->stepSeqProbability_pct);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WaveSequencerParameters(void *obj) {
SynthLab::WaveSequencerParameters *arg1 = (SynthLab::WaveSequencerParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_WaveSequencerParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WaveSequencerParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WaveSequencerParameters_attributes[] = {
    { "statusMeters", _wrap_WaveSequencerParameters_statusMeters_get, _wrap_WaveSequencerParameters_statusMeters_set },
    { "haltSequencer", _wrap_WaveSequencerParameters_haltSequencer_get, _wrap_WaveSequencerParameters_haltSequencer_set },
    { "BPM", _wrap_WaveSequencerParameters_BPM_get, _wrap_WaveSequencerParameters_BPM_set },
    { "timeStretch", _wrap_WaveSequencerParameters_timeStretch_get, _wrap_WaveSequencerParameters_timeStretch_set },
    { "interpolateStepSeqMod", _wrap_WaveSequencerParameters_interpolateStepSeqMod_get, _wrap_WaveSequencerParameters_interpolateStepSeqMod_set },
    { "randomizeStepOrder", _wrap_WaveSequencerParameters_randomizeStepOrder_get, _wrap_WaveSequencerParameters_randomizeStepOrder_set },
    { "randomizePitchOrder", _wrap_WaveSequencerParameters_randomizePitchOrder_get, _wrap_WaveSequencerParameters_randomizePitchOrder_set },
    { "randomizeWaveOrder", _wrap_WaveSequencerParameters_randomizeWaveOrder_get, _wrap_WaveSequencerParameters_randomizeWaveOrder_set },
    { "randomizeSSModOrder", _wrap_WaveSequencerParameters_randomizeSSModOrder_get, _wrap_WaveSequencerParameters_randomizeSSModOrder_set },
    { "timingLoopStart", _wrap_WaveSequencerParameters_timingLoopStart_get, _wrap_WaveSequencerParameters_timingLoopStart_set },
    { "timingLoopEnd", _wrap_WaveSequencerParameters_timingLoopEnd_get, _wrap_WaveSequencerParameters_timingLoopEnd_set },
    { "timingLoopDirIndex", _wrap_WaveSequencerParameters_timingLoopDirIndex_get, _wrap_WaveSequencerParameters_timingLoopDirIndex_set },
    { "stepDurationMilliSec", _wrap_WaveSequencerParameters_stepDurationMilliSec_get, _wrap_WaveSequencerParameters_stepDurationMilliSec_set },
    { "stepDurationNoteIndex", _wrap_WaveSequencerParameters_stepDurationNoteIndex_get, _wrap_WaveSequencerParameters_stepDurationNoteIndex_set },
    { "stepType", _wrap_WaveSequencerParameters_stepType_get, _wrap_WaveSequencerParameters_stepType_set },
    { "xfadeDurationMilliSec", _wrap_WaveSequencerParameters_xfadeDurationMilliSec_get, _wrap_WaveSequencerParameters_xfadeDurationMilliSec_set },
    { "xfadeDurationNoteIndex", _wrap_WaveSequencerParameters_xfadeDurationNoteIndex_get, _wrap_WaveSequencerParameters_xfadeDurationNoteIndex_set },
    { "modLoopStart", _wrap_WaveSequencerParameters_modLoopStart_get, _wrap_WaveSequencerParameters_modLoopStart_set },
    { "modLoopEnd", _wrap_WaveSequencerParameters_modLoopEnd_get, _wrap_WaveSequencerParameters_modLoopEnd_set },
    { "modLoopDirIndex", _wrap_WaveSequencerParameters_modLoopDirIndex_get, _wrap_WaveSequencerParameters_modLoopDirIndex_set },
    { "waveLaneAmp_dB", _wrap_WaveSequencerParameters_waveLaneAmp_dB_get, _wrap_WaveSequencerParameters_waveLaneAmp_dB_set },
    { "waveLaneValue", _wrap_WaveSequencerParameters_waveLaneValue_get, _wrap_WaveSequencerParameters_waveLaneValue_set },
    { "waveLaneProbability_pct", _wrap_WaveSequencerParameters_waveLaneProbability_pct_get, _wrap_WaveSequencerParameters_waveLaneProbability_pct_set },
    { "pitchLaneValue", _wrap_WaveSequencerParameters_pitchLaneValue_get, _wrap_WaveSequencerParameters_pitchLaneValue_set },
    { "pitchLaneProbability_pct", _wrap_WaveSequencerParameters_pitchLaneProbability_pct_get, _wrap_WaveSequencerParameters_pitchLaneProbability_pct_set },
    { "stepSeqValue", _wrap_WaveSequencerParameters_stepSeqValue_get, _wrap_WaveSequencerParameters_stepSeqValue_set },
    { "stepSeqProbability_pct", _wrap_WaveSequencerParameters_stepSeqProbability_pct_get, _wrap_WaveSequencerParameters_stepSeqProbability_pct_set },
    {0,0,0}
};
static swig_lua_method swig_WaveSequencerParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_WaveSequencerParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WaveSequencerParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WaveSequencerParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WaveSequencerParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WaveSequencerParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WaveSequencerParameters_Sf_SwigStatic = {
    "WaveSequencerParameters",
    swig_WaveSequencerParameters_Sf_SwigStatic_methods,
    swig_WaveSequencerParameters_Sf_SwigStatic_attributes,
    swig_WaveSequencerParameters_Sf_SwigStatic_constants,
    swig_WaveSequencerParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WaveSequencerParameters_bases[] = {0};
static const char *swig_WaveSequencerParameters_base_names[] = {0};
static swig_lua_class _wrap_class_WaveSequencerParameters = { "WaveSequencerParameters", "WaveSequencerParameters", &SWIGTYPE_p_SynthLab__WaveSequencerParameters,_proxy__wrap_new_WaveSequencerParameters, swig_delete_WaveSequencerParameters, swig_WaveSequencerParameters_methods, swig_WaveSequencerParameters_attributes, &swig_WaveSequencerParameters_Sf_SwigStatic, swig_WaveSequencerParameters_meta, swig_WaveSequencerParameters_bases, swig_WaveSequencerParameters_base_names };

static int _wrap_WaveSequencer_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencer *arg1 = (SynthLab::WaveSequencer *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WaveSequencer::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencer::reset",1,"SynthLab::WaveSequencer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::WaveSequencer::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencer,0))){
    SWIG_fail_ptr("WaveSequencer_reset",1,SWIGTYPE_p_SynthLab__WaveSequencer);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencer_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencer *arg1 = (SynthLab::WaveSequencer *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WaveSequencer::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencer::update",1,"SynthLab::WaveSequencer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencer,0))){
    SWIG_fail_ptr("WaveSequencer_update",1,SWIGTYPE_p_SynthLab__WaveSequencer);
  }
  
  result = (bool)(arg1)->update();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencer_render__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencer *arg1 = (SynthLab::WaveSequencer *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WaveSequencer::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencer::render",1,"SynthLab::WaveSequencer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WaveSequencer::render",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencer,0))){
    SWIG_fail_ptr("WaveSequencer_render",1,SWIGTYPE_p_SynthLab__WaveSequencer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WaveSequencer_render",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->render(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencer_render__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencer *arg1 = (SynthLab::WaveSequencer *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WaveSequencer::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencer::render",1,"SynthLab::WaveSequencer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencer,0))){
    SWIG_fail_ptr("WaveSequencer_render",1,SWIGTYPE_p_SynthLab__WaveSequencer);
  }
  
  result = (bool)(arg1)->render();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencer_render(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__WaveSequencer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_WaveSequencer_render__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__WaveSequencer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WaveSequencer_render__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WaveSequencer_render'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::WaveSequencer::render(uint32_t)\n"
    "    SynthLab::WaveSequencer::render()\n");
  lua_error(L);return 0;
}


static int _wrap_WaveSequencer_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencer *arg1 = (SynthLab::WaveSequencer *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WaveSequencer::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencer::doNoteOn",1,"SynthLab::WaveSequencer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WaveSequencer::doNoteOn",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencer,0))){
    SWIG_fail_ptr("WaveSequencer_doNoteOn",1,SWIGTYPE_p_SynthLab__WaveSequencer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("WaveSequencer_doNoteOn",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencer_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencer *arg1 = (SynthLab::WaveSequencer *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WaveSequencer::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencer::doNoteOff",1,"SynthLab::WaveSequencer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WaveSequencer::doNoteOff",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencer,0))){
    SWIG_fail_ptr("WaveSequencer_doNoteOff",1,SWIGTYPE_p_SynthLab__WaveSequencer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("WaveSequencer_doNoteOff",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencer_clearStatusArray(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencer *arg1 = (SynthLab::WaveSequencer *) 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencer::clearStatusArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencer::clearStatusArray",1,"SynthLab::WaveSequencer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencer,0))){
    SWIG_fail_ptr("WaveSequencer_clearStatusArray",1,SWIGTYPE_p_SynthLab__WaveSequencer);
  }
  
  (arg1)->clearStatusArray();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencer_setCurrentTimingXFadeSamples(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencer *arg1 = (SynthLab::WaveSequencer *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WaveSequencer::setCurrentTimingXFadeSamples",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencer::setCurrentTimingXFadeSamples",1,"SynthLab::WaveSequencer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencer,0))){
    SWIG_fail_ptr("WaveSequencer_setCurrentTimingXFadeSamples",1,SWIGTYPE_p_SynthLab__WaveSequencer);
  }
  
  result = (arg1)->setCurrentTimingXFadeSamples();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencer_setXFadeHoldParams(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencer *arg1 = (SynthLab::WaveSequencer *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencer::setXFadeHoldParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencer::setXFadeHoldParams",1,"SynthLab::WaveSequencer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WaveSequencer::setXFadeHoldParams",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencer,0))){
    SWIG_fail_ptr("WaveSequencer_setXFadeHoldParams",1,SWIGTYPE_p_SynthLab__WaveSequencer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WaveSequencer_setXFadeHoldParams",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->setXFadeHoldParams(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSequencer_updateLaneLoopPoints(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSequencer *arg1 = (SynthLab::WaveSequencer *) 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSequencer::updateLaneLoopPoints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSequencer::updateLaneLoopPoints",1,"SynthLab::WaveSequencer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSequencer,0))){
    SWIG_fail_ptr("WaveSequencer_updateLaneLoopPoints",1,SWIGTYPE_p_SynthLab__WaveSequencer);
  }
  
  (arg1)->updateLaneLoopPoints();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WaveSequencer(void *obj) {
SynthLab::WaveSequencer *arg1 = (SynthLab::WaveSequencer *) obj;
delete arg1;
}
static swig_lua_attribute swig_WaveSequencer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WaveSequencer_methods[]= {
    { "reset", _wrap_WaveSequencer_reset},
    { "update", _wrap_WaveSequencer_update},
    { "render", _wrap_WaveSequencer_render},
    { "doNoteOn", _wrap_WaveSequencer_doNoteOn},
    { "doNoteOff", _wrap_WaveSequencer_doNoteOff},
    { "clearStatusArray", _wrap_WaveSequencer_clearStatusArray},
    { "setCurrentTimingXFadeSamples", _wrap_WaveSequencer_setCurrentTimingXFadeSamples},
    { "setXFadeHoldParams", _wrap_WaveSequencer_setXFadeHoldParams},
    { "updateLaneLoopPoints", _wrap_WaveSequencer_updateLaneLoopPoints},
    {0,0}
};
static swig_lua_method swig_WaveSequencer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WaveSequencer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WaveSequencer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WaveSequencer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WaveSequencer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WaveSequencer_Sf_SwigStatic = {
    "WaveSequencer",
    swig_WaveSequencer_Sf_SwigStatic_methods,
    swig_WaveSequencer_Sf_SwigStatic_attributes,
    swig_WaveSequencer_Sf_SwigStatic_constants,
    swig_WaveSequencer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WaveSequencer_bases[] = {0,0};
static const char *swig_WaveSequencer_base_names[] = {"SynthLab::SynthModule *",0};
static swig_lua_class _wrap_class_WaveSequencer = { "WaveSequencer", "WaveSequencer", &SWIGTYPE_p_SynthLab__WaveSequencer,0, swig_delete_WaveSequencer, swig_WaveSequencer_methods, swig_WaveSequencer_attributes, &swig_WaveSequencer_Sf_SwigStatic, swig_WaveSequencer_meta, swig_WaveSequencer_bases, swig_WaveSequencer_base_names };

static int _wrap_new_SFXWTCore(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SFXWTCore *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SFXWTCore::SFXWTCore",0,0)
  result = (SynthLab::SFXWTCore *)new SynthLab::SFXWTCore();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__SFXWTCore,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SFXWTCore_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SFXWTCore *arg1 = (SynthLab::SFXWTCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SFXWTCore::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SFXWTCore::reset",1,"SynthLab::SFXWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SFXWTCore::reset",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SFXWTCore,0))){
    SWIG_fail_ptr("SFXWTCore_reset",1,SWIGTYPE_p_SynthLab__SFXWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("SFXWTCore_reset",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->reset(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SFXWTCore_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SFXWTCore *arg1 = (SynthLab::SFXWTCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SFXWTCore::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SFXWTCore::update",1,"SynthLab::SFXWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SFXWTCore::update",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SFXWTCore,0))){
    SWIG_fail_ptr("SFXWTCore_update",1,SWIGTYPE_p_SynthLab__SFXWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("SFXWTCore_update",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->update(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SFXWTCore_render(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SFXWTCore *arg1 = (SynthLab::SFXWTCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SFXWTCore::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SFXWTCore::render",1,"SynthLab::SFXWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SFXWTCore::render",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SFXWTCore,0))){
    SWIG_fail_ptr("SFXWTCore_render",1,SWIGTYPE_p_SynthLab__SFXWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("SFXWTCore_render",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->render(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SFXWTCore_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SFXWTCore *arg1 = (SynthLab::SFXWTCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SFXWTCore::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SFXWTCore::doNoteOn",1,"SynthLab::SFXWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SFXWTCore::doNoteOn",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SFXWTCore,0))){
    SWIG_fail_ptr("SFXWTCore_doNoteOn",1,SWIGTYPE_p_SynthLab__SFXWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("SFXWTCore_doNoteOn",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SFXWTCore_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SFXWTCore *arg1 = (SynthLab::SFXWTCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::SFXWTCore::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SFXWTCore::doNoteOff",1,"SynthLab::SFXWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SFXWTCore::doNoteOff",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SFXWTCore,0))){
    SWIG_fail_ptr("SFXWTCore_doNoteOff",1,SWIGTYPE_p_SynthLab__SFXWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("SFXWTCore_doNoteOff",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SFXWTCore_renderSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SFXWTCore *arg1 = (SynthLab::SFXWTCore *) 0 ;
  SynthLab::SynthClock *arg2 = 0 ;
  bool arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::SFXWTCore::renderSample",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SFXWTCore::renderSample",1,"SynthLab::SFXWTCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SFXWTCore::renderSample",2,"SynthLab::SynthClock &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("SynthLab::SFXWTCore::renderSample",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SFXWTCore,0))){
    SWIG_fail_ptr("SFXWTCore_renderSample",1,SWIGTYPE_p_SynthLab__SFXWTCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("SFXWTCore_renderSample",2,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (double)(arg1)->renderSample(*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SFXWTCore(void *obj) {
SynthLab::SFXWTCore *arg1 = (SynthLab::SFXWTCore *) obj;
delete arg1;
}
static int _proxy__wrap_new_SFXWTCore(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SFXWTCore);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SFXWTCore_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SFXWTCore_methods[]= {
    { "reset", _wrap_SFXWTCore_reset},
    { "update", _wrap_SFXWTCore_update},
    { "render", _wrap_SFXWTCore_render},
    { "doNoteOn", _wrap_SFXWTCore_doNoteOn},
    { "doNoteOff", _wrap_SFXWTCore_doNoteOff},
    { "renderSample", _wrap_SFXWTCore_renderSample},
    {0,0}
};
static swig_lua_method swig_SFXWTCore_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SFXWTCore_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SFXWTCore_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SFXWTCore_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SFXWTCore_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SFXWTCore_Sf_SwigStatic = {
    "SFXWTCore",
    swig_SFXWTCore_Sf_SwigStatic_methods,
    swig_SFXWTCore_Sf_SwigStatic_attributes,
    swig_SFXWTCore_Sf_SwigStatic_constants,
    swig_SFXWTCore_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SFXWTCore_bases[] = {0,0};
static const char *swig_SFXWTCore_base_names[] = {"SynthLab::ModuleCore *",0};
static swig_lua_class _wrap_class_SFXWTCore = { "SFXWTCore", "SFXWTCore", &SWIGTYPE_p_SynthLab__SFXWTCore,_proxy__wrap_new_SFXWTCore, swig_delete_SFXWTCore, swig_SFXWTCore_methods, swig_SFXWTCore_attributes, &swig_SFXWTCore_Sf_SwigStatic, swig_SFXWTCore_meta, swig_SFXWTCore_bases, swig_SFXWTCore_base_names };

static int _wrap_new_SineTableSource(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SineTableSource *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SineTableSource::SineTableSource",0,0)
  result = (SynthLab::SineTableSource *)new SynthLab::SineTableSource();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__SineTableSource,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineTableSource_getWaveformName(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SineTableSource *arg1 = (SynthLab::SineTableSource *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("SynthLab::SineTableSource::getWaveformName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SineTableSource::getWaveformName",1,"SynthLab::SineTableSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SineTableSource,0))){
    SWIG_fail_ptr("SineTableSource_getWaveformName",1,SWIGTYPE_p_SynthLab__SineTableSource);
  }
  
  result = (char *)(arg1)->getWaveformName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineTableSource_selectTable(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SineTableSource *arg1 = (SynthLab::SineTableSource *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::SineTableSource::selectTable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SineTableSource::selectTable",1,"SynthLab::SineTableSource *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::SineTableSource::selectTable",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SineTableSource,0))){
    SWIG_fail_ptr("SineTableSource_selectTable",1,SWIGTYPE_p_SynthLab__SineTableSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("SineTableSource_selectTable",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->selectTable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineTableSource_readWaveTable(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SineTableSource *arg1 = (SynthLab::SineTableSource *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::SineTableSource::readWaveTable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SineTableSource::readWaveTable",1,"SynthLab::SineTableSource *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::SineTableSource::readWaveTable",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SineTableSource,0))){
    SWIG_fail_ptr("SineTableSource_readWaveTable",1,SWIGTYPE_p_SynthLab__SineTableSource);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->readWaveTable(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineTableSource_getWaveTableLength(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::SineTableSource *arg1 = (SynthLab::SineTableSource *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::SineTableSource::getWaveTableLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::SineTableSource::getWaveTableLength",1,"SynthLab::SineTableSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__SineTableSource,0))){
    SWIG_fail_ptr("SineTableSource_getWaveTableLength",1,SWIGTYPE_p_SynthLab__SineTableSource);
  }
  
  result = (arg1)->getWaveTableLength();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SineTableSource(void *obj) {
SynthLab::SineTableSource *arg1 = (SynthLab::SineTableSource *) obj;
delete arg1;
}
static int _proxy__wrap_new_SineTableSource(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SineTableSource);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SineTableSource_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SineTableSource_methods[]= {
    { "getWaveformName", _wrap_SineTableSource_getWaveformName},
    { "selectTable", _wrap_SineTableSource_selectTable},
    { "readWaveTable", _wrap_SineTableSource_readWaveTable},
    { "getWaveTableLength", _wrap_SineTableSource_getWaveTableLength},
    {0,0}
};
static swig_lua_method swig_SineTableSource_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SineTableSource_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SineTableSource_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SineTableSource_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SineTableSource_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SineTableSource_Sf_SwigStatic = {
    "SineTableSource",
    swig_SineTableSource_Sf_SwigStatic_methods,
    swig_SineTableSource_Sf_SwigStatic_attributes,
    swig_SineTableSource_Sf_SwigStatic_constants,
    swig_SineTableSource_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SineTableSource_bases[] = {0,0};
static const char *swig_SineTableSource_base_names[] = {"SynthLab::IWavetableSource *",0};
static swig_lua_class _wrap_class_SineTableSource = { "SineTableSource", "SineTableSource", &SWIGTYPE_p_SynthLab__SineTableSource,_proxy__wrap_new_SineTableSource, swig_delete_SineTableSource, swig_SineTableSource_methods, swig_SineTableSource_attributes, &swig_SineTableSource_Sf_SwigStatic, swig_SineTableSource_meta, swig_SineTableSource_bases, swig_SineTableSource_base_names };

static int _wrap_new_VAFilterCore(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAFilterCore *result = 0 ;
  
  SWIG_check_num_args("SynthLab::VAFilterCore::VAFilterCore",0,0)
  result = (SynthLab::VAFilterCore *)new SynthLab::VAFilterCore();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__VAFilterCore,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAFilterCore_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAFilterCore *arg1 = (SynthLab::VAFilterCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::VAFilterCore::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAFilterCore::reset",1,"SynthLab::VAFilterCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::VAFilterCore::reset",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAFilterCore,0))){
    SWIG_fail_ptr("VAFilterCore_reset",1,SWIGTYPE_p_SynthLab__VAFilterCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("VAFilterCore_reset",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->reset(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAFilterCore_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAFilterCore *arg1 = (SynthLab::VAFilterCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::VAFilterCore::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAFilterCore::update",1,"SynthLab::VAFilterCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::VAFilterCore::update",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAFilterCore,0))){
    SWIG_fail_ptr("VAFilterCore_update",1,SWIGTYPE_p_SynthLab__VAFilterCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("VAFilterCore_update",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->update(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAFilterCore_render(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAFilterCore *arg1 = (SynthLab::VAFilterCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::VAFilterCore::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAFilterCore::render",1,"SynthLab::VAFilterCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::VAFilterCore::render",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAFilterCore,0))){
    SWIG_fail_ptr("VAFilterCore_render",1,SWIGTYPE_p_SynthLab__VAFilterCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("VAFilterCore_render",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->render(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAFilterCore_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAFilterCore *arg1 = (SynthLab::VAFilterCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::VAFilterCore::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAFilterCore::doNoteOn",1,"SynthLab::VAFilterCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::VAFilterCore::doNoteOn",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAFilterCore,0))){
    SWIG_fail_ptr("VAFilterCore_doNoteOn",1,SWIGTYPE_p_SynthLab__VAFilterCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("VAFilterCore_doNoteOn",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAFilterCore_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAFilterCore *arg1 = (SynthLab::VAFilterCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::VAFilterCore::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAFilterCore::doNoteOff",1,"SynthLab::VAFilterCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::VAFilterCore::doNoteOff",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAFilterCore,0))){
    SWIG_fail_ptr("VAFilterCore_doNoteOff",1,SWIGTYPE_p_SynthLab__VAFilterCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("VAFilterCore_doNoteOff",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VAFilterCore(void *obj) {
SynthLab::VAFilterCore *arg1 = (SynthLab::VAFilterCore *) obj;
delete arg1;
}
static int _proxy__wrap_new_VAFilterCore(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_VAFilterCore);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_VAFilterCore_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_VAFilterCore_methods[]= {
    { "reset", _wrap_VAFilterCore_reset},
    { "update", _wrap_VAFilterCore_update},
    { "render", _wrap_VAFilterCore_render},
    { "doNoteOn", _wrap_VAFilterCore_doNoteOn},
    { "doNoteOff", _wrap_VAFilterCore_doNoteOff},
    {0,0}
};
static swig_lua_method swig_VAFilterCore_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_VAFilterCore_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VAFilterCore_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VAFilterCore_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VAFilterCore_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VAFilterCore_Sf_SwigStatic = {
    "VAFilterCore",
    swig_VAFilterCore_Sf_SwigStatic_methods,
    swig_VAFilterCore_Sf_SwigStatic_attributes,
    swig_VAFilterCore_Sf_SwigStatic_constants,
    swig_VAFilterCore_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VAFilterCore_bases[] = {0,0};
static const char *swig_VAFilterCore_base_names[] = {"SynthLab::ModuleCore *",0};
static swig_lua_class _wrap_class_VAFilterCore = { "VAFilterCore", "VAFilterCore", &SWIGTYPE_p_SynthLab__VAFilterCore,_proxy__wrap_new_VAFilterCore, swig_delete_VAFilterCore, swig_VAFilterCore_methods, swig_VAFilterCore_attributes, &swig_VAFilterCore_Sf_SwigStatic, swig_VAFilterCore_meta, swig_VAFilterCore_bases, swig_VAFilterCore_base_names };

static int _wrap_new_VAOCore(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOCore *result = 0 ;
  
  SWIG_check_num_args("SynthLab::VAOCore::VAOCore",0,0)
  result = (SynthLab::VAOCore *)new SynthLab::VAOCore();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__VAOCore,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOCore_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOCore *arg1 = (SynthLab::VAOCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::VAOCore::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOCore::reset",1,"SynthLab::VAOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::VAOCore::reset",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOCore,0))){
    SWIG_fail_ptr("VAOCore_reset",1,SWIGTYPE_p_SynthLab__VAOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("VAOCore_reset",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->reset(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOCore_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOCore *arg1 = (SynthLab::VAOCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::VAOCore::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOCore::update",1,"SynthLab::VAOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::VAOCore::update",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOCore,0))){
    SWIG_fail_ptr("VAOCore_update",1,SWIGTYPE_p_SynthLab__VAOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("VAOCore_update",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->update(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOCore_render(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOCore *arg1 = (SynthLab::VAOCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::VAOCore::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOCore::render",1,"SynthLab::VAOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::VAOCore::render",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOCore,0))){
    SWIG_fail_ptr("VAOCore_render",1,SWIGTYPE_p_SynthLab__VAOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("VAOCore_render",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->render(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOCore_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOCore *arg1 = (SynthLab::VAOCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::VAOCore::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOCore::doNoteOn",1,"SynthLab::VAOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::VAOCore::doNoteOn",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOCore,0))){
    SWIG_fail_ptr("VAOCore_doNoteOn",1,SWIGTYPE_p_SynthLab__VAOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("VAOCore_doNoteOn",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOCore_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOCore *arg1 = (SynthLab::VAOCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::VAOCore::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOCore::doNoteOff",1,"SynthLab::VAOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::VAOCore::doNoteOff",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOCore,0))){
    SWIG_fail_ptr("VAOCore_doNoteOff",1,SWIGTYPE_p_SynthLab__VAOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("VAOCore_doNoteOff",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOCore_renderSawtoothSample__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOCore *arg1 = (SynthLab::VAOCore *) 0 ;
  SynthLab::SynthClock *arg2 = 0 ;
  bool arg3 ;
  double result;
  
  SWIG_check_num_args("SynthLab::VAOCore::renderSawtoothSample",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOCore::renderSawtoothSample",1,"SynthLab::VAOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::VAOCore::renderSawtoothSample",2,"SynthLab::SynthClock &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("SynthLab::VAOCore::renderSawtoothSample",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOCore,0))){
    SWIG_fail_ptr("VAOCore_renderSawtoothSample",1,SWIGTYPE_p_SynthLab__VAOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("VAOCore_renderSawtoothSample",2,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (double)(arg1)->renderSawtoothSample(*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOCore_renderSawtoothSample__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOCore *arg1 = (SynthLab::VAOCore *) 0 ;
  SynthLab::SynthClock *arg2 = 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::VAOCore::renderSawtoothSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOCore::renderSawtoothSample",1,"SynthLab::VAOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::VAOCore::renderSawtoothSample",2,"SynthLab::SynthClock &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOCore,0))){
    SWIG_fail_ptr("VAOCore_renderSawtoothSample",1,SWIGTYPE_p_SynthLab__VAOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("VAOCore_renderSawtoothSample",2,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  result = (double)(arg1)->renderSawtoothSample(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOCore_renderSawtoothSample(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__VAOCore, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthClock, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VAOCore_renderSawtoothSample__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__VAOCore, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SynthLab__SynthClock, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_VAOCore_renderSawtoothSample__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VAOCore_renderSawtoothSample'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::VAOCore::renderSawtoothSample(SynthLab::SynthClock &,bool)\n"
    "    SynthLab::VAOCore::renderSawtoothSample(SynthLab::SynthClock &)\n");
  lua_error(L);return 0;
}


static int _wrap_VAOCore_renderSquareSample(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOCore *arg1 = (SynthLab::VAOCore *) 0 ;
  SynthLab::SynthClock *arg2 = 0 ;
  double *arg3 = 0 ;
  double result;
  
  SWIG_check_num_args("SynthLab::VAOCore::renderSquareSample",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOCore::renderSquareSample",1,"SynthLab::VAOCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::VAOCore::renderSquareSample",2,"SynthLab::SynthClock &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::VAOCore::renderSquareSample",3,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOCore,0))){
    SWIG_fail_ptr("VAOCore_renderSquareSample",1,SWIGTYPE_p_SynthLab__VAOCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__SynthClock,0))){
    SWIG_fail_ptr("VAOCore_renderSquareSample",2,SWIGTYPE_p_SynthLab__SynthClock);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VAOCore_renderSquareSample",3,SWIGTYPE_p_double);
  }
  
  result = (double)(arg1)->renderSquareSample(*arg2,*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VAOCore(void *obj) {
SynthLab::VAOCore *arg1 = (SynthLab::VAOCore *) obj;
delete arg1;
}
static int _proxy__wrap_new_VAOCore(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_VAOCore);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_VAOCore_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_VAOCore_methods[]= {
    { "reset", _wrap_VAOCore_reset},
    { "update", _wrap_VAOCore_update},
    { "render", _wrap_VAOCore_render},
    { "doNoteOn", _wrap_VAOCore_doNoteOn},
    { "doNoteOff", _wrap_VAOCore_doNoteOff},
    { "renderSawtoothSample", _wrap_VAOCore_renderSawtoothSample},
    { "renderSquareSample", _wrap_VAOCore_renderSquareSample},
    {0,0}
};
static swig_lua_method swig_VAOCore_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_VAOCore_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VAOCore_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VAOCore_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VAOCore_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VAOCore_Sf_SwigStatic = {
    "VAOCore",
    swig_VAOCore_Sf_SwigStatic_methods,
    swig_VAOCore_Sf_SwigStatic_attributes,
    swig_VAOCore_Sf_SwigStatic_constants,
    swig_VAOCore_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VAOCore_bases[] = {0,0};
static const char *swig_VAOCore_base_names[] = {"SynthLab::ModuleCore *",0};
static swig_lua_class _wrap_class_VAOCore = { "VAOCore", "VAOCore", &SWIGTYPE_p_SynthLab__VAOCore,_proxy__wrap_new_VAOCore, swig_delete_VAOCore, swig_VAOCore_methods, swig_VAOCore_attributes, &swig_VAOCore_Sf_SwigStatic, swig_VAOCore_meta, swig_VAOCore_bases, swig_VAOCore_base_names };

static int _wrap_VAOscillator_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscillator *arg1 = (SynthLab::VAOscillator *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::VAOscillator::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscillator::reset",1,"SynthLab::VAOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::VAOscillator::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscillator,0))){
    SWIG_fail_ptr("VAOscillator_reset",1,SWIGTYPE_p_SynthLab__VAOscillator);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscillator_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscillator *arg1 = (SynthLab::VAOscillator *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::VAOscillator::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscillator::update",1,"SynthLab::VAOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscillator,0))){
    SWIG_fail_ptr("VAOscillator_update",1,SWIGTYPE_p_SynthLab__VAOscillator);
  }
  
  result = (bool)(arg1)->update();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscillator_render__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscillator *arg1 = (SynthLab::VAOscillator *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::VAOscillator::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscillator::render",1,"SynthLab::VAOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::VAOscillator::render",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscillator,0))){
    SWIG_fail_ptr("VAOscillator_render",1,SWIGTYPE_p_SynthLab__VAOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("VAOscillator_render",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->render(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscillator_render__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscillator *arg1 = (SynthLab::VAOscillator *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::VAOscillator::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscillator::render",1,"SynthLab::VAOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscillator,0))){
    SWIG_fail_ptr("VAOscillator_render",1,SWIGTYPE_p_SynthLab__VAOscillator);
  }
  
  result = (bool)(arg1)->render();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscillator_render(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__VAOscillator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_VAOscillator_render__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__VAOscillator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VAOscillator_render__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VAOscillator_render'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::VAOscillator::render(uint32_t)\n"
    "    SynthLab::VAOscillator::render()\n");
  lua_error(L);return 0;
}


static int _wrap_VAOscillator_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscillator *arg1 = (SynthLab::VAOscillator *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::VAOscillator::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscillator::doNoteOn",1,"SynthLab::VAOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::VAOscillator::doNoteOn",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscillator,0))){
    SWIG_fail_ptr("VAOscillator_doNoteOn",1,SWIGTYPE_p_SynthLab__VAOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("VAOscillator_doNoteOn",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscillator_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscillator *arg1 = (SynthLab::VAOscillator *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::VAOscillator::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscillator::doNoteOff",1,"SynthLab::VAOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::VAOscillator::doNoteOff",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscillator,0))){
    SWIG_fail_ptr("VAOscillator_doNoteOff",1,SWIGTYPE_p_SynthLab__VAOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("VAOscillator_doNoteOff",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOscillator_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::VAOscillator *arg1 = (SynthLab::VAOscillator *) 0 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::VAOscParameters > > result;
  
  SWIG_check_num_args("SynthLab::VAOscillator::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::VAOscillator::getParameters",1,"SynthLab::VAOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__VAOscillator,0))){
    SWIG_fail_ptr("VAOscillator_getParameters",1,SWIGTYPE_p_SynthLab__VAOscillator);
  }
  
  result = (arg1)->getParameters();
  {
    std::shared_ptr< SynthLab::VAOscParameters > * resultptr = new std::shared_ptr< SynthLab::VAOscParameters >((const std::shared_ptr< SynthLab::VAOscParameters > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_SynthLab__VAOscParameters_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VAOscillator(void *obj) {
SynthLab::VAOscillator *arg1 = (SynthLab::VAOscillator *) obj;
delete arg1;
}
static swig_lua_attribute swig_VAOscillator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_VAOscillator_methods[]= {
    { "reset", _wrap_VAOscillator_reset},
    { "update", _wrap_VAOscillator_update},
    { "render", _wrap_VAOscillator_render},
    { "doNoteOn", _wrap_VAOscillator_doNoteOn},
    { "doNoteOff", _wrap_VAOscillator_doNoteOff},
    { "getParameters", _wrap_VAOscillator_getParameters},
    {0,0}
};
static swig_lua_method swig_VAOscillator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_VAOscillator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VAOscillator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VAOscillator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VAOscillator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VAOscillator_Sf_SwigStatic = {
    "VAOscillator",
    swig_VAOscillator_Sf_SwigStatic_methods,
    swig_VAOscillator_Sf_SwigStatic_attributes,
    swig_VAOscillator_Sf_SwigStatic_constants,
    swig_VAOscillator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VAOscillator_bases[] = {0,0};
static const char *swig_VAOscillator_base_names[] = {"SynthLab::SynthModule *",0};
static swig_lua_class _wrap_class_VAOscillator = { "VAOscillator", "VAOscillator", &SWIGTYPE_p_SynthLab__VAOscillator,0, swig_delete_VAOscillator, swig_VAOscillator_methods, swig_VAOscillator_attributes, &swig_VAOscillator_Sf_SwigStatic, swig_VAOscillator_meta, swig_VAOscillator_bases, swig_VAOscillator_base_names };

static int _wrap_new_WaveSliceCore(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSliceCore *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WaveSliceCore::WaveSliceCore",0,0)
  result = (SynthLab::WaveSliceCore *)new SynthLab::WaveSliceCore();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__WaveSliceCore,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSliceCore_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSliceCore *arg1 = (SynthLab::WaveSliceCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WaveSliceCore::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSliceCore::reset",1,"SynthLab::WaveSliceCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WaveSliceCore::reset",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSliceCore,0))){
    SWIG_fail_ptr("WaveSliceCore_reset",1,SWIGTYPE_p_SynthLab__WaveSliceCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("WaveSliceCore_reset",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->reset(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSliceCore_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSliceCore *arg1 = (SynthLab::WaveSliceCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WaveSliceCore::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSliceCore::update",1,"SynthLab::WaveSliceCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WaveSliceCore::update",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSliceCore,0))){
    SWIG_fail_ptr("WaveSliceCore_update",1,SWIGTYPE_p_SynthLab__WaveSliceCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("WaveSliceCore_update",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->update(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSliceCore_render(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSliceCore *arg1 = (SynthLab::WaveSliceCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WaveSliceCore::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSliceCore::render",1,"SynthLab::WaveSliceCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WaveSliceCore::render",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSliceCore,0))){
    SWIG_fail_ptr("WaveSliceCore_render",1,SWIGTYPE_p_SynthLab__WaveSliceCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("WaveSliceCore_render",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->render(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSliceCore_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSliceCore *arg1 = (SynthLab::WaveSliceCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WaveSliceCore::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSliceCore::doNoteOn",1,"SynthLab::WaveSliceCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WaveSliceCore::doNoteOn",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSliceCore,0))){
    SWIG_fail_ptr("WaveSliceCore_doNoteOn",1,SWIGTYPE_p_SynthLab__WaveSliceCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("WaveSliceCore_doNoteOn",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveSliceCore_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WaveSliceCore *arg1 = (SynthLab::WaveSliceCore *) 0 ;
  SynthLab::CoreProcData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WaveSliceCore::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WaveSliceCore::doNoteOff",1,"SynthLab::WaveSliceCore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WaveSliceCore::doNoteOff",2,"SynthLab::CoreProcData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WaveSliceCore,0))){
    SWIG_fail_ptr("WaveSliceCore_doNoteOff",1,SWIGTYPE_p_SynthLab__WaveSliceCore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__CoreProcData,0))){
    SWIG_fail_ptr("WaveSliceCore_doNoteOff",2,SWIGTYPE_p_SynthLab__CoreProcData);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WaveSliceCore(void *obj) {
SynthLab::WaveSliceCore *arg1 = (SynthLab::WaveSliceCore *) obj;
delete arg1;
}
static int _proxy__wrap_new_WaveSliceCore(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WaveSliceCore);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WaveSliceCore_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WaveSliceCore_methods[]= {
    { "reset", _wrap_WaveSliceCore_reset},
    { "update", _wrap_WaveSliceCore_update},
    { "render", _wrap_WaveSliceCore_render},
    { "doNoteOn", _wrap_WaveSliceCore_doNoteOn},
    { "doNoteOff", _wrap_WaveSliceCore_doNoteOff},
    {0,0}
};
static swig_lua_method swig_WaveSliceCore_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WaveSliceCore_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WaveSliceCore_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WaveSliceCore_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WaveSliceCore_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WaveSliceCore_Sf_SwigStatic = {
    "WaveSliceCore",
    swig_WaveSliceCore_Sf_SwigStatic_methods,
    swig_WaveSliceCore_Sf_SwigStatic_attributes,
    swig_WaveSliceCore_Sf_SwigStatic_constants,
    swig_WaveSliceCore_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WaveSliceCore_bases[] = {0,0};
static const char *swig_WaveSliceCore_base_names[] = {"SynthLab::ModuleCore *",0};
static swig_lua_class _wrap_class_WaveSliceCore = { "WaveSliceCore", "WaveSliceCore", &SWIGTYPE_p_SynthLab__WaveSliceCore,_proxy__wrap_new_WaveSliceCore, swig_delete_WaveSliceCore, swig_WaveSliceCore_methods, swig_WaveSliceCore_attributes, &swig_WaveSliceCore_Sf_SwigStatic, swig_WaveSliceCore_meta, swig_WaveSliceCore_bases, swig_WaveSliceCore_base_names };

static int _wrap_WSOscillator_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscillator *arg1 = (SynthLab::WSOscillator *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WSOscillator::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscillator::reset",1,"SynthLab::WSOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::WSOscillator::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscillator,0))){
    SWIG_fail_ptr("WSOscillator_reset",1,SWIGTYPE_p_SynthLab__WSOscillator);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscillator_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscillator *arg1 = (SynthLab::WSOscillator *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WSOscillator::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscillator::update",1,"SynthLab::WSOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscillator,0))){
    SWIG_fail_ptr("WSOscillator_update",1,SWIGTYPE_p_SynthLab__WSOscillator);
  }
  
  result = (bool)(arg1)->update();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscillator_render__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscillator *arg1 = (SynthLab::WSOscillator *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WSOscillator::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscillator::render",1,"SynthLab::WSOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WSOscillator::render",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscillator,0))){
    SWIG_fail_ptr("WSOscillator_render",1,SWIGTYPE_p_SynthLab__WSOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WSOscillator_render",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->render(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscillator_render__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscillator *arg1 = (SynthLab::WSOscillator *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WSOscillator::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscillator::render",1,"SynthLab::WSOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscillator,0))){
    SWIG_fail_ptr("WSOscillator_render",1,SWIGTYPE_p_SynthLab__WSOscillator);
  }
  
  result = (bool)(arg1)->render();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscillator_render(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__WSOscillator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_WSOscillator_render__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__WSOscillator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WSOscillator_render__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WSOscillator_render'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::WSOscillator::render(uint32_t)\n"
    "    SynthLab::WSOscillator::render()\n");
  lua_error(L);return 0;
}


static int _wrap_WSOscillator_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscillator *arg1 = (SynthLab::WSOscillator *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WSOscillator::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscillator::doNoteOn",1,"SynthLab::WSOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WSOscillator::doNoteOn",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscillator,0))){
    SWIG_fail_ptr("WSOscillator_doNoteOn",1,SWIGTYPE_p_SynthLab__WSOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("WSOscillator_doNoteOn",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscillator_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscillator *arg1 = (SynthLab::WSOscillator *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WSOscillator::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscillator::doNoteOff",1,"SynthLab::WSOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WSOscillator::doNoteOff",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscillator,0))){
    SWIG_fail_ptr("WSOscillator_doNoteOff",1,SWIGTYPE_p_SynthLab__WSOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("WSOscillator_doNoteOff",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscillator_startGlideModulation(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscillator *arg1 = (SynthLab::WSOscillator *) 0 ;
  SynthLab::GlideInfo *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WSOscillator::startGlideModulation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscillator::startGlideModulation",1,"SynthLab::WSOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WSOscillator::startGlideModulation",2,"SynthLab::GlideInfo &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscillator,0))){
    SWIG_fail_ptr("WSOscillator_startGlideModulation",1,SWIGTYPE_p_SynthLab__WSOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__GlideInfo,0))){
    SWIG_fail_ptr("WSOscillator_startGlideModulation",2,SWIGTYPE_p_SynthLab__GlideInfo);
  }
  
  result = (bool)(arg1)->startGlideModulation(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscillator_makeWaveStringMap(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscillator *arg1 = (SynthLab::WSOscillator *) 0 ;
  
  SWIG_check_num_args("SynthLab::WSOscillator::makeWaveStringMap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscillator::makeWaveStringMap",1,"SynthLab::WSOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscillator,0))){
    SWIG_fail_ptr("WSOscillator_makeWaveStringMap",1,SWIGTYPE_p_SynthLab__WSOscillator);
  }
  
  (arg1)->makeWaveStringMap();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscillator_mixOscBuffers(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscillator *arg1 = (SynthLab::WSOscillator *) 0 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::AudioBuffer > > arg2 ;
  uint32_t arg3 ;
  double arg4 ;
  std::shared_ptr< SynthLab::AudioBuffer > *argp2 ;
  uint32_t *argp3 ;
  
  SWIG_check_num_args("SynthLab::WSOscillator::mixOscBuffers",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscillator::mixOscBuffers",1,"SynthLab::WSOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WSOscillator::mixOscBuffers",2,"std::shared_ptr< SynthLab::AudioBuffer >");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::WSOscillator::mixOscBuffers",3,"uint32_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::WSOscillator::mixOscBuffers",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscillator,0))){
    SWIG_fail_ptr("WSOscillator_mixOscBuffers",1,SWIGTYPE_p_SynthLab__WSOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t,0))){
    SWIG_fail_ptr("WSOscillator_mixOscBuffers",2,SWIGTYPE_p_std__shared_ptrT_SynthLab__AudioBuffer_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WSOscillator_mixOscBuffers",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->mixOscBuffers(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscillator_oscIsFree(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscillator *arg1 = (SynthLab::WSOscillator *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  uint32_t *argp4 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WSOscillator::oscIsFree",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscillator::oscIsFree",1,"SynthLab::WSOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WSOscillator::oscIsFree",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::WSOscillator::oscIsFree",3,"uint32_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SynthLab::WSOscillator::oscIsFree",4,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscillator,0))){
    SWIG_fail_ptr("WSOscillator_oscIsFree",1,SWIGTYPE_p_SynthLab__WSOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WSOscillator_oscIsFree",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WSOscillator_oscIsFree",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WSOscillator_oscIsFree",4,SWIGTYPE_p_uint32_t);
  }
  arg4 = *argp4;
  
  result = (bool)(arg1)->oscIsFree(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscillator_oscHasWaveIndex(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscillator *arg1 = (SynthLab::WSOscillator *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WSOscillator::oscHasWaveIndex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscillator::oscHasWaveIndex",1,"SynthLab::WSOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WSOscillator::oscHasWaveIndex",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::WSOscillator::oscHasWaveIndex",3,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscillator,0))){
    SWIG_fail_ptr("WSOscillator_oscHasWaveIndex",1,SWIGTYPE_p_SynthLab__WSOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WSOscillator_oscHasWaveIndex",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WSOscillator_oscHasWaveIndex",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  result = (bool)(arg1)->oscHasWaveIndex(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscillator_setNewOscWaveA(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscillator *arg1 = (SynthLab::WSOscillator *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  double arg4 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  
  SWIG_check_num_args("SynthLab::WSOscillator::setNewOscWaveA",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscillator::setNewOscWaveA",1,"SynthLab::WSOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WSOscillator::setNewOscWaveA",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::WSOscillator::setNewOscWaveA",3,"uint32_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::WSOscillator::setNewOscWaveA",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscillator,0))){
    SWIG_fail_ptr("WSOscillator_setNewOscWaveA",1,SWIGTYPE_p_SynthLab__WSOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WSOscillator_setNewOscWaveA",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WSOscillator_setNewOscWaveA",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->setNewOscWaveA(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscillator_setNewOscWaveB(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscillator *arg1 = (SynthLab::WSOscillator *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  double arg4 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  
  SWIG_check_num_args("SynthLab::WSOscillator::setNewOscWaveB",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscillator::setNewOscWaveB",1,"SynthLab::WSOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WSOscillator::setNewOscWaveB",2,"uint32_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::WSOscillator::setNewOscWaveB",3,"uint32_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SynthLab::WSOscillator::setNewOscWaveB",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscillator,0))){
    SWIG_fail_ptr("WSOscillator_setNewOscWaveB",1,SWIGTYPE_p_SynthLab__WSOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WSOscillator_setNewOscWaveB",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WSOscillator_setNewOscWaveB",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->setNewOscWaveB(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscillator_getWSOscModulationInput(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscillator *arg1 = (SynthLab::WSOscillator *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::Modulators > > result;
  
  SWIG_check_num_args("SynthLab::WSOscillator::getWSOscModulationInput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscillator::getWSOscModulationInput",1,"SynthLab::WSOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WSOscillator::getWSOscModulationInput",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscillator,0))){
    SWIG_fail_ptr("WSOscillator_getWSOscModulationInput",1,SWIGTYPE_p_SynthLab__WSOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WSOscillator_getWSOscModulationInput",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (arg1)->getWSOscModulationInput(arg2);
  {
    std::shared_ptr< SynthLab::Modulators > * resultptr = new std::shared_ptr< SynthLab::Modulators >((const std::shared_ptr< SynthLab::Modulators > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_SynthLab__Modulators_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscillator_getWTOscillator(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscillator *arg1 = (SynthLab::WSOscillator *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  std::shared_ptr< WTOscillator > result;
  
  SWIG_check_num_args("SynthLab::WSOscillator::getWTOscillator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscillator::getWTOscillator",1,"SynthLab::WSOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WSOscillator::getWTOscillator",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscillator,0))){
    SWIG_fail_ptr("WSOscillator_getWTOscillator",1,SWIGTYPE_p_SynthLab__WSOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WSOscillator_getWTOscillator",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (arg1)->getWTOscillator(arg2);
  {
    std::shared_ptr< WTOscillator > * resultptr = new std::shared_ptr< WTOscillator >((const std::shared_ptr< WTOscillator > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_WTOscillator_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WSOscillator_updateActiveOscillators(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WSOscillator *arg1 = (SynthLab::WSOscillator *) 0 ;
  
  SWIG_check_num_args("SynthLab::WSOscillator::updateActiveOscillators",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WSOscillator::updateActiveOscillators",1,"SynthLab::WSOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WSOscillator,0))){
    SWIG_fail_ptr("WSOscillator_updateActiveOscillators",1,SWIGTYPE_p_SynthLab__WSOscillator);
  }
  
  (arg1)->updateActiveOscillators();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WSOscillator(void *obj) {
SynthLab::WSOscillator *arg1 = (SynthLab::WSOscillator *) obj;
delete arg1;
}
static swig_lua_attribute swig_WSOscillator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WSOscillator_methods[]= {
    { "reset", _wrap_WSOscillator_reset},
    { "update", _wrap_WSOscillator_update},
    { "render", _wrap_WSOscillator_render},
    { "doNoteOn", _wrap_WSOscillator_doNoteOn},
    { "doNoteOff", _wrap_WSOscillator_doNoteOff},
    { "startGlideModulation", _wrap_WSOscillator_startGlideModulation},
    { "makeWaveStringMap", _wrap_WSOscillator_makeWaveStringMap},
    { "mixOscBuffers", _wrap_WSOscillator_mixOscBuffers},
    { "oscIsFree", _wrap_WSOscillator_oscIsFree},
    { "oscHasWaveIndex", _wrap_WSOscillator_oscHasWaveIndex},
    { "setNewOscWaveA", _wrap_WSOscillator_setNewOscWaveA},
    { "setNewOscWaveB", _wrap_WSOscillator_setNewOscWaveB},
    { "getWSOscModulationInput", _wrap_WSOscillator_getWSOscModulationInput},
    { "getWTOscillator", _wrap_WSOscillator_getWTOscillator},
    { "updateActiveOscillators", _wrap_WSOscillator_updateActiveOscillators},
    {0,0}
};
static swig_lua_method swig_WSOscillator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WSOscillator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WSOscillator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WSOscillator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WSOscillator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WSOscillator_Sf_SwigStatic = {
    "WSOscillator",
    swig_WSOscillator_Sf_SwigStatic_methods,
    swig_WSOscillator_Sf_SwigStatic_attributes,
    swig_WSOscillator_Sf_SwigStatic_constants,
    swig_WSOscillator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WSOscillator_bases[] = {0,0};
static const char *swig_WSOscillator_base_names[] = {"SynthLab::SynthModule *",0};
static swig_lua_class _wrap_class_WSOscillator = { "WSOscillator", "WSOscillator", &SWIGTYPE_p_SynthLab__WSOscillator,0, swig_delete_WSOscillator, swig_WSOscillator_methods, swig_WSOscillator_attributes, &swig_WSOscillator_Sf_SwigStatic, swig_WSOscillator_meta, swig_WSOscillator_bases, swig_WSOscillator_base_names };

static int _wrap_WTOscillator_reset(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscillator *arg1 = (SynthLab::WTOscillator *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WTOscillator::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscillator::reset",1,"SynthLab::WTOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::WTOscillator::reset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscillator,0))){
    SWIG_fail_ptr("WTOscillator_reset",1,SWIGTYPE_p_SynthLab__WTOscillator);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscillator_update(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscillator *arg1 = (SynthLab::WTOscillator *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WTOscillator::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscillator::update",1,"SynthLab::WTOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscillator,0))){
    SWIG_fail_ptr("WTOscillator_update",1,SWIGTYPE_p_SynthLab__WTOscillator);
  }
  
  result = (bool)(arg1)->update();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscillator_render__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscillator *arg1 = (SynthLab::WTOscillator *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WTOscillator::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscillator::render",1,"SynthLab::WTOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WTOscillator::render",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscillator,0))){
    SWIG_fail_ptr("WTOscillator_render",1,SWIGTYPE_p_SynthLab__WTOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WTOscillator_render",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->render(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscillator_render__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscillator *arg1 = (SynthLab::WTOscillator *) 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WTOscillator::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscillator::render",1,"SynthLab::WTOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscillator,0))){
    SWIG_fail_ptr("WTOscillator_render",1,SWIGTYPE_p_SynthLab__WTOscillator);
  }
  
  result = (bool)(arg1)->render();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscillator_render(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__WTOscillator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_WTOscillator_render__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SynthLab__WTOscillator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WTOscillator_render__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WTOscillator_render'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SynthLab::WTOscillator::render(uint32_t)\n"
    "    SynthLab::WTOscillator::render()\n");
  lua_error(L);return 0;
}


static int _wrap_WTOscillator_doNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscillator *arg1 = (SynthLab::WTOscillator *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WTOscillator::doNoteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscillator::doNoteOn",1,"SynthLab::WTOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WTOscillator::doNoteOn",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscillator,0))){
    SWIG_fail_ptr("WTOscillator_doNoteOn",1,SWIGTYPE_p_SynthLab__WTOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("WTOscillator_doNoteOn",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOn(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscillator_doNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscillator *arg1 = (SynthLab::WTOscillator *) 0 ;
  SynthLab::MIDINoteEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SynthLab::WTOscillator::doNoteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscillator::doNoteOff",1,"SynthLab::WTOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WTOscillator::doNoteOff",2,"SynthLab::MIDINoteEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscillator,0))){
    SWIG_fail_ptr("WTOscillator_doNoteOff",1,SWIGTYPE_p_SynthLab__WTOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SynthLab__MIDINoteEvent,0))){
    SWIG_fail_ptr("WTOscillator_doNoteOff",2,SWIGTYPE_p_SynthLab__MIDINoteEvent);
  }
  
  result = (bool)(arg1)->doNoteOff(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WTOscillator_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WTOscillator *arg1 = (SynthLab::WTOscillator *) 0 ;
  SwigValueWrapper< std::shared_ptr< SynthLab::WTOscParameters > > result;
  
  SWIG_check_num_args("SynthLab::WTOscillator::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WTOscillator::getParameters",1,"SynthLab::WTOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WTOscillator,0))){
    SWIG_fail_ptr("WTOscillator_getParameters",1,SWIGTYPE_p_SynthLab__WTOscillator);
  }
  
  result = (arg1)->getParameters();
  {
    std::shared_ptr< SynthLab::WTOscParameters > * resultptr = new std::shared_ptr< SynthLab::WTOscParameters >((const std::shared_ptr< SynthLab::WTOscParameters > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_SynthLab__WTOscParameters_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WTOscillator(void *obj) {
SynthLab::WTOscillator *arg1 = (SynthLab::WTOscillator *) obj;
delete arg1;
}
static swig_lua_attribute swig_WTOscillator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WTOscillator_methods[]= {
    { "reset", _wrap_WTOscillator_reset},
    { "update", _wrap_WTOscillator_update},
    { "render", _wrap_WTOscillator_render},
    { "doNoteOn", _wrap_WTOscillator_doNoteOn},
    { "doNoteOff", _wrap_WTOscillator_doNoteOff},
    { "getParameters", _wrap_WTOscillator_getParameters},
    {0,0}
};
static swig_lua_method swig_WTOscillator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WTOscillator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WTOscillator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WTOscillator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WTOscillator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WTOscillator_Sf_SwigStatic = {
    "WTOscillator",
    swig_WTOscillator_Sf_SwigStatic_methods,
    swig_WTOscillator_Sf_SwigStatic_attributes,
    swig_WTOscillator_Sf_SwigStatic_constants,
    swig_WTOscillator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WTOscillator_bases[] = {0,0};
static const char *swig_WTOscillator_base_names[] = {"SynthLab::SynthModule *",0};
static swig_lua_class _wrap_class_WTOscillator = { "WTOscillator", "WTOscillator", &SWIGTYPE_p_SynthLab__WTOscillator,0, swig_delete_WTOscillator, swig_WTOscillator_methods, swig_WTOscillator_attributes, &swig_WTOscillator_Sf_SwigStatic, swig_WTOscillator_meta, swig_WTOscillator_bases, swig_WTOscillator_base_names };

static int _wrap_MAX_WAVE_TABLES_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::MAX_WAVE_TABLES",0,0)
  result = (uint32_t)SynthLab::MAX_WAVE_TABLES;
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WavetableSource(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WavetableSource *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WavetableSource::WavetableSource",0,0)
  result = (SynthLab::WavetableSource *)new SynthLab::WavetableSource();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynthLab__WavetableSource,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WavetableSource_getWaveformName(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WavetableSource *arg1 = (SynthLab::WavetableSource *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("SynthLab::WavetableSource::getWaveformName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WavetableSource::getWaveformName",1,"SynthLab::WavetableSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WavetableSource,0))){
    SWIG_fail_ptr("WavetableSource_getWaveformName",1,SWIGTYPE_p_SynthLab__WavetableSource);
  }
  
  result = (char *)(arg1)->getWaveformName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WavetableSource_selectTable(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WavetableSource *arg1 = (SynthLab::WavetableSource *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("SynthLab::WavetableSource::selectTable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WavetableSource::selectTable",1,"SynthLab::WavetableSource *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SynthLab::WavetableSource::selectTable",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WavetableSource,0))){
    SWIG_fail_ptr("WavetableSource_selectTable",1,SWIGTYPE_p_SynthLab__WavetableSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WavetableSource_selectTable",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  (arg1)->selectTable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WavetableSource_readWaveTable(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WavetableSource *arg1 = (SynthLab::WavetableSource *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("SynthLab::WavetableSource::readWaveTable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WavetableSource::readWaveTable",1,"SynthLab::WavetableSource *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynthLab::WavetableSource::readWaveTable",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WavetableSource,0))){
    SWIG_fail_ptr("WavetableSource_readWaveTable",1,SWIGTYPE_p_SynthLab__WavetableSource);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->readWaveTable(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WavetableSource_getWaveTableLength(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WavetableSource *arg1 = (SynthLab::WavetableSource *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("SynthLab::WavetableSource::getWaveTableLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WavetableSource::getWaveTableLength",1,"SynthLab::WavetableSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WavetableSource,0))){
    SWIG_fail_ptr("WavetableSource_getWaveTableLength",1,SWIGTYPE_p_SynthLab__WavetableSource);
  }
  
  result = (arg1)->getWaveTableLength();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WavetableSource_addWavetable(lua_State* L) {
  int SWIG_arg = 0;
  SynthLab::WavetableSource *arg1 = (SynthLab::WavetableSource *) 0 ;
  Wavetable *arg2 = (Wavetable *) 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  
  SWIG_check_num_args("SynthLab::WavetableSource::addWavetable",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynthLab::WavetableSource::addWavetable",1,"SynthLab::WavetableSource *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SynthLab::WavetableSource::addWavetable",2,"Wavetable *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SynthLab::WavetableSource::addWavetable",3,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynthLab__WavetableSource,0))){
    SWIG_fail_ptr("WavetableSource_addWavetable",1,SWIGTYPE_p_SynthLab__WavetableSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Wavetable,0))){
    SWIG_fail_ptr("WavetableSource_addWavetable",2,SWIGTYPE_p_Wavetable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("WavetableSource_addWavetable",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  (arg1)->addWavetable(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WavetableSource(void *obj) {
SynthLab::WavetableSource *arg1 = (SynthLab::WavetableSource *) obj;
delete arg1;
}
static int _proxy__wrap_new_WavetableSource(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WavetableSource);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WavetableSource_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WavetableSource_methods[]= {
    { "getWaveformName", _wrap_WavetableSource_getWaveformName},
    { "selectTable", _wrap_WavetableSource_selectTable},
    { "readWaveTable", _wrap_WavetableSource_readWaveTable},
    { "getWaveTableLength", _wrap_WavetableSource_getWaveTableLength},
    { "addWavetable", _wrap_WavetableSource_addWavetable},
    {0,0}
};
static swig_lua_method swig_WavetableSource_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WavetableSource_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WavetableSource_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WavetableSource_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WavetableSource_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WavetableSource_Sf_SwigStatic = {
    "WavetableSource",
    swig_WavetableSource_Sf_SwigStatic_methods,
    swig_WavetableSource_Sf_SwigStatic_attributes,
    swig_WavetableSource_Sf_SwigStatic_constants,
    swig_WavetableSource_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WavetableSource_bases[] = {0,0};
static const char *swig_WavetableSource_base_names[] = {"SynthLab::IWavetableSource *",0};
static swig_lua_class _wrap_class_WavetableSource = { "WavetableSource", "WavetableSource", &SWIGTYPE_p_SynthLab__WavetableSource,_proxy__wrap_new_WavetableSource, swig_delete_WavetableSource, swig_WavetableSource_methods, swig_WavetableSource_attributes, &swig_WavetableSource_Sf_SwigStatic, swig_WavetableSource_meta, swig_WavetableSource_bases, swig_WavetableSource_base_names };

static int _wrap_new_float_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::vector",2,"float const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< float > *)new std::vector< float >(arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< float > *)new std::vector< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_float_vector",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_vector__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::vector(size_t,float const &)\n"
    "    std::vector< float >::vector(size_t)\n"
    "    std::vector< float >::vector(std::vector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("std::vector< float >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__getitem",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector___getitem",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)std_vector_Sl_float_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("std::vector< float >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__setitem",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::__setitem",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector___setitem",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  std_vector_Sl_float_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  SwigValueWrapper< std::vector_iterator< float > > result;
  
  SWIG_check_num_args("std::vector< float >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::begin",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_begin",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = std_vector_Sl_float_Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< float > * resultptr = new std::vector_iterator< float >((const std::vector_iterator< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  SwigValueWrapper< std::vector_iterator< float > > result;
  
  SWIG_check_num_args("std::vector< float >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::end",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_c_end",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = std_vector_Sl_float_Sg__end__SWIG(arg1);
  {
    std::vector_iterator< float > * resultptr = new std::vector_iterator< float >((const std::vector_iterator< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::erase",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_erase",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_float_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< float >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::erase",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_erase",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_float_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::erase(size_t)\n"
    "    std::vector< float >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::front",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_front",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::back",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("std::vector< float >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::push_back",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::push_back",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_push_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::pop_back",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_pop_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::at",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_at",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::vector< float >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::assign",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::assign",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_assign",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::data",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_data",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::size",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_size",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< float >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::empty",1,"std::vector< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_empty",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (bool)((std::vector< float > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::resize",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_resize",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::clear",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_clear",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< float >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::swap",1,"std::vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< float >::swap",2,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_swap",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_swap",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::shrink_to_fit",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::reserve",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_reserve",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::max_size",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_max_size",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::capacity",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_capacity",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_vector(void *obj) {
std::vector< float > *arg1 = (std::vector< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_vector_methods[]= {
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    { "begin", _wrap_float_vector_begin},
    { "c_end", _wrap_float_vector_c_end},
    { "erase", _wrap_float_vector_erase},
    { "front", _wrap_float_vector_front},
    { "back", _wrap_float_vector_back},
    { "push_back", _wrap_float_vector_push_back},
    { "pop_back", _wrap_float_vector_pop_back},
    { "at", _wrap_float_vector_at},
    { "assign", _wrap_float_vector_assign},
    { "data", _wrap_float_vector_data},
    { "size", _wrap_float_vector_size},
    { "empty", _wrap_float_vector_empty},
    { "resize", _wrap_float_vector_resize},
    { "clear", _wrap_float_vector_clear},
    { "swap", _wrap_float_vector_swap},
    { "shrink_to_fit", _wrap_float_vector_shrink_to_fit},
    { "reserve", _wrap_float_vector_reserve},
    { "max_size", _wrap_float_vector_max_size},
    { "capacity", _wrap_float_vector_capacity},
    {0,0}
};
static swig_lua_method swig_float_vector_meta[] = {
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_float_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_vector_Sf_SwigStatic = {
    "float_vector",
    swig_float_vector_Sf_SwigStatic_methods,
    swig_float_vector_Sf_SwigStatic_attributes,
    swig_float_vector_Sf_SwigStatic_constants,
    swig_float_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_vector_bases[] = {0};
static const char *swig_float_vector_base_names[] = {0};
static swig_lua_class _wrap_class_float_vector = { "float_vector", "float_vector", &SWIGTYPE_p_std__vectorT_float_t,_proxy__wrap_new_float_vector, swig_delete_float_vector, swig_float_vector_methods, swig_float_vector_attributes, &swig_float_vector_Sf_SwigStatic, swig_float_vector_meta, swig_float_vector_bases, swig_float_vector_base_names };

static int _wrap_new_double_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::vector",2,"double const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"std::vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("new_double_vector",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_double_vector__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_double_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector(size_t,double const &)\n"
    "    std::vector< double >::vector(size_t)\n"
    "    std::vector< double >::vector(std::vector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("std::vector< double >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__getitem",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector___getitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)std_vector_Sl_double_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("std::vector< double >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__setitem",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::__setitem",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector___setitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  std_vector_Sl_double_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SwigValueWrapper< std::vector_iterator< double > > result;
  
  SWIG_check_num_args("std::vector< double >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::begin",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_begin",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = std_vector_Sl_double_Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< double > * resultptr = new std::vector_iterator< double >((const std::vector_iterator< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SwigValueWrapper< std::vector_iterator< double > > result;
  
  SWIG_check_num_args("std::vector< double >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::end",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_c_end",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = std_vector_Sl_double_Sg__end__SWIG(arg1);
  {
    std::vector_iterator< double > * resultptr = new std::vector_iterator< double >((const std::vector_iterator< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::erase",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_erase",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_double_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< double >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::erase",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_erase",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_double_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_double_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::erase(size_t)\n"
    "    std::vector< double >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::front",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_front",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::back",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("std::vector< double >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::push_back",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::push_back",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_push_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::pop_back",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_pop_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::at",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_at",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_num_args("std::vector< double >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::assign",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::assign",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_assign",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(double const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::data",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_data",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::size",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< double >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::empty",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_empty",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)((std::vector< double > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::resize",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_resize",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::clear",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_clear",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< double >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::swap",1,"std::vector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< double >::swap",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_swap",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_swap",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::shrink_to_fit",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::reserve",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_reserve",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::max_size",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_max_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::capacity",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_capacity",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_vector(void *obj) {
std::vector< double > *arg1 = (std::vector< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_vector_methods[]= {
    { "__getitem", _wrap_double_vector___getitem},
    { "__setitem", _wrap_double_vector___setitem},
    { "begin", _wrap_double_vector_begin},
    { "c_end", _wrap_double_vector_c_end},
    { "erase", _wrap_double_vector_erase},
    { "front", _wrap_double_vector_front},
    { "back", _wrap_double_vector_back},
    { "push_back", _wrap_double_vector_push_back},
    { "pop_back", _wrap_double_vector_pop_back},
    { "at", _wrap_double_vector_at},
    { "assign", _wrap_double_vector_assign},
    { "data", _wrap_double_vector_data},
    { "size", _wrap_double_vector_size},
    { "empty", _wrap_double_vector_empty},
    { "resize", _wrap_double_vector_resize},
    { "clear", _wrap_double_vector_clear},
    { "swap", _wrap_double_vector_swap},
    { "shrink_to_fit", _wrap_double_vector_shrink_to_fit},
    { "reserve", _wrap_double_vector_reserve},
    { "max_size", _wrap_double_vector_max_size},
    { "capacity", _wrap_double_vector_capacity},
    {0,0}
};
static swig_lua_method swig_double_vector_meta[] = {
    { "__getitem", _wrap_double_vector___getitem},
    { "__setitem", _wrap_double_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_double_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_vector_Sf_SwigStatic = {
    "double_vector",
    swig_double_vector_Sf_SwigStatic_methods,
    swig_double_vector_Sf_SwigStatic_attributes,
    swig_double_vector_Sf_SwigStatic_constants,
    swig_double_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_vector_bases[] = {0};
static const char *swig_double_vector_base_names[] = {0};
static swig_lua_class _wrap_class_double_vector = { "double_vector", "double_vector", &SWIGTYPE_p_std__vectorT_double_t,_proxy__wrap_new_double_vector, swig_delete_double_vector, swig_double_vector_methods, swig_double_vector_attributes, &swig_double_vector_Sf_SwigStatic, swig_double_vector_meta, swig_double_vector_bases, swig_double_vector_base_names };

static int _wrap_new_complex_float_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::complex< float > *arg2 = 0 ;
  std::vector< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::vector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::vector",2,"std::complex< float > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("new_complex_float_vector",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (std::vector< std::complex< float > > *)new std::vector< std::complex< float > >(arg1,(std::complex< float > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_float_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< std::complex< float > > *)new std::vector< std::complex< float > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_float_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = 0 ;
  std::vector< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::vector",1,"std::vector< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("new_complex_float_vector",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (std::vector< std::complex< float > > *)new std::vector< std::complex< float > >((std::vector< std::complex< float > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_float_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_complex_float_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_complex_float_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_complex_float_vector__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_complex_float_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< float > >::vector(size_t,std::complex< float > const &)\n"
    "    std::vector< std::complex< float > >::vector(size_t)\n"
    "    std::vector< std::complex< float > >::vector(std::vector< std::complex< float > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_float_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::__getitem",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector___getitem",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = std_vector_Sl_std_complex_Sl_float_Sg__Sg____getitem__SWIG(arg1,arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > arg3 ;
  std::complex< float > *argp3 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::__setitem",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< float > >::__setitem",3,"std::complex< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector___setitem",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("complex_float_vector___setitem",3,SWIGTYPE_p_std__complexT_float_t);
  }
  arg3 = *argp3;
  
  std_vector_Sl_std_complex_Sl_float_Sg__Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::complex< float > > > result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::begin",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_begin",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = std_vector_Sl_std_complex_Sl_float_Sg__Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< std::complex< float > > * resultptr = new std::vector_iterator< std::complex< float > >((const std::vector_iterator< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::complex< float > > > result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::end",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_c_end",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = std_vector_Sl_std_complex_Sl_float_Sg__Sg__end__SWIG(arg1);
  {
    std::vector_iterator< std::complex< float > > * resultptr = new std::vector_iterator< std::complex< float > >((const std::vector_iterator< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::erase",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_erase",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_std_complex_Sl_float_Sg__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::erase",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< std::complex< float > >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_erase",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_std_complex_Sl_float_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex_float_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_complex_float_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_float_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< float > >::erase(size_t)\n"
    "    std::vector< std::complex< float > >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_float_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::front",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_front",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (std::complex< float > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::back",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_back",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (std::complex< float > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::push_back",1,"std::vector< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::push_back",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_push_back",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("complex_float_vector_push_back",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  (arg1)->push_back((std::complex< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::pop_back",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_pop_back",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::at",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_at",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::complex< float > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > *arg3 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::assign",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< float > >::assign",3,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_assign",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("complex_float_vector_assign",3,SWIGTYPE_p_std__complexT_float_t);
  }
  
  (arg1)->assign(arg2,(std::complex< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::data",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_data",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (std::complex< float > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::size",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_size",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::empty",1,"std::vector< std::complex< float > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_empty",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (bool)((std::vector< std::complex< float > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::resize",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_resize",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::clear",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_clear",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::vector< std::complex< float > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::swap",1,"std::vector< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::swap",2,"std::vector< std::complex< float > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_swap",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_swap",2,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::shrink_to_fit",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::reserve",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_reserve",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::max_size",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_max_size",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::capacity",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_capacity",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_complex_float_vector(void *obj) {
std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_complex_float_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_complex_float_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_complex_float_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_complex_float_vector_methods[]= {
    { "__getitem", _wrap_complex_float_vector___getitem},
    { "__setitem", _wrap_complex_float_vector___setitem},
    { "begin", _wrap_complex_float_vector_begin},
    { "c_end", _wrap_complex_float_vector_c_end},
    { "erase", _wrap_complex_float_vector_erase},
    { "front", _wrap_complex_float_vector_front},
    { "back", _wrap_complex_float_vector_back},
    { "push_back", _wrap_complex_float_vector_push_back},
    { "pop_back", _wrap_complex_float_vector_pop_back},
    { "at", _wrap_complex_float_vector_at},
    { "assign", _wrap_complex_float_vector_assign},
    { "data", _wrap_complex_float_vector_data},
    { "size", _wrap_complex_float_vector_size},
    { "empty", _wrap_complex_float_vector_empty},
    { "resize", _wrap_complex_float_vector_resize},
    { "clear", _wrap_complex_float_vector_clear},
    { "swap", _wrap_complex_float_vector_swap},
    { "shrink_to_fit", _wrap_complex_float_vector_shrink_to_fit},
    { "reserve", _wrap_complex_float_vector_reserve},
    { "max_size", _wrap_complex_float_vector_max_size},
    { "capacity", _wrap_complex_float_vector_capacity},
    {0,0}
};
static swig_lua_method swig_complex_float_vector_meta[] = {
    { "__getitem", _wrap_complex_float_vector___getitem},
    { "__setitem", _wrap_complex_float_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_complex_float_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_complex_float_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_complex_float_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_complex_float_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_complex_float_vector_Sf_SwigStatic = {
    "complex_float_vector",
    swig_complex_float_vector_Sf_SwigStatic_methods,
    swig_complex_float_vector_Sf_SwigStatic_attributes,
    swig_complex_float_vector_Sf_SwigStatic_constants,
    swig_complex_float_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_complex_float_vector_bases[] = {0};
static const char *swig_complex_float_vector_base_names[] = {0};
static swig_lua_class _wrap_class_complex_float_vector = { "complex_float_vector", "complex_float_vector", &SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,_proxy__wrap_new_complex_float_vector, swig_delete_complex_float_vector, swig_complex_float_vector_methods, swig_complex_float_vector_attributes, &swig_complex_float_vector_Sf_SwigStatic, swig_complex_float_vector_meta, swig_complex_float_vector_bases, swig_complex_float_vector_base_names };

static int _wrap_new_complex_double_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::complex< double > *arg2 = 0 ;
  std::vector< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::vector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::vector",2,"std::complex< double > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_complex_double_vector",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (std::vector< std::complex< double > > *)new std::vector< std::complex< double > >(arg1,(std::complex< double > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_double_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< std::complex< double > > *)new std::vector< std::complex< double > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_double_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = 0 ;
  std::vector< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::vector",1,"std::vector< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("new_complex_double_vector",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (std::vector< std::complex< double > > *)new std::vector< std::complex< double > >((std::vector< std::complex< double > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_double_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_complex_double_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_complex_double_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_complex_double_vector__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_complex_double_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< double > >::vector(size_t,std::complex< double > const &)\n"
    "    std::vector< std::complex< double > >::vector(size_t)\n"
    "    std::vector< std::complex< double > >::vector(std::vector< std::complex< double > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_double_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::__getitem",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector___getitem",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = std_vector_Sl_std_complex_Sl_double_Sg__Sg____getitem__SWIG(arg1,arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > arg3 ;
  std::complex< double > *argp3 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::__setitem",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< double > >::__setitem",3,"std::complex< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector___setitem",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_double_vector___setitem",3,SWIGTYPE_p_std__complexT_double_t);
  }
  arg3 = *argp3;
  
  std_vector_Sl_std_complex_Sl_double_Sg__Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::complex< double > > > result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::begin",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_begin",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = std_vector_Sl_std_complex_Sl_double_Sg__Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< std::complex< double > > * resultptr = new std::vector_iterator< std::complex< double > >((const std::vector_iterator< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::complex< double > > > result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::end",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_c_end",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = std_vector_Sl_std_complex_Sl_double_Sg__Sg__end__SWIG(arg1);
  {
    std::vector_iterator< std::complex< double > > * resultptr = new std::vector_iterator< std::complex< double > >((const std::vector_iterator< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::erase",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_erase",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_std_complex_Sl_double_Sg__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::erase",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< std::complex< double > >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_erase",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_std_complex_Sl_double_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex_double_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_complex_double_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_double_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< double > >::erase(size_t)\n"
    "    std::vector< std::complex< double > >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_double_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::front",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_front",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (std::complex< double > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::back",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_back",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (std::complex< double > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::push_back",1,"std::vector< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::push_back",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_push_back",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_double_vector_push_back",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->push_back((std::complex< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::pop_back",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_pop_back",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::at",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_at",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::complex< double > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > *arg3 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::assign",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< double > >::assign",3,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_assign",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_double_vector_assign",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->assign(arg2,(std::complex< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::data",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_data",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (std::complex< double > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::size",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_size",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::empty",1,"std::vector< std::complex< double > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_empty",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (bool)((std::vector< std::complex< double > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::resize",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_resize",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::clear",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_clear",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::vector< std::complex< double > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::swap",1,"std::vector< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::swap",2,"std::vector< std::complex< double > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_swap",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_swap",2,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::shrink_to_fit",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::reserve",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_reserve",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::max_size",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_max_size",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::capacity",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_capacity",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_complex_double_vector(void *obj) {
std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_complex_double_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_complex_double_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_complex_double_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_complex_double_vector_methods[]= {
    { "__getitem", _wrap_complex_double_vector___getitem},
    { "__setitem", _wrap_complex_double_vector___setitem},
    { "begin", _wrap_complex_double_vector_begin},
    { "c_end", _wrap_complex_double_vector_c_end},
    { "erase", _wrap_complex_double_vector_erase},
    { "front", _wrap_complex_double_vector_front},
    { "back", _wrap_complex_double_vector_back},
    { "push_back", _wrap_complex_double_vector_push_back},
    { "pop_back", _wrap_complex_double_vector_pop_back},
    { "at", _wrap_complex_double_vector_at},
    { "assign", _wrap_complex_double_vector_assign},
    { "data", _wrap_complex_double_vector_data},
    { "size", _wrap_complex_double_vector_size},
    { "empty", _wrap_complex_double_vector_empty},
    { "resize", _wrap_complex_double_vector_resize},
    { "clear", _wrap_complex_double_vector_clear},
    { "swap", _wrap_complex_double_vector_swap},
    { "shrink_to_fit", _wrap_complex_double_vector_shrink_to_fit},
    { "reserve", _wrap_complex_double_vector_reserve},
    { "max_size", _wrap_complex_double_vector_max_size},
    { "capacity", _wrap_complex_double_vector_capacity},
    {0,0}
};
static swig_lua_method swig_complex_double_vector_meta[] = {
    { "__getitem", _wrap_complex_double_vector___getitem},
    { "__setitem", _wrap_complex_double_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_complex_double_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_complex_double_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_complex_double_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_complex_double_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_complex_double_vector_Sf_SwigStatic = {
    "complex_double_vector",
    swig_complex_double_vector_Sf_SwigStatic_methods,
    swig_complex_double_vector_Sf_SwigStatic_attributes,
    swig_complex_double_vector_Sf_SwigStatic_constants,
    swig_complex_double_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_complex_double_vector_bases[] = {0};
static const char *swig_complex_double_vector_base_names[] = {0};
static swig_lua_class _wrap_class_complex_double_vector = { "complex_double_vector", "complex_double_vector", &SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,_proxy__wrap_new_complex_double_vector, swig_delete_complex_double_vector, swig_complex_double_vector_methods, swig_complex_double_vector_attributes, &swig_complex_double_vector_Sf_SwigStatic, swig_complex_double_vector_meta, swig_complex_double_vector_bases, swig_complex_double_vector_base_names };

static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "GUI_Q_MIN", _wrap_GUI_Q_MIN_get, SWIG_Lua_set_immutable },
    { "GUI_Q_MAX", _wrap_GUI_Q_MAX_get, SWIG_Lua_set_immutable },
    { "SVF_Q_SLOPE", _wrap_SVF_Q_SLOPE_get, SWIG_Lua_set_immutable },
    { "KORG35_Q_SLOPE", _wrap_KORG35_Q_SLOPE_get, SWIG_Lua_set_immutable },
    { "MOOG_Q_SLOPE", _wrap_MOOG_Q_SLOPE_get, SWIG_Lua_set_immutable },
    { "DIODE_Q_SLOPE", _wrap_DIODE_Q_SLOPE_get, SWIG_Lua_set_immutable },
    { "HSYNC_MOD_SLOPE", _wrap_HSYNC_MOD_SLOPE_get, SWIG_Lua_set_immutable },
    { "kDefaultWaveTableLength", _wrap_kDefaultWaveTableLength_get, SWIG_Lua_set_immutable },
    { "MAX_VOICES", _wrap_MAX_VOICES_get, SWIG_Lua_set_immutable },
    { "MAX_SYNTH_CHANNELS", _wrap_MAX_SYNTH_CHANNELS_get, SWIG_Lua_set_immutable },
    { "MAX_OSC_CHANNELS", _wrap_MAX_OSC_CHANNELS_get, SWIG_Lua_set_immutable },
    { "MAX_PROCESSOR_CHANNELS", _wrap_MAX_PROCESSOR_CHANNELS_get, SWIG_Lua_set_immutable },
    { "MAX_MODULATION_CHANNELS", _wrap_MAX_MODULATION_CHANNELS_get, SWIG_Lua_set_immutable },
    { "PITCHLESS_LOOP", _wrap_PITCHLESS_LOOP_get, SWIG_Lua_set_immutable },
    { "AUBIO_SLICES", _wrap_AUBIO_SLICES_get, SWIG_Lua_set_immutable },
    { "NO_CHANNELS", _wrap_NO_CHANNELS_get, SWIG_Lua_set_immutable },
    { "MAX_SEQ_STEPS", _wrap_MAX_SEQ_STEPS_get, SWIG_Lua_set_immutable },
    { "MAX_SEQ_STEPSPLUS_OFF", _wrap_MAX_SEQ_STEPSPLUS_OFF_get, SWIG_Lua_set_immutable },
    { "WRAP_MASK", _wrap_WRAP_MASK_get, SWIG_Lua_set_immutable },
    { "NUM_OSC", _wrap_NUM_OSC_get, SWIG_Lua_set_immutable },
    { "NUM_LFO", _wrap_NUM_LFO_get, SWIG_Lua_set_immutable },
    { "NUM_FILTER", _wrap_NUM_FILTER_get, SWIG_Lua_set_immutable },
    { "NUM_EG", _wrap_NUM_EG_get, SWIG_Lua_set_immutable },
    { "NUM_WS_OSCILLATORS", _wrap_NUM_WS_OSCILLATORS_get, SWIG_Lua_set_immutable },
    { "NUM_OSCILLATORS", _wrap_NUM_OSCILLATORS_get, SWIG_Lua_set_immutable },
    { "SHUTDOWN_TIME_MSEC", _wrap_SHUTDOWN_TIME_MSEC_get, SWIG_Lua_set_immutable },
    { "UNDEFINED_MODULE", _wrap_UNDEFINED_MODULE_get, SWIG_Lua_set_immutable },
    { "LFO_MODULE", _wrap_LFO_MODULE_get, SWIG_Lua_set_immutable },
    { "EG_MODULE", _wrap_EG_MODULE_get, SWIG_Lua_set_immutable },
    { "DCA_MODULE", _wrap_DCA_MODULE_get, SWIG_Lua_set_immutable },
    { "FILTER_MODULE", _wrap_FILTER_MODULE_get, SWIG_Lua_set_immutable },
    { "WTO_MODULE", _wrap_WTO_MODULE_get, SWIG_Lua_set_immutable },
    { "VAO_MODULE", _wrap_VAO_MODULE_get, SWIG_Lua_set_immutable },
    { "FMO_MODULE", _wrap_FMO_MODULE_get, SWIG_Lua_set_immutable },
    { "PCMO_MODULE", _wrap_PCMO_MODULE_get, SWIG_Lua_set_immutable },
    { "KSO_MODULE", _wrap_KSO_MODULE_get, SWIG_Lua_set_immutable },
    { "OSC_MODULE", _wrap_OSC_MODULE_get, SWIG_Lua_set_immutable },
    { "MODULE_STRINGS", _wrap_MODULE_STRINGS_get, SWIG_Lua_set_immutable },
    { "HALF_LEGACY_STRINGS", _wrap_HALF_LEGACY_STRINGS_get, SWIG_Lua_set_immutable },
    { "HALF_MELLOTRON_STRINGS", _wrap_HALF_MELLOTRON_STRINGS_get, SWIG_Lua_set_immutable },
    { "WTBANK_SOURCES", _wrap_WTBANK_SOURCES_get, SWIG_Lua_set_immutable },
    { "SMPLBANK_SOURCES", _wrap_SMPLBANK_SOURCES_get, SWIG_Lua_set_immutable },
    { "MOD_KNOBS", _wrap_MOD_KNOBS_get, SWIG_Lua_set_immutable },
    { "NUM_MODULE_CORES", _wrap_NUM_MODULE_CORES_get, SWIG_Lua_set_immutable },
    { "DEFAULT_CORE", _wrap_DEFAULT_CORE_get, SWIG_Lua_set_immutable },
    { "CUSTOM_CORE_0", _wrap_CUSTOM_CORE_0_get, SWIG_Lua_set_immutable },
    { "CUSTOM_CORE_1", _wrap_CUSTOM_CORE_1_get, SWIG_Lua_set_immutable },
    { "CUSTOM_CORE_2", _wrap_CUSTOM_CORE_2_get, SWIG_Lua_set_immutable },
    { "LFO1_WAVEFORMS", _wrap_LFO1_WAVEFORMS_get, SWIG_Lua_set_immutable },
    { "LFO2_WAVEFORMS", _wrap_LFO2_WAVEFORMS_get, SWIG_Lua_set_immutable },
    { "OSC1_WAVEFORMS", _wrap_OSC1_WAVEFORMS_get, SWIG_Lua_set_immutable },
    { "OSC2_WAVEFORMS", _wrap_OSC2_WAVEFORMS_get, SWIG_Lua_set_immutable },
    { "OSC3_WAVEFORMS", _wrap_OSC3_WAVEFORMS_get, SWIG_Lua_set_immutable },
    { "OSC4_WAVEFORMS", _wrap_OSC4_WAVEFORMS_get, SWIG_Lua_set_immutable },
    { "EG1_CONTOUR", _wrap_EG1_CONTOUR_get, SWIG_Lua_set_immutable },
    { "EG2_CONTOUR", _wrap_EG2_CONTOUR_get, SWIG_Lua_set_immutable },
    { "EG3_CONTOUR", _wrap_EG3_CONTOUR_get, SWIG_Lua_set_immutable },
    { "FILTER1_TYPES", _wrap_FILTER1_TYPES_get, SWIG_Lua_set_immutable },
    { "FILTER2_TYPES", _wrap_FILTER2_TYPES_get, SWIG_Lua_set_immutable },
    { "LFO1_SOURCE", _wrap_LFO1_SOURCE_get, SWIG_Lua_set_immutable },
    { "LFO2_SOURCE", _wrap_LFO2_SOURCE_get, SWIG_Lua_set_immutable },
    { "OSC1_SOURCE", _wrap_OSC1_SOURCE_get, SWIG_Lua_set_immutable },
    { "OSC2_SOURCE", _wrap_OSC2_SOURCE_get, SWIG_Lua_set_immutable },
    { "OSC3_SOURCE", _wrap_OSC3_SOURCE_get, SWIG_Lua_set_immutable },
    { "OSC4_SOURCE", _wrap_OSC4_SOURCE_get, SWIG_Lua_set_immutable },
    { "EG1_SOURCE", _wrap_EG1_SOURCE_get, SWIG_Lua_set_immutable },
    { "EG2_SOURCE", _wrap_EG2_SOURCE_get, SWIG_Lua_set_immutable },
    { "EG3_SOURCE", _wrap_EG3_SOURCE_get, SWIG_Lua_set_immutable },
    { "FILTER1_SOURCE", _wrap_FILTER1_SOURCE_get, SWIG_Lua_set_immutable },
    { "FILTER2_SOURCE", _wrap_FILTER2_SOURCE_get, SWIG_Lua_set_immutable },
    { "WAVE_SEQ_WAVES_1", _wrap_WAVE_SEQ_WAVES_1_get, SWIG_Lua_set_immutable },
    { "WAVE_SEQ_WAVES_2", _wrap_WAVE_SEQ_WAVES_2_get, SWIG_Lua_set_immutable },
    { "WAVE_SEQ_WAVES_3", _wrap_WAVE_SEQ_WAVES_3_get, SWIG_Lua_set_immutable },
    { "WAVE_SEQ_WAVES_4", _wrap_WAVE_SEQ_WAVES_4_get, SWIG_Lua_set_immutable },
    { "WAVE_SEQ_WAVES_5", _wrap_WAVE_SEQ_WAVES_5_get, SWIG_Lua_set_immutable },
    { "WAVE_SEQ_WAVES_6", _wrap_WAVE_SEQ_WAVES_6_get, SWIG_Lua_set_immutable },
    { "WAVE_SEQ_WAVES_7", _wrap_WAVE_SEQ_WAVES_7_get, SWIG_Lua_set_immutable },
    { "WAVE_SEQ_WAVES_8", _wrap_WAVE_SEQ_WAVES_8_get, SWIG_Lua_set_immutable },
    { "empty_string", _wrap_empty_string_get, SWIG_Lua_set_immutable },
    { "LFO1_MOD_KNOBS", _wrap_LFO1_MOD_KNOBS_get, SWIG_Lua_set_immutable },
    { "LFO2_MOD_KNOBS", _wrap_LFO2_MOD_KNOBS_get, SWIG_Lua_set_immutable },
    { "OSC1_MOD_KNOBS", _wrap_OSC1_MOD_KNOBS_get, SWIG_Lua_set_immutable },
    { "OSC2_MOD_KNOBS", _wrap_OSC2_MOD_KNOBS_get, SWIG_Lua_set_immutable },
    { "OSC3_MOD_KNOBS", _wrap_OSC3_MOD_KNOBS_get, SWIG_Lua_set_immutable },
    { "OSC4_MOD_KNOBS", _wrap_OSC4_MOD_KNOBS_get, SWIG_Lua_set_immutable },
    { "EG1_MOD_KNOBS", _wrap_EG1_MOD_KNOBS_get, SWIG_Lua_set_immutable },
    { "EG2_MOD_KNOBS", _wrap_EG2_MOD_KNOBS_get, SWIG_Lua_set_immutable },
    { "EG3_MOD_KNOBS", _wrap_EG3_MOD_KNOBS_get, SWIG_Lua_set_immutable },
    { "FILTER1_MOD_KNOBS", _wrap_FILTER1_MOD_KNOBS_get, SWIG_Lua_set_immutable },
    { "FILTER2_MOD_KNOBS", _wrap_FILTER2_MOD_KNOBS_get, SWIG_Lua_set_immutable },
    { "sin_1024", _wrap_sin_1024_get, _wrap_sin_1024_set },
    { "DEFAULT_LUT_LENGTH", _wrap_DEFAULT_LUT_LENGTH_get, SWIG_Lua_set_immutable },
    { "DEFAULT_LUT_WRAP_MASK", _wrap_DEFAULT_LUT_WRAP_MASK_get, SWIG_Lua_set_immutable },
    { "kMinModGain_dB", _wrap_kMinModGain_dB_get, SWIG_Lua_set_immutable },
    { "kMaxModGain_dB", _wrap_kMaxModGain_dB_get, SWIG_Lua_set_immutable },
    { "kMinAbsoluteGain_dB", _wrap_kMinAbsoluteGain_dB_get, SWIG_Lua_set_immutable },
    { "kDCA_Amp_ModRange", _wrap_kDCA_Amp_ModRange_get, SWIG_Lua_set_immutable },
    { "kDCA_Pan_ModRange", _wrap_kDCA_Pan_ModRange_get, SWIG_Lua_set_immutable },
    { "kOscBipolarModRangeSemitones", _wrap_kOscBipolarModRangeSemitones_get, SWIG_Lua_set_immutable },
    { "kSqrtTwo", _wrap_kSqrtTwo_get, SWIG_Lua_set_immutable },
    { "kPi", _wrap_kPi_get, SWIG_Lua_set_immutable },
    { "kTwoPi", _wrap_kTwoPi_get, SWIG_Lua_set_immutable },
    { "sineTableLength", _wrap_sineTableLength_get, SWIG_Lua_set_immutable },
    { "sinetable", _wrap_sinetable_get, _wrap_sinetable_set },
    { "costable", _wrap_costable_get, _wrap_costable_set },
    { "kPiSqared", _wrap_kPiSqared_get, SWIG_Lua_set_immutable },
    { "kFourPi", _wrap_kFourPi_get, SWIG_Lua_set_immutable },
    { "kPiOverFour", _wrap_kPiOverFour_get, SWIG_Lua_set_immutable },
    { "kNumMIDICCs", _wrap_kNumMIDICCs_get, SWIG_Lua_set_immutable },
    { "NOTE_OFF", _wrap_NOTE_OFF_get, SWIG_Lua_set_immutable },
    { "NOTE_ON", _wrap_NOTE_ON_get, SWIG_Lua_set_immutable },
    { "POLY_PRESSURE", _wrap_POLY_PRESSURE_get, SWIG_Lua_set_immutable },
    { "CONTROL_CHANGE", _wrap_CONTROL_CHANGE_get, SWIG_Lua_set_immutable },
    { "PROGRAM_CHANGE", _wrap_PROGRAM_CHANGE_get, SWIG_Lua_set_immutable },
    { "CHANNEL_PRESSURE", _wrap_CHANNEL_PRESSURE_get, SWIG_Lua_set_immutable },
    { "PITCH_BEND", _wrap_PITCH_BEND_get, SWIG_Lua_set_immutable },
    { "MOD_WHEEL", _wrap_MOD_WHEEL_get, SWIG_Lua_set_immutable },
    { "VOLUME_CC07", _wrap_VOLUME_CC07_get, SWIG_Lua_set_immutable },
    { "PAN_CC10", _wrap_PAN_CC10_get, SWIG_Lua_set_immutable },
    { "EXPRESSION_CC11", _wrap_EXPRESSION_CC11_get, SWIG_Lua_set_immutable },
    { "JOYSTICK_X", _wrap_JOYSTICK_X_get, SWIG_Lua_set_immutable },
    { "JOYSTICK_Y", _wrap_JOYSTICK_Y_get, SWIG_Lua_set_immutable },
    { "SUSTAIN_PEDAL", _wrap_SUSTAIN_PEDAL_get, SWIG_Lua_set_immutable },
    { "RESET_ALL_CONTROLLERS", _wrap_RESET_ALL_CONTROLLERS_get, SWIG_Lua_set_immutable },
    { "ALL_NOTES_OFF", _wrap_ALL_NOTES_OFF_get, SWIG_Lua_set_immutable },
    { "SYSTEM_EXCLUSIVE", _wrap_SYSTEM_EXCLUSIVE_get, SWIG_Lua_set_immutable },
    { "MIDI_TIME_CODE", _wrap_MIDI_TIME_CODE_get, SWIG_Lua_set_immutable },
    { "SONG_POSITION_POINTER", _wrap_SONG_POSITION_POINTER_get, SWIG_Lua_set_immutable },
    { "SONG_SELECT", _wrap_SONG_SELECT_get, SWIG_Lua_set_immutable },
    { "TUNE_REQUEST", _wrap_TUNE_REQUEST_get, SWIG_Lua_set_immutable },
    { "END_OF_EXCLUSIVE", _wrap_END_OF_EXCLUSIVE_get, SWIG_Lua_set_immutable },
    { "TIMING_CLOCK", _wrap_TIMING_CLOCK_get, SWIG_Lua_set_immutable },
    { "START", _wrap_START_get, SWIG_Lua_set_immutable },
    { "CONTINUE", _wrap_CONTINUE_get, SWIG_Lua_set_immutable },
    { "SToP", _wrap_SToP_get, SWIG_Lua_set_immutable },
    { "ACTIVE_SENSING", _wrap_ACTIVE_SENSING_get, SWIG_Lua_set_immutable },
    { "SYSTEM_RESET", _wrap_SYSTEM_RESET_get, SWIG_Lua_set_immutable },
    { "NUM_MIDI_NOTES", _wrap_NUM_MIDI_NOTES_get, SWIG_Lua_set_immutable },
    { "MIDI_NOTE_A0", _wrap_MIDI_NOTE_A0_get, SWIG_Lua_set_immutable },
    { "MIDI_NOTE_A4", _wrap_MIDI_NOTE_A4_get, SWIG_Lua_set_immutable },
    { "MIDI_NOTE_0_FREQ", _wrap_MIDI_NOTE_0_FREQ_get, SWIG_Lua_set_immutable },
    { "kCTCoefficient", _wrap_kCTCoefficient_get, SWIG_Lua_set_immutable },
    { "kCTCorrFactorZero", _wrap_kCTCorrFactorZero_get, SWIG_Lua_set_immutable },
    { "kCTCorrFactorAnitZero", _wrap_kCTCorrFactorAnitZero_get, SWIG_Lua_set_immutable },
    { "kCTCorrFactorUnity", _wrap_kCTCorrFactorUnity_get, SWIG_Lua_set_immutable },
    { "kCTCorrFactorAntiUnity", _wrap_kCTCorrFactorAntiUnity_get, SWIG_Lua_set_immutable },
    { "kCTCorrFactorAntiLog", _wrap_kCTCorrFactorAntiLog_get, SWIG_Lua_set_immutable },
    { "kCTCorrFactorAntiLogScale", _wrap_kCTCorrFactorAntiLogScale_get, SWIG_Lua_set_immutable },
    { "pdSlope", _wrap_pdSlope_get, SWIG_Lua_set_immutable },
    { "noteDurationTable", _wrap_noteDurationTable_get, SWIG_Lua_set_immutable },
    { "D", _wrap_D_get, SWIG_Lua_set_immutable },
    { "B", _wrap_B_get, SWIG_Lua_set_immutable },
    { "C", _wrap_C_get, SWIG_Lua_set_immutable },
    { "P", _wrap_P_get, SWIG_Lua_set_immutable },
    { "xformLUTLen", _wrap_xformLUTLen_get, _wrap_xformLUTLen_set },
    { "concaveLUT", _wrap_concaveLUT_get, _wrap_concaveLUT_set },
    { "reverseconcaveLUT", _wrap_reverseconcaveLUT_get, _wrap_reverseconcaveLUT_set },
    { "convexLUT", _wrap_convexLUT_get, _wrap_convexLUT_set },
    { "reverseconvexLUT", _wrap_reverseconvexLUT_get, _wrap_reverseconvexLUT_set },
    { "MONO_INPUT", _wrap_MONO_INPUT_get, SWIG_Lua_set_immutable },
    { "MONO_OUTPUT", _wrap_MONO_OUTPUT_get, SWIG_Lua_set_immutable },
    { "STEREO_INPUTS", _wrap_STEREO_INPUTS_get, SWIG_Lua_set_immutable },
    { "STEREO_OUTPUTS", _wrap_STEREO_OUTPUTS_get, SWIG_Lua_set_immutable },
    { "OSC_FMIN", _wrap_OSC_FMIN_get, SWIG_Lua_set_immutable },
    { "OSC_FMAX", _wrap_OSC_FMAX_get, SWIG_Lua_set_immutable },
    { "OSC_INPUTS", _wrap_OSC_INPUTS_get, SWIG_Lua_set_immutable },
    { "OSC_OUTPUTS", _wrap_OSC_OUTPUTS_get, SWIG_Lua_set_immutable },
    { "WT_OSC_MIN", _wrap_WT_OSC_MIN_get, SWIG_Lua_set_immutable },
    { "WT_OSC_MAX", _wrap_WT_OSC_MAX_get, SWIG_Lua_set_immutable },
    { "WT_OSC_INPUTS", _wrap_WT_OSC_INPUTS_get, SWIG_Lua_set_immutable },
    { "WT_OSC_OUTPUTS", _wrap_WT_OSC_OUTPUTS_get, SWIG_Lua_set_immutable },
    { "VA_OSC_MIN", _wrap_VA_OSC_MIN_get, SWIG_Lua_set_immutable },
    { "VA_OSC_MAX", _wrap_VA_OSC_MAX_get, SWIG_Lua_set_immutable },
    { "VA_OSC_INPUTS", _wrap_VA_OSC_INPUTS_get, SWIG_Lua_set_immutable },
    { "VA_OSC_OUTPUTS", _wrap_VA_OSC_OUTPUTS_get, SWIG_Lua_set_immutable },
    { "VA_MIN_PW", _wrap_VA_MIN_PW_get, SWIG_Lua_set_immutable },
    { "VA_MAX_PW", _wrap_VA_MAX_PW_get, SWIG_Lua_set_immutable },
    { "PW_MOD_RANGE", _wrap_PW_MOD_RANGE_get, SWIG_Lua_set_immutable },
    { "HALF_PW_MOD_RANGE", _wrap_HALF_PW_MOD_RANGE_get, SWIG_Lua_set_immutable },
    { "PCM_OSC_MIN", _wrap_PCM_OSC_MIN_get, SWIG_Lua_set_immutable },
    { "PCM_OSC_MAX", _wrap_PCM_OSC_MAX_get, SWIG_Lua_set_immutable },
    { "SMPL_OSC_INPUTS", _wrap_SMPL_OSC_INPUTS_get, SWIG_Lua_set_immutable },
    { "SMPL_OSC_OUTPUTS", _wrap_SMPL_OSC_OUTPUTS_get, SWIG_Lua_set_immutable },
    { "KS_OSC_MIN", _wrap_KS_OSC_MIN_get, SWIG_Lua_set_immutable },
    { "KS_OSC_MAX", _wrap_KS_OSC_MAX_get, SWIG_Lua_set_immutable },
    { "KS_OSC_INPUTS", _wrap_KS_OSC_INPUTS_get, SWIG_Lua_set_immutable },
    { "KS_OSC_OUTPUTS", _wrap_KS_OSC_OUTPUTS_get, SWIG_Lua_set_immutable },
    { "MAX_KSO_ATTACK_MSEC", _wrap_MAX_KSO_ATTACK_MSEC_get, SWIG_Lua_set_immutable },
    { "MAX_KSO_HOLD_MSEC", _wrap_MAX_KSO_HOLD_MSEC_get, SWIG_Lua_set_immutable },
    { "MAX_KSO_RELEASE_MSEC", _wrap_MAX_KSO_RELEASE_MSEC_get, SWIG_Lua_set_immutable },
    { "NOISE_OSC_INPUTS", _wrap_NOISE_OSC_INPUTS_get, SWIG_Lua_set_immutable },
    { "NOISE_OSC_OUTPUTS", _wrap_NOISE_OSC_OUTPUTS_get, SWIG_Lua_set_immutable },
    { "freqModLow", _wrap_freqModLow_get, SWIG_Lua_set_immutable },
    { "freqModHigh", _wrap_freqModHigh_get, SWIG_Lua_set_immutable },
    { "freqModSemitoneRange", _wrap_freqModSemitoneRange_get, SWIG_Lua_set_immutable },
    { "FILTER_AUDIO_INPUTS", _wrap_FILTER_AUDIO_INPUTS_get, SWIG_Lua_set_immutable },
    { "FILTER_AUDIO_OUTPUTS", _wrap_FILTER_AUDIO_OUTPUTS_get, SWIG_Lua_set_immutable },
    { "MOOG_SUBFILTERS", _wrap_MOOG_SUBFILTERS_get, SWIG_Lua_set_immutable },
    { "DIODE_SUBFILTERS", _wrap_DIODE_SUBFILTERS_get, SWIG_Lua_set_immutable },
    { "KORG_SUBFILTERS", _wrap_KORG_SUBFILTERS_get, SWIG_Lua_set_immutable },
    { "MAX_EG_VALUE", _wrap_MAX_EG_VALUE_get, SWIG_Lua_set_immutable },
    { "FM_OSC_MIN", _wrap_FM_OSC_MIN_get, SWIG_Lua_set_immutable },
    { "FM_OSC_MAX", _wrap_FM_OSC_MAX_get, SWIG_Lua_set_immutable },
    { "FM_OSC_INPUTS", _wrap_FM_OSC_INPUTS_get, SWIG_Lua_set_immutable },
    { "FM_OSC_OUTPUTS", _wrap_FM_OSC_OUTPUTS_get, SWIG_Lua_set_immutable },
    { "DCA_AUDIO_INPUTS", _wrap_DCA_AUDIO_INPUTS_get, SWIG_Lua_set_immutable },
    { "DCA_AUDIO_OUTPUTS", _wrap_DCA_AUDIO_OUTPUTS_get, SWIG_Lua_set_immutable },
    { "LFO_FCMOD_MIN", _wrap_LFO_FCMOD_MIN_get, SWIG_Lua_set_immutable },
    { "LFO_FCMOD_MAX", _wrap_LFO_FCMOD_MAX_get, SWIG_Lua_set_immutable },
    { "LFO_RANGE", _wrap_LFO_RANGE_get, SWIG_Lua_set_immutable },
    { "LFO_HALF_RANGE", _wrap_LFO_HALF_RANGE_get, SWIG_Lua_set_immutable },
    { "MAX_LFO_DELAY_MSEC", _wrap_MAX_LFO_DELAY_MSEC_get, SWIG_Lua_set_immutable },
    { "MAX_LFO_FADEIN_MSEC", _wrap_MAX_LFO_FADEIN_MSEC_get, SWIG_Lua_set_immutable },
    { "NUM_FMLFO_OPS", _wrap_NUM_FMLFO_OPS_get, SWIG_Lua_set_immutable },
    { "DELAY_AUDIO_INPUTS", _wrap_DELAY_AUDIO_INPUTS_get, SWIG_Lua_set_immutable },
    { "DELAY_AUDIO_OUTPUTS", _wrap_DELAY_AUDIO_OUTPUTS_get, SWIG_Lua_set_immutable },
    { "dBLEPTable", _wrap_dBLEPTable_get, SWIG_Lua_set_immutable },
    { "dBLEPTable_8_RECT", _wrap_dBLEPTable_8_RECT_get, SWIG_Lua_set_immutable },
    { "dBLEPTable_8_TRI", _wrap_dBLEPTable_8_TRI_get, SWIG_Lua_set_immutable },
    { "dBLEPTable_8_HANN", _wrap_dBLEPTable_8_HANN_get, SWIG_Lua_set_immutable },
    { "dBLEPTable_8_HAMM", _wrap_dBLEPTable_8_HAMM_get, SWIG_Lua_set_immutable },
    { "dBLEPTable_8_BLK", _wrap_dBLEPTable_8_BLK_get, SWIG_Lua_set_immutable },
    { "dBLEPTable_8_BLKHAR", _wrap_dBLEPTable_8_BLKHAR_get, SWIG_Lua_set_immutable },
    { "dBLEPTable_8_WELCH", _wrap_dBLEPTable_8_WELCH_get, SWIG_Lua_set_immutable },
    { "MAX_WAVE_TABLES", _wrap_MAX_WAVE_TABLES_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("fe_divbyzero", FE_DIVBYZERO)},
    {SWIG_LUA_CONSTTAB_INT("fe_inexact", FE_INEXACT)},
    {SWIG_LUA_CONSTTAB_INT("fe_invalid", FE_INVALID)},
    {SWIG_LUA_CONSTTAB_INT("fe_overflow", FE_OVERFLOW)},
    {SWIG_LUA_CONSTTAB_INT("fe_underflow", FE_UNDERFLOW)},
    {SWIG_LUA_CONSTTAB_INT("fe_all_except", FE_ALL_EXCEPT)},
    {SWIG_LUA_CONSTTAB_INT("fe_downward", FE_DOWNWARD)},
    {SWIG_LUA_CONSTTAB_INT("fe_tonearest", FE_TONEAREST)},
    {SWIG_LUA_CONSTTAB_INT("fe_towardzero", FE_TOWARDZERO)},
    {SWIG_LUA_CONSTTAB_INT("fe_upward", FE_UPWARD)},
    {SWIG_LUA_CONSTTAB_INT("fe_dfl_env", FE_DFL_ENV)},
    {SWIG_LUA_CONSTTAB_INT("char_bit", CHAR_BIT)},
    {SWIG_LUA_CONSTTAB_INT("schar_min", SCHAR_MIN)},
    {SWIG_LUA_CONSTTAB_INT("schar_max", SCHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("uchar_max", UCHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("char_min", CHAR_MIN)},
    {SWIG_LUA_CONSTTAB_INT("char_max", CHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("mb_len_max", MB_LEN_MAX)},
    {SWIG_LUA_CONSTTAB_INT("shrt_min", SHRT_MIN)},
    {SWIG_LUA_CONSTTAB_INT("shrt_max", SHRT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ushrt_max", USHRT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("int_min", INT_MIN)},
    {SWIG_LUA_CONSTTAB_INT("int_max", INT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("uint_max", UINT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("long_min", LONG_MIN)},
    {SWIG_LUA_CONSTTAB_INT("long_max", LONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ulong_max", ULONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("llong_min", LLONG_MIN)},
    {SWIG_LUA_CONSTTAB_INT("llong_max", LLONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ullong_max", ULLONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("SynthClock_MOD_COUNTER", SynthLab::SynthClock::MOD_COUNTER)},
    {SWIG_LUA_CONSTTAB_INT("SynthClock_PHASE_INC", SynthLab::SynthClock::PHASE_INC)},
    {SWIG_LUA_CONSTTAB_INT("SynthClock_PHASE_OFFSET", SynthLab::SynthClock::PHASE_OFFSET)},
    {SWIG_LUA_CONSTTAB_INT("SynthClock_FREQUENCY_HZ", SynthLab::SynthClock::FREQUENCY_HZ)},
    {SWIG_LUA_CONSTTAB_INT("SynthClock_NUM_VARS", SynthLab::SynthClock::NUM_VARS)},
    {SWIG_LUA_CONSTTAB_INT("SampleLoopMode_loop", SynthLab::SampleLoopMode::loop)},
    {SWIG_LUA_CONSTTAB_INT("SampleLoopMode_sustain", SynthLab::SampleLoopMode::sustain)},
    {SWIG_LUA_CONSTTAB_INT("SampleLoopMode_oneShot", SynthLab::SampleLoopMode::oneShot)},
    {SWIG_LUA_CONSTTAB_INT("LPF1", SynthLab::LPF1)},
    {SWIG_LUA_CONSTTAB_INT("LPF2", SynthLab::LPF2)},
    {SWIG_LUA_CONSTTAB_INT("LPF3", SynthLab::LPF3)},
    {SWIG_LUA_CONSTTAB_INT("LPF4", SynthLab::LPF4)},
    {SWIG_LUA_CONSTTAB_INT("HPF1", SynthLab::HPF1)},
    {SWIG_LUA_CONSTTAB_INT("HPF2", SynthLab::HPF2)},
    {SWIG_LUA_CONSTTAB_INT("HPF3", SynthLab::HPF3)},
    {SWIG_LUA_CONSTTAB_INT("HPF4", SynthLab::HPF4)},
    {SWIG_LUA_CONSTTAB_INT("BPF2", SynthLab::BPF2)},
    {SWIG_LUA_CONSTTAB_INT("BPF4", SynthLab::BPF4)},
    {SWIG_LUA_CONSTTAB_INT("BSF2", SynthLab::BSF2)},
    {SWIG_LUA_CONSTTAB_INT("BSF4", SynthLab::BSF4)},
    {SWIG_LUA_CONSTTAB_INT("APF1", SynthLab::APF1)},
    {SWIG_LUA_CONSTTAB_INT("APF2", SynthLab::APF2)},
    {SWIG_LUA_CONSTTAB_INT("ANM_LPF1", SynthLab::ANM_LPF1)},
    {SWIG_LUA_CONSTTAB_INT("ANM_LPF2", SynthLab::ANM_LPF2)},
    {SWIG_LUA_CONSTTAB_INT("ANM_LPF3", SynthLab::ANM_LPF3)},
    {SWIG_LUA_CONSTTAB_INT("ANM_LPF4", SynthLab::ANM_LPF4)},
    {SWIG_LUA_CONSTTAB_INT("NUM_FILTER_OUTPUTS", SynthLab::NUM_FILTER_OUTPUTS)},
    {SWIG_LUA_CONSTTAB_INT("PluckFilterType_kPluck", SynthLab::PluckFilterType::kPluck)},
    {SWIG_LUA_CONSTTAB_INT("PluckFilterType_kPluckAndBridge", SynthLab::PluckFilterType::kPluckAndBridge)},
    {SWIG_LUA_CONSTTAB_INT("PluckFilterType_kPickup", SynthLab::PluckFilterType::kPickup)},
    {SWIG_LUA_CONSTTAB_INT("PluckFilterType_kPluckAndPickup", SynthLab::PluckFilterType::kPluckAndPickup)},
    {SWIG_LUA_CONSTTAB_INT("PluckFilterType_kBridge", SynthLab::PluckFilterType::kBridge)},
    {SWIG_LUA_CONSTTAB_INT("PluckFilterType_kPluckPickupBridge", SynthLab::PluckFilterType::kPluckPickupBridge)},
    {SWIG_LUA_CONSTTAB_INT("LEFT_CHANNEL", SynthLab::LEFT_CHANNEL)},
    {SWIG_LUA_CONSTTAB_INT("RIGHT_CHANNEL", SynthLab::RIGHT_CHANNEL)},
    {SWIG_LUA_CONSTTAB_INT("LEFT", SynthLab::LEFT)},
    {SWIG_LUA_CONSTTAB_INT("RIGHT", SynthLab::RIGHT)},
    {SWIG_LUA_CONSTTAB_INT("STEREO", SynthLab::STEREO)},
    {SWIG_LUA_CONSTTAB_INT("MONO_CHANNEL", SynthLab::MONO_CHANNEL)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_CHANNELS", SynthLab::STEREO_CHANNELS)},
    {SWIG_LUA_CONSTTAB_INT("MONO_TO_MONO", SynthLab::MONO_TO_MONO)},
    {SWIG_LUA_CONSTTAB_INT("MONO_TO_STEREO", SynthLab::MONO_TO_STEREO)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_TO_STEREO", SynthLab::STEREO_TO_STEREO)},
    {SWIG_LUA_CONSTTAB_INT("SynthMode_kMono", SynthLab::SynthMode::kMono)},
    {SWIG_LUA_CONSTTAB_INT("SynthMode_kLegato", SynthLab::SynthMode::kLegato)},
    {SWIG_LUA_CONSTTAB_INT("SynthMode_kUnison", SynthLab::SynthMode::kUnison)},
    {SWIG_LUA_CONSTTAB_INT("SynthMode_kUnisonLegato", SynthLab::SynthMode::kUnisonLegato)},
    {SWIG_LUA_CONSTTAB_INT("SynthMode_kPoly", SynthLab::SynthMode::kPoly)},
    {SWIG_LUA_CONSTTAB_INT("FilterMode_kSeries", SynthLab::FilterMode::kSeries)},
    {SWIG_LUA_CONSTTAB_INT("FilterMode_kParallel", SynthLab::FilterMode::kParallel)},
    {SWIG_LUA_CONSTTAB_INT("DX100Algo_kFM1", SynthLab::DX100Algo::kFM1)},
    {SWIG_LUA_CONSTTAB_INT("DX100Algo_kFM2", SynthLab::DX100Algo::kFM2)},
    {SWIG_LUA_CONSTTAB_INT("DX100Algo_kFM3", SynthLab::DX100Algo::kFM3)},
    {SWIG_LUA_CONSTTAB_INT("DX100Algo_kFM4", SynthLab::DX100Algo::kFM4)},
    {SWIG_LUA_CONSTTAB_INT("DX100Algo_kFM5", SynthLab::DX100Algo::kFM5)},
    {SWIG_LUA_CONSTTAB_INT("DX100Algo_kFM6", SynthLab::DX100Algo::kFM6)},
    {SWIG_LUA_CONSTTAB_INT("DX100Algo_kFM7", SynthLab::DX100Algo::kFM7)},
    {SWIG_LUA_CONSTTAB_INT("DX100Algo_kFM8", SynthLab::DX100Algo::kFM8)},
    {SWIG_LUA_CONSTTAB_INT("XFadeType_kLinear", SynthLab::XFadeType::kLinear)},
    {SWIG_LUA_CONSTTAB_INT("XFadeType_kSquareLaw", SynthLab::XFadeType::kSquareLaw)},
    {SWIG_LUA_CONSTTAB_INT("XFadeType_kConstantPower", SynthLab::XFadeType::kConstantPower)},
    {SWIG_LUA_CONSTTAB_INT("LoopDirection_kForward", SynthLab::LoopDirection::kForward)},
    {SWIG_LUA_CONSTTAB_INT("LoopDirection_kBackward", SynthLab::LoopDirection::kBackward)},
    {SWIG_LUA_CONSTTAB_INT("LoopDirection_kForwardBackward", SynthLab::LoopDirection::kForwardBackward)},
    {SWIG_LUA_CONSTTAB_INT("StepMode_kNote", SynthLab::StepMode::kNote)},
    {SWIG_LUA_CONSTTAB_INT("StepMode_kRest", SynthLab::StepMode::kRest)},
    {SWIG_LUA_CONSTTAB_INT("StepMode_kGate", SynthLab::StepMode::kGate)},
    {SWIG_LUA_CONSTTAB_INT("WAVE_LANE", SynthLab::WAVE_LANE)},
    {SWIG_LUA_CONSTTAB_INT("PITCH_LANE", SynthLab::PITCH_LANE)},
    {SWIG_LUA_CONSTTAB_INT("STEP_SEQ_LANE", SynthLab::STEP_SEQ_LANE)},
    {SWIG_LUA_CONSTTAB_INT("NUM_MOD_LANES", SynthLab::NUM_MOD_LANES)},
    {SWIG_LUA_CONSTTAB_INT("MOD_KNOB_A", SynthLab::MOD_KNOB_A)},
    {SWIG_LUA_CONSTTAB_INT("MOD_KNOB_B", SynthLab::MOD_KNOB_B)},
    {SWIG_LUA_CONSTTAB_INT("MOD_KNOB_C", SynthLab::MOD_KNOB_C)},
    {SWIG_LUA_CONSTTAB_INT("MOD_KNOB_D", SynthLab::MOD_KNOB_D)},
    {SWIG_LUA_CONSTTAB_INT("HANN_LUT", SynthLab::HANN_LUT)},
    {SWIG_LUA_CONSTTAB_INT("HAMMING_LUT", SynthLab::HAMMING_LUT)},
    {SWIG_LUA_CONSTTAB_INT("kSourceLFO1_Norm", SynthLab::kSourceLFO1_Norm)},
    {SWIG_LUA_CONSTTAB_INT("kSourceLFO1_Inv", SynthLab::kSourceLFO1_Inv)},
    {SWIG_LUA_CONSTTAB_INT("kSourceLFO1_QP", SynthLab::kSourceLFO1_QP)},
    {SWIG_LUA_CONSTTAB_INT("kSourceLFO1_MaxDown", SynthLab::kSourceLFO1_MaxDown)},
    {SWIG_LUA_CONSTTAB_INT("kSourceLFO2_Norm", SynthLab::kSourceLFO2_Norm)},
    {SWIG_LUA_CONSTTAB_INT("kSourceLFO2_Inv", SynthLab::kSourceLFO2_Inv)},
    {SWIG_LUA_CONSTTAB_INT("kSourceLFO2_QP", SynthLab::kSourceLFO2_QP)},
    {SWIG_LUA_CONSTTAB_INT("kSourceAmpEG_Norm", SynthLab::kSourceAmpEG_Norm)},
    {SWIG_LUA_CONSTTAB_INT("kSourceAmpEG_Bias", SynthLab::kSourceAmpEG_Bias)},
    {SWIG_LUA_CONSTTAB_INT("kSourceFilterEG_Norm", SynthLab::kSourceFilterEG_Norm)},
    {SWIG_LUA_CONSTTAB_INT("kSourceFilterEG_Bias", SynthLab::kSourceFilterEG_Bias)},
    {SWIG_LUA_CONSTTAB_INT("kSourceAuxEG_Norm", SynthLab::kSourceAuxEG_Norm)},
    {SWIG_LUA_CONSTTAB_INT("kSourceAuxEG_Bias", SynthLab::kSourceAuxEG_Bias)},
    {SWIG_LUA_CONSTTAB_INT("kSourceOsc1_Norm", SynthLab::kSourceOsc1_Norm)},
    {SWIG_LUA_CONSTTAB_INT("kSourceJoystickAC", SynthLab::kSourceJoystickAC)},
    {SWIG_LUA_CONSTTAB_INT("kSourceJoystickBD", SynthLab::kSourceJoystickBD)},
    {SWIG_LUA_CONSTTAB_INT("kSourceWSWaveMix_A", SynthLab::kSourceWSWaveMix_A)},
    {SWIG_LUA_CONSTTAB_INT("kSourceWSWaveMix_B", SynthLab::kSourceWSWaveMix_B)},
    {SWIG_LUA_CONSTTAB_INT("kSourceWSWaveIndex_A", SynthLab::kSourceWSWaveIndex_A)},
    {SWIG_LUA_CONSTTAB_INT("kSourceWSWaveIndex_B", SynthLab::kSourceWSWaveIndex_B)},
    {SWIG_LUA_CONSTTAB_INT("kSourceWSWaveAmpMod_A", SynthLab::kSourceWSWaveAmpMod_A)},
    {SWIG_LUA_CONSTTAB_INT("kSourceWSWaveAmpMod_B", SynthLab::kSourceWSWaveAmpMod_B)},
    {SWIG_LUA_CONSTTAB_INT("kSourceWSPitchMod_A", SynthLab::kSourceWSPitchMod_A)},
    {SWIG_LUA_CONSTTAB_INT("kSourceWSPitchMod_B", SynthLab::kSourceWSPitchMod_B)},
    {SWIG_LUA_CONSTTAB_INT("kSourceWStepSeqMod", SynthLab::kSourceWStepSeqMod)},
    {SWIG_LUA_CONSTTAB_INT("kSourceWSXfadeDone", SynthLab::kSourceWSXfadeDone)},
    {SWIG_LUA_CONSTTAB_INT("kSourceWSStepNumber_A", SynthLab::kSourceWSStepNumber_A)},
    {SWIG_LUA_CONSTTAB_INT("kSourceWSStepNumber_B", SynthLab::kSourceWSStepNumber_B)},
    {SWIG_LUA_CONSTTAB_INT("kNumberModSources", SynthLab::kNumberModSources)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc1_fo", SynthLab::kDestOsc1_fo)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc2_fo", SynthLab::kDestOsc2_fo)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc3_fo", SynthLab::kDestOsc3_fo)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc4_fo", SynthLab::kDestOsc4_fo)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc5_fo", SynthLab::kDestOsc5_fo)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc6_fo", SynthLab::kDestOsc6_fo)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc7_fo", SynthLab::kDestOsc7_fo)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc8_fo", SynthLab::kDestOsc8_fo)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc1_Shape", SynthLab::kDestOsc1_Shape)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc2_Shape", SynthLab::kDestOsc2_Shape)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc3_Shape", SynthLab::kDestOsc3_Shape)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc4_Shape", SynthLab::kDestOsc4_Shape)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc1_Amp", SynthLab::kDestOsc1_Amp)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc2_Amp", SynthLab::kDestOsc2_Amp)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc3_Amp", SynthLab::kDestOsc3_Amp)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc4_Amp", SynthLab::kDestOsc4_Amp)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc1_Mod", SynthLab::kDestOsc1_Mod)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc2_Mod", SynthLab::kDestOsc2_Mod)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc3_Mod", SynthLab::kDestOsc3_Mod)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc4_Mod", SynthLab::kDestOsc4_Mod)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc5_Mod", SynthLab::kDestOsc5_Mod)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc6_Mod", SynthLab::kDestOsc6_Mod)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc7_Mod", SynthLab::kDestOsc7_Mod)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc8_Mod", SynthLab::kDestOsc8_Mod)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc1_Morph", SynthLab::kDestOsc1_Morph)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc2_Morph", SynthLab::kDestOsc2_Morph)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc3_Morph", SynthLab::kDestOsc3_Morph)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc4_Morph", SynthLab::kDestOsc4_Morph)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc5_Morph", SynthLab::kDestOsc5_Morph)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc6_Morph", SynthLab::kDestOsc6_Morph)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc7_Morph", SynthLab::kDestOsc7_Morph)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc8_Morph", SynthLab::kDestOsc8_Morph)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc1_WSWaveMix_A", SynthLab::kDestOsc1_WSWaveMix_A)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc2_WSWaveMix_A", SynthLab::kDestOsc2_WSWaveMix_A)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc1_WSWaveMix_B", SynthLab::kDestOsc1_WSWaveMix_B)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc2_WSWaveMix_B", SynthLab::kDestOsc2_WSWaveMix_B)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc1_WSWaveIndex_A", SynthLab::kDestOsc1_WSWaveIndex_A)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc2_WSWaveIndex_A", SynthLab::kDestOsc2_WSWaveIndex_A)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc1_WSWaveIndex_B", SynthLab::kDestOsc1_WSWaveIndex_B)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc2_WSWaveIndex_B", SynthLab::kDestOsc2_WSWaveIndex_B)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc1_WSWaveAmp_A", SynthLab::kDestOsc1_WSWaveAmp_A)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc2_WSWaveAmp_A", SynthLab::kDestOsc2_WSWaveAmp_A)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc1_WSWaveAmp_B", SynthLab::kDestOsc1_WSWaveAmp_B)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc2_WSWaveAmp_B", SynthLab::kDestOsc2_WSWaveAmp_B)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc1_WSWavePitch_A", SynthLab::kDestOsc1_WSWavePitch_A)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc2_WSWavePitch_A", SynthLab::kDestOsc2_WSWavePitch_A)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc1_WSWavePitch_B", SynthLab::kDestOsc1_WSWavePitch_B)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc2_WSWavePitch_B", SynthLab::kDestOsc2_WSWavePitch_B)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc1WSXFadeDone", SynthLab::kDestOsc1WSXFadeDone)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc2WSXFadeDone", SynthLab::kDestOsc2WSXFadeDone)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc3WSXFadeDone", SynthLab::kDestOsc3WSXFadeDone)},
    {SWIG_LUA_CONSTTAB_INT("kDestOsc4WSXFadeDone", SynthLab::kDestOsc4WSXFadeDone)},
    {SWIG_LUA_CONSTTAB_INT("kDestWSWaveStepNumber_A1", SynthLab::kDestWSWaveStepNumber_A1)},
    {SWIG_LUA_CONSTTAB_INT("kDestWSWaveStepNumber_B1", SynthLab::kDestWSWaveStepNumber_B1)},
    {SWIG_LUA_CONSTTAB_INT("kDestWSWaveStepNumber_A2", SynthLab::kDestWSWaveStepNumber_A2)},
    {SWIG_LUA_CONSTTAB_INT("kDestWSWaveStepNumber_B2", SynthLab::kDestWSWaveStepNumber_B2)},
    {SWIG_LUA_CONSTTAB_INT("kDestAmpEGRetrigger", SynthLab::kDestAmpEGRetrigger)},
    {SWIG_LUA_CONSTTAB_INT("kDestFilterEGRetrigger", SynthLab::kDestFilterEGRetrigger)},
    {SWIG_LUA_CONSTTAB_INT("kDestAuxEGRetrigger", SynthLab::kDestAuxEGRetrigger)},
    {SWIG_LUA_CONSTTAB_INT("kDestLFO1_fo", SynthLab::kDestLFO1_fo)},
    {SWIG_LUA_CONSTTAB_INT("kDestLFO2_fo", SynthLab::kDestLFO2_fo)},
    {SWIG_LUA_CONSTTAB_INT("kDestFilter1_fc_EG", SynthLab::kDestFilter1_fc_EG)},
    {SWIG_LUA_CONSTTAB_INT("kDestFilter2_fc_EG", SynthLab::kDestFilter2_fc_EG)},
    {SWIG_LUA_CONSTTAB_INT("kDestFilter1_fc_Bipolar", SynthLab::kDestFilter1_fc_Bipolar)},
    {SWIG_LUA_CONSTTAB_INT("kDestFilter2_fc_Bipolar", SynthLab::kDestFilter2_fc_Bipolar)},
    {SWIG_LUA_CONSTTAB_INT("kDestDCA_EGMod", SynthLab::kDestDCA_EGMod)},
    {SWIG_LUA_CONSTTAB_INT("kDestDCA_AmpMod", SynthLab::kDestDCA_AmpMod)},
    {SWIG_LUA_CONSTTAB_INT("kDestDCA_PanMod", SynthLab::kDestDCA_PanMod)},
    {SWIG_LUA_CONSTTAB_INT("kDestDCA_SampleHoldMod", SynthLab::kDestDCA_SampleHoldMod)},
    {SWIG_LUA_CONSTTAB_INT("kDestDCA_TriggerMod", SynthLab::kDestDCA_TriggerMod)},
    {SWIG_LUA_CONSTTAB_INT("kNumberModDestinations", SynthLab::kNumberModDestinations)},
    {SWIG_LUA_CONSTTAB_INT("kNoMMTransform", SynthLab::kNoMMTransform)},
    {SWIG_LUA_CONSTTAB_INT("kMMTransformBipolar", SynthLab::kMMTransformBipolar)},
    {SWIG_LUA_CONSTTAB_INT("kMMTransformUnipolar", SynthLab::kMMTransformUnipolar)},
    {SWIG_LUA_CONSTTAB_INT("kNumMMTransforms", SynthLab::kNumMMTransforms)},
    {SWIG_LUA_CONSTTAB_INT("kEGMod", SynthLab::kEGMod)},
    {SWIG_LUA_CONSTTAB_INT("kBiasedEGMod", SynthLab::kBiasedEGMod)},
    {SWIG_LUA_CONSTTAB_INT("kUnipolarMod", SynthLab::kUnipolarMod)},
    {SWIG_LUA_CONSTTAB_INT("kBipolarMod", SynthLab::kBipolarMod)},
    {SWIG_LUA_CONSTTAB_INT("kFrequencyMod", SynthLab::kFrequencyMod)},
    {SWIG_LUA_CONSTTAB_INT("kPhaseMod", SynthLab::kPhaseMod)},
    {SWIG_LUA_CONSTTAB_INT("kAmpMod", SynthLab::kAmpMod)},
    {SWIG_LUA_CONSTTAB_INT("kMaxDownAmpMod", SynthLab::kMaxDownAmpMod)},
    {SWIG_LUA_CONSTTAB_INT("kPanMod", SynthLab::kPanMod)},
    {SWIG_LUA_CONSTTAB_INT("kShapeMod", SynthLab::kShapeMod)},
    {SWIG_LUA_CONSTTAB_INT("kUniqueMod", SynthLab::kUniqueMod)},
    {SWIG_LUA_CONSTTAB_INT("kTriggerMod", SynthLab::kTriggerMod)},
    {SWIG_LUA_CONSTTAB_INT("kWaveMorphMod", SynthLab::kWaveMorphMod)},
    {SWIG_LUA_CONSTTAB_INT("kWaveSeqWave_AGainMod", SynthLab::kWaveSeqWave_AGainMod)},
    {SWIG_LUA_CONSTTAB_INT("kWaveSeqWave_BGainMod", SynthLab::kWaveSeqWave_BGainMod)},
    {SWIG_LUA_CONSTTAB_INT("kWaveSeqWaveIndex_AMod", SynthLab::kWaveSeqWaveIndex_AMod)},
    {SWIG_LUA_CONSTTAB_INT("kWaveSeqWaveIndex_BMod", SynthLab::kWaveSeqWaveIndex_BMod)},
    {SWIG_LUA_CONSTTAB_INT("kWaveSeqPitch_AMod", SynthLab::kWaveSeqPitch_AMod)},
    {SWIG_LUA_CONSTTAB_INT("kWaveSeqPitch_BMod", SynthLab::kWaveSeqPitch_BMod)},
    {SWIG_LUA_CONSTTAB_INT("kWaveSeqAmp_AMod", SynthLab::kWaveSeqAmp_AMod)},
    {SWIG_LUA_CONSTTAB_INT("kWaveSeqAmp_BMod", SynthLab::kWaveSeqAmp_BMod)},
    {SWIG_LUA_CONSTTAB_INT("kWaveSeqStepSeqMod", SynthLab::kWaveSeqStepSeqMod)},
    {SWIG_LUA_CONSTTAB_INT("kWaveSeqXFadeDoneMod", SynthLab::kWaveSeqXFadeDoneMod)},
    {SWIG_LUA_CONSTTAB_INT("kWaveStepNumber_A", SynthLab::kWaveStepNumber_A)},
    {SWIG_LUA_CONSTTAB_INT("kWaveStepNumber_B", SynthLab::kWaveStepNumber_B)},
    {SWIG_LUA_CONSTTAB_INT("kNumModulators", SynthLab::kNumModulators)},
    {SWIG_LUA_CONSTTAB_INT("kCurrentMIDINoteNumber", SynthLab::kCurrentMIDINoteNumber)},
    {SWIG_LUA_CONSTTAB_INT("kCurrentMIDINoteVelocity", SynthLab::kCurrentMIDINoteVelocity)},
    {SWIG_LUA_CONSTTAB_INT("kLastMIDINoteNumber", SynthLab::kLastMIDINoteNumber)},
    {SWIG_LUA_CONSTTAB_INT("kLastMIDINoteVelocity", SynthLab::kLastMIDINoteVelocity)},
    {SWIG_LUA_CONSTTAB_INT("kMIDIPitchBendDataLSB", SynthLab::kMIDIPitchBendDataLSB)},
    {SWIG_LUA_CONSTTAB_INT("kMIDIPitchBendDataMSB", SynthLab::kMIDIPitchBendDataMSB)},
    {SWIG_LUA_CONSTTAB_INT("kMIDIMasterPBSensCoarse", SynthLab::kMIDIMasterPBSensCoarse)},
    {SWIG_LUA_CONSTTAB_INT("kMIDIMasterPBSensFine", SynthLab::kMIDIMasterPBSensFine)},
    {SWIG_LUA_CONSTTAB_INT("kMIDIMasterTuneCoarseLSB", SynthLab::kMIDIMasterTuneCoarseLSB)},
    {SWIG_LUA_CONSTTAB_INT("kMIDIMasterTuneCoarseMSB", SynthLab::kMIDIMasterTuneCoarseMSB)},
    {SWIG_LUA_CONSTTAB_INT("kMIDIMasterTuneFineLSB", SynthLab::kMIDIMasterTuneFineLSB)},
    {SWIG_LUA_CONSTTAB_INT("kMIDIMasterTuneFineMSB", SynthLab::kMIDIMasterTuneFineMSB)},
    {SWIG_LUA_CONSTTAB_INT("kMIDIMasterVolumeLSB", SynthLab::kMIDIMasterVolumeLSB)},
    {SWIG_LUA_CONSTTAB_INT("kMIDIMasterVolumeMSB", SynthLab::kMIDIMasterVolumeMSB)},
    {SWIG_LUA_CONSTTAB_INT("kNumMIDIGlobals", SynthLab::kNumMIDIGlobals)},
    {SWIG_LUA_CONSTTAB_INT("kWSWaveMix_A", SynthLab::kWSWaveMix_A)},
    {SWIG_LUA_CONSTTAB_INT("kWSWaveMix_B", SynthLab::kWSWaveMix_B)},
    {SWIG_LUA_CONSTTAB_INT("kWSWaveIndex_A", SynthLab::kWSWaveIndex_A)},
    {SWIG_LUA_CONSTTAB_INT("kWSWaveIndex_B", SynthLab::kWSWaveIndex_B)},
    {SWIG_LUA_CONSTTAB_INT("kWSWaveAmpMod_A", SynthLab::kWSWaveAmpMod_A)},
    {SWIG_LUA_CONSTTAB_INT("kWSWaveAmpMod_B", SynthLab::kWSWaveAmpMod_B)},
    {SWIG_LUA_CONSTTAB_INT("kWSPitchMod_A", SynthLab::kWSPitchMod_A)},
    {SWIG_LUA_CONSTTAB_INT("kWSPitchMod_B", SynthLab::kWSPitchMod_B)},
    {SWIG_LUA_CONSTTAB_INT("kWStepSeqMod", SynthLab::kWStepSeqMod)},
    {SWIG_LUA_CONSTTAB_INT("kWSXFadeDone", SynthLab::kWSXFadeDone)},
    {SWIG_LUA_CONSTTAB_INT("kWSWaveStepNumber_A", SynthLab::kWSWaveStepNumber_A)},
    {SWIG_LUA_CONSTTAB_INT("kWSWaveStepNumber_B", SynthLab::kWSWaveStepNumber_B)},
    {SWIG_LUA_CONSTTAB_INT("kWSSoloingWaveIndex", SynthLab::kWSSoloingWaveIndex)},
    {SWIG_LUA_CONSTTAB_INT("kNumWSOutputs", SynthLab::kNumWSOutputs)},
    {SWIG_LUA_CONSTTAB_INT("kBPM", SynthLab::kBPM)},
    {SWIG_LUA_CONSTTAB_INT("kTSNumerator", SynthLab::kTSNumerator)},
    {SWIG_LUA_CONSTTAB_INT("kTSDenominator", SynthLab::kTSDenominator)},
    {SWIG_LUA_CONSTTAB_INT("kAbsBufferTime", SynthLab::kAbsBufferTime)},
    {SWIG_LUA_CONSTTAB_INT("kDMBuild", SynthLab::kDMBuild)},
    {SWIG_LUA_CONSTTAB_INT("kDualMonoFilters", SynthLab::kDualMonoFilters)},
    {SWIG_LUA_CONSTTAB_INT("kHalfSampleSet", SynthLab::kHalfSampleSet)},
    {SWIG_LUA_CONSTTAB_INT("kReduceUnisonVoices", SynthLab::kReduceUnisonVoices)},
    {SWIG_LUA_CONSTTAB_INT("kAnalogFGNFilters", SynthLab::kAnalogFGNFilters)},
    {SWIG_LUA_CONSTTAB_INT("kNumMIDIAuxes", SynthLab::kNumMIDIAuxes)},
    {SWIG_LUA_CONSTTAB_INT("MIDI_CH_1", SynthLab::MIDI_CH_1)},
    {SWIG_LUA_CONSTTAB_INT("MIDI_CH_2", SynthLab::MIDI_CH_2)},
    {SWIG_LUA_CONSTTAB_INT("MIDI_CH_3", SynthLab::MIDI_CH_3)},
    {SWIG_LUA_CONSTTAB_INT("MIDI_CH_4", SynthLab::MIDI_CH_4)},
    {SWIG_LUA_CONSTTAB_INT("MIDI_CH_5", SynthLab::MIDI_CH_5)},
    {SWIG_LUA_CONSTTAB_INT("MIDI_CH_6", SynthLab::MIDI_CH_6)},
    {SWIG_LUA_CONSTTAB_INT("MIDI_CH_7", SynthLab::MIDI_CH_7)},
    {SWIG_LUA_CONSTTAB_INT("MIDI_CH_8", SynthLab::MIDI_CH_8)},
    {SWIG_LUA_CONSTTAB_INT("MIDI_CH_9", SynthLab::MIDI_CH_9)},
    {SWIG_LUA_CONSTTAB_INT("MIDI_CH_10", SynthLab::MIDI_CH_10)},
    {SWIG_LUA_CONSTTAB_INT("MIDI_CH_11", SynthLab::MIDI_CH_11)},
    {SWIG_LUA_CONSTTAB_INT("MIDI_CH_12", SynthLab::MIDI_CH_12)},
    {SWIG_LUA_CONSTTAB_INT("MIDI_CH_13", SynthLab::MIDI_CH_13)},
    {SWIG_LUA_CONSTTAB_INT("MIDI_CH_14", SynthLab::MIDI_CH_14)},
    {SWIG_LUA_CONSTTAB_INT("MIDI_CH_15", SynthLab::MIDI_CH_15)},
    {SWIG_LUA_CONSTTAB_INT("MIDI_CH_16", SynthLab::MIDI_CH_16)},
    {SWIG_LUA_CONSTTAB_INT("MIDI_CH_ALL", SynthLab::MIDI_CH_ALL)},
    {SWIG_LUA_CONSTTAB_INT("NoteDuration_k32ndTriplet", SynthLab::NoteDuration::k32ndTriplet)},
    {SWIG_LUA_CONSTTAB_INT("NoteDuration_k32nd", SynthLab::NoteDuration::k32nd)},
    {SWIG_LUA_CONSTTAB_INT("NoteDuration_k16thTriplet", SynthLab::NoteDuration::k16thTriplet)},
    {SWIG_LUA_CONSTTAB_INT("NoteDuration_kDot32nd", SynthLab::NoteDuration::kDot32nd)},
    {SWIG_LUA_CONSTTAB_INT("NoteDuration_k16th", SynthLab::NoteDuration::k16th)},
    {SWIG_LUA_CONSTTAB_INT("NoteDuration_k8thTriplet", SynthLab::NoteDuration::k8thTriplet)},
    {SWIG_LUA_CONSTTAB_INT("NoteDuration_kDot16th", SynthLab::NoteDuration::kDot16th)},
    {SWIG_LUA_CONSTTAB_INT("NoteDuration_k8th", SynthLab::NoteDuration::k8th)},
    {SWIG_LUA_CONSTTAB_INT("NoteDuration_kQuarterTriplet", SynthLab::NoteDuration::kQuarterTriplet)},
    {SWIG_LUA_CONSTTAB_INT("NoteDuration_kDot8th", SynthLab::NoteDuration::kDot8th)},
    {SWIG_LUA_CONSTTAB_INT("NoteDuration_kQuarter", SynthLab::NoteDuration::kQuarter)},
    {SWIG_LUA_CONSTTAB_INT("NoteDuration_kHalfTriplet", SynthLab::NoteDuration::kHalfTriplet)},
    {SWIG_LUA_CONSTTAB_INT("NoteDuration_kDotQuarter", SynthLab::NoteDuration::kDotQuarter)},
    {SWIG_LUA_CONSTTAB_INT("NoteDuration_kHalf", SynthLab::NoteDuration::kHalf)},
    {SWIG_LUA_CONSTTAB_INT("NoteDuration_kWholeTriplet", SynthLab::NoteDuration::kWholeTriplet)},
    {SWIG_LUA_CONSTTAB_INT("NoteDuration_kDotHalf", SynthLab::NoteDuration::kDotHalf)},
    {SWIG_LUA_CONSTTAB_INT("NoteDuration_kWhole", SynthLab::NoteDuration::kWhole)},
    {SWIG_LUA_CONSTTAB_INT("NoteDuration_kDotWhole", SynthLab::NoteDuration::kDotWhole)},
    {SWIG_LUA_CONSTTAB_INT("NoteDuration_kOff", SynthLab::NoteDuration::kOff)},
    {SWIG_LUA_CONSTTAB_INT("NoteDuration_kNumNoteDurations", SynthLab::NoteDuration::kNumNoteDurations)},
    {SWIG_LUA_CONSTTAB_INT("VAWaveform_kSawAndSquare", SynthLab::VAWaveform::kSawAndSquare)},
    {SWIG_LUA_CONSTTAB_INT("VAWaveform_kSawtooth", SynthLab::VAWaveform::kSawtooth)},
    {SWIG_LUA_CONSTTAB_INT("VAWaveform_kSquare", SynthLab::VAWaveform::kSquare)},
    {SWIG_LUA_CONSTTAB_INT("NoiseWaveform_kWhiteNoise", SynthLab::NoiseWaveform::kWhiteNoise)},
    {SWIG_LUA_CONSTTAB_INT("NoiseWaveform_kPinkNoise", SynthLab::NoiseWaveform::kPinkNoise)},
    {SWIG_LUA_CONSTTAB_INT("NoiseWaveform_kGaussWhiteNoise", SynthLab::NoiseWaveform::kGaussWhiteNoise)},
    {SWIG_LUA_CONSTTAB_INT("FilterModel_kFirstOrder", SynthLab::FilterModel::kFirstOrder)},
    {SWIG_LUA_CONSTTAB_INT("FilterModel_kSVF", SynthLab::FilterModel::kSVF)},
    {SWIG_LUA_CONSTTAB_INT("FilterModel_kKorg35", SynthLab::FilterModel::kKorg35)},
    {SWIG_LUA_CONSTTAB_INT("FilterModel_kMoog", SynthLab::FilterModel::kMoog)},
    {SWIG_LUA_CONSTTAB_INT("FilterModel_kDiode", SynthLab::FilterModel::kDiode)},
    {SWIG_LUA_CONSTTAB_INT("FLT1", SynthLab::FLT1)},
    {SWIG_LUA_CONSTTAB_INT("FLT2", SynthLab::FLT2)},
    {SWIG_LUA_CONSTTAB_INT("FLT3", SynthLab::FLT3)},
    {SWIG_LUA_CONSTTAB_INT("FLT4", SynthLab::FLT4)},
    {SWIG_LUA_CONSTTAB_INT("VAFilterAlgorithm_kBypassFilter", SynthLab::VAFilterAlgorithm::kBypassFilter)},
    {SWIG_LUA_CONSTTAB_INT("VAFilterAlgorithm_kLPF1", SynthLab::VAFilterAlgorithm::kLPF1)},
    {SWIG_LUA_CONSTTAB_INT("VAFilterAlgorithm_kHPF1", SynthLab::VAFilterAlgorithm::kHPF1)},
    {SWIG_LUA_CONSTTAB_INT("VAFilterAlgorithm_kAPF1", SynthLab::VAFilterAlgorithm::kAPF1)},
    {SWIG_LUA_CONSTTAB_INT("VAFilterAlgorithm_kSVF_LP", SynthLab::VAFilterAlgorithm::kSVF_LP)},
    {SWIG_LUA_CONSTTAB_INT("VAFilterAlgorithm_kSVF_HP", SynthLab::VAFilterAlgorithm::kSVF_HP)},
    {SWIG_LUA_CONSTTAB_INT("VAFilterAlgorithm_kSVF_BP", SynthLab::VAFilterAlgorithm::kSVF_BP)},
    {SWIG_LUA_CONSTTAB_INT("VAFilterAlgorithm_kSVF_BS", SynthLab::VAFilterAlgorithm::kSVF_BS)},
    {SWIG_LUA_CONSTTAB_INT("VAFilterAlgorithm_kKorg35_LP", SynthLab::VAFilterAlgorithm::kKorg35_LP)},
    {SWIG_LUA_CONSTTAB_INT("VAFilterAlgorithm_kKorg35_HP", SynthLab::VAFilterAlgorithm::kKorg35_HP)},
    {SWIG_LUA_CONSTTAB_INT("VAFilterAlgorithm_kMoog_LP1", SynthLab::VAFilterAlgorithm::kMoog_LP1)},
    {SWIG_LUA_CONSTTAB_INT("VAFilterAlgorithm_kMoog_LP2", SynthLab::VAFilterAlgorithm::kMoog_LP2)},
    {SWIG_LUA_CONSTTAB_INT("VAFilterAlgorithm_kMoog_LP3", SynthLab::VAFilterAlgorithm::kMoog_LP3)},
    {SWIG_LUA_CONSTTAB_INT("VAFilterAlgorithm_kMoog_LP4", SynthLab::VAFilterAlgorithm::kMoog_LP4)},
    {SWIG_LUA_CONSTTAB_INT("VAFilterAlgorithm_kDiode_LP4", SynthLab::VAFilterAlgorithm::kDiode_LP4)},
    {SWIG_LUA_CONSTTAB_INT("BQFilterAlgorithm_kBypassFilter", SynthLab::BQFilterAlgorithm::kBypassFilter)},
    {SWIG_LUA_CONSTTAB_INT("BQFilterAlgorithm_k1PLPF", SynthLab::BQFilterAlgorithm::k1PLPF)},
    {SWIG_LUA_CONSTTAB_INT("BQFilterAlgorithm_k1PHPF", SynthLab::BQFilterAlgorithm::k1PHPF)},
    {SWIG_LUA_CONSTTAB_INT("BQFilterAlgorithm_kLPF2", SynthLab::BQFilterAlgorithm::kLPF2)},
    {SWIG_LUA_CONSTTAB_INT("BQFilterAlgorithm_kHPF2", SynthLab::BQFilterAlgorithm::kHPF2)},
    {SWIG_LUA_CONSTTAB_INT("kEGNormalOutput", SynthLab::kEGNormalOutput)},
    {SWIG_LUA_CONSTTAB_INT("kEGBiasedOutput", SynthLab::kEGBiasedOutput)},
    {SWIG_LUA_CONSTTAB_INT("kNumEGOutputs", SynthLab::kNumEGOutputs)},
    {SWIG_LUA_CONSTTAB_INT("EGState_kOff", SynthLab::EGState::kOff)},
    {SWIG_LUA_CONSTTAB_INT("EGState_kDelay", SynthLab::EGState::kDelay)},
    {SWIG_LUA_CONSTTAB_INT("EGState_kAttack", SynthLab::EGState::kAttack)},
    {SWIG_LUA_CONSTTAB_INT("EGState_kHold", SynthLab::EGState::kHold)},
    {SWIG_LUA_CONSTTAB_INT("EGState_kDecay", SynthLab::EGState::kDecay)},
    {SWIG_LUA_CONSTTAB_INT("EGState_kSlope", SynthLab::EGState::kSlope)},
    {SWIG_LUA_CONSTTAB_INT("EGState_kSustain", SynthLab::EGState::kSustain)},
    {SWIG_LUA_CONSTTAB_INT("EGState_kRelease", SynthLab::EGState::kRelease)},
    {SWIG_LUA_CONSTTAB_INT("EGState_kShutdown", SynthLab::EGState::kShutdown)},
    {SWIG_LUA_CONSTTAB_INT("AnalogEGContour_kADSR", SynthLab::AnalogEGContour::kADSR)},
    {SWIG_LUA_CONSTTAB_INT("AnalogEGContour_kAR", SynthLab::AnalogEGContour::kAR)},
    {SWIG_LUA_CONSTTAB_INT("DXEGContour_kADSlSR", SynthLab::DXEGContour::kADSlSR)},
    {SWIG_LUA_CONSTTAB_INT("DXEGContour_kADSlR", SynthLab::DXEGContour::kADSlR)},
    {SWIG_LUA_CONSTTAB_INT("LFOWaveform_kTriangle", SynthLab::LFOWaveform::kTriangle)},
    {SWIG_LUA_CONSTTAB_INT("LFOWaveform_kSin", SynthLab::LFOWaveform::kSin)},
    {SWIG_LUA_CONSTTAB_INT("LFOWaveform_kRampUp", SynthLab::LFOWaveform::kRampUp)},
    {SWIG_LUA_CONSTTAB_INT("LFOWaveform_kRampDown", SynthLab::LFOWaveform::kRampDown)},
    {SWIG_LUA_CONSTTAB_INT("LFOWaveform_kExpRampUp", SynthLab::LFOWaveform::kExpRampUp)},
    {SWIG_LUA_CONSTTAB_INT("LFOWaveform_kExpRampDn", SynthLab::LFOWaveform::kExpRampDn)},
    {SWIG_LUA_CONSTTAB_INT("LFOWaveform_kExpTriangle", SynthLab::LFOWaveform::kExpTriangle)},
    {SWIG_LUA_CONSTTAB_INT("LFOWaveform_kSquare", SynthLab::LFOWaveform::kSquare)},
    {SWIG_LUA_CONSTTAB_INT("LFOWaveform_kRSH", SynthLab::LFOWaveform::kRSH)},
    {SWIG_LUA_CONSTTAB_INT("LFOWaveform_kPluck", SynthLab::LFOWaveform::kPluck)},
    {SWIG_LUA_CONSTTAB_INT("FMLFOWaveform_kFM2", SynthLab::FMLFOWaveform::kFM2)},
    {SWIG_LUA_CONSTTAB_INT("FMLFOWaveform_kFM3A", SynthLab::FMLFOWaveform::kFM3A)},
    {SWIG_LUA_CONSTTAB_INT("FMLFOWaveform_kFM3B", SynthLab::FMLFOWaveform::kFM3B)},
    {SWIG_LUA_CONSTTAB_INT("LFOMode_kSync", SynthLab::LFOMode::kSync)},
    {SWIG_LUA_CONSTTAB_INT("LFOMode_kOneShot", SynthLab::LFOMode::kOneShot)},
    {SWIG_LUA_CONSTTAB_INT("LFOMode_kFreeRun", SynthLab::LFOMode::kFreeRun)},
    {SWIG_LUA_CONSTTAB_INT("kLFONormalOutput", SynthLab::kLFONormalOutput)},
    {SWIG_LUA_CONSTTAB_INT("kLFOInvertedOutput", SynthLab::kLFOInvertedOutput)},
    {SWIG_LUA_CONSTTAB_INT("kUnipolarFromMin", SynthLab::kUnipolarFromMin)},
    {SWIG_LUA_CONSTTAB_INT("kUnipolarFromMax", SynthLab::kUnipolarFromMax)},
    {SWIG_LUA_CONSTTAB_INT("kNumLFOOutputs", SynthLab::kNumLFOOutputs)},
    {SWIG_LUA_CONSTTAB_INT("voiceState_kNoteOnState", SynthLab::voiceState::kNoteOnState)},
    {SWIG_LUA_CONSTTAB_INT("voiceState_kNoteOffState", SynthLab::voiceState::kNoteOffState)},
    {SWIG_LUA_CONSTTAB_INT("MOODYCAMEL_CACHE_LINE_SIZE", 64)},
    {SWIG_LUA_CONSTTAB_INT("MOODYCAMEL_HAS_EMPLACE", 1)},
    {SWIG_LUA_CONSTTAB_INT("soloType_SOLO_OFF", SynthLab::soloType::SOLO_OFF)},
    {SWIG_LUA_CONSTTAB_INT("soloType_SOLO_0", SynthLab::soloType::SOLO_0)},
    {SWIG_LUA_CONSTTAB_INT("soloType_SOLO_1", SynthLab::soloType::SOLO_1)},
    {SWIG_LUA_CONSTTAB_INT("soloType_SOLO_2", SynthLab::soloType::SOLO_2)},
    {SWIG_LUA_CONSTTAB_INT("soloType_SOLO_3", SynthLab::soloType::SOLO_3)},
    {SWIG_LUA_CONSTTAB_INT("soloType_SOLO_4", SynthLab::soloType::SOLO_4)},
    {SWIG_LUA_CONSTTAB_INT("soloType_SOLO_5", SynthLab::soloType::SOLO_5)},
    {SWIG_LUA_CONSTTAB_INT("soloType_SOLO_6", SynthLab::soloType::SOLO_6)},
    {SWIG_LUA_CONSTTAB_INT("soloType_SOLO_7", SynthLab::soloType::SOLO_7)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "Huge", _wrap_Huge},
    { "Hugef", _wrap_Hugef},
    { "Infinity", _wrap_Infinity},
    { "NaN", _wrap_NaN},
    { "absf", _wrap_absf},
    { "cubef", _wrap_cubef},
    { "sqrtf", _wrap_sqrtf},
    { "expf", _wrap_expf},
    { "exp2f", _wrap_exp2f},
    { "logf", _wrap_logf},
    { "log10f", _wrap_log10f},
    { "log2f", _wrap_log2f},
    { "logbf", _wrap_logbf},
    { "powf", _wrap_powf},
    { "floorf", _wrap_floorf},
    { "acosf", _wrap_acosf},
    { "asinf", _wrap_asinf},
    { "atanf", _wrap_atanf},
    { "atan2f", _wrap_atan2f},
    { "cosf", _wrap_cosf},
    { "sinf", _wrap_sinf},
    { "tanf", _wrap_tanf},
    { "coshf", _wrap_coshf},
    { "sinhf", _wrap_sinhf},
    { "tanhf", _wrap_tanhf},
    { "lgammaf", _wrap_lgammaf},
    { "acoshf", _wrap_acoshf},
    { "asinhf", _wrap_asinhf},
    { "atanhf", _wrap_atanhf},
    { "cbrtf", _wrap_cbrtf},
    { "ceilf", _wrap_ceilf},
    { "copysignf", _wrap_copysignf},
    { "erff", _wrap_erff},
    { "erfcf", _wrap_erfcf},
    { "expm1f", _wrap_expm1f},
    { "fdimf", _wrap_fdimf},
    { "fmaf", _wrap_fmaf},
    { "fmaxf", _wrap_fmaxf},
    { "fminf", _wrap_fminf},
    { "fmodf", _wrap_fmodf},
    { "fpclassifyf", _wrap_fpclassifyf},
    { "hypotf", _wrap_hypotf},
    { "ilogbf", _wrap_ilogbf},
    { "isfinitef", _wrap_isfinitef},
    { "isgreaterf", _wrap_isgreaterf},
    { "isgreaterequalf", _wrap_isgreaterequalf},
    { "isinff", _wrap_isinff},
    { "islessf", _wrap_islessf},
    { "islessequalf", _wrap_islessequalf},
    { "isnanf", _wrap_isnanf},
    { "isnormalf", _wrap_isnormalf},
    { "isunorderedf", _wrap_isunorderedf},
    { "ldexpf", _wrap_ldexpf},
    { "llrintf", _wrap_llrintf},
    { "llroundf", _wrap_llroundf},
    { "log1pf", _wrap_log1pf},
    { "lrintf", _wrap_lrintf},
    { "lroundf", _wrap_lroundf},
    { "nanf", _wrap_nanf},
    { "nanff", _wrap_nanff},
    { "nanlf", _wrap_nanlf},
    { "nearbyintf", _wrap_nearbyintf},
    { "nextafterf", _wrap_nextafterf},
    { "nexttowardf", _wrap_nexttowardf},
    { "remainderf", _wrap_remainderf},
    { "rintf", _wrap_rintf},
    { "roundf", _wrap_roundf},
    { "scalblnf", _wrap_scalblnf},
    { "scalbnf", _wrap_scalbnf},
    { "squaref", _wrap_squaref},
    { "tgammaf", _wrap_tgammaf},
    { "truncf", _wrap_truncf},
    { "absd", _wrap_absd},
    { "sqrtd", _wrap_sqrtd},
    { "expd", _wrap_expd},
    { "exp2d", _wrap_exp2d},
    { "logd", _wrap_logd},
    { "log10d", _wrap_log10d},
    { "log2d", _wrap_log2d},
    { "logbd", _wrap_logbd},
    { "powd", _wrap_powd},
    { "floord", _wrap_floord},
    { "acosd", _wrap_acosd},
    { "asind", _wrap_asind},
    { "atand", _wrap_atand},
    { "atan2d", _wrap_atan2d},
    { "cosd", _wrap_cosd},
    { "sind", _wrap_sind},
    { "tand", _wrap_tand},
    { "coshd", _wrap_coshd},
    { "sinhd", _wrap_sinhd},
    { "tanhd", _wrap_tanhd},
    { "lgammad", _wrap_lgammad},
    { "acoshd", _wrap_acoshd},
    { "asinhd", _wrap_asinhd},
    { "atanhd", _wrap_atanhd},
    { "cbrtd", _wrap_cbrtd},
    { "ceild", _wrap_ceild},
    { "copysignd", _wrap_copysignd},
    { "erfd", _wrap_erfd},
    { "erfcd", _wrap_erfcd},
    { "expm1d", _wrap_expm1d},
    { "fdimd", _wrap_fdimd},
    { "fmad", _wrap_fmad},
    { "fmaxd", _wrap_fmaxd},
    { "fmind", _wrap_fmind},
    { "fmodd", _wrap_fmodd},
    { "fpclassifyd", _wrap_fpclassifyd},
    { "hypotd", _wrap_hypotd},
    { "ilogbd", _wrap_ilogbd},
    { "isfinited", _wrap_isfinited},
    { "isgreaterd", _wrap_isgreaterd},
    { "isgreaterequald", _wrap_isgreaterequald},
    { "isinfd", _wrap_isinfd},
    { "islessd", _wrap_islessd},
    { "islessequald", _wrap_islessequald},
    { "isnand", _wrap_isnand},
    { "isnormald", _wrap_isnormald},
    { "isunorderedd", _wrap_isunorderedd},
    { "ldexpd", _wrap_ldexpd},
    { "llrintd", _wrap_llrintd},
    { "llroundd", _wrap_llroundd},
    { "log1pd", _wrap_log1pd},
    { "lrintd", _wrap_lrintd},
    { "lroundd", _wrap_lroundd},
    { "nand", _wrap_nand},
    { "nanfd", _wrap_nanfd},
    { "nanld", _wrap_nanld},
    { "nearbyintd", _wrap_nearbyintd},
    { "nextafterd", _wrap_nextafterd},
    { "nexttowardd", _wrap_nexttowardd},
    { "remainderd", _wrap_remainderd},
    { "rintd", _wrap_rintd},
    { "roundd", _wrap_roundd},
    { "scalblnd", _wrap_scalblnd},
    { "scalbnd", _wrap_scalbnd},
    { "squared", _wrap_squared},
    { "tgammad", _wrap_tgammad},
    { "truncd", _wrap_truncd},
    { "feclearexcept", _wrap_feclearexcept},
    { "fegetexceptflag", _wrap_fegetexceptflag},
    { "feraiseexcept", _wrap_feraiseexcept},
    { "fesetexceptflag", _wrap_fesetexceptflag},
    { "fetestexcept", _wrap_fetestexcept},
    { "fegetround", _wrap_fegetround},
    { "fesetround", _wrap_fesetround},
    { "fegetenv", _wrap_fegetenv},
    { "feholdexcept", _wrap_feholdexcept},
    { "fesetenv", _wrap_fesetenv},
    { "feupdateenv", _wrap_feupdateenv},
    { "doLinearInterp", _wrap_doLinearInterp},
    { "copyOutputToInput", _wrap_copyOutputToInput},
    { "copyOutputToOutput", _wrap_copyOutputToOutput},
    { "copyBufferToInput", _wrap_copyBufferToInput},
    { "copyAudioBufferOutputToSynthOutput", _wrap_copyAudioBufferOutputToSynthOutput},
    { "copySynthOutputToAudioBufferInput", _wrap_copySynthOutputToAudioBufferInput},
    { "normToLogNorm", _wrap_normToLogNorm},
    { "logNormToNorm", _wrap_logNormToNorm},
    { "normToAntiLogNorm", _wrap_normToAntiLogNorm},
    { "antiLogNormToNorm", _wrap_antiLogNormToNorm},
    { "getModKnobValueLinear", _wrap_getModKnobValueLinear},
    { "getModKnobValueLog", _wrap_getModKnobValueLog},
    { "getModKnobValueAntiLog", _wrap_getModKnobValueAntiLog},
    { "msecToSamples", _wrap_msecToSamples},
    { "clampMaxValue", _wrap_clampMaxValue},
    { "clampMinValue", _wrap_clampMinValue},
    { "boundValue", _wrap_boundValue},
    { "boundUIntValue", _wrap_boundUIntValue},
    { "boundIntValue", _wrap_boundIntValue},
    { "boundValueUnipolar", _wrap_boundValueUnipolar},
    { "boundValueBipolar", _wrap_boundValueBipolar},
    { "boundMIDIValueByte", _wrap_boundMIDIValueByte},
    { "boundMIDIValueDoubleByte", _wrap_boundMIDIValueDoubleByte},
    { "mapDoubleValue", _wrap_mapDoubleValue},
    { "mapIntValue", _wrap_mapIntValue},
    { "mapUintValue", _wrap_mapUintValue},
    { "mapDoubleToUINT", _wrap_mapDoubleToUINT},
    { "mapUINTToDouble", _wrap_mapUINTToDouble},
    { "midi14_bitToBipolar", _wrap_midi14_bitToBipolar},
    { "midi14_bitToUnipolarInt", _wrap_midi14_bitToUnipolarInt},
    { "midi14_bitToUnipolarDouble", _wrap_midi14_bitToUnipolarDouble},
    { "midi14_bitToDouble", _wrap_midi14_bitToDouble},
    { "unipolarIntToMIDI14_bit", _wrap_unipolarIntToMIDI14_bit},
    { "bipolarIntToMIDI14_bit", _wrap_bipolarIntToMIDI14_bit},
    { "unipolarDoubleToMIDI14_bit", _wrap_unipolarDoubleToMIDI14_bit},
    { "midiPitchBendToBipolar", _wrap_midiPitchBendToBipolar},
    { "doUnipolarModulationFromMin", _wrap_doUnipolarModulationFromMin},
    { "doUnipolarModulationFromMax", _wrap_doUnipolarModulationFromMax},
    { "doBipolarModulation", _wrap_doBipolarModulation},
    { "splitBipolar", _wrap_splitBipolar},
    { "bipolar", _wrap_bipolar},
    { "bipolarXForm", _wrap_bipolarXForm},
    { "unipolar", _wrap_unipolar},
    { "unipolarXForm", _wrap_unipolarXForm},
    { "raw2dB", _wrap_raw2dB},
    { "dB2Raw", _wrap_dB2Raw},
    { "peakGainFor_Q", _wrap_peakGainFor_Q},
    { "dBPeakGainFor_Q", _wrap_dBPeakGainFor_Q},
    { "applyPhaseDistortion", _wrap_applyPhaseDistortion},
    { "sgn", _wrap_sgn},
    { "calcWSGain", _wrap_calcWSGain},
    { "atanWaveShaper", _wrap_atanWaveShaper},
    { "tanhWaveShaper", _wrap_tanhWaveShaper},
    { "softClipWaveShaper", _wrap_softClipWaveShaper},
    { "fuzzExp1WaveShaper", _wrap_fuzzExp1WaveShaper},
    { "copyStingList", _wrap_copyStingList},
    { "concatStrings", _wrap_concatStrings},
    { "ReplaceSubStrWithStr", _wrap_ReplaceSubStrWithStr},
    { "stripLastFolderFromPath", _wrap_stripLastFolderFromPath},
    { "getPluginContainerFolder", _wrap_getPluginContainerFolder},
    { "doLinearInterpolation", _wrap_doLinearInterpolation},
    { "doLagrangeInterpolation", _wrap_doLagrangeInterpolation},
    { "midiNoteNumberFromOscFrequency", _wrap_midiNoteNumberFromOscFrequency},
    { "midiNoteNumberToOscFrequency", _wrap_midiNoteNumberToOscFrequency},
    { "calculateWaveTablePhaseInc", _wrap_calculateWaveTablePhaseInc},
    { "checkAndWrapWaveTableIndex", _wrap_checkAndWrapWaveTableIndex},
    { "countTrailingZero", _wrap_countTrailingZero},
    { "countTrailingZeros_x64", _wrap_countTrailingZeros_x64},
    { "doSimpleSineLUT", _wrap_doSimpleSineLUT},
    { "doSimpleCosineLUT", _wrap_doSimpleCosineLUT},
    { "calculatePanValues", _wrap_calculatePanValues},
    { "calculateConstPwrMixValues", _wrap_calculateConstPwrMixValues},
    { "crossfade", _wrap_crossfade},
    { "semitonesBetweenFrequencies", _wrap_semitonesBetweenFrequencies},
    { "getTimeFromTempo", _wrap_getTimeFromTempo},
    { "quantizeBipolarValue", _wrap_quantizeBipolarValue},
    { "doubleToUint64", _wrap_doubleToUint64},
    { "uint64ToDouble", _wrap_uint64ToDouble},
    { "floatToUint32", _wrap_floatToUint32},
    { "uint32ToFloat", _wrap_uint32ToFloat},
    { "inRange", _wrap_inRange},
    { "wrapMax", _wrap_wrapMax},
    { "wrapMinMax", _wrap_wrapMinMax},
    { "charArrayToStringVector", _wrap_charArrayToStringVector},
    { "appendCharArrayToStringVector", _wrap_appendCharArrayToStringVector},
    { "mmaMIDItoAtten", _wrap_mmaMIDItoAtten},
    { "calculateVectorMix", _wrap_calculateVectorMix},
    { "quadraticSine", _wrap_quadraticSine},
    { "BhaskaraISine", _wrap_BhaskaraISine},
    { "parabolicSine", _wrap_parabolicSine},
    { "calculatePitchBend", _wrap_calculatePitchBend},
    { "calculateMasterTuning", _wrap_calculateMasterTuning},
    { "calculateNumTables", _wrap_calculateNumTables},
    { "readHexLUT", _wrap_readHexLUT},
    { "concaveXForm", _wrap_concaveXForm},
    { "bipolarConcaveXForm", _wrap_bipolarConcaveXForm},
    { "reverseConcaveXForm", _wrap_reverseConcaveXForm},
    { "bipolarReverseConcaveXForm", _wrap_bipolarReverseConcaveXForm},
    { "convexXForm", _wrap_convexXForm},
    { "bipolarConvexXForm", _wrap_bipolarConvexXForm},
    { "reverseConvexXForm", _wrap_reverseConvexXForm},
    { "bipolarReverseConvexXForm", _wrap_bipolarReverseConvexXForm},
    { "doPolyBLEP_2", _wrap_doPolyBLEP_2},
    { "doBLEP_N", _wrap_doBLEP_N},
    { "initDMConfig", _wrap_initDMConfig},
    { "initMIDIInputData", _wrap_initMIDIInputData},
    { "semitonesBetweenFreqs", _wrap_semitonesBetweenFreqs},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_gslice,
&_wrap_class_slice,
&_wrap_class_float_complex,
&_wrap_class_double_complex,
&_wrap_class_float_valarray,
&_wrap_class_float_numeric_limits,
&_wrap_class_double_numeric_limits,
&_wrap_class_int_numeric_limits,
&_wrap_class_uint_numeric_limits,
&_wrap_class_short_numeric_limits,
&_wrap_class_ushort_numeric_limits,
&_wrap_class_long_numeric_limits,
&_wrap_class_ulong_numeric_limits,
&_wrap_class_llong_numeric_limits,
&_wrap_class_ullong_numeric_limits,
&_wrap_class_DMConfig,
&_wrap_class_AudioBuffer,
&_wrap_class_SynthClock,
&_wrap_class_Timer,
&_wrap_class_XFader,
&_wrap_class_XHoldFader,
&_wrap_class_SlewLimiter,
&_wrap_class_Synchronizer,
&_wrap_class_RampModulator,
&_wrap_class_GlideModulator,
&_wrap_class_NoiseGenerator,
&_wrap_class_IModulator,
&_wrap_class_IWavetableSource,
&_wrap_class_IWavetableDatabase,
&_wrap_class_PCMSampleOutput,
&_wrap_class_IPCMSampleSource,
&_wrap_class_IPCMSampleDatabase,
&_wrap_class_IMidiInputData,
&_wrap_class_FilterOutput,
&_wrap_class_IFilterBase,
&_wrap_class_CoreProcData,
&_wrap_class_SynthLabTableSet,
&_wrap_class_SynthLabBankSet,
&_wrap_class_StaticWavetable,
&_wrap_class_DynamicWavetable,
&_wrap_class_WavetableDatabase,
&_wrap_class_PCMSampleDatabase,
&_wrap_class_SynthProcessInfo,
&_wrap_class_MidiInputData,
&_wrap_class_Modulators,
&_wrap_class_ModuleCore,
&_wrap_class_SynthModule,
&_wrap_class_DelayLine,
&_wrap_class_BQCoeffs,
&_wrap_class_BQAudioFilter,
&_wrap_class_FracDelayAPF,
&_wrap_class_ResLoopFilter,
&_wrap_class_DCRemovalFilter,
&_wrap_class_TinyBPF,
&_wrap_class_LP2Filter,
&_wrap_class_HP2Filter,
&_wrap_class_TinyReson,
&_wrap_class_LowShelfFilter,
&_wrap_class_HighShelfFilter,
&_wrap_class_ParametricFilter,
&_wrap_class_LP1PFilter,
&_wrap_class_PluckPosFilter,
&_wrap_class_SynthEngineParameters,
&_wrap_class_SynthEngine,
&_wrap_class_SynthFilter,
&_wrap_class_VectorXFadeData,
&_wrap_class_OscParameters,
&_wrap_class_WTOscParameters,
&_wrap_class_WSOscParameters,
&_wrap_class_VA1Coeffs,
&_wrap_class_VAOscParameters,
&_wrap_class_PCMOscParameters,
&_wrap_class_KSOscParameters,
&_wrap_class_ModSource,
&_wrap_class_ModDestination,
&_wrap_class_ModMatrixParameters,
&_wrap_class_NoiseOscillatorParameters,
&_wrap_class_FilterParameters,
&_wrap_class_EGParameters,
&_wrap_class_ExciterParameters,
&_wrap_class_FMOperatorParameters,
&_wrap_class_DCAParameters,
&_wrap_class_LFOParameters,
&_wrap_class_AudioDelayParameters,
&_wrap_class_SynthLabPCMSource,
&_wrap_class_StaticTableSource,
&_wrap_class_DrumWTSource,
&_wrap_class_MorphBankData,
&_wrap_class_XFadeData,
&_wrap_class_MidiOutputData,
&_wrap_class_WaveStringData,
&_wrap_class_LookUpTable,
&_wrap_class_PluginInfo,
&_wrap_class_midiEvent,
&_wrap_class_MIDINoteEvent,
&_wrap_class_GlideInfo,
&_wrap_class_ModuleCoreData,
&_wrap_class_SynthVoiceParameters,
&_wrap_class_SynthVoice,
&_wrap_class_AnalogEGCore,
&_wrap_class_AudioDelay,
&_wrap_class_BasicLookupTables,
&_wrap_class_BQFilterCore,
&_wrap_class_ClassicWTCore,
&_wrap_class_DCA,
&_wrap_class_DrumWTCore,
&_wrap_class_DXEG,
&_wrap_class_DXEGCore,
&_wrap_class_DynamicTableSource,
&_wrap_class_EnvelopeGenerator,
&_wrap_class_ExciterEG,
&_wrap_class_Exciter,
&_wrap_class_FMLFOCore,
&_wrap_class_FMOCore,
&_wrap_class_FMOperator,
&_wrap_class_FourierWTCore,
&_wrap_class_KSOCore,
&_wrap_class_KSOscillator,
&_wrap_class_SynthLFO,
&_wrap_class_LFOCore,
&_wrap_class_SimpleLPF,
&_wrap_class_LogPeakDetector,
&_wrap_class_LinPeakDetector,
&_wrap_class_Limiter,
&_wrap_class_LinearEGCore,
&_wrap_class_MellotronCore,
&_wrap_class_ModMatrix,
&_wrap_class_MorphWTCore,
&_wrap_class_NoiseOscillator,
&_wrap_class_Oscillator,
&_wrap_class_LegacyPCMCore,
&_wrap_class_PCMOscillator,
&_wrap_class_RIFF_CHUNK,
&_wrap_class_WAVE_FILE_HEADER,
&_wrap_class_WAVEFORMATEX_WP,
&_wrap_class_WAVE_SAMPLE,
&_wrap_class_UWaveData,
&_wrap_class_PCMSample,
&_wrap_class_convertUpper,
&_wrap_class_WaveFolder,
&_wrap_class_Resonator,
&_wrap_class_LaneStep,
&_wrap_class_Lane,
&_wrap_class_WaveSequencerStatusMeters,
&_wrap_class_WaveSequencerParameters,
&_wrap_class_WaveSequencer,
&_wrap_class_SFXWTCore,
&_wrap_class_SineTableSource,
&_wrap_class_VAFilterCore,
&_wrap_class_VAOCore,
&_wrap_class_VAOscillator,
&_wrap_class_WaveSliceCore,
&_wrap_class_WSOscillator,
&_wrap_class_WTOscillator,
&_wrap_class_WavetableSource,
&_wrap_class_float_vector,
&_wrap_class_double_vector,
&_wrap_class_complex_float_vector,
&_wrap_class_complex_double_vector,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "synthlab",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_SynthLab__ModulatorsTo_p_SynthLab__IModulator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::IModulator *)  ((SynthLab::Modulators *) x));
}
static void *_p_SynthLab__WavetableDatabaseTo_p_SynthLab__IWavetableDatabase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::IWavetableDatabase *)  ((SynthLab::WavetableDatabase *) x));
}
static void *_p_SynthLab__PCMSampleDatabaseTo_p_SynthLab__IPCMSampleDatabase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::IPCMSampleDatabase *)  ((SynthLab::PCMSampleDatabase *) x));
}
static void *_p_SynthLab__SynthLFOTo_p_SynthLab__SynthModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::SynthModule *)  ((SynthLab::SynthLFO *) x));
}
static void *_p_SynthLab__DXEGTo_p_SynthLab__SynthModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::SynthModule *)  ((SynthLab::DXEG *) x));
}
static void *_p_SynthLab__WSOscillatorTo_p_SynthLab__SynthModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::SynthModule *)  ((SynthLab::WSOscillator *) x));
}
static void *_p_SynthLab__VAOscillatorTo_p_SynthLab__SynthModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::SynthModule *)  ((SynthLab::VAOscillator *) x));
}
static void *_p_SynthLab__PCMOscillatorTo_p_SynthLab__SynthModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::SynthModule *)  ((SynthLab::PCMOscillator *) x));
}
static void *_p_SynthLab__OscillatorTo_p_SynthLab__SynthModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::SynthModule *)  ((SynthLab::Oscillator *) x));
}
static void *_p_SynthLab__NoiseOscillatorTo_p_SynthLab__SynthModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::SynthModule *)  ((SynthLab::NoiseOscillator *) x));
}
static void *_p_SynthLab__KSOscillatorTo_p_SynthLab__SynthModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::SynthModule *)  ((SynthLab::KSOscillator *) x));
}
static void *_p_SynthLab__AudioDelayTo_p_SynthLab__SynthModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::SynthModule *)  ((SynthLab::AudioDelay *) x));
}
static void *_p_SynthLab__WTOscillatorTo_p_SynthLab__SynthModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::SynthModule *)  ((SynthLab::WTOscillator *) x));
}
static void *_p_SynthLab__DCATo_p_SynthLab__SynthModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::SynthModule *)  ((SynthLab::DCA *) x));
}
static void *_p_SynthLab__SynthFilterTo_p_SynthLab__SynthModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::SynthModule *)  ((SynthLab::SynthFilter *) x));
}
static void *_p_SynthLab__WaveSequencerTo_p_SynthLab__SynthModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::SynthModule *)  ((SynthLab::WaveSequencer *) x));
}
static void *_p_SynthLab__FMOperatorTo_p_SynthLab__SynthModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::SynthModule *)  ((SynthLab::FMOperator *) x));
}
static void *_p_SynthLab__EnvelopeGeneratorTo_p_SynthLab__SynthModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::SynthModule *)  ((SynthLab::EnvelopeGenerator *) x));
}
static void *_p_SynthLab__SynthProcessInfoTo_p_SynthLab__AudioBuffer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::AudioBuffer *)  ((SynthLab::SynthProcessInfo *) x));
}
static void *_p_SynthLab__FMOCoreTo_p_SynthLab__ModuleCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::ModuleCore *)  ((SynthLab::FMOCore *) x));
}
static void *_p_SynthLab__LFOCoreTo_p_SynthLab__ModuleCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::ModuleCore *)  ((SynthLab::LFOCore *) x));
}
static void *_p_SynthLab__FMLFOCoreTo_p_SynthLab__ModuleCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::ModuleCore *)  ((SynthLab::FMLFOCore *) x));
}
static void *_p_SynthLab__MellotronCoreTo_p_SynthLab__ModuleCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::ModuleCore *)  ((SynthLab::MellotronCore *) x));
}
static void *_p_SynthLab__AnalogEGCoreTo_p_SynthLab__ModuleCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::ModuleCore *)  ((SynthLab::AnalogEGCore *) x));
}
static void *_p_SynthLab__KSOCoreTo_p_SynthLab__ModuleCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::ModuleCore *)  ((SynthLab::KSOCore *) x));
}
static void *_p_SynthLab__LinearEGCoreTo_p_SynthLab__ModuleCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::ModuleCore *)  ((SynthLab::LinearEGCore *) x));
}
static void *_p_SynthLab__DXEGCoreTo_p_SynthLab__ModuleCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::ModuleCore *)  ((SynthLab::DXEGCore *) x));
}
static void *_p_SynthLab__WaveSliceCoreTo_p_SynthLab__ModuleCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::ModuleCore *)  ((SynthLab::WaveSliceCore *) x));
}
static void *_p_SynthLab__VAOCoreTo_p_SynthLab__ModuleCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::ModuleCore *)  ((SynthLab::VAOCore *) x));
}
static void *_p_SynthLab__DrumWTCoreTo_p_SynthLab__ModuleCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::ModuleCore *)  ((SynthLab::DrumWTCore *) x));
}
static void *_p_SynthLab__ClassicWTCoreTo_p_SynthLab__ModuleCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::ModuleCore *)  ((SynthLab::ClassicWTCore *) x));
}
static void *_p_SynthLab__BQFilterCoreTo_p_SynthLab__ModuleCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::ModuleCore *)  ((SynthLab::BQFilterCore *) x));
}
static void *_p_SynthLab__VAFilterCoreTo_p_SynthLab__ModuleCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::ModuleCore *)  ((SynthLab::VAFilterCore *) x));
}
static void *_p_SynthLab__MorphWTCoreTo_p_SynthLab__ModuleCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::ModuleCore *)  ((SynthLab::MorphWTCore *) x));
}
static void *_p_SynthLab__FourierWTCoreTo_p_SynthLab__ModuleCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::ModuleCore *)  ((SynthLab::FourierWTCore *) x));
}
static void *_p_SynthLab__SFXWTCoreTo_p_SynthLab__ModuleCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::ModuleCore *)  ((SynthLab::SFXWTCore *) x));
}
static void *_p_SynthLab__LegacyPCMCoreTo_p_SynthLab__ModuleCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::ModuleCore *)  ((SynthLab::LegacyPCMCore *) x));
}
static void *_p_SynthLab__MidiInputDataTo_p_SynthLab__IMidiInputData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::IMidiInputData *)  ((SynthLab::MidiInputData *) x));
}
static void *_p_SynthLab__SynthLabPCMSourceTo_p_SynthLab__IPCMSampleSource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::IPCMSampleSource *)  ((SynthLab::SynthLabPCMSource *) x));
}
static void *_p_SynthLab__DrumWTSourceTo_p_SynthLab__IWavetableSource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::IWavetableSource *)  ((SynthLab::DrumWTSource *) x));
}
static void *_p_SynthLab__StaticTableSourceTo_p_SynthLab__IWavetableSource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::IWavetableSource *)  ((SynthLab::StaticTableSource *) x));
}
static void *_p_SynthLab__DynamicTableSourceTo_p_SynthLab__IWavetableSource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::IWavetableSource *)  ((SynthLab::DynamicTableSource *) x));
}
static void *_p_SynthLab__SineTableSourceTo_p_SynthLab__IWavetableSource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::IWavetableSource *)  ((SynthLab::SineTableSource *) x));
}
static void *_p_SynthLab__WavetableSourceTo_p_SynthLab__IWavetableSource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynthLab::IWavetableSource *)  ((SynthLab::WavetableSource *) x));
}
static swig_type_info _swigt__p_GlideInfo = {"_p_GlideInfo", "GlideInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MIDINoteEvent = {"_p_MIDINoteEvent", "MIDINoteEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ModuleCoreData = {"_p_ModuleCoreData", "ModuleCoreData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SynthLab__AnalogEGCore = {"_p_SynthLab__AnalogEGCore", "SynthLab::AnalogEGCore *", 0, 0, (void*)&_wrap_class_AnalogEGCore, 0};
static swig_type_info _swigt__p_SynthLab__AudioBuffer = {"_p_SynthLab__AudioBuffer", "SynthLab::AudioBuffer *", 0, 0, (void*)&_wrap_class_AudioBuffer, 0};
static swig_type_info _swigt__p_SynthLab__AudioDelay = {"_p_SynthLab__AudioDelay", "SynthLab::AudioDelay *", 0, 0, (void*)&_wrap_class_AudioDelay, 0};
static swig_type_info _swigt__p_SynthLab__AudioDelayParameters = {"_p_SynthLab__AudioDelayParameters", "SynthLab::AudioDelayParameters *", 0, 0, (void*)&_wrap_class_AudioDelayParameters, 0};
static swig_type_info _swigt__p_SynthLab__BQAudioFilter = {"_p_SynthLab__BQAudioFilter", "SynthLab::BQAudioFilter *", 0, 0, (void*)&_wrap_class_BQAudioFilter, 0};
static swig_type_info _swigt__p_SynthLab__BQCoeffs = {"_p_SynthLab__BQCoeffs", "SynthLab::BQCoeffs *", 0, 0, (void*)&_wrap_class_BQCoeffs, 0};
static swig_type_info _swigt__p_SynthLab__BQFilterCore = {"_p_SynthLab__BQFilterCore", "SynthLab::BQFilterCore *", 0, 0, (void*)&_wrap_class_BQFilterCore, 0};
static swig_type_info _swigt__p_SynthLab__BasicLookupTables = {"_p_SynthLab__BasicLookupTables", "SynthLab::BasicLookupTables *", 0, 0, (void*)&_wrap_class_BasicLookupTables, 0};
static swig_type_info _swigt__p_SynthLab__ClassicWTCore = {"_p_SynthLab__ClassicWTCore", "SynthLab::ClassicWTCore *", 0, 0, (void*)&_wrap_class_ClassicWTCore, 0};
static swig_type_info _swigt__p_SynthLab__CoreProcData = {"_p_SynthLab__CoreProcData", "SynthLab::CoreProcData *", 0, 0, (void*)&_wrap_class_CoreProcData, 0};
static swig_type_info _swigt__p_SynthLab__DCA = {"_p_SynthLab__DCA", "SynthLab::DCA *", 0, 0, (void*)&_wrap_class_DCA, 0};
static swig_type_info _swigt__p_SynthLab__DCAParameters = {"_p_SynthLab__DCAParameters", "SynthLab::DCAParameters *", 0, 0, (void*)&_wrap_class_DCAParameters, 0};
static swig_type_info _swigt__p_SynthLab__DCRemovalFilter = {"_p_SynthLab__DCRemovalFilter", "SynthLab::DCRemovalFilter *", 0, 0, (void*)&_wrap_class_DCRemovalFilter, 0};
static swig_type_info _swigt__p_SynthLab__DMConfig = {"_p_SynthLab__DMConfig", "SynthLab::DMConfig *", 0, 0, (void*)&_wrap_class_DMConfig, 0};
static swig_type_info _swigt__p_SynthLab__DXEG = {"_p_SynthLab__DXEG", "SynthLab::DXEG *", 0, 0, (void*)&_wrap_class_DXEG, 0};
static swig_type_info _swigt__p_SynthLab__DXEGCore = {"_p_SynthLab__DXEGCore", "SynthLab::DXEGCore *", 0, 0, (void*)&_wrap_class_DXEGCore, 0};
static swig_type_info _swigt__p_SynthLab__DelayLine = {"_p_SynthLab__DelayLine", "SynthLab::DelayLine *", 0, 0, (void*)&_wrap_class_DelayLine, 0};
static swig_type_info _swigt__p_SynthLab__DrumWTCore = {"_p_SynthLab__DrumWTCore", "SynthLab::DrumWTCore *", 0, 0, (void*)&_wrap_class_DrumWTCore, 0};
static swig_type_info _swigt__p_SynthLab__DrumWTSource = {"_p_SynthLab__DrumWTSource", "SynthLab::DrumWTSource *", 0, 0, (void*)&_wrap_class_DrumWTSource, 0};
static swig_type_info _swigt__p_SynthLab__DynamicTableSource = {"_p_SynthLab__DynamicTableSource", "SynthLab::DynamicTableSource *", 0, 0, (void*)&_wrap_class_DynamicTableSource, 0};
static swig_type_info _swigt__p_SynthLab__DynamicWavetable = {"_p_SynthLab__DynamicWavetable", "SynthLab::DynamicWavetable *", 0, 0, (void*)&_wrap_class_DynamicWavetable, 0};
static swig_type_info _swigt__p_SynthLab__EGParameters = {"_p_SynthLab__EGParameters", "SynthLab::EGParameters *", 0, 0, (void*)&_wrap_class_EGParameters, 0};
static swig_type_info _swigt__p_SynthLab__EnvelopeGenerator = {"_p_SynthLab__EnvelopeGenerator", "SynthLab::EnvelopeGenerator *", 0, 0, (void*)&_wrap_class_EnvelopeGenerator, 0};
static swig_type_info _swigt__p_SynthLab__Exciter = {"_p_SynthLab__Exciter", "SynthLab::Exciter *", 0, 0, (void*)&_wrap_class_Exciter, 0};
static swig_type_info _swigt__p_SynthLab__ExciterEG = {"_p_SynthLab__ExciterEG", "SynthLab::ExciterEG *", 0, 0, (void*)&_wrap_class_ExciterEG, 0};
static swig_type_info _swigt__p_SynthLab__ExciterParameters = {"_p_SynthLab__ExciterParameters", "SynthLab::ExciterParameters *", 0, 0, (void*)&_wrap_class_ExciterParameters, 0};
static swig_type_info _swigt__p_SynthLab__FMLFOCore = {"_p_SynthLab__FMLFOCore", "SynthLab::FMLFOCore *", 0, 0, (void*)&_wrap_class_FMLFOCore, 0};
static swig_type_info _swigt__p_SynthLab__FMOCore = {"_p_SynthLab__FMOCore", "SynthLab::FMOCore *", 0, 0, (void*)&_wrap_class_FMOCore, 0};
static swig_type_info _swigt__p_SynthLab__FMOperator = {"_p_SynthLab__FMOperator", "SynthLab::FMOperator *", 0, 0, (void*)&_wrap_class_FMOperator, 0};
static swig_type_info _swigt__p_SynthLab__FMOperatorParameters = {"_p_SynthLab__FMOperatorParameters", "SynthLab::FMOperatorParameters *", 0, 0, (void*)&_wrap_class_FMOperatorParameters, 0};
static swig_type_info _swigt__p_SynthLab__FilterOutput = {"_p_SynthLab__FilterOutput", "SynthLab::FilterOutput *", 0, 0, (void*)&_wrap_class_FilterOutput, 0};
static swig_type_info _swigt__p_SynthLab__FilterParameters = {"_p_SynthLab__FilterParameters", "SynthLab::FilterParameters *", 0, 0, (void*)&_wrap_class_FilterParameters, 0};
static swig_type_info _swigt__p_SynthLab__FourierWTCore = {"_p_SynthLab__FourierWTCore", "SynthLab::FourierWTCore *", 0, 0, (void*)&_wrap_class_FourierWTCore, 0};
static swig_type_info _swigt__p_SynthLab__FracDelayAPF = {"_p_SynthLab__FracDelayAPF", "SynthLab::FracDelayAPF *", 0, 0, (void*)&_wrap_class_FracDelayAPF, 0};
static swig_type_info _swigt__p_SynthLab__GlideInfo = {"_p_SynthLab__GlideInfo", "SynthLab::GlideInfo *", 0, 0, (void*)&_wrap_class_GlideInfo, 0};
static swig_type_info _swigt__p_SynthLab__GlideModulator = {"_p_SynthLab__GlideModulator", "SynthLab::GlideModulator *", 0, 0, (void*)&_wrap_class_GlideModulator, 0};
static swig_type_info _swigt__p_SynthLab__HP2Filter = {"_p_SynthLab__HP2Filter", "SynthLab::HP2Filter *", 0, 0, (void*)&_wrap_class_HP2Filter, 0};
static swig_type_info _swigt__p_SynthLab__HighShelfFilter = {"_p_SynthLab__HighShelfFilter", "SynthLab::HighShelfFilter *", 0, 0, (void*)&_wrap_class_HighShelfFilter, 0};
static swig_type_info _swigt__p_SynthLab__IFilterBase = {"_p_SynthLab__IFilterBase", "SynthLab::IFilterBase *", 0, 0, (void*)&_wrap_class_IFilterBase, 0};
static swig_type_info _swigt__p_SynthLab__IMidiInputData = {"_p_SynthLab__IMidiInputData", "SynthLab::IMidiInputData *", 0, 0, (void*)&_wrap_class_IMidiInputData, 0};
static swig_type_info _swigt__p_SynthLab__IModulator = {"_p_SynthLab__IModulator", "SynthLab::IModulator *", 0, 0, (void*)&_wrap_class_IModulator, 0};
static swig_type_info _swigt__p_SynthLab__IPCMSampleDatabase = {"_p_SynthLab__IPCMSampleDatabase", "SynthLab::IPCMSampleDatabase *", 0, 0, (void*)&_wrap_class_IPCMSampleDatabase, 0};
static swig_type_info _swigt__p_SynthLab__IPCMSampleSource = {"_p_SynthLab__IPCMSampleSource", "SynthLab::IPCMSampleSource *", 0, 0, (void*)&_wrap_class_IPCMSampleSource, 0};
static swig_type_info _swigt__p_SynthLab__IWavetableDatabase = {"_p_SynthLab__IWavetableDatabase", "SynthLab::IWavetableDatabase *", 0, 0, (void*)&_wrap_class_IWavetableDatabase, 0};
static swig_type_info _swigt__p_SynthLab__IWavetableSource = {"_p_SynthLab__IWavetableSource", "SynthLab::IWavetableSource *", 0, 0, (void*)&_wrap_class_IWavetableSource, 0};
static swig_type_info _swigt__p_SynthLab__KSOCore = {"_p_SynthLab__KSOCore", "SynthLab::KSOCore *", 0, 0, (void*)&_wrap_class_KSOCore, 0};
static swig_type_info _swigt__p_SynthLab__KSOscParameters = {"_p_SynthLab__KSOscParameters", "SynthLab::KSOscParameters *", 0, 0, (void*)&_wrap_class_KSOscParameters, 0};
static swig_type_info _swigt__p_SynthLab__KSOscillator = {"_p_SynthLab__KSOscillator", "SynthLab::KSOscillator *", 0, 0, (void*)&_wrap_class_KSOscillator, 0};
static swig_type_info _swigt__p_SynthLab__LFOCore = {"_p_SynthLab__LFOCore", "SynthLab::LFOCore *", 0, 0, (void*)&_wrap_class_LFOCore, 0};
static swig_type_info _swigt__p_SynthLab__LFOParameters = {"_p_SynthLab__LFOParameters", "SynthLab::LFOParameters *", 0, 0, (void*)&_wrap_class_LFOParameters, 0};
static swig_type_info _swigt__p_SynthLab__LP1PFilter = {"_p_SynthLab__LP1PFilter", "SynthLab::LP1PFilter *", 0, 0, (void*)&_wrap_class_LP1PFilter, 0};
static swig_type_info _swigt__p_SynthLab__LP2Filter = {"_p_SynthLab__LP2Filter", "SynthLab::LP2Filter *", 0, 0, (void*)&_wrap_class_LP2Filter, 0};
static swig_type_info _swigt__p_SynthLab__Lane = {"_p_SynthLab__Lane", "SynthLab::Lane *", 0, 0, (void*)&_wrap_class_Lane, 0};
static swig_type_info _swigt__p_SynthLab__LaneStep = {"_p_SynthLab__LaneStep", "SynthLab::LaneStep *", 0, 0, (void*)&_wrap_class_LaneStep, 0};
static swig_type_info _swigt__p_SynthLab__LegacyPCMCore = {"_p_SynthLab__LegacyPCMCore", "SynthLab::LegacyPCMCore *", 0, 0, (void*)&_wrap_class_LegacyPCMCore, 0};
static swig_type_info _swigt__p_SynthLab__Limiter = {"_p_SynthLab__Limiter", "SynthLab::Limiter *", 0, 0, (void*)&_wrap_class_Limiter, 0};
static swig_type_info _swigt__p_SynthLab__LinPeakDetector = {"_p_SynthLab__LinPeakDetector", "SynthLab::LinPeakDetector *", 0, 0, (void*)&_wrap_class_LinPeakDetector, 0};
static swig_type_info _swigt__p_SynthLab__LinearEGCore = {"_p_SynthLab__LinearEGCore", "SynthLab::LinearEGCore *", 0, 0, (void*)&_wrap_class_LinearEGCore, 0};
static swig_type_info _swigt__p_SynthLab__LogPeakDetector = {"_p_SynthLab__LogPeakDetector", "SynthLab::LogPeakDetector *", 0, 0, (void*)&_wrap_class_LogPeakDetector, 0};
static swig_type_info _swigt__p_SynthLab__LookUpTable = {"_p_SynthLab__LookUpTable", "SynthLab::LookUpTable *", 0, 0, (void*)&_wrap_class_LookUpTable, 0};
static swig_type_info _swigt__p_SynthLab__LowShelfFilter = {"_p_SynthLab__LowShelfFilter", "SynthLab::LowShelfFilter *", 0, 0, (void*)&_wrap_class_LowShelfFilter, 0};
static swig_type_info _swigt__p_SynthLab__MIDINoteEvent = {"_p_SynthLab__MIDINoteEvent", "SynthLab::MIDINoteEvent *", 0, 0, (void*)&_wrap_class_MIDINoteEvent, 0};
static swig_type_info _swigt__p_SynthLab__MellotronCore = {"_p_SynthLab__MellotronCore", "SynthLab::MellotronCore *", 0, 0, (void*)&_wrap_class_MellotronCore, 0};
static swig_type_info _swigt__p_SynthLab__MidiInputData = {"_p_SynthLab__MidiInputData", "SynthLab::MidiInputData *", 0, 0, (void*)&_wrap_class_MidiInputData, 0};
static swig_type_info _swigt__p_SynthLab__MidiOutputData = {"_p_SynthLab__MidiOutputData", "SynthLab::MidiOutputData *", 0, 0, (void*)&_wrap_class_MidiOutputData, 0};
static swig_type_info _swigt__p_SynthLab__ModDestination = {"_p_SynthLab__ModDestination", "SynthLab::ModDestination *", 0, 0, (void*)&_wrap_class_ModDestination, 0};
static swig_type_info _swigt__p_SynthLab__ModMatrix = {"_p_SynthLab__ModMatrix", "SynthLab::ModMatrix *", 0, 0, (void*)&_wrap_class_ModMatrix, 0};
static swig_type_info _swigt__p_SynthLab__ModMatrixParameters = {"_p_SynthLab__ModMatrixParameters", "SynthLab::ModMatrixParameters *", 0, 0, (void*)&_wrap_class_ModMatrixParameters, 0};
static swig_type_info _swigt__p_SynthLab__ModSource = {"_p_SynthLab__ModSource", "SynthLab::ModSource *", 0, 0, (void*)&_wrap_class_ModSource, 0};
static swig_type_info _swigt__p_SynthLab__Modulators = {"_p_SynthLab__Modulators", "SynthLab::Modulators *", 0, 0, (void*)&_wrap_class_Modulators, 0};
static swig_type_info _swigt__p_SynthLab__ModuleCore = {"_p_SynthLab__ModuleCore", "SynthLab::ModuleCore *", 0, 0, (void*)&_wrap_class_ModuleCore, 0};
static swig_type_info _swigt__p_SynthLab__ModuleCoreData = {"_p_SynthLab__ModuleCoreData", "SynthLab::ModuleCoreData *", 0, 0, (void*)&_wrap_class_ModuleCoreData, 0};
static swig_type_info _swigt__p_SynthLab__MorphBankData = {"_p_SynthLab__MorphBankData", "SynthLab::MorphBankData *", 0, 0, (void*)&_wrap_class_MorphBankData, 0};
static swig_type_info _swigt__p_SynthLab__MorphWTCore = {"_p_SynthLab__MorphWTCore", "SynthLab::MorphWTCore *", 0, 0, (void*)&_wrap_class_MorphWTCore, 0};
static swig_type_info _swigt__p_SynthLab__NoiseGenerator = {"_p_SynthLab__NoiseGenerator", "SynthLab::NoiseGenerator *", 0, 0, (void*)&_wrap_class_NoiseGenerator, 0};
static swig_type_info _swigt__p_SynthLab__NoiseOscillator = {"_p_SynthLab__NoiseOscillator", "SynthLab::NoiseOscillator *", 0, 0, (void*)&_wrap_class_NoiseOscillator, 0};
static swig_type_info _swigt__p_SynthLab__NoiseOscillatorParameters = {"_p_SynthLab__NoiseOscillatorParameters", "SynthLab::NoiseOscillatorParameters *", 0, 0, (void*)&_wrap_class_NoiseOscillatorParameters, 0};
static swig_type_info _swigt__p_SynthLab__OscParameters = {"_p_SynthLab__OscParameters", "SynthLab::OscParameters *", 0, 0, (void*)&_wrap_class_OscParameters, 0};
static swig_type_info _swigt__p_SynthLab__Oscillator = {"_p_SynthLab__Oscillator", "SynthLab::Oscillator *", 0, 0, (void*)&_wrap_class_Oscillator, 0};
static swig_type_info _swigt__p_SynthLab__PCMOscParameters = {"_p_SynthLab__PCMOscParameters", "SynthLab::PCMOscParameters *", 0, 0, (void*)&_wrap_class_PCMOscParameters, 0};
static swig_type_info _swigt__p_SynthLab__PCMOscillator = {"_p_SynthLab__PCMOscillator", "SynthLab::PCMOscillator *", 0, 0, (void*)&_wrap_class_PCMOscillator, 0};
static swig_type_info _swigt__p_SynthLab__PCMSample = {"_p_SynthLab__PCMSample", "SynthLab::PCMSample *", 0, 0, (void*)&_wrap_class_PCMSample, 0};
static swig_type_info _swigt__p_SynthLab__PCMSampleDatabase = {"_p_SynthLab__PCMSampleDatabase", "SynthLab::PCMSampleDatabase *", 0, 0, (void*)&_wrap_class_PCMSampleDatabase, 0};
static swig_type_info _swigt__p_SynthLab__PCMSampleOutput = {"_p_SynthLab__PCMSampleOutput", "SynthLab::PCMSampleOutput *", 0, 0, (void*)&_wrap_class_PCMSampleOutput, 0};
static swig_type_info _swigt__p_SynthLab__ParametricFilter = {"_p_SynthLab__ParametricFilter", "SynthLab::ParametricFilter *", 0, 0, (void*)&_wrap_class_ParametricFilter, 0};
static swig_type_info _swigt__p_SynthLab__PluckPosFilter = {"_p_SynthLab__PluckPosFilter", "SynthLab::PluckPosFilter *", 0, 0, (void*)&_wrap_class_PluckPosFilter, 0};
static swig_type_info _swigt__p_SynthLab__PluginInfo = {"_p_SynthLab__PluginInfo", "SynthLab::PluginInfo *", 0, 0, (void*)&_wrap_class_PluginInfo, 0};
static swig_type_info _swigt__p_SynthLab__RIFF_CHUNK = {"_p_SynthLab__RIFF_CHUNK", "SynthLab::RIFF_CHUNK *", 0, 0, (void*)&_wrap_class_RIFF_CHUNK, 0};
static swig_type_info _swigt__p_SynthLab__RampModulator = {"_p_SynthLab__RampModulator", "SynthLab::RampModulator *", 0, 0, (void*)&_wrap_class_RampModulator, 0};
static swig_type_info _swigt__p_SynthLab__ResLoopFilter = {"_p_SynthLab__ResLoopFilter", "SynthLab::ResLoopFilter *", 0, 0, (void*)&_wrap_class_ResLoopFilter, 0};
static swig_type_info _swigt__p_SynthLab__Resonator = {"_p_SynthLab__Resonator", "SynthLab::Resonator *", 0, 0, (void*)&_wrap_class_Resonator, 0};
static swig_type_info _swigt__p_SynthLab__SFXWTCore = {"_p_SynthLab__SFXWTCore", "SynthLab::SFXWTCore *", 0, 0, (void*)&_wrap_class_SFXWTCore, 0};
static swig_type_info _swigt__p_SynthLab__SimpleLPF = {"_p_SynthLab__SimpleLPF", "SynthLab::SimpleLPF *", 0, 0, (void*)&_wrap_class_SimpleLPF, 0};
static swig_type_info _swigt__p_SynthLab__SineTableSource = {"_p_SynthLab__SineTableSource", "SynthLab::SineTableSource *", 0, 0, (void*)&_wrap_class_SineTableSource, 0};
static swig_type_info _swigt__p_SynthLab__SlewLimiter = {"_p_SynthLab__SlewLimiter", "SynthLab::SlewLimiter *", 0, 0, (void*)&_wrap_class_SlewLimiter, 0};
static swig_type_info _swigt__p_SynthLab__StaticTableSource = {"_p_SynthLab__StaticTableSource", "SynthLab::StaticTableSource *", 0, 0, (void*)&_wrap_class_StaticTableSource, 0};
static swig_type_info _swigt__p_SynthLab__StaticWavetable = {"_p_SynthLab__StaticWavetable", "SynthLab::StaticWavetable *", 0, 0, (void*)&_wrap_class_StaticWavetable, 0};
static swig_type_info _swigt__p_SynthLab__Synchronizer = {"_p_SynthLab__Synchronizer", "SynthLab::Synchronizer *", 0, 0, (void*)&_wrap_class_Synchronizer, 0};
static swig_type_info _swigt__p_SynthLab__SynthClock = {"_p_SynthLab__SynthClock", "SynthLab::SynthClock *", 0, 0, (void*)&_wrap_class_SynthClock, 0};
static swig_type_info _swigt__p_SynthLab__SynthEngine = {"_p_SynthLab__SynthEngine", "SynthLab::SynthEngine *", 0, 0, (void*)&_wrap_class_SynthEngine, 0};
static swig_type_info _swigt__p_SynthLab__SynthEngineParameters = {"_p_SynthLab__SynthEngineParameters", "SynthLab::SynthEngineParameters *", 0, 0, (void*)&_wrap_class_SynthEngineParameters, 0};
static swig_type_info _swigt__p_SynthLab__SynthFilter = {"_p_SynthLab__SynthFilter", "SynthLab::SynthFilter *", 0, 0, (void*)&_wrap_class_SynthFilter, 0};
static swig_type_info _swigt__p_SynthLab__SynthLFO = {"_p_SynthLab__SynthLFO", "SynthLab::SynthLFO *", 0, 0, (void*)&_wrap_class_SynthLFO, 0};
static swig_type_info _swigt__p_SynthLab__SynthLabBankSet = {"_p_SynthLab__SynthLabBankSet", "SynthLab::SynthLabBankSet *", 0, 0, (void*)&_wrap_class_SynthLabBankSet, 0};
static swig_type_info _swigt__p_SynthLab__SynthLabPCMSource = {"_p_SynthLab__SynthLabPCMSource", "SynthLab::SynthLabPCMSource *", 0, 0, (void*)&_wrap_class_SynthLabPCMSource, 0};
static swig_type_info _swigt__p_SynthLab__SynthLabTableSet = {"_p_SynthLab__SynthLabTableSet", "SynthLab::SynthLabTableSet *", 0, 0, (void*)&_wrap_class_SynthLabTableSet, 0};
static swig_type_info _swigt__p_SynthLab__SynthModule = {"_p_SynthLab__SynthModule", "SynthLab::SynthModule *", 0, 0, (void*)&_wrap_class_SynthModule, 0};
static swig_type_info _swigt__p_SynthLab__SynthProcessInfo = {"_p_SynthLab__SynthProcessInfo", "SynthLab::SynthProcessInfo *", 0, 0, (void*)&_wrap_class_SynthProcessInfo, 0};
static swig_type_info _swigt__p_SynthLab__SynthVoice = {"_p_SynthLab__SynthVoice", "SynthLab::SynthVoice *", 0, 0, (void*)&_wrap_class_SynthVoice, 0};
static swig_type_info _swigt__p_SynthLab__SynthVoiceParameters = {"_p_SynthLab__SynthVoiceParameters", "SynthLab::SynthVoiceParameters *", 0, 0, (void*)&_wrap_class_SynthVoiceParameters, 0};
static swig_type_info _swigt__p_SynthLab__Timer = {"_p_SynthLab__Timer", "SynthLab::Timer *", 0, 0, (void*)&_wrap_class_Timer, 0};
static swig_type_info _swigt__p_SynthLab__TinyBPF = {"_p_SynthLab__TinyBPF", "SynthLab::TinyBPF *", 0, 0, (void*)&_wrap_class_TinyBPF, 0};
static swig_type_info _swigt__p_SynthLab__TinyReson = {"_p_SynthLab__TinyReson", "SynthLab::TinyReson *", 0, 0, (void*)&_wrap_class_TinyReson, 0};
static swig_type_info _swigt__p_SynthLab__UWaveData = {"_p_SynthLab__UWaveData", "SynthLab::UWaveData *", 0, 0, (void*)&_wrap_class_UWaveData, 0};
static swig_type_info _swigt__p_SynthLab__VA1Coeffs = {"_p_SynthLab__VA1Coeffs", "SynthLab::VA1Coeffs *", 0, 0, (void*)&_wrap_class_VA1Coeffs, 0};
static swig_type_info _swigt__p_SynthLab__VAFilterCore = {"_p_SynthLab__VAFilterCore", "SynthLab::VAFilterCore *", 0, 0, (void*)&_wrap_class_VAFilterCore, 0};
static swig_type_info _swigt__p_SynthLab__VAOCore = {"_p_SynthLab__VAOCore", "SynthLab::VAOCore *", 0, 0, (void*)&_wrap_class_VAOCore, 0};
static swig_type_info _swigt__p_SynthLab__VAOscParameters = {"_p_SynthLab__VAOscParameters", "SynthLab::VAOscParameters *", 0, 0, (void*)&_wrap_class_VAOscParameters, 0};
static swig_type_info _swigt__p_SynthLab__VAOscillator = {"_p_SynthLab__VAOscillator", "SynthLab::VAOscillator *", 0, 0, (void*)&_wrap_class_VAOscillator, 0};
static swig_type_info _swigt__p_SynthLab__VectorXFadeData = {"_p_SynthLab__VectorXFadeData", "SynthLab::VectorXFadeData *", 0, 0, (void*)&_wrap_class_VectorXFadeData, 0};
static swig_type_info _swigt__p_SynthLab__WAVEFORMATEX_WP = {"_p_SynthLab__WAVEFORMATEX_WP", "SynthLab::WAVEFORMATEX_WP *", 0, 0, (void*)&_wrap_class_WAVEFORMATEX_WP, 0};
static swig_type_info _swigt__p_SynthLab__WAVE_FILE_HEADER = {"_p_SynthLab__WAVE_FILE_HEADER", "SynthLab::WAVE_FILE_HEADER *", 0, 0, (void*)&_wrap_class_WAVE_FILE_HEADER, 0};
static swig_type_info _swigt__p_SynthLab__WAVE_SAMPLE = {"_p_SynthLab__WAVE_SAMPLE", "SynthLab::WAVE_SAMPLE *", 0, 0, (void*)&_wrap_class_WAVE_SAMPLE, 0};
static swig_type_info _swigt__p_SynthLab__WSOscParameters = {"_p_SynthLab__WSOscParameters", "SynthLab::WSOscParameters *", 0, 0, (void*)&_wrap_class_WSOscParameters, 0};
static swig_type_info _swigt__p_SynthLab__WSOscillator = {"_p_SynthLab__WSOscillator", "SynthLab::WSOscillator *", 0, 0, (void*)&_wrap_class_WSOscillator, 0};
static swig_type_info _swigt__p_SynthLab__WTOscParameters = {"_p_SynthLab__WTOscParameters", "SynthLab::WTOscParameters *", 0, 0, (void*)&_wrap_class_WTOscParameters, 0};
static swig_type_info _swigt__p_SynthLab__WTOscillator = {"_p_SynthLab__WTOscillator", "SynthLab::WTOscillator *", 0, 0, (void*)&_wrap_class_WTOscillator, 0};
static swig_type_info _swigt__p_SynthLab__WaveFolder = {"_p_SynthLab__WaveFolder", "SynthLab::WaveFolder *", 0, 0, (void*)&_wrap_class_WaveFolder, 0};
static swig_type_info _swigt__p_SynthLab__WaveSequencer = {"_p_SynthLab__WaveSequencer", "SynthLab::WaveSequencer *", 0, 0, (void*)&_wrap_class_WaveSequencer, 0};
static swig_type_info _swigt__p_SynthLab__WaveSequencerParameters = {"_p_SynthLab__WaveSequencerParameters", "SynthLab::WaveSequencerParameters *", 0, 0, (void*)&_wrap_class_WaveSequencerParameters, 0};
static swig_type_info _swigt__p_SynthLab__WaveSequencerStatusMeters = {"_p_SynthLab__WaveSequencerStatusMeters", "SynthLab::WaveSequencerStatusMeters *", 0, 0, (void*)&_wrap_class_WaveSequencerStatusMeters, 0};
static swig_type_info _swigt__p_SynthLab__WaveSliceCore = {"_p_SynthLab__WaveSliceCore", "SynthLab::WaveSliceCore *", 0, 0, (void*)&_wrap_class_WaveSliceCore, 0};
static swig_type_info _swigt__p_SynthLab__WaveStringData = {"_p_SynthLab__WaveStringData", "SynthLab::WaveStringData *", 0, 0, (void*)&_wrap_class_WaveStringData, 0};
static swig_type_info _swigt__p_SynthLab__WavetableDatabase = {"_p_SynthLab__WavetableDatabase", "SynthLab::WavetableDatabase *", 0, 0, (void*)&_wrap_class_WavetableDatabase, 0};
static swig_type_info _swigt__p_SynthLab__WavetableSource = {"_p_SynthLab__WavetableSource", "SynthLab::WavetableSource *", 0, 0, (void*)&_wrap_class_WavetableSource, 0};
static swig_type_info _swigt__p_SynthLab__XFadeData = {"_p_SynthLab__XFadeData", "SynthLab::XFadeData *", 0, 0, (void*)&_wrap_class_XFadeData, 0};
static swig_type_info _swigt__p_SynthLab__XFader = {"_p_SynthLab__XFader", "SynthLab::XFader *", 0, 0, (void*)&_wrap_class_XFader, 0};
static swig_type_info _swigt__p_SynthLab__XHoldFader = {"_p_SynthLab__XHoldFader", "SynthLab::XHoldFader *", 0, 0, (void*)&_wrap_class_XHoldFader, 0};
static swig_type_info _swigt__p_SynthLab__convertUpper = {"_p_SynthLab__convertUpper", "SynthLab::convertUpper *", 0, 0, (void*)&_wrap_class_convertUpper, 0};
static swig_type_info _swigt__p_SynthLab__midiEvent = {"_p_SynthLab__midiEvent", "SynthLab::midiEvent *", 0, 0, (void*)&_wrap_class_midiEvent, 0};
static swig_type_info _swigt__p_Wavetable = {"_p_Wavetable", "Wavetable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XFadeData = {"_p_XFadeData", "XFadeData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XFadeType = {"_p_XFadeType", "XFadeType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "f64 *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_float__float = {"_p_f_float__float", "float (*)(float)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_q_const__float__float = {"_p_f_r_q_const__float__float", "float (*)(float const &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fenv_t = {"_p_fenv_t", "fenv_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fexcept_t = {"_p_fexcept_t", "fexcept_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "f32 *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|i32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int32_t = {"_p_int32_t", "int32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "ilong *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "long long *|i64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_midiEvent = {"_p_midiEvent", "midiEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_SynthLab__PCMSample = {"_p_p_SynthLab__PCMSample", "SynthLab::PCMSample **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_SynthLab__SynthLabTableSet = {"_p_p_SynthLab__SynthLabTableSet", "SynthLab::SynthLabTableSet **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_float = {"_p_p_float", "float **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_uint64_t = {"_p_p_uint64_t", "uint64_t **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|i16 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|i8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "std::complex< double > *", 0, 0, (void*)&_wrap_class_double_complex, 0};
static swig_type_info _swigt__p_std__complexT_float_t = {"_p_std__complexT_float_t", "std::complex< float > *", 0, 0, (void*)&_wrap_class_float_complex, 0};
static swig_type_info _swigt__p_std__default_random_engine = {"_p_std__default_random_engine", "std::default_random_engine *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__gslice = {"_p_std__gslice", "std::gslice *", 0, 0, (void*)&_wrap_class_gslice, 0};
static swig_type_info _swigt__p_std__gslice_arrayT_float_t = {"_p_std__gslice_arrayT_float_t", "std::gslice_array< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__indirect_arrayT_float_t = {"_p_std__indirect_arrayT_float_t", "std::indirect_array< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_int_std__string_t = {"_p_std__mapT_int_std__string_t", "std::map< int,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mask_arrayT_float_t = {"_p_std__mask_arrayT_float_t", "std::mask_array< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_double_t = {"_p_std__numeric_limitsT_double_t", "std::numeric_limits< double > *", 0, 0, (void*)&_wrap_class_double_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_float_t = {"_p_std__numeric_limitsT_float_t", "std::numeric_limits< float > *", 0, 0, (void*)&_wrap_class_float_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_int_t = {"_p_std__numeric_limitsT_int_t", "std::numeric_limits< int > *", 0, 0, (void*)&_wrap_class_int_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_long_long_t = {"_p_std__numeric_limitsT_long_long_t", "std::numeric_limits< long long > *", 0, 0, (void*)&_wrap_class_llong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_long_t = {"_p_std__numeric_limitsT_long_t", "std::numeric_limits< long > *", 0, 0, (void*)&_wrap_class_long_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_short_t = {"_p_std__numeric_limitsT_short_t", "std::numeric_limits< short > *", 0, 0, (void*)&_wrap_class_short_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_int_t = {"_p_std__numeric_limitsT_unsigned_int_t", "std::numeric_limits< unsigned int > *", 0, 0, (void*)&_wrap_class_uint_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_long_long_t = {"_p_std__numeric_limitsT_unsigned_long_long_t", "std::numeric_limits< unsigned long long > *", 0, 0, (void*)&_wrap_class_ullong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_long_t = {"_p_std__numeric_limitsT_unsigned_long_t", "std::numeric_limits< unsigned long > *", 0, 0, (void*)&_wrap_class_ulong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_short_t = {"_p_std__numeric_limitsT_unsigned_short_t", "std::numeric_limits< unsigned short > *", 0, 0, (void*)&_wrap_class_ushort_numeric_limits, 0};
static swig_type_info _swigt__p_std__shared_ptrT_FilterParameters_t = {"_p_std__shared_ptrT_FilterParameters_t", "std::shared_ptr< FilterParameters > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_SynthLab__AudioBuffer_t = {"_p_std__shared_ptrT_SynthLab__AudioBuffer_t", "std::shared_ptr< SynthLab::AudioBuffer > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_SynthLab__AudioDelayParameters_t = {"_p_std__shared_ptrT_SynthLab__AudioDelayParameters_t", "std::shared_ptr< SynthLab::AudioDelayParameters > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_SynthLab__DCAParameters_t = {"_p_std__shared_ptrT_SynthLab__DCAParameters_t", "std::shared_ptr< SynthLab::DCAParameters > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_SynthLab__EGParameters_t = {"_p_std__shared_ptrT_SynthLab__EGParameters_t", "std::shared_ptr< SynthLab::EGParameters > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_SynthLab__FMOperatorParameters_t = {"_p_std__shared_ptrT_SynthLab__FMOperatorParameters_t", "std::shared_ptr< SynthLab::FMOperatorParameters > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_SynthLab__LFOParameters_t = {"_p_std__shared_ptrT_SynthLab__LFOParameters_t", "std::shared_ptr< SynthLab::LFOParameters > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_SynthLab__MidiInputData_t = {"_p_std__shared_ptrT_SynthLab__MidiInputData_t", "std::shared_ptr< SynthLab::MidiInputData > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_SynthLab__MidiOutputData_t = {"_p_std__shared_ptrT_SynthLab__MidiOutputData_t", "std::shared_ptr< SynthLab::MidiOutputData > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_SynthLab__ModMatrixParameters_t = {"_p_std__shared_ptrT_SynthLab__ModMatrixParameters_t", "std::shared_ptr< SynthLab::ModMatrixParameters > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_SynthLab__Modulators_t = {"_p_std__shared_ptrT_SynthLab__Modulators_t", "std::shared_ptr< SynthLab::Modulators > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_SynthLab__ModuleCore_t = {"_p_std__shared_ptrT_SynthLab__ModuleCore_t", "std::shared_ptr< SynthLab::ModuleCore > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_SynthLab__NoiseOscillatorParameters_t = {"_p_std__shared_ptrT_SynthLab__NoiseOscillatorParameters_t", "std::shared_ptr< SynthLab::NoiseOscillatorParameters > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_SynthLab__OscParameters_t = {"_p_std__shared_ptrT_SynthLab__OscParameters_t", "std::shared_ptr< SynthLab::OscParameters > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_SynthLab__PCMOscParameters_t = {"_p_std__shared_ptrT_SynthLab__PCMOscParameters_t", "std::shared_ptr< SynthLab::PCMOscParameters > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_SynthLab__PCMSampleDatabase_t = {"_p_std__shared_ptrT_SynthLab__PCMSampleDatabase_t", "std::shared_ptr< SynthLab::PCMSampleDatabase > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_SynthLab__SynthEngineParameters_t = {"_p_std__shared_ptrT_SynthLab__SynthEngineParameters_t", "std::shared_ptr< SynthLab::SynthEngineParameters > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_SynthLab__SynthVoiceParameters_t = {"_p_std__shared_ptrT_SynthLab__SynthVoiceParameters_t", "std::shared_ptr< SynthLab::SynthVoiceParameters > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_SynthLab__VAOscParameters_t = {"_p_std__shared_ptrT_SynthLab__VAOscParameters_t", "std::shared_ptr< SynthLab::VAOscParameters > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_SynthLab__WTOscParameters_t = {"_p_std__shared_ptrT_SynthLab__WTOscParameters_t", "std::shared_ptr< SynthLab::WTOscParameters > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_SynthLab__WavetableDatabase_t = {"_p_std__shared_ptrT_SynthLab__WavetableDatabase_t", "std::shared_ptr< SynthLab::WavetableDatabase > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_SynthVoiceParameters_t = {"_p_std__shared_ptrT_SynthVoiceParameters_t", "std::shared_ptr< SynthVoiceParameters > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_WTOscillator_t = {"_p_std__shared_ptrT_WTOscillator_t", "std::shared_ptr< WTOscillator > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_double_t = {"_p_std__shared_ptrT_double_t", "std::shared_ptr< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_std__arrayT_SynthLab__ModDestination_SynthLab__kNumberModDestinations_t_t = {"_p_std__shared_ptrT_std__arrayT_SynthLab__ModDestination_SynthLab__kNumberModDestinations_t_t", "std::shared_ptr< std::array< SynthLab::ModDestination,SynthLab::kNumberModDestinations > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_std__arrayT_SynthLab__ModSource_SynthLab__kNumberModSources_t_t = {"_p_std__shared_ptrT_std__arrayT_SynthLab__ModSource_SynthLab__kNumberModSources_t_t", "std::shared_ptr< std::array< SynthLab::ModSource,SynthLab::kNumberModSources > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__slice = {"_p_std__slice", "std::slice *", 0, 0, (void*)&_wrap_class_slice, 0};
static swig_type_info _swigt__p_std__slice_arrayT_float_t = {"_p_std__slice_arrayT_float_t", "std::slice_array< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__valarrayT_float_t = {"_p_std__valarrayT_float_t", "std::valarray< float > *", 0, 0, (void*)&_wrap_class_float_valarray, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< double > *", 0, 0, (void*)&_wrap_class_double_vector, 0};
static swig_type_info _swigt__p_std__vectorT_float_t = {"_p_std__vectorT_float_t", "std::vector< float > *", 0, 0, (void*)&_wrap_class_float_vector, 0};
static swig_type_info _swigt__p_std__vectorT_std__complexT_double_t_t = {"_p_std__vectorT_std__complexT_double_t_t", "std::vector< std::complex< double > > *", 0, 0, (void*)&_wrap_class_complex_double_vector, 0};
static swig_type_info _swigt__p_std__vectorT_std__complexT_float_t_t = {"_p_std__vectorT_std__complexT_float_t_t", "std::vector< std::complex< float > > *", 0, 0, (void*)&_wrap_class_complex_float_vector, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_double_t = {"_p_std__vector_iteratorT_double_t", "std::vector_iterator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_float_t = {"_p_std__vector_iteratorT_float_t", "std::vector_iterator< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_std__complexT_double_t_t = {"_p_std__vector_iteratorT_std__complexT_double_t_t", "std::vector_iterator< std::complex< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_std__complexT_float_t_t = {"_p_std__vector_iteratorT_std__complexT_float_t_t", "std::vector_iterator< std::complex< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint16_t = {"_p_uint16_t", "uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint32_t = {"_p_uint32_t", "uint32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint64_t = {"_p_uint64_t", "uint64_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "u8 *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *|u32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "ulong *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "unsigned long long *|u64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|u16 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_GlideInfo,
  &_swigt__p_MIDINoteEvent,
  &_swigt__p_ModuleCoreData,
  &_swigt__p_SynthLab__AnalogEGCore,
  &_swigt__p_SynthLab__AudioBuffer,
  &_swigt__p_SynthLab__AudioDelay,
  &_swigt__p_SynthLab__AudioDelayParameters,
  &_swigt__p_SynthLab__BQAudioFilter,
  &_swigt__p_SynthLab__BQCoeffs,
  &_swigt__p_SynthLab__BQFilterCore,
  &_swigt__p_SynthLab__BasicLookupTables,
  &_swigt__p_SynthLab__ClassicWTCore,
  &_swigt__p_SynthLab__CoreProcData,
  &_swigt__p_SynthLab__DCA,
  &_swigt__p_SynthLab__DCAParameters,
  &_swigt__p_SynthLab__DCRemovalFilter,
  &_swigt__p_SynthLab__DMConfig,
  &_swigt__p_SynthLab__DXEG,
  &_swigt__p_SynthLab__DXEGCore,
  &_swigt__p_SynthLab__DelayLine,
  &_swigt__p_SynthLab__DrumWTCore,
  &_swigt__p_SynthLab__DrumWTSource,
  &_swigt__p_SynthLab__DynamicTableSource,
  &_swigt__p_SynthLab__DynamicWavetable,
  &_swigt__p_SynthLab__EGParameters,
  &_swigt__p_SynthLab__EnvelopeGenerator,
  &_swigt__p_SynthLab__Exciter,
  &_swigt__p_SynthLab__ExciterEG,
  &_swigt__p_SynthLab__ExciterParameters,
  &_swigt__p_SynthLab__FMLFOCore,
  &_swigt__p_SynthLab__FMOCore,
  &_swigt__p_SynthLab__FMOperator,
  &_swigt__p_SynthLab__FMOperatorParameters,
  &_swigt__p_SynthLab__FilterOutput,
  &_swigt__p_SynthLab__FilterParameters,
  &_swigt__p_SynthLab__FourierWTCore,
  &_swigt__p_SynthLab__FracDelayAPF,
  &_swigt__p_SynthLab__GlideInfo,
  &_swigt__p_SynthLab__GlideModulator,
  &_swigt__p_SynthLab__HP2Filter,
  &_swigt__p_SynthLab__HighShelfFilter,
  &_swigt__p_SynthLab__IFilterBase,
  &_swigt__p_SynthLab__IMidiInputData,
  &_swigt__p_SynthLab__IModulator,
  &_swigt__p_SynthLab__IPCMSampleDatabase,
  &_swigt__p_SynthLab__IPCMSampleSource,
  &_swigt__p_SynthLab__IWavetableDatabase,
  &_swigt__p_SynthLab__IWavetableSource,
  &_swigt__p_SynthLab__KSOCore,
  &_swigt__p_SynthLab__KSOscParameters,
  &_swigt__p_SynthLab__KSOscillator,
  &_swigt__p_SynthLab__LFOCore,
  &_swigt__p_SynthLab__LFOParameters,
  &_swigt__p_SynthLab__LP1PFilter,
  &_swigt__p_SynthLab__LP2Filter,
  &_swigt__p_SynthLab__Lane,
  &_swigt__p_SynthLab__LaneStep,
  &_swigt__p_SynthLab__LegacyPCMCore,
  &_swigt__p_SynthLab__Limiter,
  &_swigt__p_SynthLab__LinPeakDetector,
  &_swigt__p_SynthLab__LinearEGCore,
  &_swigt__p_SynthLab__LogPeakDetector,
  &_swigt__p_SynthLab__LookUpTable,
  &_swigt__p_SynthLab__LowShelfFilter,
  &_swigt__p_SynthLab__MIDINoteEvent,
  &_swigt__p_SynthLab__MellotronCore,
  &_swigt__p_SynthLab__MidiInputData,
  &_swigt__p_SynthLab__MidiOutputData,
  &_swigt__p_SynthLab__ModDestination,
  &_swigt__p_SynthLab__ModMatrix,
  &_swigt__p_SynthLab__ModMatrixParameters,
  &_swigt__p_SynthLab__ModSource,
  &_swigt__p_SynthLab__Modulators,
  &_swigt__p_SynthLab__ModuleCore,
  &_swigt__p_SynthLab__ModuleCoreData,
  &_swigt__p_SynthLab__MorphBankData,
  &_swigt__p_SynthLab__MorphWTCore,
  &_swigt__p_SynthLab__NoiseGenerator,
  &_swigt__p_SynthLab__NoiseOscillator,
  &_swigt__p_SynthLab__NoiseOscillatorParameters,
  &_swigt__p_SynthLab__OscParameters,
  &_swigt__p_SynthLab__Oscillator,
  &_swigt__p_SynthLab__PCMOscParameters,
  &_swigt__p_SynthLab__PCMOscillator,
  &_swigt__p_SynthLab__PCMSample,
  &_swigt__p_SynthLab__PCMSampleDatabase,
  &_swigt__p_SynthLab__PCMSampleOutput,
  &_swigt__p_SynthLab__ParametricFilter,
  &_swigt__p_SynthLab__PluckPosFilter,
  &_swigt__p_SynthLab__PluginInfo,
  &_swigt__p_SynthLab__RIFF_CHUNK,
  &_swigt__p_SynthLab__RampModulator,
  &_swigt__p_SynthLab__ResLoopFilter,
  &_swigt__p_SynthLab__Resonator,
  &_swigt__p_SynthLab__SFXWTCore,
  &_swigt__p_SynthLab__SimpleLPF,
  &_swigt__p_SynthLab__SineTableSource,
  &_swigt__p_SynthLab__SlewLimiter,
  &_swigt__p_SynthLab__StaticTableSource,
  &_swigt__p_SynthLab__StaticWavetable,
  &_swigt__p_SynthLab__Synchronizer,
  &_swigt__p_SynthLab__SynthClock,
  &_swigt__p_SynthLab__SynthEngine,
  &_swigt__p_SynthLab__SynthEngineParameters,
  &_swigt__p_SynthLab__SynthFilter,
  &_swigt__p_SynthLab__SynthLFO,
  &_swigt__p_SynthLab__SynthLabBankSet,
  &_swigt__p_SynthLab__SynthLabPCMSource,
  &_swigt__p_SynthLab__SynthLabTableSet,
  &_swigt__p_SynthLab__SynthModule,
  &_swigt__p_SynthLab__SynthProcessInfo,
  &_swigt__p_SynthLab__SynthVoice,
  &_swigt__p_SynthLab__SynthVoiceParameters,
  &_swigt__p_SynthLab__Timer,
  &_swigt__p_SynthLab__TinyBPF,
  &_swigt__p_SynthLab__TinyReson,
  &_swigt__p_SynthLab__UWaveData,
  &_swigt__p_SynthLab__VA1Coeffs,
  &_swigt__p_SynthLab__VAFilterCore,
  &_swigt__p_SynthLab__VAOCore,
  &_swigt__p_SynthLab__VAOscParameters,
  &_swigt__p_SynthLab__VAOscillator,
  &_swigt__p_SynthLab__VectorXFadeData,
  &_swigt__p_SynthLab__WAVEFORMATEX_WP,
  &_swigt__p_SynthLab__WAVE_FILE_HEADER,
  &_swigt__p_SynthLab__WAVE_SAMPLE,
  &_swigt__p_SynthLab__WSOscParameters,
  &_swigt__p_SynthLab__WSOscillator,
  &_swigt__p_SynthLab__WTOscParameters,
  &_swigt__p_SynthLab__WTOscillator,
  &_swigt__p_SynthLab__WaveFolder,
  &_swigt__p_SynthLab__WaveSequencer,
  &_swigt__p_SynthLab__WaveSequencerParameters,
  &_swigt__p_SynthLab__WaveSequencerStatusMeters,
  &_swigt__p_SynthLab__WaveSliceCore,
  &_swigt__p_SynthLab__WaveStringData,
  &_swigt__p_SynthLab__WavetableDatabase,
  &_swigt__p_SynthLab__WavetableSource,
  &_swigt__p_SynthLab__XFadeData,
  &_swigt__p_SynthLab__XFader,
  &_swigt__p_SynthLab__XHoldFader,
  &_swigt__p_SynthLab__convertUpper,
  &_swigt__p_SynthLab__midiEvent,
  &_swigt__p_Wavetable,
  &_swigt__p_XFadeData,
  &_swigt__p_XFadeType,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_f_float__float,
  &_swigt__p_f_r_q_const__float__float,
  &_swigt__p_fenv_t,
  &_swigt__p_fexcept_t,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_int32_t,
  &_swigt__p_long,
  &_swigt__p_long_long,
  &_swigt__p_midiEvent,
  &_swigt__p_p_SynthLab__PCMSample,
  &_swigt__p_p_SynthLab__SynthLabTableSet,
  &_swigt__p_p_char,
  &_swigt__p_p_float,
  &_swigt__p_p_uint64_t,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__complexT_float_t,
  &_swigt__p_std__default_random_engine,
  &_swigt__p_std__gslice,
  &_swigt__p_std__gslice_arrayT_float_t,
  &_swigt__p_std__indirect_arrayT_float_t,
  &_swigt__p_std__mapT_int_std__string_t,
  &_swigt__p_std__mask_arrayT_float_t,
  &_swigt__p_std__numeric_limitsT_double_t,
  &_swigt__p_std__numeric_limitsT_float_t,
  &_swigt__p_std__numeric_limitsT_int_t,
  &_swigt__p_std__numeric_limitsT_long_long_t,
  &_swigt__p_std__numeric_limitsT_long_t,
  &_swigt__p_std__numeric_limitsT_short_t,
  &_swigt__p_std__numeric_limitsT_unsigned_int_t,
  &_swigt__p_std__numeric_limitsT_unsigned_long_long_t,
  &_swigt__p_std__numeric_limitsT_unsigned_long_t,
  &_swigt__p_std__numeric_limitsT_unsigned_short_t,
  &_swigt__p_std__shared_ptrT_FilterParameters_t,
  &_swigt__p_std__shared_ptrT_SynthLab__AudioBuffer_t,
  &_swigt__p_std__shared_ptrT_SynthLab__AudioDelayParameters_t,
  &_swigt__p_std__shared_ptrT_SynthLab__DCAParameters_t,
  &_swigt__p_std__shared_ptrT_SynthLab__EGParameters_t,
  &_swigt__p_std__shared_ptrT_SynthLab__FMOperatorParameters_t,
  &_swigt__p_std__shared_ptrT_SynthLab__LFOParameters_t,
  &_swigt__p_std__shared_ptrT_SynthLab__MidiInputData_t,
  &_swigt__p_std__shared_ptrT_SynthLab__MidiOutputData_t,
  &_swigt__p_std__shared_ptrT_SynthLab__ModMatrixParameters_t,
  &_swigt__p_std__shared_ptrT_SynthLab__Modulators_t,
  &_swigt__p_std__shared_ptrT_SynthLab__ModuleCore_t,
  &_swigt__p_std__shared_ptrT_SynthLab__NoiseOscillatorParameters_t,
  &_swigt__p_std__shared_ptrT_SynthLab__OscParameters_t,
  &_swigt__p_std__shared_ptrT_SynthLab__PCMOscParameters_t,
  &_swigt__p_std__shared_ptrT_SynthLab__PCMSampleDatabase_t,
  &_swigt__p_std__shared_ptrT_SynthLab__SynthEngineParameters_t,
  &_swigt__p_std__shared_ptrT_SynthLab__SynthVoiceParameters_t,
  &_swigt__p_std__shared_ptrT_SynthLab__VAOscParameters_t,
  &_swigt__p_std__shared_ptrT_SynthLab__WTOscParameters_t,
  &_swigt__p_std__shared_ptrT_SynthLab__WavetableDatabase_t,
  &_swigt__p_std__shared_ptrT_SynthVoiceParameters_t,
  &_swigt__p_std__shared_ptrT_WTOscillator_t,
  &_swigt__p_std__shared_ptrT_double_t,
  &_swigt__p_std__shared_ptrT_std__arrayT_SynthLab__ModDestination_SynthLab__kNumberModDestinations_t_t,
  &_swigt__p_std__shared_ptrT_std__arrayT_SynthLab__ModSource_SynthLab__kNumberModSources_t_t,
  &_swigt__p_std__slice,
  &_swigt__p_std__slice_arrayT_float_t,
  &_swigt__p_std__string,
  &_swigt__p_std__valarrayT_float_t,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_float_t,
  &_swigt__p_std__vectorT_std__complexT_double_t_t,
  &_swigt__p_std__vectorT_std__complexT_float_t_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__vector_iteratorT_double_t,
  &_swigt__p_std__vector_iteratorT_float_t,
  &_swigt__p_std__vector_iteratorT_std__complexT_double_t_t,
  &_swigt__p_std__vector_iteratorT_std__complexT_float_t_t,
  &_swigt__p_uint16_t,
  &_swigt__p_uint32_t,
  &_swigt__p_uint64_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_GlideInfo[] = {  {&_swigt__p_GlideInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MIDINoteEvent[] = {  {&_swigt__p_MIDINoteEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ModuleCoreData[] = {  {&_swigt__p_ModuleCoreData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__AnalogEGCore[] = {  {&_swigt__p_SynthLab__AnalogEGCore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__AudioBuffer[] = {  {&_swigt__p_SynthLab__SynthProcessInfo, _p_SynthLab__SynthProcessInfoTo_p_SynthLab__AudioBuffer, 0, 0},  {&_swigt__p_SynthLab__AudioBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__AudioDelay[] = {  {&_swigt__p_SynthLab__AudioDelay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__AudioDelayParameters[] = {  {&_swigt__p_SynthLab__AudioDelayParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__BQAudioFilter[] = {  {&_swigt__p_SynthLab__BQAudioFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__BQCoeffs[] = {  {&_swigt__p_SynthLab__BQCoeffs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__BQFilterCore[] = {  {&_swigt__p_SynthLab__BQFilterCore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__BasicLookupTables[] = {  {&_swigt__p_SynthLab__BasicLookupTables, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__ClassicWTCore[] = {  {&_swigt__p_SynthLab__ClassicWTCore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__CoreProcData[] = {  {&_swigt__p_SynthLab__CoreProcData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__DCA[] = {  {&_swigt__p_SynthLab__DCA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__DCAParameters[] = {  {&_swigt__p_SynthLab__DCAParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__DCRemovalFilter[] = {  {&_swigt__p_SynthLab__DCRemovalFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__DMConfig[] = {  {&_swigt__p_SynthLab__DMConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__DXEG[] = {  {&_swigt__p_SynthLab__DXEG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__DXEGCore[] = {  {&_swigt__p_SynthLab__DXEGCore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__DelayLine[] = {  {&_swigt__p_SynthLab__DelayLine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__DrumWTCore[] = {  {&_swigt__p_SynthLab__DrumWTCore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__DrumWTSource[] = {  {&_swigt__p_SynthLab__DrumWTSource, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__DynamicTableSource[] = {  {&_swigt__p_SynthLab__DynamicTableSource, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__DynamicWavetable[] = {  {&_swigt__p_SynthLab__DynamicWavetable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__EGParameters[] = {  {&_swigt__p_SynthLab__EGParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__EnvelopeGenerator[] = {  {&_swigt__p_SynthLab__EnvelopeGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__Exciter[] = {  {&_swigt__p_SynthLab__Exciter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__ExciterEG[] = {  {&_swigt__p_SynthLab__ExciterEG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__ExciterParameters[] = {  {&_swigt__p_SynthLab__ExciterParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__FMLFOCore[] = {  {&_swigt__p_SynthLab__FMLFOCore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__FMOCore[] = {  {&_swigt__p_SynthLab__FMOCore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__FMOperator[] = {  {&_swigt__p_SynthLab__FMOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__FMOperatorParameters[] = {  {&_swigt__p_SynthLab__FMOperatorParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__FilterOutput[] = {  {&_swigt__p_SynthLab__FilterOutput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__FilterParameters[] = {  {&_swigt__p_SynthLab__FilterParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__FourierWTCore[] = {  {&_swigt__p_SynthLab__FourierWTCore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__FracDelayAPF[] = {  {&_swigt__p_SynthLab__FracDelayAPF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__GlideInfo[] = {  {&_swigt__p_SynthLab__GlideInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__GlideModulator[] = {  {&_swigt__p_SynthLab__GlideModulator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__HP2Filter[] = {  {&_swigt__p_SynthLab__HP2Filter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__HighShelfFilter[] = {  {&_swigt__p_SynthLab__HighShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__IFilterBase[] = {  {&_swigt__p_SynthLab__IFilterBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__IMidiInputData[] = {  {&_swigt__p_SynthLab__IMidiInputData, 0, 0, 0},  {&_swigt__p_SynthLab__MidiInputData, _p_SynthLab__MidiInputDataTo_p_SynthLab__IMidiInputData, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__IModulator[] = {  {&_swigt__p_SynthLab__IModulator, 0, 0, 0},  {&_swigt__p_SynthLab__Modulators, _p_SynthLab__ModulatorsTo_p_SynthLab__IModulator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__IPCMSampleDatabase[] = {  {&_swigt__p_SynthLab__IPCMSampleDatabase, 0, 0, 0},  {&_swigt__p_SynthLab__PCMSampleDatabase, _p_SynthLab__PCMSampleDatabaseTo_p_SynthLab__IPCMSampleDatabase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__IPCMSampleSource[] = {  {&_swigt__p_SynthLab__IPCMSampleSource, 0, 0, 0},  {&_swigt__p_SynthLab__SynthLabPCMSource, _p_SynthLab__SynthLabPCMSourceTo_p_SynthLab__IPCMSampleSource, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__IWavetableDatabase[] = {  {&_swigt__p_SynthLab__IWavetableDatabase, 0, 0, 0},  {&_swigt__p_SynthLab__WavetableDatabase, _p_SynthLab__WavetableDatabaseTo_p_SynthLab__IWavetableDatabase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__IWavetableSource[] = {  {&_swigt__p_SynthLab__DrumWTSource, _p_SynthLab__DrumWTSourceTo_p_SynthLab__IWavetableSource, 0, 0},  {&_swigt__p_SynthLab__IWavetableSource, 0, 0, 0},  {&_swigt__p_SynthLab__StaticTableSource, _p_SynthLab__StaticTableSourceTo_p_SynthLab__IWavetableSource, 0, 0},  {&_swigt__p_SynthLab__DynamicTableSource, _p_SynthLab__DynamicTableSourceTo_p_SynthLab__IWavetableSource, 0, 0},  {&_swigt__p_SynthLab__SineTableSource, _p_SynthLab__SineTableSourceTo_p_SynthLab__IWavetableSource, 0, 0},  {&_swigt__p_SynthLab__WavetableSource, _p_SynthLab__WavetableSourceTo_p_SynthLab__IWavetableSource, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__KSOCore[] = {  {&_swigt__p_SynthLab__KSOCore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__KSOscParameters[] = {  {&_swigt__p_SynthLab__KSOscParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__KSOscillator[] = {  {&_swigt__p_SynthLab__KSOscillator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__LFOCore[] = {  {&_swigt__p_SynthLab__LFOCore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__LFOParameters[] = {  {&_swigt__p_SynthLab__LFOParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__LP1PFilter[] = {  {&_swigt__p_SynthLab__LP1PFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__LP2Filter[] = {  {&_swigt__p_SynthLab__LP2Filter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__Lane[] = {  {&_swigt__p_SynthLab__Lane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__LaneStep[] = {  {&_swigt__p_SynthLab__LaneStep, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__LegacyPCMCore[] = {  {&_swigt__p_SynthLab__LegacyPCMCore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__Limiter[] = {  {&_swigt__p_SynthLab__Limiter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__LinPeakDetector[] = {  {&_swigt__p_SynthLab__LinPeakDetector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__LinearEGCore[] = {  {&_swigt__p_SynthLab__LinearEGCore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__LogPeakDetector[] = {  {&_swigt__p_SynthLab__LogPeakDetector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__LookUpTable[] = {  {&_swigt__p_SynthLab__LookUpTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__LowShelfFilter[] = {  {&_swigt__p_SynthLab__LowShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__MIDINoteEvent[] = {  {&_swigt__p_SynthLab__MIDINoteEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__MellotronCore[] = {  {&_swigt__p_SynthLab__MellotronCore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__MidiInputData[] = {  {&_swigt__p_SynthLab__MidiInputData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__MidiOutputData[] = {  {&_swigt__p_SynthLab__MidiOutputData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__ModDestination[] = {  {&_swigt__p_SynthLab__ModDestination, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__ModMatrix[] = {  {&_swigt__p_SynthLab__ModMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__ModMatrixParameters[] = {  {&_swigt__p_SynthLab__ModMatrixParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__ModSource[] = {  {&_swigt__p_SynthLab__ModSource, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__Modulators[] = {  {&_swigt__p_SynthLab__Modulators, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__ModuleCore[] = {  {&_swigt__p_SynthLab__FMOCore, _p_SynthLab__FMOCoreTo_p_SynthLab__ModuleCore, 0, 0},  {&_swigt__p_SynthLab__LFOCore, _p_SynthLab__LFOCoreTo_p_SynthLab__ModuleCore, 0, 0},  {&_swigt__p_SynthLab__FMLFOCore, _p_SynthLab__FMLFOCoreTo_p_SynthLab__ModuleCore, 0, 0},  {&_swigt__p_SynthLab__MellotronCore, _p_SynthLab__MellotronCoreTo_p_SynthLab__ModuleCore, 0, 0},  {&_swigt__p_SynthLab__AnalogEGCore, _p_SynthLab__AnalogEGCoreTo_p_SynthLab__ModuleCore, 0, 0},  {&_swigt__p_SynthLab__KSOCore, _p_SynthLab__KSOCoreTo_p_SynthLab__ModuleCore, 0, 0},  {&_swigt__p_SynthLab__LinearEGCore, _p_SynthLab__LinearEGCoreTo_p_SynthLab__ModuleCore, 0, 0},  {&_swigt__p_SynthLab__DXEGCore, _p_SynthLab__DXEGCoreTo_p_SynthLab__ModuleCore, 0, 0},  {&_swigt__p_SynthLab__WaveSliceCore, _p_SynthLab__WaveSliceCoreTo_p_SynthLab__ModuleCore, 0, 0},  {&_swigt__p_SynthLab__VAOCore, _p_SynthLab__VAOCoreTo_p_SynthLab__ModuleCore, 0, 0},  {&_swigt__p_SynthLab__ModuleCore, 0, 0, 0},  {&_swigt__p_SynthLab__DrumWTCore, _p_SynthLab__DrumWTCoreTo_p_SynthLab__ModuleCore, 0, 0},  {&_swigt__p_SynthLab__ClassicWTCore, _p_SynthLab__ClassicWTCoreTo_p_SynthLab__ModuleCore, 0, 0},  {&_swigt__p_SynthLab__BQFilterCore, _p_SynthLab__BQFilterCoreTo_p_SynthLab__ModuleCore, 0, 0},  {&_swigt__p_SynthLab__VAFilterCore, _p_SynthLab__VAFilterCoreTo_p_SynthLab__ModuleCore, 0, 0},  {&_swigt__p_SynthLab__MorphWTCore, _p_SynthLab__MorphWTCoreTo_p_SynthLab__ModuleCore, 0, 0},  {&_swigt__p_SynthLab__FourierWTCore, _p_SynthLab__FourierWTCoreTo_p_SynthLab__ModuleCore, 0, 0},  {&_swigt__p_SynthLab__SFXWTCore, _p_SynthLab__SFXWTCoreTo_p_SynthLab__ModuleCore, 0, 0},  {&_swigt__p_SynthLab__LegacyPCMCore, _p_SynthLab__LegacyPCMCoreTo_p_SynthLab__ModuleCore, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__ModuleCoreData[] = {  {&_swigt__p_SynthLab__ModuleCoreData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__MorphBankData[] = {  {&_swigt__p_SynthLab__MorphBankData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__MorphWTCore[] = {  {&_swigt__p_SynthLab__MorphWTCore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__NoiseGenerator[] = {  {&_swigt__p_SynthLab__NoiseGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__NoiseOscillator[] = {  {&_swigt__p_SynthLab__NoiseOscillator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__NoiseOscillatorParameters[] = {  {&_swigt__p_SynthLab__NoiseOscillatorParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__OscParameters[] = {  {&_swigt__p_SynthLab__OscParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__Oscillator[] = {  {&_swigt__p_SynthLab__Oscillator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__PCMOscParameters[] = {  {&_swigt__p_SynthLab__PCMOscParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__PCMOscillator[] = {  {&_swigt__p_SynthLab__PCMOscillator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__PCMSample[] = {  {&_swigt__p_SynthLab__PCMSample, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__PCMSampleDatabase[] = {  {&_swigt__p_SynthLab__PCMSampleDatabase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__PCMSampleOutput[] = {  {&_swigt__p_SynthLab__PCMSampleOutput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__ParametricFilter[] = {  {&_swigt__p_SynthLab__ParametricFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__PluckPosFilter[] = {  {&_swigt__p_SynthLab__PluckPosFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__PluginInfo[] = {  {&_swigt__p_SynthLab__PluginInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__RIFF_CHUNK[] = {  {&_swigt__p_SynthLab__RIFF_CHUNK, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__RampModulator[] = {  {&_swigt__p_SynthLab__RampModulator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__ResLoopFilter[] = {  {&_swigt__p_SynthLab__ResLoopFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__Resonator[] = {  {&_swigt__p_SynthLab__Resonator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__SFXWTCore[] = {  {&_swigt__p_SynthLab__SFXWTCore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__SimpleLPF[] = {  {&_swigt__p_SynthLab__SimpleLPF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__SineTableSource[] = {  {&_swigt__p_SynthLab__SineTableSource, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__SlewLimiter[] = {  {&_swigt__p_SynthLab__SlewLimiter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__StaticTableSource[] = {  {&_swigt__p_SynthLab__StaticTableSource, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__StaticWavetable[] = {  {&_swigt__p_SynthLab__StaticWavetable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__Synchronizer[] = {  {&_swigt__p_SynthLab__Synchronizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__SynthClock[] = {  {&_swigt__p_SynthLab__SynthClock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__SynthEngine[] = {  {&_swigt__p_SynthLab__SynthEngine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__SynthEngineParameters[] = {  {&_swigt__p_SynthLab__SynthEngineParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__SynthFilter[] = {  {&_swigt__p_SynthLab__SynthFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__SynthLFO[] = {  {&_swigt__p_SynthLab__SynthLFO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__SynthLabBankSet[] = {  {&_swigt__p_SynthLab__SynthLabBankSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__SynthLabPCMSource[] = {  {&_swigt__p_SynthLab__SynthLabPCMSource, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__SynthLabTableSet[] = {  {&_swigt__p_SynthLab__SynthLabTableSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__SynthModule[] = {  {&_swigt__p_SynthLab__SynthLFO, _p_SynthLab__SynthLFOTo_p_SynthLab__SynthModule, 0, 0},  {&_swigt__p_SynthLab__WSOscillator, _p_SynthLab__WSOscillatorTo_p_SynthLab__SynthModule, 0, 0},  {&_swigt__p_SynthLab__VAOscillator, _p_SynthLab__VAOscillatorTo_p_SynthLab__SynthModule, 0, 0},  {&_swigt__p_SynthLab__PCMOscillator, _p_SynthLab__PCMOscillatorTo_p_SynthLab__SynthModule, 0, 0},  {&_swigt__p_SynthLab__Oscillator, _p_SynthLab__OscillatorTo_p_SynthLab__SynthModule, 0, 0},  {&_swigt__p_SynthLab__NoiseOscillator, _p_SynthLab__NoiseOscillatorTo_p_SynthLab__SynthModule, 0, 0},  {&_swigt__p_SynthLab__KSOscillator, _p_SynthLab__KSOscillatorTo_p_SynthLab__SynthModule, 0, 0},  {&_swigt__p_SynthLab__WTOscillator, _p_SynthLab__WTOscillatorTo_p_SynthLab__SynthModule, 0, 0},  {&_swigt__p_SynthLab__AudioDelay, _p_SynthLab__AudioDelayTo_p_SynthLab__SynthModule, 0, 0},  {&_swigt__p_SynthLab__SynthModule, 0, 0, 0},  {&_swigt__p_SynthLab__DXEG, _p_SynthLab__DXEGTo_p_SynthLab__SynthModule, 0, 0},  {&_swigt__p_SynthLab__SynthFilter, _p_SynthLab__SynthFilterTo_p_SynthLab__SynthModule, 0, 0},  {&_swigt__p_SynthLab__WaveSequencer, _p_SynthLab__WaveSequencerTo_p_SynthLab__SynthModule, 0, 0},  {&_swigt__p_SynthLab__DCA, _p_SynthLab__DCATo_p_SynthLab__SynthModule, 0, 0},  {&_swigt__p_SynthLab__FMOperator, _p_SynthLab__FMOperatorTo_p_SynthLab__SynthModule, 0, 0},  {&_swigt__p_SynthLab__EnvelopeGenerator, _p_SynthLab__EnvelopeGeneratorTo_p_SynthLab__SynthModule, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__SynthProcessInfo[] = {  {&_swigt__p_SynthLab__SynthProcessInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__SynthVoice[] = {  {&_swigt__p_SynthLab__SynthVoice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__SynthVoiceParameters[] = {  {&_swigt__p_SynthLab__SynthVoiceParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__Timer[] = {  {&_swigt__p_SynthLab__Timer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__TinyBPF[] = {  {&_swigt__p_SynthLab__TinyBPF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__TinyReson[] = {  {&_swigt__p_SynthLab__TinyReson, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__UWaveData[] = {  {&_swigt__p_SynthLab__UWaveData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__VA1Coeffs[] = {  {&_swigt__p_SynthLab__VA1Coeffs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__VAFilterCore[] = {  {&_swigt__p_SynthLab__VAFilterCore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__VAOCore[] = {  {&_swigt__p_SynthLab__VAOCore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__VAOscParameters[] = {  {&_swigt__p_SynthLab__VAOscParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__VAOscillator[] = {  {&_swigt__p_SynthLab__VAOscillator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__VectorXFadeData[] = {  {&_swigt__p_SynthLab__VectorXFadeData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__WAVEFORMATEX_WP[] = {  {&_swigt__p_SynthLab__WAVEFORMATEX_WP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__WAVE_FILE_HEADER[] = {  {&_swigt__p_SynthLab__WAVE_FILE_HEADER, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__WAVE_SAMPLE[] = {  {&_swigt__p_SynthLab__WAVE_SAMPLE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__WSOscParameters[] = {  {&_swigt__p_SynthLab__WSOscParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__WSOscillator[] = {  {&_swigt__p_SynthLab__WSOscillator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__WTOscParameters[] = {  {&_swigt__p_SynthLab__WTOscParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__WTOscillator[] = {  {&_swigt__p_SynthLab__WTOscillator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__WaveFolder[] = {  {&_swigt__p_SynthLab__WaveFolder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__WaveSequencer[] = {  {&_swigt__p_SynthLab__WaveSequencer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__WaveSequencerParameters[] = {  {&_swigt__p_SynthLab__WaveSequencerParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__WaveSequencerStatusMeters[] = {  {&_swigt__p_SynthLab__WaveSequencerStatusMeters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__WaveSliceCore[] = {  {&_swigt__p_SynthLab__WaveSliceCore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__WaveStringData[] = {  {&_swigt__p_SynthLab__WaveStringData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__WavetableDatabase[] = {  {&_swigt__p_SynthLab__WavetableDatabase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__WavetableSource[] = {  {&_swigt__p_SynthLab__WavetableSource, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__XFadeData[] = {  {&_swigt__p_SynthLab__XFadeData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__XFader[] = {  {&_swigt__p_SynthLab__XFader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__XHoldFader[] = {  {&_swigt__p_SynthLab__XHoldFader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__convertUpper[] = {  {&_swigt__p_SynthLab__convertUpper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynthLab__midiEvent[] = {  {&_swigt__p_SynthLab__midiEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Wavetable[] = {  {&_swigt__p_Wavetable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XFadeData[] = {  {&_swigt__p_XFadeData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XFadeType[] = {  {&_swigt__p_XFadeType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_float__float[] = {  {&_swigt__p_f_float__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_q_const__float__float[] = {  {&_swigt__p_f_r_q_const__float__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fenv_t[] = {  {&_swigt__p_fenv_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fexcept_t[] = {  {&_swigt__p_fexcept_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int32_t[] = {  {&_swigt__p_int32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_midiEvent[] = {  {&_swigt__p_midiEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_SynthLab__PCMSample[] = {  {&_swigt__p_p_SynthLab__PCMSample, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_SynthLab__SynthLabTableSet[] = {  {&_swigt__p_p_SynthLab__SynthLabTableSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_float[] = {  {&_swigt__p_p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_uint64_t[] = {  {&_swigt__p_p_uint64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_float_t[] = {  {&_swigt__p_std__complexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__default_random_engine[] = {  {&_swigt__p_std__default_random_engine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__gslice[] = {  {&_swigt__p_std__gslice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__gslice_arrayT_float_t[] = {  {&_swigt__p_std__gslice_arrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__indirect_arrayT_float_t[] = {  {&_swigt__p_std__indirect_arrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_int_std__string_t[] = {  {&_swigt__p_std__mapT_int_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mask_arrayT_float_t[] = {  {&_swigt__p_std__mask_arrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_double_t[] = {  {&_swigt__p_std__numeric_limitsT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_float_t[] = {  {&_swigt__p_std__numeric_limitsT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_int_t[] = {  {&_swigt__p_std__numeric_limitsT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_long_long_t[] = {  {&_swigt__p_std__numeric_limitsT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_long_t[] = {  {&_swigt__p_std__numeric_limitsT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_short_t[] = {  {&_swigt__p_std__numeric_limitsT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_int_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_long_long_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_long_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_short_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_FilterParameters_t[] = {  {&_swigt__p_std__shared_ptrT_FilterParameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_SynthLab__AudioBuffer_t[] = {  {&_swigt__p_std__shared_ptrT_SynthLab__AudioBuffer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_SynthLab__AudioDelayParameters_t[] = {  {&_swigt__p_std__shared_ptrT_SynthLab__AudioDelayParameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_SynthLab__DCAParameters_t[] = {  {&_swigt__p_std__shared_ptrT_SynthLab__DCAParameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_SynthLab__EGParameters_t[] = {  {&_swigt__p_std__shared_ptrT_SynthLab__EGParameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_SynthLab__FMOperatorParameters_t[] = {  {&_swigt__p_std__shared_ptrT_SynthLab__FMOperatorParameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_SynthLab__LFOParameters_t[] = {  {&_swigt__p_std__shared_ptrT_SynthLab__LFOParameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_SynthLab__MidiInputData_t[] = {  {&_swigt__p_std__shared_ptrT_SynthLab__MidiInputData_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_SynthLab__MidiOutputData_t[] = {  {&_swigt__p_std__shared_ptrT_SynthLab__MidiOutputData_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_SynthLab__ModMatrixParameters_t[] = {  {&_swigt__p_std__shared_ptrT_SynthLab__ModMatrixParameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_SynthLab__Modulators_t[] = {  {&_swigt__p_std__shared_ptrT_SynthLab__Modulators_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_SynthLab__ModuleCore_t[] = {  {&_swigt__p_std__shared_ptrT_SynthLab__ModuleCore_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_SynthLab__NoiseOscillatorParameters_t[] = {  {&_swigt__p_std__shared_ptrT_SynthLab__NoiseOscillatorParameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_SynthLab__OscParameters_t[] = {  {&_swigt__p_std__shared_ptrT_SynthLab__OscParameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_SynthLab__PCMOscParameters_t[] = {  {&_swigt__p_std__shared_ptrT_SynthLab__PCMOscParameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_SynthLab__PCMSampleDatabase_t[] = {  {&_swigt__p_std__shared_ptrT_SynthLab__PCMSampleDatabase_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_SynthLab__SynthEngineParameters_t[] = {  {&_swigt__p_std__shared_ptrT_SynthLab__SynthEngineParameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_SynthLab__SynthVoiceParameters_t[] = {  {&_swigt__p_std__shared_ptrT_SynthLab__SynthVoiceParameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_SynthLab__VAOscParameters_t[] = {  {&_swigt__p_std__shared_ptrT_SynthLab__VAOscParameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_SynthLab__WTOscParameters_t[] = {  {&_swigt__p_std__shared_ptrT_SynthLab__WTOscParameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_SynthLab__WavetableDatabase_t[] = {  {&_swigt__p_std__shared_ptrT_SynthLab__WavetableDatabase_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_SynthVoiceParameters_t[] = {  {&_swigt__p_std__shared_ptrT_SynthVoiceParameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_WTOscillator_t[] = {  {&_swigt__p_std__shared_ptrT_WTOscillator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_double_t[] = {  {&_swigt__p_std__shared_ptrT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_std__arrayT_SynthLab__ModDestination_SynthLab__kNumberModDestinations_t_t[] = {  {&_swigt__p_std__shared_ptrT_std__arrayT_SynthLab__ModDestination_SynthLab__kNumberModDestinations_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_std__arrayT_SynthLab__ModSource_SynthLab__kNumberModSources_t_t[] = {  {&_swigt__p_std__shared_ptrT_std__arrayT_SynthLab__ModSource_SynthLab__kNumberModSources_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__slice[] = {  {&_swigt__p_std__slice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__slice_arrayT_float_t[] = {  {&_swigt__p_std__slice_arrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__valarrayT_float_t[] = {  {&_swigt__p_std__valarrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_t[] = {  {&_swigt__p_std__vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__complexT_double_t_t[] = {  {&_swigt__p_std__vectorT_std__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__complexT_float_t_t[] = {  {&_swigt__p_std__vectorT_std__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_double_t[] = {  {&_swigt__p_std__vector_iteratorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_float_t[] = {  {&_swigt__p_std__vector_iteratorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_std__complexT_double_t_t[] = {  {&_swigt__p_std__vector_iteratorT_std__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_std__complexT_float_t_t[] = {  {&_swigt__p_std__vector_iteratorT_std__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint16_t[] = {  {&_swigt__p_uint16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint32_t[] = {  {&_swigt__p_uint32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint64_t[] = {  {&_swigt__p_uint64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_GlideInfo,
  _swigc__p_MIDINoteEvent,
  _swigc__p_ModuleCoreData,
  _swigc__p_SynthLab__AnalogEGCore,
  _swigc__p_SynthLab__AudioBuffer,
  _swigc__p_SynthLab__AudioDelay,
  _swigc__p_SynthLab__AudioDelayParameters,
  _swigc__p_SynthLab__BQAudioFilter,
  _swigc__p_SynthLab__BQCoeffs,
  _swigc__p_SynthLab__BQFilterCore,
  _swigc__p_SynthLab__BasicLookupTables,
  _swigc__p_SynthLab__ClassicWTCore,
  _swigc__p_SynthLab__CoreProcData,
  _swigc__p_SynthLab__DCA,
  _swigc__p_SynthLab__DCAParameters,
  _swigc__p_SynthLab__DCRemovalFilter,
  _swigc__p_SynthLab__DMConfig,
  _swigc__p_SynthLab__DXEG,
  _swigc__p_SynthLab__DXEGCore,
  _swigc__p_SynthLab__DelayLine,
  _swigc__p_SynthLab__DrumWTCore,
  _swigc__p_SynthLab__DrumWTSource,
  _swigc__p_SynthLab__DynamicTableSource,
  _swigc__p_SynthLab__DynamicWavetable,
  _swigc__p_SynthLab__EGParameters,
  _swigc__p_SynthLab__EnvelopeGenerator,
  _swigc__p_SynthLab__Exciter,
  _swigc__p_SynthLab__ExciterEG,
  _swigc__p_SynthLab__ExciterParameters,
  _swigc__p_SynthLab__FMLFOCore,
  _swigc__p_SynthLab__FMOCore,
  _swigc__p_SynthLab__FMOperator,
  _swigc__p_SynthLab__FMOperatorParameters,
  _swigc__p_SynthLab__FilterOutput,
  _swigc__p_SynthLab__FilterParameters,
  _swigc__p_SynthLab__FourierWTCore,
  _swigc__p_SynthLab__FracDelayAPF,
  _swigc__p_SynthLab__GlideInfo,
  _swigc__p_SynthLab__GlideModulator,
  _swigc__p_SynthLab__HP2Filter,
  _swigc__p_SynthLab__HighShelfFilter,
  _swigc__p_SynthLab__IFilterBase,
  _swigc__p_SynthLab__IMidiInputData,
  _swigc__p_SynthLab__IModulator,
  _swigc__p_SynthLab__IPCMSampleDatabase,
  _swigc__p_SynthLab__IPCMSampleSource,
  _swigc__p_SynthLab__IWavetableDatabase,
  _swigc__p_SynthLab__IWavetableSource,
  _swigc__p_SynthLab__KSOCore,
  _swigc__p_SynthLab__KSOscParameters,
  _swigc__p_SynthLab__KSOscillator,
  _swigc__p_SynthLab__LFOCore,
  _swigc__p_SynthLab__LFOParameters,
  _swigc__p_SynthLab__LP1PFilter,
  _swigc__p_SynthLab__LP2Filter,
  _swigc__p_SynthLab__Lane,
  _swigc__p_SynthLab__LaneStep,
  _swigc__p_SynthLab__LegacyPCMCore,
  _swigc__p_SynthLab__Limiter,
  _swigc__p_SynthLab__LinPeakDetector,
  _swigc__p_SynthLab__LinearEGCore,
  _swigc__p_SynthLab__LogPeakDetector,
  _swigc__p_SynthLab__LookUpTable,
  _swigc__p_SynthLab__LowShelfFilter,
  _swigc__p_SynthLab__MIDINoteEvent,
  _swigc__p_SynthLab__MellotronCore,
  _swigc__p_SynthLab__MidiInputData,
  _swigc__p_SynthLab__MidiOutputData,
  _swigc__p_SynthLab__ModDestination,
  _swigc__p_SynthLab__ModMatrix,
  _swigc__p_SynthLab__ModMatrixParameters,
  _swigc__p_SynthLab__ModSource,
  _swigc__p_SynthLab__Modulators,
  _swigc__p_SynthLab__ModuleCore,
  _swigc__p_SynthLab__ModuleCoreData,
  _swigc__p_SynthLab__MorphBankData,
  _swigc__p_SynthLab__MorphWTCore,
  _swigc__p_SynthLab__NoiseGenerator,
  _swigc__p_SynthLab__NoiseOscillator,
  _swigc__p_SynthLab__NoiseOscillatorParameters,
  _swigc__p_SynthLab__OscParameters,
  _swigc__p_SynthLab__Oscillator,
  _swigc__p_SynthLab__PCMOscParameters,
  _swigc__p_SynthLab__PCMOscillator,
  _swigc__p_SynthLab__PCMSample,
  _swigc__p_SynthLab__PCMSampleDatabase,
  _swigc__p_SynthLab__PCMSampleOutput,
  _swigc__p_SynthLab__ParametricFilter,
  _swigc__p_SynthLab__PluckPosFilter,
  _swigc__p_SynthLab__PluginInfo,
  _swigc__p_SynthLab__RIFF_CHUNK,
  _swigc__p_SynthLab__RampModulator,
  _swigc__p_SynthLab__ResLoopFilter,
  _swigc__p_SynthLab__Resonator,
  _swigc__p_SynthLab__SFXWTCore,
  _swigc__p_SynthLab__SimpleLPF,
  _swigc__p_SynthLab__SineTableSource,
  _swigc__p_SynthLab__SlewLimiter,
  _swigc__p_SynthLab__StaticTableSource,
  _swigc__p_SynthLab__StaticWavetable,
  _swigc__p_SynthLab__Synchronizer,
  _swigc__p_SynthLab__SynthClock,
  _swigc__p_SynthLab__SynthEngine,
  _swigc__p_SynthLab__SynthEngineParameters,
  _swigc__p_SynthLab__SynthFilter,
  _swigc__p_SynthLab__SynthLFO,
  _swigc__p_SynthLab__SynthLabBankSet,
  _swigc__p_SynthLab__SynthLabPCMSource,
  _swigc__p_SynthLab__SynthLabTableSet,
  _swigc__p_SynthLab__SynthModule,
  _swigc__p_SynthLab__SynthProcessInfo,
  _swigc__p_SynthLab__SynthVoice,
  _swigc__p_SynthLab__SynthVoiceParameters,
  _swigc__p_SynthLab__Timer,
  _swigc__p_SynthLab__TinyBPF,
  _swigc__p_SynthLab__TinyReson,
  _swigc__p_SynthLab__UWaveData,
  _swigc__p_SynthLab__VA1Coeffs,
  _swigc__p_SynthLab__VAFilterCore,
  _swigc__p_SynthLab__VAOCore,
  _swigc__p_SynthLab__VAOscParameters,
  _swigc__p_SynthLab__VAOscillator,
  _swigc__p_SynthLab__VectorXFadeData,
  _swigc__p_SynthLab__WAVEFORMATEX_WP,
  _swigc__p_SynthLab__WAVE_FILE_HEADER,
  _swigc__p_SynthLab__WAVE_SAMPLE,
  _swigc__p_SynthLab__WSOscParameters,
  _swigc__p_SynthLab__WSOscillator,
  _swigc__p_SynthLab__WTOscParameters,
  _swigc__p_SynthLab__WTOscillator,
  _swigc__p_SynthLab__WaveFolder,
  _swigc__p_SynthLab__WaveSequencer,
  _swigc__p_SynthLab__WaveSequencerParameters,
  _swigc__p_SynthLab__WaveSequencerStatusMeters,
  _swigc__p_SynthLab__WaveSliceCore,
  _swigc__p_SynthLab__WaveStringData,
  _swigc__p_SynthLab__WavetableDatabase,
  _swigc__p_SynthLab__WavetableSource,
  _swigc__p_SynthLab__XFadeData,
  _swigc__p_SynthLab__XFader,
  _swigc__p_SynthLab__XHoldFader,
  _swigc__p_SynthLab__convertUpper,
  _swigc__p_SynthLab__midiEvent,
  _swigc__p_Wavetable,
  _swigc__p_XFadeData,
  _swigc__p_XFadeType,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_f_float__float,
  _swigc__p_f_r_q_const__float__float,
  _swigc__p_fenv_t,
  _swigc__p_fexcept_t,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_int32_t,
  _swigc__p_long,
  _swigc__p_long_long,
  _swigc__p_midiEvent,
  _swigc__p_p_SynthLab__PCMSample,
  _swigc__p_p_SynthLab__SynthLabTableSet,
  _swigc__p_p_char,
  _swigc__p_p_float,
  _swigc__p_p_uint64_t,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__complexT_float_t,
  _swigc__p_std__default_random_engine,
  _swigc__p_std__gslice,
  _swigc__p_std__gslice_arrayT_float_t,
  _swigc__p_std__indirect_arrayT_float_t,
  _swigc__p_std__mapT_int_std__string_t,
  _swigc__p_std__mask_arrayT_float_t,
  _swigc__p_std__numeric_limitsT_double_t,
  _swigc__p_std__numeric_limitsT_float_t,
  _swigc__p_std__numeric_limitsT_int_t,
  _swigc__p_std__numeric_limitsT_long_long_t,
  _swigc__p_std__numeric_limitsT_long_t,
  _swigc__p_std__numeric_limitsT_short_t,
  _swigc__p_std__numeric_limitsT_unsigned_int_t,
  _swigc__p_std__numeric_limitsT_unsigned_long_long_t,
  _swigc__p_std__numeric_limitsT_unsigned_long_t,
  _swigc__p_std__numeric_limitsT_unsigned_short_t,
  _swigc__p_std__shared_ptrT_FilterParameters_t,
  _swigc__p_std__shared_ptrT_SynthLab__AudioBuffer_t,
  _swigc__p_std__shared_ptrT_SynthLab__AudioDelayParameters_t,
  _swigc__p_std__shared_ptrT_SynthLab__DCAParameters_t,
  _swigc__p_std__shared_ptrT_SynthLab__EGParameters_t,
  _swigc__p_std__shared_ptrT_SynthLab__FMOperatorParameters_t,
  _swigc__p_std__shared_ptrT_SynthLab__LFOParameters_t,
  _swigc__p_std__shared_ptrT_SynthLab__MidiInputData_t,
  _swigc__p_std__shared_ptrT_SynthLab__MidiOutputData_t,
  _swigc__p_std__shared_ptrT_SynthLab__ModMatrixParameters_t,
  _swigc__p_std__shared_ptrT_SynthLab__Modulators_t,
  _swigc__p_std__shared_ptrT_SynthLab__ModuleCore_t,
  _swigc__p_std__shared_ptrT_SynthLab__NoiseOscillatorParameters_t,
  _swigc__p_std__shared_ptrT_SynthLab__OscParameters_t,
  _swigc__p_std__shared_ptrT_SynthLab__PCMOscParameters_t,
  _swigc__p_std__shared_ptrT_SynthLab__PCMSampleDatabase_t,
  _swigc__p_std__shared_ptrT_SynthLab__SynthEngineParameters_t,
  _swigc__p_std__shared_ptrT_SynthLab__SynthVoiceParameters_t,
  _swigc__p_std__shared_ptrT_SynthLab__VAOscParameters_t,
  _swigc__p_std__shared_ptrT_SynthLab__WTOscParameters_t,
  _swigc__p_std__shared_ptrT_SynthLab__WavetableDatabase_t,
  _swigc__p_std__shared_ptrT_SynthVoiceParameters_t,
  _swigc__p_std__shared_ptrT_WTOscillator_t,
  _swigc__p_std__shared_ptrT_double_t,
  _swigc__p_std__shared_ptrT_std__arrayT_SynthLab__ModDestination_SynthLab__kNumberModDestinations_t_t,
  _swigc__p_std__shared_ptrT_std__arrayT_SynthLab__ModSource_SynthLab__kNumberModSources_t_t,
  _swigc__p_std__slice,
  _swigc__p_std__slice_arrayT_float_t,
  _swigc__p_std__string,
  _swigc__p_std__valarrayT_float_t,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_float_t,
  _swigc__p_std__vectorT_std__complexT_double_t_t,
  _swigc__p_std__vectorT_std__complexT_float_t_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__vector_iteratorT_double_t,
  _swigc__p_std__vector_iteratorT_float_t,
  _swigc__p_std__vector_iteratorT_std__complexT_double_t_t,
  _swigc__p_std__vector_iteratorT_std__complexT_float_t_t,
  _swigc__p_uint16_t,
  _swigc__p_uint32_t,
  _swigc__p_uint64_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

