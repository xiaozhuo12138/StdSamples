/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_m_ParamInfo__q_const__f_double__double swig_types[0]
#define SWIGTYPE_m_ParamInfo__q_const__f_double__std__string swig_types[1]
#define SWIGTYPE_p_Dsp__ComplexPair swig_types[2]
#define SWIGTYPE_p_Dsp__Filter swig_types[3]
#define SWIGTYPE_p_Dsp__ParamInfo swig_types[4]
#define SWIGTYPE_p_Dsp__Params swig_types[5]
#define SWIGTYPE_p_Dsp__PoleZeroPair swig_types[6]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t swig_types[7]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t swig_types[8]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t swig_types[9]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t swig_types[10]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t swig_types[11]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t swig_types[12]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t swig_types[13]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t swig_types[14]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t swig_types[15]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t swig_types[16]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t swig_types[17]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t swig_types[18]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t swig_types[19]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t swig_types[20]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t swig_types[21]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t swig_types[22]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t swig_types[23]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t swig_types[24]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t swig_types[25]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t swig_types[26]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t swig_types[27]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t swig_types[28]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t swig_types[29]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t swig_types[30]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t swig_types[31]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t swig_types[32]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t swig_types[33]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t swig_types[34]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t swig_types[35]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t swig_types[36]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t swig_types[37]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t swig_types[38]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t swig_types[39]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t swig_types[40]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t swig_types[41]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t swig_types[42]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t swig_types[43]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t swig_types[44]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t swig_types[45]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t swig_types[46]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t swig_types[47]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t swig_types[48]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t swig_types[49]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t swig_types[50]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t swig_types[51]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t swig_types[52]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t swig_types[53]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t swig_types[54]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t swig_types[55]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t swig_types[56]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t swig_types[57]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t swig_types[58]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t swig_types[59]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t swig_types[60]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t swig_types[61]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t swig_types[62]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t swig_types[63]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t swig_types[64]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t swig_types[65]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t swig_types[66]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t swig_types[67]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t swig_types[68]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t swig_types[69]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t swig_types[70]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t swig_types[71]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t swig_types[72]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t swig_types[73]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t swig_types[74]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t swig_types[75]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t swig_types[76]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t swig_types[77]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t swig_types[78]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t swig_types[79]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t swig_types[80]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t swig_types[81]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t swig_types[82]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t swig_types[83]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t swig_types[84]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t swig_types[85]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t swig_types[86]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t swig_types[87]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t swig_types[88]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t swig_types[89]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t swig_types[90]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t swig_types[91]
#define SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t swig_types[92]
#define SWIGTYPE_p_double swig_types[93]
#define SWIGTYPE_p_f_float__float swig_types[94]
#define SWIGTYPE_p_f_r_q_const__float__float swig_types[95]
#define SWIGTYPE_p_fenv_t swig_types[96]
#define SWIGTYPE_p_fexcept_t swig_types[97]
#define SWIGTYPE_p_filter_type_t swig_types[98]
#define SWIGTYPE_p_float swig_types[99]
#define SWIGTYPE_p_int swig_types[100]
#define SWIGTYPE_p_int32_t swig_types[101]
#define SWIGTYPE_p_int64_t swig_types[102]
#define SWIGTYPE_p_long swig_types[103]
#define SWIGTYPE_p_long_long swig_types[104]
#define SWIGTYPE_p_p_double swig_types[105]
#define SWIGTYPE_p_p_float swig_types[106]
#define SWIGTYPE_p_short swig_types[107]
#define SWIGTYPE_p_signed_char swig_types[108]
#define SWIGTYPE_p_std__complexT_double_t swig_types[109]
#define SWIGTYPE_p_std__complexT_float_t swig_types[110]
#define SWIGTYPE_p_std__gslice swig_types[111]
#define SWIGTYPE_p_std__gslice_arrayT_float_t swig_types[112]
#define SWIGTYPE_p_std__indirect_arrayT_float_t swig_types[113]
#define SWIGTYPE_p_std__mask_arrayT_float_t swig_types[114]
#define SWIGTYPE_p_std__numeric_limitsT_double_t swig_types[115]
#define SWIGTYPE_p_std__numeric_limitsT_float_t swig_types[116]
#define SWIGTYPE_p_std__numeric_limitsT_int_t swig_types[117]
#define SWIGTYPE_p_std__numeric_limitsT_long_long_t swig_types[118]
#define SWIGTYPE_p_std__numeric_limitsT_long_t swig_types[119]
#define SWIGTYPE_p_std__numeric_limitsT_short_t swig_types[120]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t swig_types[121]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t swig_types[122]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t swig_types[123]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t swig_types[124]
#define SWIGTYPE_p_std__pairT_std__complexT_double_t_std__complexT_double_t_t swig_types[125]
#define SWIGTYPE_p_std__slice swig_types[126]
#define SWIGTYPE_p_std__slice_arrayT_float_t swig_types[127]
#define SWIGTYPE_p_std__string swig_types[128]
#define SWIGTYPE_p_std__valarrayT_float_t swig_types[129]
#define SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t swig_types[130]
#define SWIGTYPE_p_std__vectorT_double_p_t swig_types[131]
#define SWIGTYPE_p_std__vectorT_float_p_t swig_types[132]
#define SWIGTYPE_p_std__vector_iteratorT_Dsp__PoleZeroPair_t swig_types[133]
#define SWIGTYPE_p_std__vector_iteratorT_double_p_t swig_types[134]
#define SWIGTYPE_p_std__vector_iteratorT_float_p_t swig_types[135]
#define SWIGTYPE_p_toControlValue_t swig_types[136]
#define SWIGTYPE_p_toNativeValue_t swig_types[137]
#define SWIGTYPE_p_toString_t swig_types[138]
#define SWIGTYPE_p_unsigned_char swig_types[139]
#define SWIGTYPE_p_unsigned_int swig_types[140]
#define SWIGTYPE_p_unsigned_long swig_types[141]
#define SWIGTYPE_p_unsigned_long_long swig_types[142]
#define SWIGTYPE_p_unsigned_short swig_types[143]
static swig_type_info *swig_types[145];
static swig_module_info swig_module = {swig_types, 144, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "DspFilters"
#define SWIG_init      luaopen_DspFilters
#define SWIG_init_user luaopen_DspFilters_user

#define SWIG_LUACODE   luaopen_DspFilters_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include <iostream>
#include <vector>
#include <Undenormal.hpp>
#include "DspFilters/Dsp.h"


#include <string>
#include <algorithm>
#include <iostream>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}

SWIGINTERN char std_string___getitem____SWIG(std::string *self,size_t i){ return (*self)[i]; }
SWIGINTERN void std_string___setitem____SWIG(std::string *self,size_t i,char c){ (*self)[i] = c; }
SWIGINTERN char const *std_string___str____SWIG(std::string *self){ return self->c_str(); }
SWIGINTERN int32_t std_string_to_int32__SWIG_0(std::string *self,int base=10){ return std::stoi(self->c_str(),nullptr,base); }
SWIGINTERN int64_t std_string_to_int64__SWIG_0(std::string *self,int base=10){ return std::stoll(self->c_str(),nullptr,base); }
SWIGINTERN float std_string_to_float__SWIG(std::string *self){ return std::stof(*self); }
SWIGINTERN double std_string_to_double__SWIG(std::string *self){ return std::stod(*self); }
SWIGINTERN void std_string_reverse__SWIG(std::string *self){ std::reverse(self->begin(),self->end()); }
SWIGINTERN void std_string_sort__SWIG(std::string *self){ std::sort(self->begin(),self->end()); }
SWIGINTERN void std_string_shuffle__SWIG(std::string *self){ std::random_shuffle(self->begin(),self->end()); }
SWIGINTERN void std_string_getline__SWIG(std::string *self){
                std::getline(std::cin, *self);
            }
SWIGINTERN void std_string_fill__SWIG(std::string *self,size_t i,char c){
                self->resize(i);
                for(size_t n = 0; n < i; n++) (*self)[i] = c;
            }

#include <algorithm>
#include <vector>
#include <map>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cassert>
#include <iostream>
#include <random>
#include <memory>


namespace std {
    template<typename T>
    struct vector_iterator
    {
        typename std::vector<T>::iterator iter;
        std::vector<T> v;

        vector_iterator(const std::vector<T> & vec) {
            v = vec;
        }   
        vector_iterator(const std::vector<T> & vec, const typename std::vector<T>::iterator & i) {
            iter = i;
            v = vec;
        }

        vector_iterator<T>& operator = (const T& val) {
            *iter = val;
            return *this;
        }
        vector_iterator<T>& operator = (const vector_iterator<T>& val) {
            iter = val.iter;
            v    = val.v;
            return *this;;
        }
                
        void next() {
            if(iter != v.end()) iter++;
        }
        void prev() {
            if(iter != v.begin()) iter--;
        }
        void forward(size_t i) {
            iter += i;
        }
        void backward(size_t i) {
            iter -= i;
        }
        void jump(size_t i) {
            iter = i;
        }
        
        T value() { return *iter; }
        void set_value(const T& val) { *iter = val; }
    };
}

#include <complex>
#include <valarray>
#include <fenv.h>


#include <complex>


#include <valarray>
#include <algorithm>

SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____add____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self + b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____sub____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self - b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____div____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self / b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____mul____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self * b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____pow____SWIG_0(std::complex< float > *self,std::complex< float > const &b){ return std::pow(*self,b); }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____pow____SWIG_1(std::complex< float > *self,float const &b){ return std::pow(*self,b); }
SWIGINTERN bool std_complex_Sl_float_Sg____eq____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self == b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____add____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self + b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____sub____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self - b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____div____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self / b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____mul____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self * b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____pow____SWIG_0(std::complex< double > *self,std::complex< double > const &b){ return std::pow(*self,b); }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____pow____SWIG_1(std::complex< double > *self,double const &b){ return std::pow(*self,b); }
SWIGINTERN bool std_complex_Sl_double_Sg____eq____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self == b; }
SWIGINTERN float std_valarray_Sl_float_Sg____getitem____SWIG_0(std::valarray< float > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_valarray_Sl_float_Sg____setitem____SWIG_0(std::valarray< float > *self,size_t i,float const &v){ (*self)[i-1] = v; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____getitem____SWIG_1(std::valarray< float > *self,std::gslice const &i){ return (*self)[i]; }
SWIGINTERN void std_valarray_Sl_float_Sg____setitem____SWIG_1(std::valarray< float > *self,std::gslice const &i,float const &v){ (*self)[i] = v; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____getitem____SWIG_2(std::valarray< float > *self,std::slice const &i){ return (*self)[i]; }
SWIGINTERN void std_valarray_Sl_float_Sg____setitem____SWIG_2(std::valarray< float > *self,std::slice const &i,float const &v){ (*self)[i] = v; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____add____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return *self + b; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____sub____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return *self - b; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____mul____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return *self * b; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____div____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return *self / b; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____unm____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return -*self; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____pow____SWIG_0(std::valarray< float > *self,std::valarray< float > const &b){ return std::pow(*self,b); }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____pow____SWIG_1(std::valarray< float > *self,float const &b){ return std::pow(*self,b); }

#include <limits>



    typedef float f32;
    typedef double f64;
    typedef signed char i8;
    typedef unsigned char u8;
    typedef signed short i16;
    typedef unsigned short u16;
    typedef signed int i32;
    typedef unsigned int u32;
    typedef signed long ilong;
    typedef unsigned long ulong;
    typedef signed long long i64;
    typedef unsigned long long u64;
    
    
    
    
    template<typename T> T abs(const T& x) { return std::abs(x); }
    template<typename T> T fabs(const T& x) { return std::fabs(x); }
    template<typename T> T acos(const T& x) { return std::acos(x); }
    template<typename T> T acosh(const T& x) { return std::acosh(x); }
    template<typename T> T asinh(const T& x) { return std::asinh(x); }
    template<typename T> T asin(const T& x) { return std::asinh(x); }
    template<typename T> T atan(const T& x) { return std::atan(x); }
    template<typename T> T atan2(const T& x,const T& y) { return std::atan2(x,y); }
    template<typename T> T atanh(const T& x) { return std::atanh(x); }
    template<typename T> T cbrt(const T& x) { return std::cbrt(x); }
    template<typename T> T ceil(const T& x) { return std::ceil(x); }    
    template<typename T> T copysign(const T& x, const T& y) { return std::copysign(x,y); }
    template<typename T> T cos(const T& x) { return std::cos(x); }
    template<typename T> T cosh(const T& x) { return std::cosh(x); }
    template<typename T> T erf(const T& x) { return std::erf(x); }
    template<typename T> T erfc(const T& x) { return std::erfc(x); }
    template<typename T> T exp(const T& x) { return std::exp(x); }
    template<typename T> T exp2(const T& x) { return std::exp2(x); }
    template<typename T> T expm1(const T& x) { return std::expm1(x); }
    template<typename T> T fdim(const T & x, const T & y) { return std::fdim(x,y); }
    template<typename T> T floor(const T & x) { return std::floor(x); }
    template<typename T> T fma(const T & x, const T & y, const T& z) { return std::fma(x,y,z); }
    template<typename T> T fmax(const T & x, const T & y) { return std::fmax(x,y); }
    template<typename T> T fmin(const T & x, const T & y) { return std::fmax(x,y); }
    template<typename T> T fmod(const T & x, const T & y) { return std::fmod(x,y); }
    template<typename T> int fpclassify(const T & x) { return std::fpclassify(x); }
    template<typename T> T hypot(const T & x, const T & y) { return std::hypot(x,y); }
    template<typename T> int ilogb(const T & x) { return std::ilogb(x); }
    template<typename T> bool isfinite(const T & x) { return std::isfinite(x); }
    template<typename T> bool isgreater(const T & x, const T & y) { return std::isgreater(x,y); }
    template<typename T> bool isgreaterequal(const T & x, const T & y) { return std::isgreaterequal(x,y); }
    template<typename T> bool isinf(const T & x) { return std::isinf(x); }
    template<typename T> bool isless(const T & x, const T & y) { return std::isless(x,y); }
    template<typename T> bool islessequal(const T & x, const T & y) { return std::islessequal(x,y); }
    template<typename T> bool islessgreater(const T & x, const T & y) { return std::islessgreater(x,y); }
    template<typename T> bool isnan(const T & x) { return std::isnan(x); }
    template<typename T> bool isnormal(const T & x) { return std::isnormal(x); }
    template<typename T> bool isunordered(const T & x, const T& y) { return std::isunordered(x,y); }
    template<typename T> T ldexp(const T & x, int exp) { return std::ldexp(x,exp); }
    template<typename T> T lgamma(const T & x) { return std::lgamma(x); }
    template<typename T> T llrint(const T & x) { return std::llrint(x); }
    template<typename T> T llround(const T & x) { return std::llround(x); }
    template<typename T> T log(const T & x) { return std::log(x); }
    template<typename T> T log10(const T & x) { return std::log10(x); }
    template<typename T> T log1p(const T & x) { return std::log1p(x); }
    template<typename T> T log2(const T & x) { return std::log2(x); }
    template<typename T> T logb(const T & x) { return std::logb(x); }
    template<typename T> T lrint(const T & x) { return std::lrint(x); }
    template<typename T> T lround(const T & x) { return std::lround(x); }
    template<typename T> T nan(const char *tagp) { return std::nan(tagp);}
    template<typename T> T nanf(const char *tagp) { return std::nanf(tagp);}
    template<typename T> T nanl(const char *tagp) { return std::nanl(tagp);}
    template<typename T> T nearbyint(const T &x) { return std::nearbyint(x); }
    template<typename T> T nextafter(const T & x, const T & y) { return std::nextafter(x,y); }
    template<typename T> T nexttoward(const T & x, const T & y) { return std::nexttoward(x,y); }
    template<typename T> T pow(const T & b, const T & e) { return std::pow(b,e); }
    template<typename T> T remainder(const T & n, const T & d) { return std::remainder(n,d); }
    template<typename T> T rint(const T& x) { return std::rint(x); }
    template<typename T> T round(const T& x) { return std::round(x); }
    template<typename T> T scalbln(const T& x, long int n) { return std::scalbln(x,n);}
    template<typename T> T scalbn(const T& x, int n) { return std::scalbln(x,n);}
    template<typename T> bool signbit(const T & x) { return signbit(x); }
    template<typename T> T sin(const T& x) { return std::sin(x); }
    template<typename T> T sinh(const T& x) { return std::sinh(x); }    
    template<typename T> T sqrt(const T& x) { return std::sqrt(x); }
    template<typename T> T square(const T& x) { return x*x; }
    template<typename T> T cube(const T& x) { return x*x*x; }
    template<typename T> T tan(const T& x) { return std::tan(x); }
    template<typename T> T tanh(const T& x) { return std::tanh(x); }        
    template<typename T> T tgamma(const T& x) { return std::tgamma(x); }    
    template<typename T> T trunc(const T& x) { return std::trunc(x); }
    double Huge() { return HUGE_VAL; }
    float Hugef() { return HUGE_VALF; }
    double Infinity() { return INFINITY; }
    double NaN() { return NAN; }

    

SWIGINTERN double Dsp_Params___getitem____SWIG(Dsp::Params *self,size_t i){ return (*self)[i]; }
SWIGINTERN void Dsp_Params___setitem____SWIG(Dsp::Params *self,size_t i,double v){ (*self)[i] = v; }

#include <string.h>

SWIGINTERN float *std_vector_Sl_float_Sm__Sg____getitem__SWIG(std::vector< float * > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_float_Sm__Sg____setitem__SWIG(std::vector< float * > *self,size_t i,float *val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< float * > std_vector_Sl_float_Sm__Sg__begin__SWIG(std::vector< float * > *self){
                std::vector_iterator<float *> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< float * > std_vector_Sl_float_Sm__Sg__end__SWIG(std::vector< float * > *self){
                std::vector_iterator<float *> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_float_Sm__Sg__erase__SWIG_0(std::vector< float * > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_float_Sm__Sg__erase__SWIG_1(std::vector< float * > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN double *std_vector_Sl_double_Sm__Sg____getitem__SWIG(std::vector< double * > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_double_Sm__Sg____setitem__SWIG(std::vector< double * > *self,size_t i,double *val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< double * > std_vector_Sl_double_Sm__Sg__begin__SWIG(std::vector< double * > *self){
                std::vector_iterator<double *> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< double * > std_vector_Sl_double_Sm__Sg__end__SWIG(std::vector< double * > *self){
                std::vector_iterator<double *> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_double_Sm__Sg__erase__SWIG_0(std::vector< double * > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_double_Sm__Sg__erase__SWIG_1(std::vector< double * > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowPass_Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowPass_Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowPass_Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowPass_Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowPass_Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowPass_Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowPass_Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowPass_Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighPass_Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighPass_Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighPass_Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighPass_Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighPass_Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighPass_Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighPass_Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighPass_Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass1_Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass1_Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass1_Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass1_Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass1_Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass1_Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass1_Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass1_Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass2_Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass2_Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass2_Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass2_Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass2_Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass2_Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass2_Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass2_Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandStop_Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandStop_Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandStop_Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandStop_Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandStop_Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandStop_Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandStop_Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandStop_Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowShelf_Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowShelf_Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowShelf_Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowShelf_Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowShelf_Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowShelf_Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowShelf_Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowShelf_Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighShelf_Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighShelf_Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighShelf_Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighShelf_Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighShelf_Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighShelf_Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighShelf_Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighShelf_Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandShelf_Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandShelf_Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandShelf_Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandShelf_Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandShelf_Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandShelf_Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandShelf_Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandShelf_Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_AllPass_Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_AllPass_Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_AllPass_Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_AllPass_Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_AllPass_Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_AllPass_Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_AllPass_Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_AllPass_Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *self,size_t n,float *in,float *out){
                float *temp[2];
                memcpy(out,in,n*sizeof(float));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *self,size_t n,float **in,float **out){
                float *temp[2];
                memcpy(out[0],in[0],n*sizeof(float));
                memcpy(out[1],in[1],n*sizeof(float));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *self,size_t n,double *in,double *out){
                double *temp[2];
                memcpy(out,in,n*sizeof(double));
                temp[0] = out;
                temp[1] = out;            
                self->process(n,temp);                                    
            }
SWIGINTERN void Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *self,size_t n,double **in,double **out){
                double *temp[2];
                memcpy(out[0],in[0],n*sizeof(double));
                memcpy(out[1],in[1],n*sizeof(double));
                temp[0] = out[0];
                temp[1] = out[1];            
                self->process(n,temp);                                
            }
SWIGINTERN Dsp::PoleZeroPair std_vector_Sl_Dsp_PoleZeroPair_Sg____getitem__SWIG(std::vector< Dsp::PoleZeroPair > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_Dsp_PoleZeroPair_Sg____setitem__SWIG(std::vector< Dsp::PoleZeroPair > *self,size_t i,Dsp::PoleZeroPair val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< Dsp::PoleZeroPair > std_vector_Sl_Dsp_PoleZeroPair_Sg__begin__SWIG(std::vector< Dsp::PoleZeroPair > *self){
                std::vector_iterator<Dsp::PoleZeroPair> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< Dsp::PoleZeroPair > std_vector_Sl_Dsp_PoleZeroPair_Sg__end__SWIG(std::vector< Dsp::PoleZeroPair > *self){
                std::vector_iterator<Dsp::PoleZeroPair> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_Dsp_PoleZeroPair_Sg__erase__SWIG_0(std::vector< Dsp::PoleZeroPair > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_Dsp_PoleZeroPair_Sg__erase__SWIG_1(std::vector< Dsp::PoleZeroPair > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("std::string::string",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (std::string *)new std::string((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n"
    "    std::string::string(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_string___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  char result;
  
  SWIG_check_num_args("std::string::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::__getitem__",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string___getitem",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (char)std_string___getitem____SWIG(arg1,arg2);
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("std::string::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::__setitem__",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::__setitem__",2,"size_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("std::string::__setitem__",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string___setitem",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  std_string___setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string___tostring(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::__str__",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string___tostring",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)std_string___str____SWIG(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int32__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  int arg2 ;
  int32_t result;
  
  SWIG_check_num_args("std::string::to_int32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_int32",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::to_int32",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_int32",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = std_string_to_int32__SWIG_0(arg1,arg2);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int32__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("std::string::to_int32",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_int32",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_int32",1,SWIGTYPE_p_std__string);
  }
  
  result = std_string_to_int32__SWIG_0(arg1);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int32(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_string_to_int32__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_to_int32__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_to_int32'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::to_int32(int)\n"
    "    std::string::to_int32()\n");
  lua_error(L);return 0;
}


static int _wrap_string_to_int64__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  int arg2 ;
  int64_t result;
  
  SWIG_check_num_args("std::string::to_int64",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_int64",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::to_int64",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_int64",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = std_string_to_int64__SWIG_0(arg1,arg2);
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int64__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("std::string::to_int64",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_int64",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_int64",1,SWIGTYPE_p_std__string);
  }
  
  result = std_string_to_int64__SWIG_0(arg1);
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int64(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_string_to_int64__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_to_int64__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_to_int64'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::to_int64(int)\n"
    "    std::string::to_int64()\n");
  lua_error(L);return 0;
}


static int _wrap_string_to_float(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  float result;
  
  SWIG_check_num_args("std::string::to_float",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_float",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_float",1,SWIGTYPE_p_std__string);
  }
  
  result = (float)std_string_to_float__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_double(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  double result;
  
  SWIG_check_num_args("std::string::to_double",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_double",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_double",1,SWIGTYPE_p_std__string);
  }
  
  result = (double)std_string_to_double__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_reverse(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::reverse",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_reverse",1,SWIGTYPE_p_std__string);
  }
  
  std_string_reverse__SWIG(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_sort(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::sort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::sort",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_sort",1,SWIGTYPE_p_std__string);
  }
  
  std_string_sort__SWIG(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::shuffle",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_shuffle",1,SWIGTYPE_p_std__string);
  }
  
  std_string_shuffle__SWIG(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_getline(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::getline",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::getline",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_getline",1,SWIGTYPE_p_std__string);
  }
  
  std_string_getline__SWIG(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_fill(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("std::string::fill",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::fill",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::fill",2,"size_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("std::string::fill",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_fill",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  std_string_fill__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = ((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::clear",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_clear",1,SWIGTYPE_p_std__string);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::string::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::erase",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_erase",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::string::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::erase",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_erase",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_erase__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_string_erase__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::erase(size_t,size_t)\n"
    "    std::string::erase(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_string_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::string::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::push_back",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::push_back",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_push_back",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::pop_back",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_pop_back",1,SWIGTYPE_p_std__string);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_replace(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  std::string temp4 ;
  std::string result;
  
  SWIG_check_num_args("std::string::replace",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::replace",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::replace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::replace",3,"size_t");
  if(!lua_isstring(L,4)) SWIG_fail_arg("std::string::replace",4,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_replace",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = (arg1)->replace(arg2,arg3,(std::string const &)*arg4);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::string::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::resize",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_resize",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_substr(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::string result;
  
  SWIG_check_num_args("std::string::substr",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::substr",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::substr",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::substr",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_substr",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->substr(arg2,arg3);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_find__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("std::string::find",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::find",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::find",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::find",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_find",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find((std::string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_find__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("std::string::find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::find",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::find",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_find",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->find((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_find(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_find__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_string_find__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_find'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::find(std::string const &,size_t)\n"
    "    std::string::find(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_string_rfind__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("std::string::rfind",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::rfind",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::rfind",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::rfind",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_rfind",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->rfind((std::string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_rfind__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("std::string::rfind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::rfind",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::rfind",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_rfind",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->rfind((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_rfind(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_rfind__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_string_rfind__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_rfind'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::rfind(std::string const &,size_t)\n"
    "    std::string::rfind(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_string_compare(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  int result;
  
  SWIG_check_num_args("std::string::compare",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::compare",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::compare",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_compare",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (int)(arg1)->compare((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static int _proxy__wrap_new_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_string_methods[]= {
    { "__getitem", _wrap_string___getitem},
    { "__setitem", _wrap_string___setitem},
    { "__tostring", _wrap_string___tostring},
    { "to_int32", _wrap_string_to_int32},
    { "to_int64", _wrap_string_to_int64},
    { "to_float", _wrap_string_to_float},
    { "to_double", _wrap_string_to_double},
    { "reverse", _wrap_string_reverse},
    { "sort", _wrap_string_sort},
    { "shuffle", _wrap_string_shuffle},
    { "getline", _wrap_string_getline},
    { "fill", _wrap_string_fill},
    { "data", _wrap_string_data},
    { "size", _wrap_string_size},
    { "empty", _wrap_string_empty},
    { "clear", _wrap_string_clear},
    { "erase", _wrap_string_erase},
    { "push_back", _wrap_string_push_back},
    { "pop_back", _wrap_string_pop_back},
    { "replace", _wrap_string_replace},
    { "resize", _wrap_string_resize},
    { "substr", _wrap_string_substr},
    { "find", _wrap_string_find},
    { "rfind", _wrap_string_rfind},
    { "compare", _wrap_string_compare},
    {0,0}
};
static swig_lua_method swig_string_meta[] = {
    { "__getitem", _wrap_string___getitem},
    { "__setitem", _wrap_string___setitem},
    { "__tostring", _wrap_string___tostring},
    {0,0}
};

static swig_lua_attribute swig_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_Sf_SwigStatic = {
    "string",
    swig_string_Sf_SwigStatic_methods,
    swig_string_Sf_SwigStatic_attributes,
    swig_string_Sf_SwigStatic_constants,
    swig_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_bases[] = {0};
static const char *swig_string_base_names[] = {0};
static swig_lua_class _wrap_class_string = { "string", "string", &SWIGTYPE_p_std__string,_proxy__wrap_new_string, swig_delete_string, swig_string_methods, swig_string_attributes, &swig_string_Sf_SwigStatic, swig_string_meta, swig_string_bases, swig_string_base_names };

static void swig_delete_gslice(void *obj) {
std::gslice *arg1 = (std::gslice *) obj;
delete arg1;
}
static swig_lua_attribute swig_gslice_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_gslice_methods[]= {
    {0,0}
};
static swig_lua_method swig_gslice_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_gslice_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_gslice_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_gslice_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_gslice_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_gslice_Sf_SwigStatic = {
    "gslice",
    swig_gslice_Sf_SwigStatic_methods,
    swig_gslice_Sf_SwigStatic_attributes,
    swig_gslice_Sf_SwigStatic_constants,
    swig_gslice_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_gslice_bases[] = {0};
static const char *swig_gslice_base_names[] = {0};
static swig_lua_class _wrap_class_gslice = { "gslice", "gslice", &SWIGTYPE_p_std__gslice,0, swig_delete_gslice, swig_gslice_methods, swig_gslice_attributes, &swig_gslice_Sf_SwigStatic, swig_gslice_meta, swig_gslice_bases, swig_gslice_base_names };

static void swig_delete_slice(void *obj) {
std::slice *arg1 = (std::slice *) obj;
delete arg1;
}
static swig_lua_attribute swig_slice_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_slice_methods[]= {
    {0,0}
};
static swig_lua_method swig_slice_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_slice_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_slice_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_slice_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_slice_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_slice_Sf_SwigStatic = {
    "slice",
    swig_slice_Sf_SwigStatic_methods,
    swig_slice_Sf_SwigStatic_attributes,
    swig_slice_Sf_SwigStatic_constants,
    swig_slice_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_slice_bases[] = {0};
static const char *swig_slice_base_names[] = {0};
static swig_lua_class _wrap_class_slice = { "slice", "slice", &SWIGTYPE_p_std__slice,0, swig_delete_slice, swig_slice_methods, swig_slice_attributes, &swig_slice_Sf_SwigStatic, swig_slice_meta, swig_slice_bases, swig_slice_base_names };

static int _wrap_new_float_complex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::complex",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (std::complex< float > *)new std::complex< float >((float const &)*arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (std::complex< float > *)new std::complex< float >((float const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",0,0)
  result = (std::complex< float > *)new std::complex< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("new_float_complex",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (std::complex< float > *)new std::complex< float >((std::complex< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_float_complex__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_complex__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_complex__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_complex__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_complex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::complex(float const &,float const &)\n"
    "    std::complex< float >::complex(float const &)\n"
    "    std::complex< float >::complex()\n"
    "    std::complex< float >::complex(std::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::complex< float >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::real",1,"std::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_real",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)((std::complex< float > const *)arg1)->real();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::complex< float >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::imag",1,"std::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_imag",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)((std::complex< float > const *)arg1)->imag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("std::complex< float >::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::real",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::real",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_real",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_float_complex_real__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_complex_real__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_complex_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::real() const\n"
    "    std::complex< float >::real(float)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("std::complex< float >::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::imag",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::imag",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_imag",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_imag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_float_complex_imag__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_complex_imag__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_complex_imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::imag() const\n"
    "    std::complex< float >::imag(float)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex___add(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__add__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__add__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___add",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___add",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____add____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__sub__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__sub__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___sub",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___sub",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____sub____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___div(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__div__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__div__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___div",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___div",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____div____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__mul__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__mul__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___mul",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___mul",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____mul____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__pow__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__pow__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___pow",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___pow",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____pow____SWIG_0(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__pow__",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::__pow__",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___pow",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = std_complex_Sl_float_Sg____pow____SWIG_1(arg1,(float const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_complex___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_complex___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_complex___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::__pow__(std::complex< float > const &)\n"
    "    std::complex< float >::__pow__(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex___eq(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("std::complex< float >::__eq__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__eq__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__eq__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___eq",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___eq",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (bool)std_complex_Sl_float_Sg____eq____SWIG(arg1,(std::complex< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_complex(void *obj) {
std::complex< float > *arg1 = (std::complex< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_complex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_complex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_complex_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_complex_methods[]= {
    { "real", _wrap_float_complex_real},
    { "imag", _wrap_float_complex_imag},
    { "__add", _wrap_float_complex___add},
    { "__sub", _wrap_float_complex___sub},
    { "__div", _wrap_float_complex___div},
    { "__mul", _wrap_float_complex___mul},
    { "__pow", _wrap_float_complex___pow},
    { "__eq", _wrap_float_complex___eq},
    {0,0}
};
static swig_lua_method swig_float_complex_meta[] = {
    { "__add", _wrap_float_complex___add},
    { "__sub", _wrap_float_complex___sub},
    { "__div", _wrap_float_complex___div},
    { "__mul", _wrap_float_complex___mul},
    { "__pow", _wrap_float_complex___pow},
    { "__eq", _wrap_float_complex___eq},
    {0,0}
};

static swig_lua_attribute swig_float_complex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_complex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_complex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_complex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_complex_Sf_SwigStatic = {
    "float_complex",
    swig_float_complex_Sf_SwigStatic_methods,
    swig_float_complex_Sf_SwigStatic_attributes,
    swig_float_complex_Sf_SwigStatic_constants,
    swig_float_complex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_complex_bases[] = {0};
static const char *swig_float_complex_base_names[] = {0};
static swig_lua_class _wrap_class_float_complex = { "float_complex", "float_complex", &SWIGTYPE_p_std__complexT_float_t,_proxy__wrap_new_float_complex, swig_delete_float_complex, swig_float_complex_methods, swig_float_complex_attributes, &swig_float_complex_Sf_SwigStatic, swig_float_complex_meta, swig_float_complex_bases, swig_float_complex_base_names };

static int _wrap_new_double_complex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::complex",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (std::complex< double > *)new std::complex< double >((double const &)*arg1,(double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (std::complex< double > *)new std::complex< double >((double const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",0,0)
  result = (std::complex< double > *)new std::complex< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_double_complex",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (std::complex< double > *)new std::complex< double >((std::complex< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_double_complex__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_complex__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_double_complex__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_double_complex__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_double_complex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::complex(double const &,double const &)\n"
    "    std::complex< double >::complex(double const &)\n"
    "    std::complex< double >::complex()\n"
    "    std::complex< double >::complex(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::complex< double >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::real",1,"std::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_real",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)((std::complex< double > const *)arg1)->real();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::complex< double >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::imag",1,"std::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_imag",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)((std::complex< double > const *)arg1)->imag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::complex< double >::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::real",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::real",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_real",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_double_complex_real__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_complex_real__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_complex_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::real() const\n"
    "    std::complex< double >::real(double)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::complex< double >::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::imag",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::imag",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_imag",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_imag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_double_complex_imag__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_complex_imag__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_complex_imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::imag() const\n"
    "    std::complex< double >::imag(double)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex___add(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__add__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__add__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___add",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___add",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____add____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__sub__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__sub__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___sub",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___sub",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____sub____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___div(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__div__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__div__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___div",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___div",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____div____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__mul__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__mul__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___mul",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___mul",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____mul____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__pow__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__pow__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___pow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___pow",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____pow____SWIG_0(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__pow__",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::__pow__",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___pow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = std_complex_Sl_double_Sg____pow____SWIG_1(arg1,(double const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_double_complex___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_complex___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_complex___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::__pow__(std::complex< double > const &)\n"
    "    std::complex< double >::__pow__(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex___eq(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("std::complex< double >::__eq__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__eq__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__eq__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___eq",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___eq",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (bool)std_complex_Sl_double_Sg____eq____SWIG(arg1,(std::complex< double > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_complex(void *obj) {
std::complex< double > *arg1 = (std::complex< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_complex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_complex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_complex_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_complex_methods[]= {
    { "real", _wrap_double_complex_real},
    { "imag", _wrap_double_complex_imag},
    { "__add", _wrap_double_complex___add},
    { "__sub", _wrap_double_complex___sub},
    { "__div", _wrap_double_complex___div},
    { "__mul", _wrap_double_complex___mul},
    { "__pow", _wrap_double_complex___pow},
    { "__eq", _wrap_double_complex___eq},
    {0,0}
};
static swig_lua_method swig_double_complex_meta[] = {
    { "__add", _wrap_double_complex___add},
    { "__sub", _wrap_double_complex___sub},
    { "__div", _wrap_double_complex___div},
    { "__mul", _wrap_double_complex___mul},
    { "__pow", _wrap_double_complex___pow},
    { "__eq", _wrap_double_complex___eq},
    {0,0}
};

static swig_lua_attribute swig_double_complex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_complex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_complex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_complex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_complex_Sf_SwigStatic = {
    "double_complex",
    swig_double_complex_Sf_SwigStatic_methods,
    swig_double_complex_Sf_SwigStatic_attributes,
    swig_double_complex_Sf_SwigStatic_constants,
    swig_double_complex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_complex_bases[] = {0};
static const char *swig_double_complex_base_names[] = {0};
static swig_lua_class _wrap_class_double_complex = { "double_complex", "double_complex", &SWIGTYPE_p_std__complexT_double_t,_proxy__wrap_new_double_complex, swig_delete_double_complex, swig_double_complex_methods, swig_double_complex_attributes, &swig_double_complex_Sf_SwigStatic, swig_double_complex_meta, swig_double_complex_bases, swig_double_complex_base_names };

static int _wrap_new_float_valarray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",0,0)
  result = (std::valarray< float > *)new std::valarray< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::valarray< float > *)new std::valarray< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  size_t arg2 ;
  float temp1 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::valarray",2,"size_t");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::valarray< float > *)new std::valarray< float >((float const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  size_t arg2 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"float const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::valarray",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::valarray< float > *)new std::valarray< float >((float const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::valarray< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  std::slice_array< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::slice_array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__slice_arrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__slice_arrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::slice_array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  std::gslice_array< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::gslice_array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__gslice_arrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__gslice_arrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::gslice_array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  std::mask_array< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::mask_array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mask_arrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__mask_arrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::mask_array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  std::indirect_array< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::indirect_array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__indirect_arrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__indirect_arrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::indirect_array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_float_valarray__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__slice_arrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__gslice_arrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__mask_arrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__indirect_arrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_valarray__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_valarray__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_valarray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::valarray()\n"
    "    std::valarray< float >::valarray(size_t)\n"
    "    std::valarray< float >::valarray(float const &,size_t)\n"
    "    std::valarray< float >::valarray(float const *,size_t)\n"
    "    std::valarray< float >::valarray(std::valarray< float > const &)\n"
    "    std::valarray< float >::valarray(std::slice_array< float > const &)\n"
    "    std::valarray< float >::valarray(std::gslice_array< float > const &)\n"
    "    std::valarray< float >::valarray(std::mask_array< float > const &)\n"
    "    std::valarray< float >::valarray(std::indirect_array< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray___getitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("std::valarray< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__getitem__",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___getitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)std_valarray_Sl_float_Sg____getitem____SWIG_0(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___setitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::valarray< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__setitem__",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::valarray< float >::__setitem__",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___setitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  std_valarray_Sl_float_Sg____setitem____SWIG_0(arg1,arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___getitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::gslice *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__getitem__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__getitem__",2,"std::gslice const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___getitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__gslice,0))){
    SWIG_fail_ptr("float_valarray___getitem",2,SWIGTYPE_p_std__gslice);
  }
  
  result = std_valarray_Sl_float_Sg____getitem____SWIG_1(arg1,(std::gslice const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___setitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::gslice *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::valarray< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__setitem__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__setitem__",2,"std::gslice const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::valarray< float >::__setitem__",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___setitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__gslice,0))){
    SWIG_fail_ptr("float_valarray___setitem",2,SWIGTYPE_p_std__gslice);
  }
  
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  std_valarray_Sl_float_Sg____setitem____SWIG_1(arg1,(std::gslice const &)*arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___getitem__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::slice *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__getitem__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__getitem__",2,"std::slice const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___getitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__slice,0))){
    SWIG_fail_ptr("float_valarray___getitem",2,SWIGTYPE_p_std__slice);
  }
  
  result = std_valarray_Sl_float_Sg____getitem____SWIG_2(arg1,(std::slice const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___getitem(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__gslice, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray___getitem__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__slice, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray___getitem__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_valarray___getitem__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray___getitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::__getitem__(size_t)\n"
    "    std::valarray< float >::__getitem__(std::gslice const &)\n"
    "    std::valarray< float >::__getitem__(std::slice const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray___setitem__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::slice *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::valarray< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__setitem__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__setitem__",2,"std::slice const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::valarray< float >::__setitem__",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___setitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__slice,0))){
    SWIG_fail_ptr("float_valarray___setitem",2,SWIGTYPE_p_std__slice);
  }
  
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  std_valarray_Sl_float_Sg____setitem____SWIG_2(arg1,(std::slice const &)*arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___setitem(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__gslice, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_valarray___setitem__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__slice, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_valarray___setitem__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_valarray___setitem__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray___setitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::__setitem__(size_t,float const &)\n"
    "    std::valarray< float >::__setitem__(std::gslice const &,float const &)\n"
    "    std::valarray< float >::__setitem__(std::slice const &,float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray___add(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__add__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__add__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___add",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___add",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____add____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__sub__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__sub__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___sub",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___sub",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____sub____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__mul__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__mul__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___mul",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___mul",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____mul____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___div(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__div__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__div__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___div",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___div",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____div____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___unm__(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__unm__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__unm__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__unm__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___unm__",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___unm__",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____unm____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__pow__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__pow__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___pow",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___pow",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____pow____SWIG_0(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__pow__",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::__pow__",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___pow",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = std_valarray_Sl_float_Sg____pow____SWIG_1(arg1,(float const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_valarray___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::__pow__(std::valarray< float > const &)\n"
    "    std::valarray< float >::__pow__(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray_size(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::valarray< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::size",1,"std::valarray< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_size",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = ((std::valarray< float > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("std::valarray< float >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::resize",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::valarray< float >::resize",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_resize",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::valarray< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::resize",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_resize",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_resize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_valarray_resize__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_valarray_resize__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::resize(size_t,float)\n"
    "    std::valarray< float >::resize(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray_sum(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::valarray< float >::sum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::sum",1,"std::valarray< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_sum",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = (float)((std::valarray< float > const *)arg1)->sum();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_min(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::valarray< float >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::min",1,"std::valarray< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_min",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = (float)((std::valarray< float > const *)arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_max(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::valarray< float >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::max",1,"std::valarray< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_max",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = (float)((std::valarray< float > const *)arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_shift(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  int arg2 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::shift",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::shift",1,"std::valarray< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::shift",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_shift",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((std::valarray< float > const *)arg1)->shift(arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_cshift(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  int arg2 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::cshift",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::cshift",1,"std::valarray< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::cshift",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_cshift",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((std::valarray< float > const *)arg1)->cshift(arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float (*arg2)(float) = (float (*)(float)) 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::apply",1,"std::valarray< float > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::valarray< float >::apply",2,"float (*)(float)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_apply",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_float__float,0))){
    SWIG_fail_ptr("float_valarray_apply",2,SWIGTYPE_p_f_float__float);
  }
  
  result = ((std::valarray< float > const *)arg1)->apply(arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float (*arg2)(float const &) = (float (*)(float const &)) 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::apply",1,"std::valarray< float > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::valarray< float >::apply",2,"float (*)(float const &)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_apply",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_r_q_const__float__float,0))){
    SWIG_fail_ptr("float_valarray_apply",2,SWIGTYPE_p_f_r_q_const__float__float);
  }
  
  result = ((std::valarray< float > const *)arg1)->apply(arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_apply(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_float__float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_r_q_const__float__float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray_apply__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::apply(float (*)(float)) const\n"
    "    std::valarray< float >::apply(float (*)(float const &)) const\n");
  lua_error(L);return 0;
}


static void swig_delete_float_valarray(void *obj) {
std::valarray< float > *arg1 = (std::valarray< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_valarray(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_valarray);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_valarray_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_valarray_methods[]= {
    { "__getitem", _wrap_float_valarray___getitem},
    { "__setitem", _wrap_float_valarray___setitem},
    { "__add", _wrap_float_valarray___add},
    { "__sub", _wrap_float_valarray___sub},
    { "__mul", _wrap_float_valarray___mul},
    { "__div", _wrap_float_valarray___div},
    { "__unm__", _wrap_float_valarray___unm__},
    { "__pow", _wrap_float_valarray___pow},
    { "size", _wrap_float_valarray_size},
    { "resize", _wrap_float_valarray_resize},
    { "sum", _wrap_float_valarray_sum},
    { "min", _wrap_float_valarray_min},
    { "max", _wrap_float_valarray_max},
    { "shift", _wrap_float_valarray_shift},
    { "cshift", _wrap_float_valarray_cshift},
    { "apply", _wrap_float_valarray_apply},
    {0,0}
};
static swig_lua_method swig_float_valarray_meta[] = {
    { "__getitem", _wrap_float_valarray___getitem},
    { "__setitem", _wrap_float_valarray___setitem},
    { "__add", _wrap_float_valarray___add},
    { "__sub", _wrap_float_valarray___sub},
    { "__mul", _wrap_float_valarray___mul},
    { "__div", _wrap_float_valarray___div},
    { "__unm__", _wrap_float_valarray___unm__},
    { "__pow", _wrap_float_valarray___pow},
    {0,0}
};

static swig_lua_attribute swig_float_valarray_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_valarray_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_valarray_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_valarray_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_valarray_Sf_SwigStatic = {
    "float_valarray",
    swig_float_valarray_Sf_SwigStatic_methods,
    swig_float_valarray_Sf_SwigStatic_attributes,
    swig_float_valarray_Sf_SwigStatic_constants,
    swig_float_valarray_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_valarray_bases[] = {0};
static const char *swig_float_valarray_base_names[] = {0};
static swig_lua_class _wrap_class_float_valarray = { "float_valarray", "float_valarray", &SWIGTYPE_p_std__valarrayT_float_t,_proxy__wrap_new_float_valarray, swig_delete_float_valarray, swig_float_valarray_methods, swig_float_valarray_attributes, &swig_float_valarray_Sf_SwigStatic, swig_float_valarray_meta, swig_float_valarray_bases, swig_float_valarray_base_names };

static int _wrap_float_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::min",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::max",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::epsilon",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::round_error",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::infinity",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::quiet_NaN",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::signaling_NaN",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::denorm_min",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< float >::numeric_limits",0,0)
  result = (std::numeric_limits< float > *)new std::numeric_limits< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_numeric_limits(void *obj) {
std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_numeric_limits_methods[]= {
    { "min", _wrap_float_numeric_limits_min},
    { "max", _wrap_float_numeric_limits_max},
    { "epsilon", _wrap_float_numeric_limits_epsilon},
    { "round_error", _wrap_float_numeric_limits_round_error},
    { "infinity", _wrap_float_numeric_limits_infinity},
    { "quiet_NaN", _wrap_float_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_float_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_float_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_float_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_float_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_numeric_limits_Sf_SwigStatic = {
    "float_numeric_limits",
    swig_float_numeric_limits_Sf_SwigStatic_methods,
    swig_float_numeric_limits_Sf_SwigStatic_attributes,
    swig_float_numeric_limits_Sf_SwigStatic_constants,
    swig_float_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_numeric_limits_bases[] = {0};
static const char *swig_float_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_float_numeric_limits = { "float_numeric_limits", "float_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_float_t,_proxy__wrap_new_float_numeric_limits, swig_delete_float_numeric_limits, swig_float_numeric_limits_methods, swig_float_numeric_limits_attributes, &swig_float_numeric_limits_Sf_SwigStatic, swig_float_numeric_limits_meta, swig_float_numeric_limits_bases, swig_float_numeric_limits_base_names };

static int _wrap_double_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::min",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::max",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::epsilon",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::round_error",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::infinity",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::quiet_NaN",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::signaling_NaN",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::denorm_min",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< double >::numeric_limits",0,0)
  result = (std::numeric_limits< double > *)new std::numeric_limits< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_numeric_limits(void *obj) {
std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_numeric_limits_methods[]= {
    { "min", _wrap_double_numeric_limits_min},
    { "max", _wrap_double_numeric_limits_max},
    { "epsilon", _wrap_double_numeric_limits_epsilon},
    { "round_error", _wrap_double_numeric_limits_round_error},
    { "infinity", _wrap_double_numeric_limits_infinity},
    { "quiet_NaN", _wrap_double_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_double_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_double_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_double_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_double_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_numeric_limits_Sf_SwigStatic = {
    "double_numeric_limits",
    swig_double_numeric_limits_Sf_SwigStatic_methods,
    swig_double_numeric_limits_Sf_SwigStatic_attributes,
    swig_double_numeric_limits_Sf_SwigStatic_constants,
    swig_double_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_numeric_limits_bases[] = {0};
static const char *swig_double_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_double_numeric_limits = { "double_numeric_limits", "double_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_double_t,_proxy__wrap_new_double_numeric_limits, swig_delete_double_numeric_limits, swig_double_numeric_limits_methods, swig_double_numeric_limits_attributes, &swig_double_numeric_limits_Sf_SwigStatic, swig_double_numeric_limits_meta, swig_double_numeric_limits_bases, swig_double_numeric_limits_base_names };

static int _wrap_int_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::min",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::max",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::epsilon",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::round_error",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::infinity",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::quiet_NaN",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::signaling_NaN",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::denorm_min",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< int >::numeric_limits",0,0)
  result = (std::numeric_limits< int > *)new std::numeric_limits< int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int_numeric_limits(void *obj) {
std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int_numeric_limits_methods[]= {
    { "min", _wrap_int_numeric_limits_min},
    { "max", _wrap_int_numeric_limits_max},
    { "epsilon", _wrap_int_numeric_limits_epsilon},
    { "round_error", _wrap_int_numeric_limits_round_error},
    { "infinity", _wrap_int_numeric_limits_infinity},
    { "quiet_NaN", _wrap_int_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_int_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_int_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_int_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_int_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int_numeric_limits_Sf_SwigStatic = {
    "int_numeric_limits",
    swig_int_numeric_limits_Sf_SwigStatic_methods,
    swig_int_numeric_limits_Sf_SwigStatic_attributes,
    swig_int_numeric_limits_Sf_SwigStatic_constants,
    swig_int_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int_numeric_limits_bases[] = {0};
static const char *swig_int_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_int_numeric_limits = { "int_numeric_limits", "int_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_int_t,_proxy__wrap_new_int_numeric_limits, swig_delete_int_numeric_limits, swig_int_numeric_limits_methods, swig_int_numeric_limits_attributes, &swig_int_numeric_limits_Sf_SwigStatic, swig_int_numeric_limits_meta, swig_int_numeric_limits_bases, swig_int_numeric_limits_base_names };

static int _wrap_uint_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::min",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::max",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::epsilon",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::round_error",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::infinity",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::quiet_NaN",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::signaling_NaN",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::denorm_min",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned int > *)new std::numeric_limits< unsigned int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint_numeric_limits(void *obj) {
std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint_numeric_limits_methods[]= {
    { "min", _wrap_uint_numeric_limits_min},
    { "max", _wrap_uint_numeric_limits_max},
    { "epsilon", _wrap_uint_numeric_limits_epsilon},
    { "round_error", _wrap_uint_numeric_limits_round_error},
    { "infinity", _wrap_uint_numeric_limits_infinity},
    { "quiet_NaN", _wrap_uint_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_uint_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_uint_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_uint_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uint_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint_numeric_limits_Sf_SwigStatic = {
    "uint_numeric_limits",
    swig_uint_numeric_limits_Sf_SwigStatic_methods,
    swig_uint_numeric_limits_Sf_SwigStatic_attributes,
    swig_uint_numeric_limits_Sf_SwigStatic_constants,
    swig_uint_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint_numeric_limits_bases[] = {0};
static const char *swig_uint_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_uint_numeric_limits = { "uint_numeric_limits", "uint_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,_proxy__wrap_new_uint_numeric_limits, swig_delete_uint_numeric_limits, swig_uint_numeric_limits_methods, swig_uint_numeric_limits_attributes, &swig_uint_numeric_limits_Sf_SwigStatic, swig_uint_numeric_limits_meta, swig_uint_numeric_limits_bases, swig_uint_numeric_limits_base_names };

static int _wrap_short_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::min",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::max",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::epsilon",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::round_error",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::infinity",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::quiet_NaN",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::signaling_NaN",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::denorm_min",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_short_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< short >::numeric_limits",0,0)
  result = (std::numeric_limits< short > *)new std::numeric_limits< short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_short_numeric_limits(void *obj) {
std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_short_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_short_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_short_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_short_numeric_limits_methods[]= {
    { "min", _wrap_short_numeric_limits_min},
    { "max", _wrap_short_numeric_limits_max},
    { "epsilon", _wrap_short_numeric_limits_epsilon},
    { "round_error", _wrap_short_numeric_limits_round_error},
    { "infinity", _wrap_short_numeric_limits_infinity},
    { "quiet_NaN", _wrap_short_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_short_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_short_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_short_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_short_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_short_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_short_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_short_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_short_numeric_limits_Sf_SwigStatic = {
    "short_numeric_limits",
    swig_short_numeric_limits_Sf_SwigStatic_methods,
    swig_short_numeric_limits_Sf_SwigStatic_attributes,
    swig_short_numeric_limits_Sf_SwigStatic_constants,
    swig_short_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_short_numeric_limits_bases[] = {0};
static const char *swig_short_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_short_numeric_limits = { "short_numeric_limits", "short_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_short_t,_proxy__wrap_new_short_numeric_limits, swig_delete_short_numeric_limits, swig_short_numeric_limits_methods, swig_short_numeric_limits_attributes, &swig_short_numeric_limits_Sf_SwigStatic, swig_short_numeric_limits_meta, swig_short_numeric_limits_bases, swig_short_numeric_limits_base_names };

static int _wrap_ushort_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::min",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::max",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::epsilon",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::round_error",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::infinity",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::quiet_NaN",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::signaling_NaN",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::denorm_min",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ushort_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned short > *)new std::numeric_limits< unsigned short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ushort_numeric_limits(void *obj) {
std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ushort_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ushort_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ushort_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ushort_numeric_limits_methods[]= {
    { "min", _wrap_ushort_numeric_limits_min},
    { "max", _wrap_ushort_numeric_limits_max},
    { "epsilon", _wrap_ushort_numeric_limits_epsilon},
    { "round_error", _wrap_ushort_numeric_limits_round_error},
    { "infinity", _wrap_ushort_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ushort_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ushort_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ushort_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ushort_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ushort_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ushort_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ushort_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ushort_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ushort_numeric_limits_Sf_SwigStatic = {
    "ushort_numeric_limits",
    swig_ushort_numeric_limits_Sf_SwigStatic_methods,
    swig_ushort_numeric_limits_Sf_SwigStatic_attributes,
    swig_ushort_numeric_limits_Sf_SwigStatic_constants,
    swig_ushort_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ushort_numeric_limits_bases[] = {0};
static const char *swig_ushort_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ushort_numeric_limits = { "ushort_numeric_limits", "ushort_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,_proxy__wrap_new_ushort_numeric_limits, swig_delete_ushort_numeric_limits, swig_ushort_numeric_limits_methods, swig_ushort_numeric_limits_attributes, &swig_ushort_numeric_limits_Sf_SwigStatic, swig_ushort_numeric_limits_meta, swig_ushort_numeric_limits_bases, swig_ushort_numeric_limits_base_names };

static int _wrap_long_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::min",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::max",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::epsilon",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::round_error",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::infinity",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::quiet_NaN",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::signaling_NaN",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::denorm_min",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_long_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< long >::numeric_limits",0,0)
  result = (std::numeric_limits< long > *)new std::numeric_limits< long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_long_numeric_limits(void *obj) {
std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_long_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_long_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_long_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_long_numeric_limits_methods[]= {
    { "min", _wrap_long_numeric_limits_min},
    { "max", _wrap_long_numeric_limits_max},
    { "epsilon", _wrap_long_numeric_limits_epsilon},
    { "round_error", _wrap_long_numeric_limits_round_error},
    { "infinity", _wrap_long_numeric_limits_infinity},
    { "quiet_NaN", _wrap_long_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_long_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_long_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_long_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_long_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_long_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_long_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_long_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_long_numeric_limits_Sf_SwigStatic = {
    "long_numeric_limits",
    swig_long_numeric_limits_Sf_SwigStatic_methods,
    swig_long_numeric_limits_Sf_SwigStatic_attributes,
    swig_long_numeric_limits_Sf_SwigStatic_constants,
    swig_long_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_long_numeric_limits_bases[] = {0};
static const char *swig_long_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_long_numeric_limits = { "long_numeric_limits", "long_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_long_t,_proxy__wrap_new_long_numeric_limits, swig_delete_long_numeric_limits, swig_long_numeric_limits_methods, swig_long_numeric_limits_attributes, &swig_long_numeric_limits_Sf_SwigStatic, swig_long_numeric_limits_meta, swig_long_numeric_limits_bases, swig_long_numeric_limits_base_names };

static int _wrap_ulong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::min",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::max",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::epsilon",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::round_error",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::infinity",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::quiet_NaN",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::signaling_NaN",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::denorm_min",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ulong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned long > *)new std::numeric_limits< unsigned long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ulong_numeric_limits(void *obj) {
std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ulong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ulong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ulong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ulong_numeric_limits_methods[]= {
    { "min", _wrap_ulong_numeric_limits_min},
    { "max", _wrap_ulong_numeric_limits_max},
    { "epsilon", _wrap_ulong_numeric_limits_epsilon},
    { "round_error", _wrap_ulong_numeric_limits_round_error},
    { "infinity", _wrap_ulong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ulong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ulong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ulong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ulong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ulong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ulong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ulong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ulong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ulong_numeric_limits_Sf_SwigStatic = {
    "ulong_numeric_limits",
    swig_ulong_numeric_limits_Sf_SwigStatic_methods,
    swig_ulong_numeric_limits_Sf_SwigStatic_attributes,
    swig_ulong_numeric_limits_Sf_SwigStatic_constants,
    swig_ulong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ulong_numeric_limits_bases[] = {0};
static const char *swig_ulong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ulong_numeric_limits = { "ulong_numeric_limits", "ulong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,_proxy__wrap_new_ulong_numeric_limits, swig_delete_ulong_numeric_limits, swig_ulong_numeric_limits_methods, swig_ulong_numeric_limits_attributes, &swig_ulong_numeric_limits_Sf_SwigStatic, swig_ulong_numeric_limits_meta, swig_ulong_numeric_limits_bases, swig_ulong_numeric_limits_base_names };

static int _wrap_llong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::min",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::max",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::epsilon",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::round_error",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::infinity",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::quiet_NaN",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::signaling_NaN",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::denorm_min",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_llong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< long long >::numeric_limits",0,0)
  result = (std::numeric_limits< long long > *)new std::numeric_limits< long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_llong_numeric_limits(void *obj) {
std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_llong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_llong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_llong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_llong_numeric_limits_methods[]= {
    { "min", _wrap_llong_numeric_limits_min},
    { "max", _wrap_llong_numeric_limits_max},
    { "epsilon", _wrap_llong_numeric_limits_epsilon},
    { "round_error", _wrap_llong_numeric_limits_round_error},
    { "infinity", _wrap_llong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_llong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_llong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_llong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_llong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_llong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_llong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_llong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_llong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_llong_numeric_limits_Sf_SwigStatic = {
    "llong_numeric_limits",
    swig_llong_numeric_limits_Sf_SwigStatic_methods,
    swig_llong_numeric_limits_Sf_SwigStatic_attributes,
    swig_llong_numeric_limits_Sf_SwigStatic_constants,
    swig_llong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_llong_numeric_limits_bases[] = {0};
static const char *swig_llong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_llong_numeric_limits = { "llong_numeric_limits", "llong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_long_long_t,_proxy__wrap_new_llong_numeric_limits, swig_delete_llong_numeric_limits, swig_llong_numeric_limits_methods, swig_llong_numeric_limits_attributes, &swig_llong_numeric_limits_Sf_SwigStatic, swig_llong_numeric_limits_meta, swig_llong_numeric_limits_bases, swig_llong_numeric_limits_base_names };

static int _wrap_ullong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::min",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::max",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::epsilon",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::round_error",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::infinity",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::quiet_NaN",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::signaling_NaN",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::denorm_min",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ullong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned long long > *)new std::numeric_limits< unsigned long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ullong_numeric_limits(void *obj) {
std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ullong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ullong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ullong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ullong_numeric_limits_methods[]= {
    { "min", _wrap_ullong_numeric_limits_min},
    { "max", _wrap_ullong_numeric_limits_max},
    { "epsilon", _wrap_ullong_numeric_limits_epsilon},
    { "round_error", _wrap_ullong_numeric_limits_round_error},
    { "infinity", _wrap_ullong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ullong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ullong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ullong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ullong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ullong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ullong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ullong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ullong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ullong_numeric_limits_Sf_SwigStatic = {
    "ullong_numeric_limits",
    swig_ullong_numeric_limits_Sf_SwigStatic_methods,
    swig_ullong_numeric_limits_Sf_SwigStatic_attributes,
    swig_ullong_numeric_limits_Sf_SwigStatic_constants,
    swig_ullong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ullong_numeric_limits_bases[] = {0};
static const char *swig_ullong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ullong_numeric_limits = { "ullong_numeric_limits", "ullong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,_proxy__wrap_new_ullong_numeric_limits, swig_delete_ullong_numeric_limits, swig_ullong_numeric_limits_methods, swig_ullong_numeric_limits_attributes, &swig_ullong_numeric_limits_Sf_SwigStatic, swig_ullong_numeric_limits_meta, swig_ullong_numeric_limits_bases, swig_ullong_numeric_limits_base_names };

static int _wrap_Huge(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Huge",0,0)
  result = (double)Huge();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Hugef(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("Hugef",0,0)
  result = (float)Hugef();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Infinity(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Infinity",0,0)
  result = (double)Infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NaN(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("NaN",0,0)
  result = (double)NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("abs< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("abs< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)abs< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cubef(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cube< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cube< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cube< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("sqrt< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sqrt< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)sqrt< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("exp< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)exp< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("exp2< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp2< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)exp2< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log10< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log10< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log10< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log2< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log2< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log2< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("logb< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("logb< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)logb< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("pow< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("pow< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pow< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)pow< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("floor< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("floor< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)floor< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("acos< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acos< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)acos< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("asin< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asin< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)asin< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("atan< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)atan< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("atan2< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan2< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("atan2< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)atan2< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cos< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cos< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cos< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("sin< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sin< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)sin< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("tan< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tan< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)tan< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cosh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cosh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cosh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("sinh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sinh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)sinh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("tanh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tanh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)tanh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgammaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("lgamma< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lgamma< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)lgamma< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("acosh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acosh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)acosh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("asinh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asinh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)asinh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("atanh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atanh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)atanh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrtf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cbrt< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cbrt< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cbrt< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cbrt< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysignf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("copysign< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("copysign< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("copysign< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)copysign< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erff(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("erf< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erf< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)erf< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfcf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("erfc< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erfc< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)erfc< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("expm1< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("expm1< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)expm1< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdimf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fdim< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fdim< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fdim< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fdim< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp1 ;
  float temp2 ;
  float temp3 ;
  float result;
  
  SWIG_check_num_args("fma< f32 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fma< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fma< f32 >",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fma< f32 >",3,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  result = (float)fma< f32 >((float const &)*arg1,(float const &)*arg2,(float const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaxf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fmax< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmax< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmax< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fmax< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fminf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fmin< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmin< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmin< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fmin< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmodf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fmod< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmod< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmod< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fmod< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fpclassifyf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  int result;
  
  SWIG_check_num_args("fpclassify< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fpclassify< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (int)fpclassify< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypotf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("hypot< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("hypot< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("hypot< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)hypot< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogbf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  int result;
  
  SWIG_check_num_args("ilogb< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ilogb< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (int)ilogb< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isfinitef(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isfinite< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isfinite< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isfinite< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreater< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreater< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreater< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreater< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterequalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreaterequal< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreaterequal< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreaterequal< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreaterequal< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isinff(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isinf< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isinf< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isinf< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isless< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isless< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isless< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isless< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessequalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("islessequal< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("islessequal< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("islessequal< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)islessequal< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isnan< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnan< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnan< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnormalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isnormal< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnormal< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnormal< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isunorderedf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isunordered< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isunordered< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isunordered< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isunordered< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldexpf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("ldexp< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ldexp< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ldexp< f32 >",2,"int");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)ldexp< f32 >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llrintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("llrint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llrint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)llrint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llroundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("llround< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llround< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)llround< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log1p< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log1p< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log1p< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lrintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("lrint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lrint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)lrint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lroundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("lround< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lround< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)lround< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("nan< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nan< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)nan< f32 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanff(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("nanf< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanf< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)nanf< f32 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanlf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("nanl< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanl< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)nanl< f32 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nearbyintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("nearbyint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nearbyint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)nearbyint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextafterf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("nextafter< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nextafter< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nextafter< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)nextafter< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nexttowardf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("nexttoward< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nexttoward< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nexttoward< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)nexttoward< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainderf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("remainder< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("remainder< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("remainder< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)remainder< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("rint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)rint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("round< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("round< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)round< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalblnf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  long arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("scalbln< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbln< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbln< f32 >",2,"long");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (long)lua_tonumber(L, 2);
  result = (float)scalbln< f32 >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbnf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("scalbn< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbn< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbn< f32 >",2,"int");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)scalbn< f32 >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squaref(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("square< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("square< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)square< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgammaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("tgamma< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tgamma< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)tgamma< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_truncf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("trunc< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("trunc< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)trunc< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("abs< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("abs< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)abs< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("sqrt< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sqrt< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)sqrt< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("exp< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)exp< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("exp2< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp2< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)exp2< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log10< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log10< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log10< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log2< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log2< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log2< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("logb< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("logb< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)logb< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("pow< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("pow< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pow< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)pow< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floord(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("floor< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("floor< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)floor< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("acos< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acos< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)acos< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("asin< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asin< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)asin< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("atan< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)atan< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("atan2< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan2< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("atan2< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)atan2< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cos< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cos< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cos< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("sin< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sin< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)sin< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("tan< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tan< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)tan< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cosh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cosh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cosh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("sinh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sinh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)sinh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("tanh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tanh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)tanh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgammad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("lgamma< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lgamma< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)lgamma< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("acosh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acosh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)acosh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("asinh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asinh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)asinh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("atanh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atanh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)atanh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrtd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cbrt< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cbrt< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceild(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cbrt< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cbrt< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysignd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("copysign< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("copysign< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("copysign< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)copysign< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("erf< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erf< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)erf< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfcd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("erfc< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erfc< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)erfc< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("expm1< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("expm1< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)expm1< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdimd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fdim< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fdim< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fdim< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fdim< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp1 ;
  double temp2 ;
  double temp3 ;
  double result;
  
  SWIG_check_num_args("fma< f64 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fma< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fma< f64 >",2,"double const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fma< f64 >",3,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  result = (double)fma< f64 >((double const &)*arg1,(double const &)*arg2,(double const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaxd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fmax< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmax< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmax< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fmax< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fmin< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmin< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmin< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fmin< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmodd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fmod< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmod< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmod< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fmod< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fpclassifyd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  int result;
  
  SWIG_check_num_args("fpclassify< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fpclassify< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (int)fpclassify< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypotd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("hypot< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("hypot< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("hypot< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)hypot< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogbd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  int result;
  
  SWIG_check_num_args("ilogb< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ilogb< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (int)ilogb< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isfinited(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isfinite< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isfinite< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isfinite< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreater< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreater< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreater< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreater< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterequald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreaterequal< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreaterequal< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreaterequal< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreaterequal< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isinfd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isinf< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isinf< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isinf< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isless< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isless< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isless< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isless< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessequald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("islessequal< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("islessequal< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("islessequal< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)islessequal< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isnan< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnan< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnan< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnormald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isnormal< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnormal< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnormal< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isunorderedd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isunordered< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isunordered< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isunordered< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isunordered< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldexpd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("ldexp< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ldexp< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ldexp< f64 >",2,"int");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)ldexp< f64 >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llrintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("llrint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llrint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)llrint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llroundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("llround< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llround< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)llround< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log1p< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log1p< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log1p< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lrintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("lrint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lrint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)lrint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lroundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("lround< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lround< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)lround< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nand(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("nan< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nan< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)nan< f64 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanfd(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("nanf< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanf< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)nanf< f64 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanld(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("nanl< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanl< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)nanl< f64 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nearbyintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("nearbyint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nearbyint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)nearbyint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextafterd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("nextafter< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nextafter< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nextafter< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)nextafter< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nexttowardd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("nexttoward< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nexttoward< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nexttoward< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)nexttoward< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainderd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("remainder< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("remainder< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("remainder< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)remainder< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("rint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)rint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("round< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("round< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)round< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalblnd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  long arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("scalbln< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbln< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbln< f64 >",2,"long");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (long)lua_tonumber(L, 2);
  result = (double)scalbln< f64 >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbnd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("scalbn< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbn< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbn< f64 >",2,"int");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)scalbn< f64 >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squared(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("square< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("square< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)square< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgammad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("tgamma< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tgamma< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)tgamma< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_truncd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("trunc< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("trunc< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)trunc< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feclearexcept(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("feclearexcept",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("feclearexcept",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)feclearexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fegetexceptflag(lua_State* L) {
  int SWIG_arg = 0;
  fexcept_t *arg1 = (fexcept_t *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("fegetexceptflag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fegetexceptflag",1,"fexcept_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fegetexceptflag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fexcept_t,0))){
    SWIG_fail_ptr("fegetexceptflag",1,SWIGTYPE_p_fexcept_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)fegetexceptflag(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feraiseexcept(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("feraiseexcept",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("feraiseexcept",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)feraiseexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fesetexceptflag(lua_State* L) {
  int SWIG_arg = 0;
  fexcept_t *arg1 = (fexcept_t *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("fesetexceptflag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fesetexceptflag",1,"fexcept_t const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fesetexceptflag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fexcept_t,0))){
    SWIG_fail_ptr("fesetexceptflag",1,SWIGTYPE_p_fexcept_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)fesetexceptflag((fexcept_t const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fetestexcept(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("fetestexcept",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fetestexcept",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)fetestexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fegetround(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("fegetround",0,0)
  result = (int)fegetround();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fesetround(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("fesetround",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fesetround",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)fesetround(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fegetenv(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("fegetenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fegetenv",1,"fenv_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("fegetenv",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)fegetenv(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feholdexcept(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("feholdexcept",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("feholdexcept",1,"fenv_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("feholdexcept",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)feholdexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fesetenv(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("fesetenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fesetenv",1,"fenv_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("fesetenv",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)fesetenv((fenv_t const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feupdateenv(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("feupdateenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("feupdateenv",1,"fenv_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("feupdateenv",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)feupdateenv((fenv_t const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexPair__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ComplexPair *result = 0 ;
  
  SWIG_check_num_args("Dsp::ComplexPair::ComplexPair",0,0)
  result = (Dsp::ComplexPair *)new Dsp::ComplexPair();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__ComplexPair,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexPair__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::complex_t *arg1 = 0 ;
  Dsp::ComplexPair *result = 0 ;
  
  SWIG_check_num_args("Dsp::ComplexPair::ComplexPair",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Dsp::ComplexPair::ComplexPair",1,"Dsp::complex_t const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_ComplexPair",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (Dsp::ComplexPair *)new Dsp::ComplexPair((Dsp::complex_t const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__ComplexPair,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexPair__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::complex_t *arg1 = 0 ;
  Dsp::complex_t *arg2 = 0 ;
  Dsp::ComplexPair *result = 0 ;
  
  SWIG_check_num_args("Dsp::ComplexPair::ComplexPair",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Dsp::ComplexPair::ComplexPair",1,"Dsp::complex_t const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::ComplexPair::ComplexPair",2,"Dsp::complex_t const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_ComplexPair",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_ComplexPair",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (Dsp::ComplexPair *)new Dsp::ComplexPair((Dsp::complex_t const &)*arg1,(Dsp::complex_t const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__ComplexPair,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexPair(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ComplexPair__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexPair__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_ComplexPair__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ComplexPair'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::ComplexPair::ComplexPair()\n"
    "    Dsp::ComplexPair::ComplexPair(Dsp::complex_t const &)\n"
    "    Dsp::ComplexPair::ComplexPair(Dsp::complex_t const &,Dsp::complex_t const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexPair_isConjugate(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ComplexPair *arg1 = (Dsp::ComplexPair *) 0 ;
  bool result;
  
  SWIG_check_num_args("Dsp::ComplexPair::isConjugate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::ComplexPair::isConjugate",1,"Dsp::ComplexPair const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__ComplexPair,0))){
    SWIG_fail_ptr("ComplexPair_isConjugate",1,SWIGTYPE_p_Dsp__ComplexPair);
  }
  
  result = (bool)((Dsp::ComplexPair const *)arg1)->isConjugate();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexPair_isReal(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ComplexPair *arg1 = (Dsp::ComplexPair *) 0 ;
  bool result;
  
  SWIG_check_num_args("Dsp::ComplexPair::isReal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::ComplexPair::isReal",1,"Dsp::ComplexPair const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__ComplexPair,0))){
    SWIG_fail_ptr("ComplexPair_isReal",1,SWIGTYPE_p_Dsp__ComplexPair);
  }
  
  result = (bool)((Dsp::ComplexPair const *)arg1)->isReal();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexPair_isMatchedPair(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ComplexPair *arg1 = (Dsp::ComplexPair *) 0 ;
  bool result;
  
  SWIG_check_num_args("Dsp::ComplexPair::isMatchedPair",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::ComplexPair::isMatchedPair",1,"Dsp::ComplexPair const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__ComplexPair,0))){
    SWIG_fail_ptr("ComplexPair_isMatchedPair",1,SWIGTYPE_p_Dsp__ComplexPair);
  }
  
  result = (bool)((Dsp::ComplexPair const *)arg1)->isMatchedPair();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexPair_is_nan(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ComplexPair *arg1 = (Dsp::ComplexPair *) 0 ;
  bool result;
  
  SWIG_check_num_args("Dsp::ComplexPair::is_nan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::ComplexPair::is_nan",1,"Dsp::ComplexPair const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__ComplexPair,0))){
    SWIG_fail_ptr("ComplexPair_is_nan",1,SWIGTYPE_p_Dsp__ComplexPair);
  }
  
  result = (bool)((Dsp::ComplexPair const *)arg1)->is_nan();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ComplexPair(void *obj) {
Dsp::ComplexPair *arg1 = (Dsp::ComplexPair *) obj;
delete arg1;
}
static int _proxy__wrap_new_ComplexPair(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ComplexPair);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ComplexPair_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ComplexPair_methods[]= {
    { "isConjugate", _wrap_ComplexPair_isConjugate},
    { "isReal", _wrap_ComplexPair_isReal},
    { "isMatchedPair", _wrap_ComplexPair_isMatchedPair},
    { "is_nan", _wrap_ComplexPair_is_nan},
    {0,0}
};
static swig_lua_method swig_ComplexPair_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ComplexPair_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ComplexPair_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ComplexPair_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ComplexPair_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ComplexPair_Sf_SwigStatic = {
    "ComplexPair",
    swig_ComplexPair_Sf_SwigStatic_methods,
    swig_ComplexPair_Sf_SwigStatic_attributes,
    swig_ComplexPair_Sf_SwigStatic_constants,
    swig_ComplexPair_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ComplexPair_bases[] = {0};
static const char *swig_ComplexPair_base_names[] = {0};
static swig_lua_class _wrap_class_ComplexPair = { "ComplexPair", "ComplexPair", &SWIGTYPE_p_Dsp__ComplexPair,_proxy__wrap_new_ComplexPair, swig_delete_ComplexPair, swig_ComplexPair_methods, swig_ComplexPair_attributes, &swig_ComplexPair_Sf_SwigStatic, swig_ComplexPair_meta, swig_ComplexPair_bases, swig_ComplexPair_base_names };

static int _wrap_PoleZeroPair_poles_set(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::PoleZeroPair *arg1 = (Dsp::PoleZeroPair *) 0 ;
  Dsp::ComplexPair *arg2 = (Dsp::ComplexPair *) 0 ;
  
  SWIG_check_num_args("Dsp::PoleZeroPair::poles",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::PoleZeroPair::poles",1,"Dsp::PoleZeroPair *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::PoleZeroPair::poles",2,"Dsp::ComplexPair *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__PoleZeroPair,0))){
    SWIG_fail_ptr("PoleZeroPair_poles_set",1,SWIGTYPE_p_Dsp__PoleZeroPair);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__ComplexPair,0))){
    SWIG_fail_ptr("PoleZeroPair_poles_set",2,SWIGTYPE_p_Dsp__ComplexPair);
  }
  
  if (arg1) (arg1)->poles = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PoleZeroPair_poles_get(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::PoleZeroPair *arg1 = (Dsp::PoleZeroPair *) 0 ;
  Dsp::ComplexPair *result = 0 ;
  
  SWIG_check_num_args("Dsp::PoleZeroPair::poles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::PoleZeroPair::poles",1,"Dsp::PoleZeroPair *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__PoleZeroPair,0))){
    SWIG_fail_ptr("PoleZeroPair_poles_get",1,SWIGTYPE_p_Dsp__PoleZeroPair);
  }
  
  result = (Dsp::ComplexPair *)& ((arg1)->poles);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__ComplexPair,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PoleZeroPair_zeros_set(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::PoleZeroPair *arg1 = (Dsp::PoleZeroPair *) 0 ;
  Dsp::ComplexPair *arg2 = (Dsp::ComplexPair *) 0 ;
  
  SWIG_check_num_args("Dsp::PoleZeroPair::zeros",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::PoleZeroPair::zeros",1,"Dsp::PoleZeroPair *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::PoleZeroPair::zeros",2,"Dsp::ComplexPair *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__PoleZeroPair,0))){
    SWIG_fail_ptr("PoleZeroPair_zeros_set",1,SWIGTYPE_p_Dsp__PoleZeroPair);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__ComplexPair,0))){
    SWIG_fail_ptr("PoleZeroPair_zeros_set",2,SWIGTYPE_p_Dsp__ComplexPair);
  }
  
  if (arg1) (arg1)->zeros = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PoleZeroPair_zeros_get(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::PoleZeroPair *arg1 = (Dsp::PoleZeroPair *) 0 ;
  Dsp::ComplexPair *result = 0 ;
  
  SWIG_check_num_args("Dsp::PoleZeroPair::zeros",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::PoleZeroPair::zeros",1,"Dsp::PoleZeroPair *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__PoleZeroPair,0))){
    SWIG_fail_ptr("PoleZeroPair_zeros_get",1,SWIGTYPE_p_Dsp__PoleZeroPair);
  }
  
  result = (Dsp::ComplexPair *)& ((arg1)->zeros);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__ComplexPair,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PoleZeroPair__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::PoleZeroPair *result = 0 ;
  
  SWIG_check_num_args("Dsp::PoleZeroPair::PoleZeroPair",0,0)
  result = (Dsp::PoleZeroPair *)new Dsp::PoleZeroPair();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__PoleZeroPair,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PoleZeroPair__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::complex_t *arg1 = 0 ;
  Dsp::complex_t *arg2 = 0 ;
  Dsp::PoleZeroPair *result = 0 ;
  
  SWIG_check_num_args("Dsp::PoleZeroPair::PoleZeroPair",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Dsp::PoleZeroPair::PoleZeroPair",1,"Dsp::complex_t const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::PoleZeroPair::PoleZeroPair",2,"Dsp::complex_t const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_PoleZeroPair",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_PoleZeroPair",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (Dsp::PoleZeroPair *)new Dsp::PoleZeroPair((Dsp::complex_t const &)*arg1,(Dsp::complex_t const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__PoleZeroPair,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PoleZeroPair__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::complex_t *arg1 = 0 ;
  Dsp::complex_t *arg2 = 0 ;
  Dsp::complex_t *arg3 = 0 ;
  Dsp::complex_t *arg4 = 0 ;
  Dsp::PoleZeroPair *result = 0 ;
  
  SWIG_check_num_args("Dsp::PoleZeroPair::PoleZeroPair",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Dsp::PoleZeroPair::PoleZeroPair",1,"Dsp::complex_t const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::PoleZeroPair::PoleZeroPair",2,"Dsp::complex_t const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Dsp::PoleZeroPair::PoleZeroPair",3,"Dsp::complex_t const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Dsp::PoleZeroPair::PoleZeroPair",4,"Dsp::complex_t const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_PoleZeroPair",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_PoleZeroPair",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_PoleZeroPair",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_PoleZeroPair",4,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (Dsp::PoleZeroPair *)new Dsp::PoleZeroPair((Dsp::complex_t const &)*arg1,(Dsp::complex_t const &)*arg2,(Dsp::complex_t const &)*arg3,(Dsp::complex_t const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__PoleZeroPair,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PoleZeroPair(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PoleZeroPair__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_PoleZeroPair__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_PoleZeroPair__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PoleZeroPair'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::PoleZeroPair::PoleZeroPair()\n"
    "    Dsp::PoleZeroPair::PoleZeroPair(Dsp::complex_t const &,Dsp::complex_t const &)\n"
    "    Dsp::PoleZeroPair::PoleZeroPair(Dsp::complex_t const &,Dsp::complex_t const &,Dsp::complex_t const &,Dsp::complex_t const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PoleZeroPair_isSinglePole(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::PoleZeroPair *arg1 = (Dsp::PoleZeroPair *) 0 ;
  bool result;
  
  SWIG_check_num_args("Dsp::PoleZeroPair::isSinglePole",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::PoleZeroPair::isSinglePole",1,"Dsp::PoleZeroPair const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__PoleZeroPair,0))){
    SWIG_fail_ptr("PoleZeroPair_isSinglePole",1,SWIGTYPE_p_Dsp__PoleZeroPair);
  }
  
  result = (bool)((Dsp::PoleZeroPair const *)arg1)->isSinglePole();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PoleZeroPair_is_nan(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::PoleZeroPair *arg1 = (Dsp::PoleZeroPair *) 0 ;
  bool result;
  
  SWIG_check_num_args("Dsp::PoleZeroPair::is_nan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::PoleZeroPair::is_nan",1,"Dsp::PoleZeroPair const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__PoleZeroPair,0))){
    SWIG_fail_ptr("PoleZeroPair_is_nan",1,SWIGTYPE_p_Dsp__PoleZeroPair);
  }
  
  result = (bool)((Dsp::PoleZeroPair const *)arg1)->is_nan();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PoleZeroPair(void *obj) {
Dsp::PoleZeroPair *arg1 = (Dsp::PoleZeroPair *) obj;
delete arg1;
}
static int _proxy__wrap_new_PoleZeroPair(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PoleZeroPair);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PoleZeroPair_attributes[] = {
    { "poles", _wrap_PoleZeroPair_poles_get, _wrap_PoleZeroPair_poles_set },
    { "zeros", _wrap_PoleZeroPair_zeros_get, _wrap_PoleZeroPair_zeros_set },
    {0,0,0}
};
static swig_lua_method swig_PoleZeroPair_methods[]= {
    { "isSinglePole", _wrap_PoleZeroPair_isSinglePole},
    { "is_nan", _wrap_PoleZeroPair_is_nan},
    {0,0}
};
static swig_lua_method swig_PoleZeroPair_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PoleZeroPair_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PoleZeroPair_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PoleZeroPair_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PoleZeroPair_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PoleZeroPair_Sf_SwigStatic = {
    "PoleZeroPair",
    swig_PoleZeroPair_Sf_SwigStatic_methods,
    swig_PoleZeroPair_Sf_SwigStatic_attributes,
    swig_PoleZeroPair_Sf_SwigStatic_constants,
    swig_PoleZeroPair_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PoleZeroPair_bases[] = {0};
static const char *swig_PoleZeroPair_base_names[] = {0};
static swig_lua_class _wrap_class_PoleZeroPair = { "PoleZeroPair", "PoleZeroPair", &SWIGTYPE_p_Dsp__PoleZeroPair,_proxy__wrap_new_PoleZeroPair, swig_delete_PoleZeroPair, swig_PoleZeroPair_methods, swig_PoleZeroPair_attributes, &swig_PoleZeroPair_Sf_SwigStatic, swig_PoleZeroPair_meta, swig_PoleZeroPair_bases, swig_PoleZeroPair_base_names };

static int _wrap_Params_clear(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::Params *arg1 = (Dsp::Params *) 0 ;
  
  SWIG_check_num_args("Dsp::Params::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::Params::clear",1,"Dsp::Params *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("Params_clear",1,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Params___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::Params *arg1 = (Dsp::Params *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::Params::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::Params::__getitem__",1,"Dsp::Params *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::Params::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("Params___getitem",1,SWIGTYPE_p_Dsp__Params);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)Dsp_Params___getitem____SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Params___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::Params *arg1 = (Dsp::Params *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::Params::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::Params::__setitem__",1,"Dsp::Params *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::Params::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::Params::__setitem__",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("Params___setitem",1,SWIGTYPE_p_Dsp__Params);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  Dsp_Params___setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Params_value_set(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::Params *arg1 = (Dsp::Params *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("Dsp::Params::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::Params::value",1,"Dsp::Params *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::Params::value",2,"double [Dsp::maxParameters]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("Params_value_set",1,SWIGTYPE_p_Dsp__Params);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Params_value_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->value;
    for (ii = 0; ii < (size_t)Dsp::maxParameters; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Params_value_get(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::Params *arg1 = (Dsp::Params *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Dsp::Params::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::Params::value",1,"Dsp::Params *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("Params_value_get",1,SWIGTYPE_p_Dsp__Params);
  }
  
  result = (double *)(double *) ((arg1)->value);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Params(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::Params::Params",0,0)
  result = (Dsp::Params *)new Dsp::Params();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Params(void *obj) {
Dsp::Params *arg1 = (Dsp::Params *) obj;
delete arg1;
}
static int _proxy__wrap_new_Params(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Params);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Params_attributes[] = {
    { "value", _wrap_Params_value_get, _wrap_Params_value_set },
    {0,0,0}
};
static swig_lua_method swig_Params_methods[]= {
    { "clear", _wrap_Params_clear},
    { "__getitem", _wrap_Params___getitem},
    { "__setitem", _wrap_Params___setitem},
    {0,0}
};
static swig_lua_method swig_Params_meta[] = {
    { "__getitem", _wrap_Params___getitem},
    { "__setitem", _wrap_Params___setitem},
    {0,0}
};

static swig_lua_attribute swig_Params_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Params_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Params_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Params_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Params_Sf_SwigStatic = {
    "Params",
    swig_Params_Sf_SwigStatic_methods,
    swig_Params_Sf_SwigStatic_attributes,
    swig_Params_Sf_SwigStatic_constants,
    swig_Params_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Params_bases[] = {0};
static const char *swig_Params_base_names[] = {0};
static swig_lua_class _wrap_class_Params = { "Params", "Params", &SWIGTYPE_p_Dsp__Params,_proxy__wrap_new_Params, swig_delete_Params, swig_Params_methods, swig_Params_attributes, &swig_Params_Sf_SwigStatic, swig_Params_meta, swig_Params_bases, swig_Params_base_names };

static int _wrap_new_ParamInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo *result = 0 ;
  
  SWIG_check_num_args("Dsp::ParamInfo::ParamInfo",0,0)
  result = (Dsp::ParamInfo *)new Dsp::ParamInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__ParamInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParamInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamID arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  Dsp::ParamInfo::toControlValue_t arg7 ;
  Dsp::ParamInfo::toNativeValue_t arg8 ;
  Dsp::ParamInfo::toString_t arg9 ;
  Dsp::ParamInfo *result = 0 ;
  
  SWIG_check_num_args("Dsp::ParamInfo::ParamInfo",9,9)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::ParamInfo::ParamInfo",1,"Dsp::ParamID");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Dsp::ParamInfo::ParamInfo",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Dsp::ParamInfo::ParamInfo",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Dsp::ParamInfo::ParamInfo",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Dsp::ParamInfo::ParamInfo",5,"double");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Dsp::ParamInfo::ParamInfo",6,"double");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("Dsp::ParamInfo::ParamInfo",7,"Dsp::ParamInfo::toControlValue_t");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("Dsp::ParamInfo::ParamInfo",8,"Dsp::ParamInfo::toNativeValue_t");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("Dsp::ParamInfo::ParamInfo",9,"Dsp::ParamInfo::toString_t");
  arg1 = (Dsp::ParamID)(int)lua_tonumber(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  arg6 = (double)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertMember(L,7,(void*)(&arg7),sizeof(arg7),SWIGTYPE_m_ParamInfo__q_const__f_double__double)))
  SWIG_fail_ptr("new_ParamInfo",7,SWIGTYPE_m_ParamInfo__q_const__f_double__double);
  
  
  if (!SWIG_IsOK(SWIG_ConvertMember(L,8,(void*)(&arg8),sizeof(arg8),SWIGTYPE_m_ParamInfo__q_const__f_double__double)))
  SWIG_fail_ptr("new_ParamInfo",8,SWIGTYPE_m_ParamInfo__q_const__f_double__double);
  
  
  if (!SWIG_IsOK(SWIG_ConvertMember(L,9,(void*)(&arg9),sizeof(arg9),SWIGTYPE_m_ParamInfo__q_const__f_double__std__string)))
  SWIG_fail_ptr("new_ParamInfo",9,SWIGTYPE_m_ParamInfo__q_const__f_double__std__string);
  
  result = (Dsp::ParamInfo *)new Dsp::ParamInfo(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__ParamInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParamInfo(lua_State* L) {
  int argc;
  int argv[10]={
    1,2,3,4,5,6,7,8,9,10
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ParamInfo__SWIG_0(L);
  }
  if (argc == 9) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_m_ParamInfo__q_const__f_double__double, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (SWIG_isptrtype(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_m_ParamInfo__q_const__f_double__double, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (SWIG_isptrtype(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_m_ParamInfo__q_const__f_double__std__string, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      return _wrap_new_ParamInfo__SWIG_1(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ParamInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::ParamInfo::ParamInfo()\n"
    "    Dsp::ParamInfo::ParamInfo(Dsp::ParamID,char const *,char const *,double,double,double,Dsp::ParamInfo::toControlValue_t,Dsp::ParamInfo::toNativeValue_t,Dsp::ParamInfo::toString_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ParamInfo_getId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo *arg1 = (Dsp::ParamInfo *) 0 ;
  Dsp::ParamID result;
  
  SWIG_check_num_args("Dsp::ParamInfo::getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::ParamInfo::getId",1,"Dsp::ParamInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__ParamInfo,0))){
    SWIG_fail_ptr("ParamInfo_getId",1,SWIGTYPE_p_Dsp__ParamInfo);
  }
  
  result = (Dsp::ParamID)((Dsp::ParamInfo const *)arg1)->getId();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_getLabel(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo *arg1 = (Dsp::ParamInfo *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Dsp::ParamInfo::getLabel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::ParamInfo::getLabel",1,"Dsp::ParamInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__ParamInfo,0))){
    SWIG_fail_ptr("ParamInfo_getLabel",1,SWIGTYPE_p_Dsp__ParamInfo);
  }
  
  result = (char *)((Dsp::ParamInfo const *)arg1)->getLabel();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_getName(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo *arg1 = (Dsp::ParamInfo *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Dsp::ParamInfo::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::ParamInfo::getName",1,"Dsp::ParamInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__ParamInfo,0))){
    SWIG_fail_ptr("ParamInfo_getName",1,SWIGTYPE_p_Dsp__ParamInfo);
  }
  
  result = (char *)((Dsp::ParamInfo const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_getDefaultValue(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo *arg1 = (Dsp::ParamInfo *) 0 ;
  double result;
  
  SWIG_check_num_args("Dsp::ParamInfo::getDefaultValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::ParamInfo::getDefaultValue",1,"Dsp::ParamInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__ParamInfo,0))){
    SWIG_fail_ptr("ParamInfo_getDefaultValue",1,SWIGTYPE_p_Dsp__ParamInfo);
  }
  
  result = (double)((Dsp::ParamInfo const *)arg1)->getDefaultValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_toControlValue(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo *arg1 = (Dsp::ParamInfo *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::ParamInfo::toControlValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::ParamInfo::toControlValue",1,"Dsp::ParamInfo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::ParamInfo::toControlValue",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__ParamInfo,0))){
    SWIG_fail_ptr("ParamInfo_toControlValue",1,SWIGTYPE_p_Dsp__ParamInfo);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)((Dsp::ParamInfo const *)arg1)->toControlValue(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_toNativeValue(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo *arg1 = (Dsp::ParamInfo *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::ParamInfo::toNativeValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::ParamInfo::toNativeValue",1,"Dsp::ParamInfo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::ParamInfo::toNativeValue",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__ParamInfo,0))){
    SWIG_fail_ptr("ParamInfo_toNativeValue",1,SWIGTYPE_p_Dsp__ParamInfo);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)((Dsp::ParamInfo const *)arg1)->toNativeValue(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_toString(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo *arg1 = (Dsp::ParamInfo *) 0 ;
  double arg2 ;
  std::string result;
  
  SWIG_check_num_args("Dsp::ParamInfo::toString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::ParamInfo::toString",1,"Dsp::ParamInfo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::ParamInfo::toString",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__ParamInfo,0))){
    SWIG_fail_ptr("ParamInfo_toString",1,SWIGTYPE_p_Dsp__ParamInfo);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = ((Dsp::ParamInfo const *)arg1)->toString(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_clamp(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo *arg1 = (Dsp::ParamInfo *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::ParamInfo::clamp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::ParamInfo::clamp",1,"Dsp::ParamInfo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::ParamInfo::clamp",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__ParamInfo,0))){
    SWIG_fail_ptr("ParamInfo_clamp",1,SWIGTYPE_p_Dsp__ParamInfo);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)((Dsp::ParamInfo const *)arg1)->clamp(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_Int_toControlValue(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo *arg1 = (Dsp::ParamInfo *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::ParamInfo::Int_toControlValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::ParamInfo::Int_toControlValue",1,"Dsp::ParamInfo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::ParamInfo::Int_toControlValue",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__ParamInfo,0))){
    SWIG_fail_ptr("ParamInfo_Int_toControlValue",1,SWIGTYPE_p_Dsp__ParamInfo);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)((Dsp::ParamInfo const *)arg1)->Int_toControlValue(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_Int_toNativeValue(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo *arg1 = (Dsp::ParamInfo *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::ParamInfo::Int_toNativeValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::ParamInfo::Int_toNativeValue",1,"Dsp::ParamInfo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::ParamInfo::Int_toNativeValue",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__ParamInfo,0))){
    SWIG_fail_ptr("ParamInfo_Int_toNativeValue",1,SWIGTYPE_p_Dsp__ParamInfo);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)((Dsp::ParamInfo const *)arg1)->Int_toNativeValue(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_Real_toControlValue(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo *arg1 = (Dsp::ParamInfo *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::ParamInfo::Real_toControlValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::ParamInfo::Real_toControlValue",1,"Dsp::ParamInfo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::ParamInfo::Real_toControlValue",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__ParamInfo,0))){
    SWIG_fail_ptr("ParamInfo_Real_toControlValue",1,SWIGTYPE_p_Dsp__ParamInfo);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)((Dsp::ParamInfo const *)arg1)->Real_toControlValue(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_Real_toNativeValue(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo *arg1 = (Dsp::ParamInfo *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::ParamInfo::Real_toNativeValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::ParamInfo::Real_toNativeValue",1,"Dsp::ParamInfo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::ParamInfo::Real_toNativeValue",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__ParamInfo,0))){
    SWIG_fail_ptr("ParamInfo_Real_toNativeValue",1,SWIGTYPE_p_Dsp__ParamInfo);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)((Dsp::ParamInfo const *)arg1)->Real_toNativeValue(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_Log_toControlValue(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo *arg1 = (Dsp::ParamInfo *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::ParamInfo::Log_toControlValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::ParamInfo::Log_toControlValue",1,"Dsp::ParamInfo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::ParamInfo::Log_toControlValue",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__ParamInfo,0))){
    SWIG_fail_ptr("ParamInfo_Log_toControlValue",1,SWIGTYPE_p_Dsp__ParamInfo);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)((Dsp::ParamInfo const *)arg1)->Log_toControlValue(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_Log_toNativeValue(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo *arg1 = (Dsp::ParamInfo *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::ParamInfo::Log_toNativeValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::ParamInfo::Log_toNativeValue",1,"Dsp::ParamInfo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::ParamInfo::Log_toNativeValue",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__ParamInfo,0))){
    SWIG_fail_ptr("ParamInfo_Log_toNativeValue",1,SWIGTYPE_p_Dsp__ParamInfo);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)((Dsp::ParamInfo const *)arg1)->Log_toNativeValue(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_Pow2_toControlValue(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo *arg1 = (Dsp::ParamInfo *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::ParamInfo::Pow2_toControlValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::ParamInfo::Pow2_toControlValue",1,"Dsp::ParamInfo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::ParamInfo::Pow2_toControlValue",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__ParamInfo,0))){
    SWIG_fail_ptr("ParamInfo_Pow2_toControlValue",1,SWIGTYPE_p_Dsp__ParamInfo);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)((Dsp::ParamInfo const *)arg1)->Pow2_toControlValue(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_Pow2_toNativeValue(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo *arg1 = (Dsp::ParamInfo *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::ParamInfo::Pow2_toNativeValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::ParamInfo::Pow2_toNativeValue",1,"Dsp::ParamInfo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::ParamInfo::Pow2_toNativeValue",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__ParamInfo,0))){
    SWIG_fail_ptr("ParamInfo_Pow2_toNativeValue",1,SWIGTYPE_p_Dsp__ParamInfo);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)((Dsp::ParamInfo const *)arg1)->Pow2_toNativeValue(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_Int_toString(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo *arg1 = (Dsp::ParamInfo *) 0 ;
  double arg2 ;
  std::string result;
  
  SWIG_check_num_args("Dsp::ParamInfo::Int_toString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::ParamInfo::Int_toString",1,"Dsp::ParamInfo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::ParamInfo::Int_toString",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__ParamInfo,0))){
    SWIG_fail_ptr("ParamInfo_Int_toString",1,SWIGTYPE_p_Dsp__ParamInfo);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = ((Dsp::ParamInfo const *)arg1)->Int_toString(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_Hz_toString(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo *arg1 = (Dsp::ParamInfo *) 0 ;
  double arg2 ;
  std::string result;
  
  SWIG_check_num_args("Dsp::ParamInfo::Hz_toString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::ParamInfo::Hz_toString",1,"Dsp::ParamInfo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::ParamInfo::Hz_toString",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__ParamInfo,0))){
    SWIG_fail_ptr("ParamInfo_Hz_toString",1,SWIGTYPE_p_Dsp__ParamInfo);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = ((Dsp::ParamInfo const *)arg1)->Hz_toString(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_Real_toString(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo *arg1 = (Dsp::ParamInfo *) 0 ;
  double arg2 ;
  std::string result;
  
  SWIG_check_num_args("Dsp::ParamInfo::Real_toString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::ParamInfo::Real_toString",1,"Dsp::ParamInfo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::ParamInfo::Real_toString",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__ParamInfo,0))){
    SWIG_fail_ptr("ParamInfo_Real_toString",1,SWIGTYPE_p_Dsp__ParamInfo);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = ((Dsp::ParamInfo const *)arg1)->Real_toString(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_Db_toString(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo *arg1 = (Dsp::ParamInfo *) 0 ;
  double arg2 ;
  std::string result;
  
  SWIG_check_num_args("Dsp::ParamInfo::Db_toString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::ParamInfo::Db_toString",1,"Dsp::ParamInfo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::ParamInfo::Db_toString",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__ParamInfo,0))){
    SWIG_fail_ptr("ParamInfo_Db_toString",1,SWIGTYPE_p_Dsp__ParamInfo);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = ((Dsp::ParamInfo const *)arg1)->Db_toString(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_defaultSampleRateParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo result;
  
  SWIG_check_num_args("Dsp::ParamInfo::defaultSampleRateParam",0,0)
  result = Dsp::ParamInfo::defaultSampleRateParam();
  {
    Dsp::ParamInfo * resultptr = new Dsp::ParamInfo((const Dsp::ParamInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ParamInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_defaultCutoffFrequencyParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo result;
  
  SWIG_check_num_args("Dsp::ParamInfo::defaultCutoffFrequencyParam",0,0)
  result = Dsp::ParamInfo::defaultCutoffFrequencyParam();
  {
    Dsp::ParamInfo * resultptr = new Dsp::ParamInfo((const Dsp::ParamInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ParamInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_defaultCenterFrequencyParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo result;
  
  SWIG_check_num_args("Dsp::ParamInfo::defaultCenterFrequencyParam",0,0)
  result = Dsp::ParamInfo::defaultCenterFrequencyParam();
  {
    Dsp::ParamInfo * resultptr = new Dsp::ParamInfo((const Dsp::ParamInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ParamInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_defaultQParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo result;
  
  SWIG_check_num_args("Dsp::ParamInfo::defaultQParam",0,0)
  result = Dsp::ParamInfo::defaultQParam();
  {
    Dsp::ParamInfo * resultptr = new Dsp::ParamInfo((const Dsp::ParamInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ParamInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_defaultBandwidthParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo result;
  
  SWIG_check_num_args("Dsp::ParamInfo::defaultBandwidthParam",0,0)
  result = Dsp::ParamInfo::defaultBandwidthParam();
  {
    Dsp::ParamInfo * resultptr = new Dsp::ParamInfo((const Dsp::ParamInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ParamInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_defaultBandwidthHzParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo result;
  
  SWIG_check_num_args("Dsp::ParamInfo::defaultBandwidthHzParam",0,0)
  result = Dsp::ParamInfo::defaultBandwidthHzParam();
  {
    Dsp::ParamInfo * resultptr = new Dsp::ParamInfo((const Dsp::ParamInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ParamInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_defaultGainParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo result;
  
  SWIG_check_num_args("Dsp::ParamInfo::defaultGainParam",0,0)
  result = Dsp::ParamInfo::defaultGainParam();
  {
    Dsp::ParamInfo * resultptr = new Dsp::ParamInfo((const Dsp::ParamInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ParamInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_defaultSlopeParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo result;
  
  SWIG_check_num_args("Dsp::ParamInfo::defaultSlopeParam",0,0)
  result = Dsp::ParamInfo::defaultSlopeParam();
  {
    Dsp::ParamInfo * resultptr = new Dsp::ParamInfo((const Dsp::ParamInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ParamInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_defaultRippleDbParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo result;
  
  SWIG_check_num_args("Dsp::ParamInfo::defaultRippleDbParam",0,0)
  result = Dsp::ParamInfo::defaultRippleDbParam();
  {
    Dsp::ParamInfo * resultptr = new Dsp::ParamInfo((const Dsp::ParamInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ParamInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_defaultStopDbParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo result;
  
  SWIG_check_num_args("Dsp::ParamInfo::defaultStopDbParam",0,0)
  result = Dsp::ParamInfo::defaultStopDbParam();
  {
    Dsp::ParamInfo * resultptr = new Dsp::ParamInfo((const Dsp::ParamInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ParamInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_defaultRolloffParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo result;
  
  SWIG_check_num_args("Dsp::ParamInfo::defaultRolloffParam",0,0)
  result = Dsp::ParamInfo::defaultRolloffParam();
  {
    Dsp::ParamInfo * resultptr = new Dsp::ParamInfo((const Dsp::ParamInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ParamInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_defaultPoleRhoParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo result;
  
  SWIG_check_num_args("Dsp::ParamInfo::defaultPoleRhoParam",0,0)
  result = Dsp::ParamInfo::defaultPoleRhoParam();
  {
    Dsp::ParamInfo * resultptr = new Dsp::ParamInfo((const Dsp::ParamInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ParamInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_defaultPoleThetaParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo result;
  
  SWIG_check_num_args("Dsp::ParamInfo::defaultPoleThetaParam",0,0)
  result = Dsp::ParamInfo::defaultPoleThetaParam();
  {
    Dsp::ParamInfo * resultptr = new Dsp::ParamInfo((const Dsp::ParamInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ParamInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_defaultZeroRhoParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo result;
  
  SWIG_check_num_args("Dsp::ParamInfo::defaultZeroRhoParam",0,0)
  result = Dsp::ParamInfo::defaultZeroRhoParam();
  {
    Dsp::ParamInfo * resultptr = new Dsp::ParamInfo((const Dsp::ParamInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ParamInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_defaultZeroThetaParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo result;
  
  SWIG_check_num_args("Dsp::ParamInfo::defaultZeroThetaParam",0,0)
  result = Dsp::ParamInfo::defaultZeroThetaParam();
  {
    Dsp::ParamInfo * resultptr = new Dsp::ParamInfo((const Dsp::ParamInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ParamInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_defaultPoleRealParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo result;
  
  SWIG_check_num_args("Dsp::ParamInfo::defaultPoleRealParam",0,0)
  result = Dsp::ParamInfo::defaultPoleRealParam();
  {
    Dsp::ParamInfo * resultptr = new Dsp::ParamInfo((const Dsp::ParamInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ParamInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParamInfo_defaultZeroRealParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::ParamInfo result;
  
  SWIG_check_num_args("Dsp::ParamInfo::defaultZeroRealParam",0,0)
  result = Dsp::ParamInfo::defaultZeroRealParam();
  {
    Dsp::ParamInfo * resultptr = new Dsp::ParamInfo((const Dsp::ParamInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ParamInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParamInfo(void *obj) {
Dsp::ParamInfo *arg1 = (Dsp::ParamInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParamInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParamInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParamInfo_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParamInfo_methods[]= {
    { "getId", _wrap_ParamInfo_getId},
    { "getLabel", _wrap_ParamInfo_getLabel},
    { "getName", _wrap_ParamInfo_getName},
    { "getDefaultValue", _wrap_ParamInfo_getDefaultValue},
    { "toControlValue", _wrap_ParamInfo_toControlValue},
    { "toNativeValue", _wrap_ParamInfo_toNativeValue},
    { "toString", _wrap_ParamInfo_toString},
    { "clamp", _wrap_ParamInfo_clamp},
    { "Int_toControlValue", _wrap_ParamInfo_Int_toControlValue},
    { "Int_toNativeValue", _wrap_ParamInfo_Int_toNativeValue},
    { "Real_toControlValue", _wrap_ParamInfo_Real_toControlValue},
    { "Real_toNativeValue", _wrap_ParamInfo_Real_toNativeValue},
    { "Log_toControlValue", _wrap_ParamInfo_Log_toControlValue},
    { "Log_toNativeValue", _wrap_ParamInfo_Log_toNativeValue},
    { "Pow2_toControlValue", _wrap_ParamInfo_Pow2_toControlValue},
    { "Pow2_toNativeValue", _wrap_ParamInfo_Pow2_toNativeValue},
    { "Int_toString", _wrap_ParamInfo_Int_toString},
    { "Hz_toString", _wrap_ParamInfo_Hz_toString},
    { "Real_toString", _wrap_ParamInfo_Real_toString},
    { "Db_toString", _wrap_ParamInfo_Db_toString},
    {0,0}
};
static swig_lua_method swig_ParamInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParamInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParamInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParamInfo_Sf_SwigStatic_methods[]= {
    { "defaultSampleRateParam", _wrap_ParamInfo_defaultSampleRateParam},
    { "defaultCutoffFrequencyParam", _wrap_ParamInfo_defaultCutoffFrequencyParam},
    { "defaultCenterFrequencyParam", _wrap_ParamInfo_defaultCenterFrequencyParam},
    { "defaultQParam", _wrap_ParamInfo_defaultQParam},
    { "defaultBandwidthParam", _wrap_ParamInfo_defaultBandwidthParam},
    { "defaultBandwidthHzParam", _wrap_ParamInfo_defaultBandwidthHzParam},
    { "defaultGainParam", _wrap_ParamInfo_defaultGainParam},
    { "defaultSlopeParam", _wrap_ParamInfo_defaultSlopeParam},
    { "defaultRippleDbParam", _wrap_ParamInfo_defaultRippleDbParam},
    { "defaultStopDbParam", _wrap_ParamInfo_defaultStopDbParam},
    { "defaultRolloffParam", _wrap_ParamInfo_defaultRolloffParam},
    { "defaultPoleRhoParam", _wrap_ParamInfo_defaultPoleRhoParam},
    { "defaultPoleThetaParam", _wrap_ParamInfo_defaultPoleThetaParam},
    { "defaultZeroRhoParam", _wrap_ParamInfo_defaultZeroRhoParam},
    { "defaultZeroThetaParam", _wrap_ParamInfo_defaultZeroThetaParam},
    { "defaultPoleRealParam", _wrap_ParamInfo_defaultPoleRealParam},
    { "defaultZeroRealParam", _wrap_ParamInfo_defaultZeroRealParam},
    {0,0}
};
static swig_lua_class* swig_ParamInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParamInfo_Sf_SwigStatic = {
    "ParamInfo",
    swig_ParamInfo_Sf_SwigStatic_methods,
    swig_ParamInfo_Sf_SwigStatic_attributes,
    swig_ParamInfo_Sf_SwigStatic_constants,
    swig_ParamInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParamInfo_bases[] = {0};
static const char *swig_ParamInfo_base_names[] = {0};
static swig_lua_class _wrap_class_ParamInfo = { "ParamInfo", "ParamInfo", &SWIGTYPE_p_Dsp__ParamInfo,_proxy__wrap_new_ParamInfo, swig_delete_ParamInfo, swig_ParamInfo_methods, swig_ParamInfo_attributes, &swig_ParamInfo_Sf_SwigStatic, swig_ParamInfo_meta, swig_ParamInfo_bases, swig_ParamInfo_base_names };

static int _wrap_Filter_getKind(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::Filter *arg1 = (Dsp::Filter *) 0 ;
  Dsp::Kind result;
  
  SWIG_check_num_args("Dsp::Filter::getKind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::Filter::getKind",1,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("Filter_getKind",1,SWIGTYPE_p_Dsp__Filter);
  }
  
  result = (Dsp::Kind)((Dsp::Filter const *)arg1)->getKind();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_getName(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::Filter *arg1 = (Dsp::Filter *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Dsp::Filter::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::Filter::getName",1,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("Filter_getName",1,SWIGTYPE_p_Dsp__Filter);
  }
  
  result = ((Dsp::Filter const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_getNumParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::Filter *arg1 = (Dsp::Filter *) 0 ;
  int result;
  
  SWIG_check_num_args("Dsp::Filter::getNumParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::Filter::getNumParams",1,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("Filter_getNumParams",1,SWIGTYPE_p_Dsp__Filter);
  }
  
  result = (int)((Dsp::Filter const *)arg1)->getNumParams();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_getParamInfo(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::Filter *arg1 = (Dsp::Filter *) 0 ;
  int arg2 ;
  Dsp::ParamInfo result;
  
  SWIG_check_num_args("Dsp::Filter::getParamInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::Filter::getParamInfo",1,"Dsp::Filter const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::Filter::getParamInfo",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("Filter_getParamInfo",1,SWIGTYPE_p_Dsp__Filter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((Dsp::Filter const *)arg1)->getParamInfo(arg2);
  {
    Dsp::ParamInfo * resultptr = new Dsp::ParamInfo((const Dsp::ParamInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ParamInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_getDefaultParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::Filter *arg1 = (Dsp::Filter *) 0 ;
  Dsp::Params result;
  
  SWIG_check_num_args("Dsp::Filter::getDefaultParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::Filter::getDefaultParams",1,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("Filter_getDefaultParams",1,SWIGTYPE_p_Dsp__Filter);
  }
  
  result = ((Dsp::Filter const *)arg1)->getDefaultParams();
  {
    Dsp::Params * resultptr = new Dsp::Params((const Dsp::Params &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__Params,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::Filter *arg1 = (Dsp::Filter *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::Filter::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::Filter::getParams",1,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("Filter_getParams",1,SWIGTYPE_p_Dsp__Filter);
  }
  
  result = (Dsp::Params *) &((Dsp::Filter const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::Filter *arg1 = (Dsp::Filter *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::Filter::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::Filter::getParam",1,"Dsp::Filter const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::Filter::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("Filter_getParam",1,SWIGTYPE_p_Dsp__Filter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::Filter const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::Filter *arg1 = (Dsp::Filter *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::Filter::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::Filter::setParam",1,"Dsp::Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::Filter::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::Filter::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("Filter_setParam",1,SWIGTYPE_p_Dsp__Filter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::Filter *arg1 = (Dsp::Filter *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::Filter::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::Filter::findParamId",1,"Dsp::Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::Filter::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("Filter_findParamId",1,SWIGTYPE_p_Dsp__Filter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::Filter *arg1 = (Dsp::Filter *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::Filter::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::Filter::setParamById",1,"Dsp::Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::Filter::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::Filter::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("Filter_setParamById",1,SWIGTYPE_p_Dsp__Filter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::Filter *arg1 = (Dsp::Filter *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::Filter::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::Filter::setParams",1,"Dsp::Filter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::Filter::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("Filter_setParams",1,SWIGTYPE_p_Dsp__Filter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("Filter_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::Filter *arg1 = (Dsp::Filter *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::Filter::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::Filter::copyParamsFrom",1,"Dsp::Filter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::Filter::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("Filter_copyParamsFrom",1,SWIGTYPE_p_Dsp__Filter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("Filter_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_getPoleZeros(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::Filter *arg1 = (Dsp::Filter *) 0 ;
  SwigValueWrapper< std::vector< Dsp::PoleZeroPair > > result;
  
  SWIG_check_num_args("Dsp::Filter::getPoleZeros",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::Filter::getPoleZeros",1,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("Filter_getPoleZeros",1,SWIGTYPE_p_Dsp__Filter);
  }
  
  result = ((Dsp::Filter const *)arg1)->getPoleZeros();
  {
    std::vector< Dsp::PoleZeroPair > * resultptr = new std::vector< Dsp::PoleZeroPair >((const std::vector< Dsp::PoleZeroPair > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_response(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::Filter *arg1 = (Dsp::Filter *) 0 ;
  double arg2 ;
  Dsp::complex_t result;
  
  SWIG_check_num_args("Dsp::Filter::response",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::Filter::response",1,"Dsp::Filter const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::Filter::response",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("Filter_response",1,SWIGTYPE_p_Dsp__Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = ((Dsp::Filter const *)arg1)->response(arg2);
  {
    Dsp::complex_t * resultptr = new Dsp::complex_t((const Dsp::complex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_getNumChannels(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::Filter *arg1 = (Dsp::Filter *) 0 ;
  int result;
  
  SWIG_check_num_args("Dsp::Filter::getNumChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::Filter::getNumChannels",1,"Dsp::Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("Filter_getNumChannels",1,SWIGTYPE_p_Dsp__Filter);
  }
  
  result = (int)(arg1)->getNumChannels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_reset(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::Filter *arg1 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::Filter::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::Filter::reset",1,"Dsp::Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("Filter_reset",1,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::Filter *arg1 = (Dsp::Filter *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::Filter::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::Filter::process",1,"Dsp::Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::Filter::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::Filter::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("Filter_process",1,SWIGTYPE_p_Dsp__Filter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("Filter_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::Filter *arg1 = (Dsp::Filter *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::Filter::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::Filter::process",1,"Dsp::Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::Filter::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::Filter::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("Filter_process",1,SWIGTYPE_p_Dsp__Filter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("Filter_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Filter_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Filter_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Filter_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::Filter::process(int,float *const *)\n"
    "    Dsp::Filter::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_Filter(void *obj) {
Dsp::Filter *arg1 = (Dsp::Filter *) obj;
delete arg1;
}
static swig_lua_attribute swig_Filter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Filter_methods[]= {
    { "getKind", _wrap_Filter_getKind},
    { "getName", _wrap_Filter_getName},
    { "getNumParams", _wrap_Filter_getNumParams},
    { "getParamInfo", _wrap_Filter_getParamInfo},
    { "getDefaultParams", _wrap_Filter_getDefaultParams},
    { "getParams", _wrap_Filter_getParams},
    { "getParam", _wrap_Filter_getParam},
    { "setParam", _wrap_Filter_setParam},
    { "findParamId", _wrap_Filter_findParamId},
    { "setParamById", _wrap_Filter_setParamById},
    { "setParams", _wrap_Filter_setParams},
    { "copyParamsFrom", _wrap_Filter_copyParamsFrom},
    { "getPoleZeros", _wrap_Filter_getPoleZeros},
    { "response", _wrap_Filter_response},
    { "getNumChannels", _wrap_Filter_getNumChannels},
    { "reset", _wrap_Filter_reset},
    { "process", _wrap_Filter_process},
    {0,0}
};
static swig_lua_method swig_Filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Filter_Sf_SwigStatic = {
    "Filter",
    swig_Filter_Sf_SwigStatic_methods,
    swig_Filter_Sf_SwigStatic_attributes,
    swig_Filter_Sf_SwigStatic_constants,
    swig_Filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Filter_bases[] = {0};
static const char *swig_Filter_base_names[] = {0};
static swig_lua_class _wrap_class_Filter = { "Filter", "Filter", &SWIGTYPE_p_Dsp__Filter,0, swig_delete_Filter, swig_Filter_methods, swig_Filter_attributes, &swig_Filter_Sf_SwigStatic, swig_Filter_meta, swig_Filter_bases, swig_Filter_base_names };

static int _wrap_new_float_vector_stereo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float **arg2 = 0 ;
  float *temp2 ;
  std::vector< float * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float * >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float * >::vector",1,"size_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< float * >::vector",2,"float *const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(float *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_float,0,2,"new_float_vector_stereo");
  arg2=(float **)&temp2;
  result = (std::vector< float * > *)new std::vector< float * >(arg1,(float *const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector_stereo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< float * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float * >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float * >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< float * > *)new std::vector< float * >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector_stereo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float * > *arg1 = 0 ;
  std::vector< float * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float * >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< float * >::vector",1,"std::vector< float * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("new_float_vector_stereo",1,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  result = (std::vector< float * > *)new std::vector< float * >((std::vector< float * > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector_stereo(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_p_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_vector_stereo__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_vector_stereo__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_float_vector_stereo__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_vector_stereo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float * >::vector(size_t,float *const &)\n"
    "    std::vector< float * >::vector(size_t)\n"
    "    std::vector< float * >::vector(std::vector< float * > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector_stereo___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float * > *arg1 = (std::vector< float * > *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float * >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float * >::__getitem",1,"std::vector< float * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float * >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("float_vector_stereo___getitem",1,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *)std_vector_Sl_float_Sm__Sg____getitem__SWIG(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_stereo___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float * > *arg1 = (std::vector< float * > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("std::vector< float * >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float * >::__setitem",1,"std::vector< float * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float * >::__setitem",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("std::vector< float * >::__setitem",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("float_vector_stereo___setitem",1,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("float_vector_stereo___setitem",3,SWIGTYPE_p_float);
  }
  
  std_vector_Sl_float_Sm__Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_stereo_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float * > *arg1 = (std::vector< float * > *) 0 ;
  SwigValueWrapper< std::vector_iterator< float * > > result;
  
  SWIG_check_num_args("std::vector< float * >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float * >::begin",1,"std::vector< float * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("float_vector_stereo_begin",1,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  result = std_vector_Sl_float_Sm__Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< float * > * resultptr = new std::vector_iterator< float * >((const std::vector_iterator< float * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_float_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_stereo_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float * > *arg1 = (std::vector< float * > *) 0 ;
  SwigValueWrapper< std::vector_iterator< float * > > result;
  
  SWIG_check_num_args("std::vector< float * >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float * >::end",1,"std::vector< float * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("float_vector_stereo_c_end",1,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  result = std_vector_Sl_float_Sm__Sg__end__SWIG(arg1);
  {
    std::vector_iterator< float * > * resultptr = new std::vector_iterator< float * >((const std::vector_iterator< float * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_float_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_stereo_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float * > *arg1 = (std::vector< float * > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float * >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float * >::erase",1,"std::vector< float * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float * >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("float_vector_stereo_erase",1,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_float_Sm__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_stereo_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float * > *arg1 = (std::vector< float * > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< float * >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float * >::erase",1,"std::vector< float * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float * >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float * >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("float_vector_stereo_erase",1,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_float_Sm__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_stereo_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_vector_stereo_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_vector_stereo_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_vector_stereo_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float * >::erase(size_t)\n"
    "    std::vector< float * >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector_stereo_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float * > *arg1 = (std::vector< float * > *) 0 ;
  float **result = 0 ;
  
  SWIG_check_num_args("std::vector< float * >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float * >::front",1,"std::vector< float * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("float_vector_stereo_front",1,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  result = (float **) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_stereo_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float * > *arg1 = (std::vector< float * > *) 0 ;
  float **result = 0 ;
  
  SWIG_check_num_args("std::vector< float * >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float * >::back",1,"std::vector< float * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("float_vector_stereo_back",1,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  result = (float **) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_stereo_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float * > *arg1 = (std::vector< float * > *) 0 ;
  float **arg2 = 0 ;
  float *temp2 ;
  
  SWIG_check_num_args("std::vector< float * >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float * >::push_back",1,"std::vector< float * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< float * >::push_back",2,"float *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("float_vector_stereo_push_back",1,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  temp2=(float *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_float,0,2,"float_vector_stereo_push_back");
  arg2=(float **)&temp2;
  (arg1)->push_back((float *const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_stereo_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float * > *arg1 = (std::vector< float * > *) 0 ;
  
  SWIG_check_num_args("std::vector< float * >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float * >::pop_back",1,"std::vector< float * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("float_vector_stereo_pop_back",1,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_stereo_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float * > *arg1 = (std::vector< float * > *) 0 ;
  size_t arg2 ;
  float **result = 0 ;
  
  SWIG_check_num_args("std::vector< float * >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float * >::at",1,"std::vector< float * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float * >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("float_vector_stereo_at",1,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float **) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_stereo_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float * > *arg1 = (std::vector< float * > *) 0 ;
  size_t arg2 ;
  float **arg3 = 0 ;
  float *temp3 ;
  
  SWIG_check_num_args("std::vector< float * >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float * >::assign",1,"std::vector< float * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float * >::assign",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("std::vector< float * >::assign",3,"float *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("float_vector_stereo_assign",1,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float *)SWIG_MustGetPtr(L,3,SWIGTYPE_p_float,0,3,"float_vector_stereo_assign");
  arg3=(float **)&temp3;
  (arg1)->assign(arg2,(float *const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_stereo_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float * > *arg1 = (std::vector< float * > *) 0 ;
  float **result = 0 ;
  
  SWIG_check_num_args("std::vector< float * >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float * >::data",1,"std::vector< float * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("float_vector_stereo_data",1,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  result = (float **)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_stereo_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float * > *arg1 = (std::vector< float * > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float * >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float * >::size",1,"std::vector< float * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("float_vector_stereo_size",1,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_stereo_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float * > *arg1 = (std::vector< float * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< float * >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float * >::empty",1,"std::vector< float * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("float_vector_stereo_empty",1,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  result = (bool)((std::vector< float * > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_stereo_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float * > *arg1 = (std::vector< float * > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float * >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float * >::resize",1,"std::vector< float * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float * >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("float_vector_stereo_resize",1,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_stereo_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float * > *arg1 = (std::vector< float * > *) 0 ;
  
  SWIG_check_num_args("std::vector< float * >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float * >::clear",1,"std::vector< float * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("float_vector_stereo_clear",1,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_stereo_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float * > *arg1 = (std::vector< float * > *) 0 ;
  std::vector< float * > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< float * >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float * >::swap",1,"std::vector< float * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< float * >::swap",2,"std::vector< float * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("float_vector_stereo_swap",1,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("float_vector_stereo_swap",2,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_stereo_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float * > *arg1 = (std::vector< float * > *) 0 ;
  
  SWIG_check_num_args("std::vector< float * >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float * >::shrink_to_fit",1,"std::vector< float * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("float_vector_stereo_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_stereo_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float * > *arg1 = (std::vector< float * > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float * >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float * >::reserve",1,"std::vector< float * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float * >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("float_vector_stereo_reserve",1,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_stereo_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float * > *arg1 = (std::vector< float * > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float * >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float * >::max_size",1,"std::vector< float * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("float_vector_stereo_max_size",1,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_stereo_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float * > *arg1 = (std::vector< float * > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float * >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float * >::capacity",1,"std::vector< float * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("float_vector_stereo_capacity",1,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_vector_stereo(void *obj) {
std::vector< float * > *arg1 = (std::vector< float * > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_vector_stereo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_vector_stereo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_vector_stereo_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_vector_stereo_methods[]= {
    { "__getitem", _wrap_float_vector_stereo___getitem},
    { "__setitem", _wrap_float_vector_stereo___setitem},
    { "begin", _wrap_float_vector_stereo_begin},
    { "c_end", _wrap_float_vector_stereo_c_end},
    { "erase", _wrap_float_vector_stereo_erase},
    { "front", _wrap_float_vector_stereo_front},
    { "back", _wrap_float_vector_stereo_back},
    { "push_back", _wrap_float_vector_stereo_push_back},
    { "pop_back", _wrap_float_vector_stereo_pop_back},
    { "at", _wrap_float_vector_stereo_at},
    { "assign", _wrap_float_vector_stereo_assign},
    { "data", _wrap_float_vector_stereo_data},
    { "size", _wrap_float_vector_stereo_size},
    { "empty", _wrap_float_vector_stereo_empty},
    { "resize", _wrap_float_vector_stereo_resize},
    { "clear", _wrap_float_vector_stereo_clear},
    { "swap", _wrap_float_vector_stereo_swap},
    { "shrink_to_fit", _wrap_float_vector_stereo_shrink_to_fit},
    { "reserve", _wrap_float_vector_stereo_reserve},
    { "max_size", _wrap_float_vector_stereo_max_size},
    { "capacity", _wrap_float_vector_stereo_capacity},
    {0,0}
};
static swig_lua_method swig_float_vector_stereo_meta[] = {
    { "__getitem", _wrap_float_vector_stereo___getitem},
    { "__setitem", _wrap_float_vector_stereo___setitem},
    {0,0}
};

static swig_lua_attribute swig_float_vector_stereo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_vector_stereo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_vector_stereo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_vector_stereo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_vector_stereo_Sf_SwigStatic = {
    "float_vector_stereo",
    swig_float_vector_stereo_Sf_SwigStatic_methods,
    swig_float_vector_stereo_Sf_SwigStatic_attributes,
    swig_float_vector_stereo_Sf_SwigStatic_constants,
    swig_float_vector_stereo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_vector_stereo_bases[] = {0};
static const char *swig_float_vector_stereo_base_names[] = {0};
static swig_lua_class _wrap_class_float_vector_stereo = { "float_vector_stereo", "float_vector_stereo", &SWIGTYPE_p_std__vectorT_float_p_t,_proxy__wrap_new_float_vector_stereo, swig_delete_float_vector_stereo, swig_float_vector_stereo_methods, swig_float_vector_stereo_attributes, &swig_float_vector_stereo_Sf_SwigStatic, swig_float_vector_stereo_meta, swig_float_vector_stereo_bases, swig_float_vector_stereo_base_names };

static int _wrap_new_double_vector_stereo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double **arg2 = 0 ;
  double *temp2 ;
  std::vector< double * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double * >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double * >::vector",1,"size_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< double * >::vector",2,"double *const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(double *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_double,0,2,"new_double_vector_stereo");
  arg2=(double **)&temp2;
  result = (std::vector< double * > *)new std::vector< double * >(arg1,(double *const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector_stereo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< double * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double * >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double * >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< double * > *)new std::vector< double * >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector_stereo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double * > *arg1 = 0 ;
  std::vector< double * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double * >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< double * >::vector",1,"std::vector< double * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_p_t,0))){
    SWIG_fail_ptr("new_double_vector_stereo",1,SWIGTYPE_p_std__vectorT_double_p_t);
  }
  
  result = (std::vector< double * > *)new std::vector< double * >((std::vector< double * > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector_stereo(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_p_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_vector_stereo__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_double_vector_stereo__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_double_vector_stereo__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_double_vector_stereo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double * >::vector(size_t,double *const &)\n"
    "    std::vector< double * >::vector(size_t)\n"
    "    std::vector< double * >::vector(std::vector< double * > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector_stereo___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double * > *arg1 = (std::vector< double * > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double * >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double * >::__getitem",1,"std::vector< double * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double * >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_p_t,0))){
    SWIG_fail_ptr("double_vector_stereo___getitem",1,SWIGTYPE_p_std__vectorT_double_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *)std_vector_Sl_double_Sm__Sg____getitem__SWIG(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_stereo___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double * > *arg1 = (std::vector< double * > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  
  SWIG_check_num_args("std::vector< double * >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double * >::__setitem",1,"std::vector< double * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double * >::__setitem",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("std::vector< double * >::__setitem",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_p_t,0))){
    SWIG_fail_ptr("double_vector_stereo___setitem",1,SWIGTYPE_p_std__vectorT_double_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("double_vector_stereo___setitem",3,SWIGTYPE_p_double);
  }
  
  std_vector_Sl_double_Sm__Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_stereo_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double * > *arg1 = (std::vector< double * > *) 0 ;
  SwigValueWrapper< std::vector_iterator< double * > > result;
  
  SWIG_check_num_args("std::vector< double * >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double * >::begin",1,"std::vector< double * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_p_t,0))){
    SWIG_fail_ptr("double_vector_stereo_begin",1,SWIGTYPE_p_std__vectorT_double_p_t);
  }
  
  result = std_vector_Sl_double_Sm__Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< double * > * resultptr = new std::vector_iterator< double * >((const std::vector_iterator< double * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_double_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_stereo_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double * > *arg1 = (std::vector< double * > *) 0 ;
  SwigValueWrapper< std::vector_iterator< double * > > result;
  
  SWIG_check_num_args("std::vector< double * >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double * >::end",1,"std::vector< double * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_p_t,0))){
    SWIG_fail_ptr("double_vector_stereo_c_end",1,SWIGTYPE_p_std__vectorT_double_p_t);
  }
  
  result = std_vector_Sl_double_Sm__Sg__end__SWIG(arg1);
  {
    std::vector_iterator< double * > * resultptr = new std::vector_iterator< double * >((const std::vector_iterator< double * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_double_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_stereo_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double * > *arg1 = (std::vector< double * > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double * >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double * >::erase",1,"std::vector< double * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double * >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_p_t,0))){
    SWIG_fail_ptr("double_vector_stereo_erase",1,SWIGTYPE_p_std__vectorT_double_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_double_Sm__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_stereo_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double * > *arg1 = (std::vector< double * > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< double * >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double * >::erase",1,"std::vector< double * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double * >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double * >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_p_t,0))){
    SWIG_fail_ptr("double_vector_stereo_erase",1,SWIGTYPE_p_std__vectorT_double_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_double_Sm__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_stereo_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_vector_stereo_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_double_vector_stereo_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_vector_stereo_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double * >::erase(size_t)\n"
    "    std::vector< double * >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector_stereo_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double * > *arg1 = (std::vector< double * > *) 0 ;
  double **result = 0 ;
  
  SWIG_check_num_args("std::vector< double * >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double * >::front",1,"std::vector< double * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_p_t,0))){
    SWIG_fail_ptr("double_vector_stereo_front",1,SWIGTYPE_p_std__vectorT_double_p_t);
  }
  
  result = (double **) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_stereo_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double * > *arg1 = (std::vector< double * > *) 0 ;
  double **result = 0 ;
  
  SWIG_check_num_args("std::vector< double * >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double * >::back",1,"std::vector< double * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_p_t,0))){
    SWIG_fail_ptr("double_vector_stereo_back",1,SWIGTYPE_p_std__vectorT_double_p_t);
  }
  
  result = (double **) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_stereo_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double * > *arg1 = (std::vector< double * > *) 0 ;
  double **arg2 = 0 ;
  double *temp2 ;
  
  SWIG_check_num_args("std::vector< double * >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double * >::push_back",1,"std::vector< double * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< double * >::push_back",2,"double *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_p_t,0))){
    SWIG_fail_ptr("double_vector_stereo_push_back",1,SWIGTYPE_p_std__vectorT_double_p_t);
  }
  
  temp2=(double *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_double,0,2,"double_vector_stereo_push_back");
  arg2=(double **)&temp2;
  (arg1)->push_back((double *const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_stereo_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double * > *arg1 = (std::vector< double * > *) 0 ;
  
  SWIG_check_num_args("std::vector< double * >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double * >::pop_back",1,"std::vector< double * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_p_t,0))){
    SWIG_fail_ptr("double_vector_stereo_pop_back",1,SWIGTYPE_p_std__vectorT_double_p_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_stereo_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double * > *arg1 = (std::vector< double * > *) 0 ;
  size_t arg2 ;
  double **result = 0 ;
  
  SWIG_check_num_args("std::vector< double * >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double * >::at",1,"std::vector< double * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double * >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_p_t,0))){
    SWIG_fail_ptr("double_vector_stereo_at",1,SWIGTYPE_p_std__vectorT_double_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double **) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_stereo_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double * > *arg1 = (std::vector< double * > *) 0 ;
  size_t arg2 ;
  double **arg3 = 0 ;
  double *temp3 ;
  
  SWIG_check_num_args("std::vector< double * >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double * >::assign",1,"std::vector< double * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double * >::assign",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("std::vector< double * >::assign",3,"double *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_p_t,0))){
    SWIG_fail_ptr("double_vector_stereo_assign",1,SWIGTYPE_p_std__vectorT_double_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(double *)SWIG_MustGetPtr(L,3,SWIGTYPE_p_double,0,3,"double_vector_stereo_assign");
  arg3=(double **)&temp3;
  (arg1)->assign(arg2,(double *const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_stereo_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double * > *arg1 = (std::vector< double * > *) 0 ;
  double **result = 0 ;
  
  SWIG_check_num_args("std::vector< double * >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double * >::data",1,"std::vector< double * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_p_t,0))){
    SWIG_fail_ptr("double_vector_stereo_data",1,SWIGTYPE_p_std__vectorT_double_p_t);
  }
  
  result = (double **)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_stereo_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double * > *arg1 = (std::vector< double * > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double * >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double * >::size",1,"std::vector< double * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_p_t,0))){
    SWIG_fail_ptr("double_vector_stereo_size",1,SWIGTYPE_p_std__vectorT_double_p_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_stereo_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double * > *arg1 = (std::vector< double * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< double * >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double * >::empty",1,"std::vector< double * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_p_t,0))){
    SWIG_fail_ptr("double_vector_stereo_empty",1,SWIGTYPE_p_std__vectorT_double_p_t);
  }
  
  result = (bool)((std::vector< double * > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_stereo_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double * > *arg1 = (std::vector< double * > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double * >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double * >::resize",1,"std::vector< double * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double * >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_p_t,0))){
    SWIG_fail_ptr("double_vector_stereo_resize",1,SWIGTYPE_p_std__vectorT_double_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_stereo_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double * > *arg1 = (std::vector< double * > *) 0 ;
  
  SWIG_check_num_args("std::vector< double * >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double * >::clear",1,"std::vector< double * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_p_t,0))){
    SWIG_fail_ptr("double_vector_stereo_clear",1,SWIGTYPE_p_std__vectorT_double_p_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_stereo_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double * > *arg1 = (std::vector< double * > *) 0 ;
  std::vector< double * > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< double * >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double * >::swap",1,"std::vector< double * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< double * >::swap",2,"std::vector< double * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_p_t,0))){
    SWIG_fail_ptr("double_vector_stereo_swap",1,SWIGTYPE_p_std__vectorT_double_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_p_t,0))){
    SWIG_fail_ptr("double_vector_stereo_swap",2,SWIGTYPE_p_std__vectorT_double_p_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_stereo_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double * > *arg1 = (std::vector< double * > *) 0 ;
  
  SWIG_check_num_args("std::vector< double * >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double * >::shrink_to_fit",1,"std::vector< double * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_p_t,0))){
    SWIG_fail_ptr("double_vector_stereo_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_double_p_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_stereo_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double * > *arg1 = (std::vector< double * > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double * >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double * >::reserve",1,"std::vector< double * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double * >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_p_t,0))){
    SWIG_fail_ptr("double_vector_stereo_reserve",1,SWIGTYPE_p_std__vectorT_double_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_stereo_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double * > *arg1 = (std::vector< double * > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double * >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double * >::max_size",1,"std::vector< double * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_p_t,0))){
    SWIG_fail_ptr("double_vector_stereo_max_size",1,SWIGTYPE_p_std__vectorT_double_p_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_stereo_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double * > *arg1 = (std::vector< double * > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double * >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double * >::capacity",1,"std::vector< double * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_p_t,0))){
    SWIG_fail_ptr("double_vector_stereo_capacity",1,SWIGTYPE_p_std__vectorT_double_p_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_vector_stereo(void *obj) {
std::vector< double * > *arg1 = (std::vector< double * > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_vector_stereo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_vector_stereo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_vector_stereo_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_vector_stereo_methods[]= {
    { "__getitem", _wrap_double_vector_stereo___getitem},
    { "__setitem", _wrap_double_vector_stereo___setitem},
    { "begin", _wrap_double_vector_stereo_begin},
    { "c_end", _wrap_double_vector_stereo_c_end},
    { "erase", _wrap_double_vector_stereo_erase},
    { "front", _wrap_double_vector_stereo_front},
    { "back", _wrap_double_vector_stereo_back},
    { "push_back", _wrap_double_vector_stereo_push_back},
    { "pop_back", _wrap_double_vector_stereo_pop_back},
    { "at", _wrap_double_vector_stereo_at},
    { "assign", _wrap_double_vector_stereo_assign},
    { "data", _wrap_double_vector_stereo_data},
    { "size", _wrap_double_vector_stereo_size},
    { "empty", _wrap_double_vector_stereo_empty},
    { "resize", _wrap_double_vector_stereo_resize},
    { "clear", _wrap_double_vector_stereo_clear},
    { "swap", _wrap_double_vector_stereo_swap},
    { "shrink_to_fit", _wrap_double_vector_stereo_shrink_to_fit},
    { "reserve", _wrap_double_vector_stereo_reserve},
    { "max_size", _wrap_double_vector_stereo_max_size},
    { "capacity", _wrap_double_vector_stereo_capacity},
    {0,0}
};
static swig_lua_method swig_double_vector_stereo_meta[] = {
    { "__getitem", _wrap_double_vector_stereo___getitem},
    { "__setitem", _wrap_double_vector_stereo___setitem},
    {0,0}
};

static swig_lua_attribute swig_double_vector_stereo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_vector_stereo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_vector_stereo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_vector_stereo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_vector_stereo_Sf_SwigStatic = {
    "double_vector_stereo",
    swig_double_vector_stereo_Sf_SwigStatic_methods,
    swig_double_vector_stereo_Sf_SwigStatic_attributes,
    swig_double_vector_stereo_Sf_SwigStatic_constants,
    swig_double_vector_stereo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_vector_stereo_bases[] = {0};
static const char *swig_double_vector_stereo_base_names[] = {0};
static swig_lua_class _wrap_class_double_vector_stereo = { "double_vector_stereo", "double_vector_stereo", &SWIGTYPE_p_std__vectorT_double_p_t,_proxy__wrap_new_double_vector_stereo, swig_delete_double_vector_stereo, swig_double_vector_stereo_methods, swig_double_vector_stereo_attributes, &swig_double_vector_stereo_Sf_SwigStatic, swig_double_vector_stereo_meta, swig_double_vector_stereo_bases, swig_double_vector_stereo_base_names };

static int _wrap_new_RBJLowPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *)new Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJLowPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJLowPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RBJLowPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RBJLowPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RBJLowPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_RBJLowPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RBJLowPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RBJLowPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowPass_Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJLowPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJLowPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowPass_Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RBJLowPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RBJLowPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowPass_Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJLowPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJLowPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowPass_Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJLowPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJLowPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJLowPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJLowPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RBJLowPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_RBJLowPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("RBJLowPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("RBJLowPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RBJLowPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJLowPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJLowPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJLowPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJLowPass_methods[]= {
    { "process", _wrap_RBJLowPass_process},
    { "ProcessBlock", _wrap_RBJLowPass_ProcessBlock},
    { "getParams", _wrap_RBJLowPass_getParams},
    { "getParam", _wrap_RBJLowPass_getParam},
    { "setParam", _wrap_RBJLowPass_setParam},
    { "findParamId", _wrap_RBJLowPass_findParamId},
    { "setParamById", _wrap_RBJLowPass_setParamById},
    { "setParams", _wrap_RBJLowPass_setParams},
    { "copyParamsFrom", _wrap_RBJLowPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_RBJLowPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJLowPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJLowPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJLowPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJLowPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJLowPass_Sf_SwigStatic = {
    "RBJLowPass",
    swig_RBJLowPass_Sf_SwigStatic_methods,
    swig_RBJLowPass_Sf_SwigStatic_attributes,
    swig_RBJLowPass_Sf_SwigStatic_constants,
    swig_RBJLowPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJLowPass_bases[] = {0};
static const char *swig_RBJLowPass_base_names[] = {0};
static swig_lua_class _wrap_class_RBJLowPass = { "RBJLowPass", "RBJLowPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t,_proxy__wrap_new_RBJLowPass, swig_delete_RBJLowPass, swig_RBJLowPass_methods, swig_RBJLowPass_attributes, &swig_RBJLowPass_Sf_SwigStatic, swig_RBJLowPass_meta, swig_RBJLowPass_bases, swig_RBJLowPass_base_names };

static int _wrap_new_StereoRBJLowPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *)new Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJLowPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJLowPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoRBJLowPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoRBJLowPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoRBJLowPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoRBJLowPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoRBJLowPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoRBJLowPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowPass_Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJLowPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJLowPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowPass_Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoRBJLowPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoRBJLowPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowPass_Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJLowPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJLowPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowPass_Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJLowPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJLowPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJLowPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJLowPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoRBJLowPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoRBJLowPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoRBJLowPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoRBJLowPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoRBJLowPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoRBJLowPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoRBJLowPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoRBJLowPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoRBJLowPass_methods[]= {
    { "process", _wrap_StereoRBJLowPass_process},
    { "ProcessBlock", _wrap_StereoRBJLowPass_ProcessBlock},
    { "getParams", _wrap_StereoRBJLowPass_getParams},
    { "getParam", _wrap_StereoRBJLowPass_getParam},
    { "setParam", _wrap_StereoRBJLowPass_setParam},
    { "findParamId", _wrap_StereoRBJLowPass_findParamId},
    { "setParamById", _wrap_StereoRBJLowPass_setParamById},
    { "setParams", _wrap_StereoRBJLowPass_setParams},
    { "copyParamsFrom", _wrap_StereoRBJLowPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoRBJLowPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoRBJLowPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoRBJLowPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoRBJLowPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoRBJLowPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoRBJLowPass_Sf_SwigStatic = {
    "StereoRBJLowPass",
    swig_StereoRBJLowPass_Sf_SwigStatic_methods,
    swig_StereoRBJLowPass_Sf_SwigStatic_attributes,
    swig_StereoRBJLowPass_Sf_SwigStatic_constants,
    swig_StereoRBJLowPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoRBJLowPass_bases[] = {0};
static const char *swig_StereoRBJLowPass_base_names[] = {0};
static swig_lua_class _wrap_class_StereoRBJLowPass = { "StereoRBJLowPass", "StereoRBJLowPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t,_proxy__wrap_new_StereoRBJLowPass, swig_delete_StereoRBJLowPass, swig_StereoRBJLowPass_methods, swig_StereoRBJLowPass_attributes, &swig_StereoRBJLowPass_Sf_SwigStatic, swig_StereoRBJLowPass_meta, swig_StereoRBJLowPass_bases, swig_StereoRBJLowPass_base_names };

static int _wrap_new_RBJHighPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *)new Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJHighPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJHighPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RBJHighPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RBJHighPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RBJHighPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_RBJHighPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RBJHighPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RBJHighPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighPass_Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJHighPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJHighPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighPass_Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RBJHighPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RBJHighPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighPass_Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJHighPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJHighPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighPass_Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJHighPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJHighPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJHighPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJHighPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RBJHighPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_RBJHighPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("RBJHighPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("RBJHighPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RBJHighPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJHighPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJHighPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJHighPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJHighPass_methods[]= {
    { "process", _wrap_RBJHighPass_process},
    { "ProcessBlock", _wrap_RBJHighPass_ProcessBlock},
    { "getParams", _wrap_RBJHighPass_getParams},
    { "getParam", _wrap_RBJHighPass_getParam},
    { "setParam", _wrap_RBJHighPass_setParam},
    { "findParamId", _wrap_RBJHighPass_findParamId},
    { "setParamById", _wrap_RBJHighPass_setParamById},
    { "setParams", _wrap_RBJHighPass_setParams},
    { "copyParamsFrom", _wrap_RBJHighPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_RBJHighPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJHighPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJHighPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJHighPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJHighPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJHighPass_Sf_SwigStatic = {
    "RBJHighPass",
    swig_RBJHighPass_Sf_SwigStatic_methods,
    swig_RBJHighPass_Sf_SwigStatic_attributes,
    swig_RBJHighPass_Sf_SwigStatic_constants,
    swig_RBJHighPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJHighPass_bases[] = {0};
static const char *swig_RBJHighPass_base_names[] = {0};
static swig_lua_class _wrap_class_RBJHighPass = { "RBJHighPass", "RBJHighPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t,_proxy__wrap_new_RBJHighPass, swig_delete_RBJHighPass, swig_RBJHighPass_methods, swig_RBJHighPass_attributes, &swig_RBJHighPass_Sf_SwigStatic, swig_RBJHighPass_meta, swig_RBJHighPass_bases, swig_RBJHighPass_base_names };

static int _wrap_new_StereoRBJHighPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *)new Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJHighPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJHighPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoRBJHighPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoRBJHighPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoRBJHighPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoRBJHighPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoRBJHighPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoRBJHighPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighPass_Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJHighPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJHighPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighPass_Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoRBJHighPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoRBJHighPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighPass_Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJHighPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJHighPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighPass_Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJHighPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJHighPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJHighPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJHighPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoRBJHighPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoRBJHighPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoRBJHighPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoRBJHighPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoRBJHighPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoRBJHighPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoRBJHighPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoRBJHighPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoRBJHighPass_methods[]= {
    { "process", _wrap_StereoRBJHighPass_process},
    { "ProcessBlock", _wrap_StereoRBJHighPass_ProcessBlock},
    { "getParams", _wrap_StereoRBJHighPass_getParams},
    { "getParam", _wrap_StereoRBJHighPass_getParam},
    { "setParam", _wrap_StereoRBJHighPass_setParam},
    { "findParamId", _wrap_StereoRBJHighPass_findParamId},
    { "setParamById", _wrap_StereoRBJHighPass_setParamById},
    { "setParams", _wrap_StereoRBJHighPass_setParams},
    { "copyParamsFrom", _wrap_StereoRBJHighPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoRBJHighPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoRBJHighPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoRBJHighPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoRBJHighPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoRBJHighPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoRBJHighPass_Sf_SwigStatic = {
    "StereoRBJHighPass",
    swig_StereoRBJHighPass_Sf_SwigStatic_methods,
    swig_StereoRBJHighPass_Sf_SwigStatic_attributes,
    swig_StereoRBJHighPass_Sf_SwigStatic_constants,
    swig_StereoRBJHighPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoRBJHighPass_bases[] = {0};
static const char *swig_StereoRBJHighPass_base_names[] = {0};
static swig_lua_class _wrap_class_StereoRBJHighPass = { "StereoRBJHighPass", "StereoRBJHighPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t,_proxy__wrap_new_StereoRBJHighPass, swig_delete_StereoRBJHighPass, swig_StereoRBJHighPass_methods, swig_StereoRBJHighPass_attributes, &swig_StereoRBJHighPass_Sf_SwigStatic, swig_StereoRBJHighPass_meta, swig_StereoRBJHighPass_bases, swig_StereoRBJHighPass_base_names };

static int _wrap_new_RBJBandPass1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *)new Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass1_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass1_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJBandPass1_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass1_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass1_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJBandPass1_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass1_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RBJBandPass1_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RBJBandPass1_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RBJBandPass1_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_RBJBandPass1_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass1_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RBJBandPass1_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RBJBandPass1_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass1_Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass1_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass1_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJBandPass1_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJBandPass1_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass1_Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass1_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass1_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RBJBandPass1_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RBJBandPass1_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass1_Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass1_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass1_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJBandPass1_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJBandPass1_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass1_Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass1_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJBandPass1_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJBandPass1_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJBandPass1_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJBandPass1_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RBJBandPass1_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_RBJBandPass1_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass1_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass1_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass1_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass1_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass1_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass1_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass1_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass1_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass1_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass1_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass1_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("RBJBandPass1_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass1_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass1_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("RBJBandPass1_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RBJBandPass1(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJBandPass1(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJBandPass1);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJBandPass1_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJBandPass1_methods[]= {
    { "process", _wrap_RBJBandPass1_process},
    { "ProcessBlock", _wrap_RBJBandPass1_ProcessBlock},
    { "getParams", _wrap_RBJBandPass1_getParams},
    { "getParam", _wrap_RBJBandPass1_getParam},
    { "setParam", _wrap_RBJBandPass1_setParam},
    { "findParamId", _wrap_RBJBandPass1_findParamId},
    { "setParamById", _wrap_RBJBandPass1_setParamById},
    { "setParams", _wrap_RBJBandPass1_setParams},
    { "copyParamsFrom", _wrap_RBJBandPass1_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_RBJBandPass1_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJBandPass1_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJBandPass1_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJBandPass1_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJBandPass1_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJBandPass1_Sf_SwigStatic = {
    "RBJBandPass1",
    swig_RBJBandPass1_Sf_SwigStatic_methods,
    swig_RBJBandPass1_Sf_SwigStatic_attributes,
    swig_RBJBandPass1_Sf_SwigStatic_constants,
    swig_RBJBandPass1_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJBandPass1_bases[] = {0};
static const char *swig_RBJBandPass1_base_names[] = {0};
static swig_lua_class _wrap_class_RBJBandPass1 = { "RBJBandPass1", "RBJBandPass1", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t,_proxy__wrap_new_RBJBandPass1, swig_delete_RBJBandPass1, swig_RBJBandPass1_methods, swig_RBJBandPass1_attributes, &swig_RBJBandPass1_Sf_SwigStatic, swig_RBJBandPass1_meta, swig_RBJBandPass1_bases, swig_RBJBandPass1_base_names };

static int _wrap_new_StereoRBJBandPass1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *)new Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass1_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass1_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJBandPass1_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass1_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass1_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJBandPass1_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass1_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoRBJBandPass1_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoRBJBandPass1_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoRBJBandPass1_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoRBJBandPass1_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass1_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoRBJBandPass1_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoRBJBandPass1_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass1_Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass1_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass1_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJBandPass1_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJBandPass1_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass1_Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass1_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass1_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoRBJBandPass1_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoRBJBandPass1_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass1_Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass1_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass1_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJBandPass1_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJBandPass1_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass1_Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass1_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJBandPass1_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJBandPass1_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJBandPass1_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJBandPass1_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoRBJBandPass1_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoRBJBandPass1_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass1_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass1_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass1_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass1_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass1_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass1_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass1_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass1_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass1_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass1_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass1_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoRBJBandPass1_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass1_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass1_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoRBJBandPass1_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoRBJBandPass1(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoRBJBandPass1(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoRBJBandPass1);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoRBJBandPass1_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoRBJBandPass1_methods[]= {
    { "process", _wrap_StereoRBJBandPass1_process},
    { "ProcessBlock", _wrap_StereoRBJBandPass1_ProcessBlock},
    { "getParams", _wrap_StereoRBJBandPass1_getParams},
    { "getParam", _wrap_StereoRBJBandPass1_getParam},
    { "setParam", _wrap_StereoRBJBandPass1_setParam},
    { "findParamId", _wrap_StereoRBJBandPass1_findParamId},
    { "setParamById", _wrap_StereoRBJBandPass1_setParamById},
    { "setParams", _wrap_StereoRBJBandPass1_setParams},
    { "copyParamsFrom", _wrap_StereoRBJBandPass1_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoRBJBandPass1_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoRBJBandPass1_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoRBJBandPass1_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoRBJBandPass1_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoRBJBandPass1_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoRBJBandPass1_Sf_SwigStatic = {
    "StereoRBJBandPass1",
    swig_StereoRBJBandPass1_Sf_SwigStatic_methods,
    swig_StereoRBJBandPass1_Sf_SwigStatic_attributes,
    swig_StereoRBJBandPass1_Sf_SwigStatic_constants,
    swig_StereoRBJBandPass1_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoRBJBandPass1_bases[] = {0};
static const char *swig_StereoRBJBandPass1_base_names[] = {0};
static swig_lua_class _wrap_class_StereoRBJBandPass1 = { "StereoRBJBandPass1", "StereoRBJBandPass1", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t,_proxy__wrap_new_StereoRBJBandPass1, swig_delete_StereoRBJBandPass1, swig_StereoRBJBandPass1_methods, swig_StereoRBJBandPass1_attributes, &swig_StereoRBJBandPass1_Sf_SwigStatic, swig_StereoRBJBandPass1_meta, swig_StereoRBJBandPass1_bases, swig_StereoRBJBandPass1_base_names };

static int _wrap_new_RBJBandPass2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *)new Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass2_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass2_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJBandPass2_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass2_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass2_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJBandPass2_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass2_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RBJBandPass2_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RBJBandPass2_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RBJBandPass2_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_RBJBandPass2_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass2_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RBJBandPass2_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RBJBandPass2_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass2_Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass2_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass2_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJBandPass2_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJBandPass2_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass2_Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass2_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass2_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RBJBandPass2_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RBJBandPass2_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass2_Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass2_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass2_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJBandPass2_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJBandPass2_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass2_Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass2_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJBandPass2_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJBandPass2_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJBandPass2_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJBandPass2_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RBJBandPass2_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_RBJBandPass2_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass2_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass2_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass2_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass2_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass2_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass2_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass2_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass2_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass2_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass2_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass2_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("RBJBandPass2_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandPass2_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandPass2_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("RBJBandPass2_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RBJBandPass2(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJBandPass2(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJBandPass2);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJBandPass2_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJBandPass2_methods[]= {
    { "process", _wrap_RBJBandPass2_process},
    { "ProcessBlock", _wrap_RBJBandPass2_ProcessBlock},
    { "getParams", _wrap_RBJBandPass2_getParams},
    { "getParam", _wrap_RBJBandPass2_getParam},
    { "setParam", _wrap_RBJBandPass2_setParam},
    { "findParamId", _wrap_RBJBandPass2_findParamId},
    { "setParamById", _wrap_RBJBandPass2_setParamById},
    { "setParams", _wrap_RBJBandPass2_setParams},
    { "copyParamsFrom", _wrap_RBJBandPass2_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_RBJBandPass2_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJBandPass2_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJBandPass2_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJBandPass2_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJBandPass2_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJBandPass2_Sf_SwigStatic = {
    "RBJBandPass2",
    swig_RBJBandPass2_Sf_SwigStatic_methods,
    swig_RBJBandPass2_Sf_SwigStatic_attributes,
    swig_RBJBandPass2_Sf_SwigStatic_constants,
    swig_RBJBandPass2_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJBandPass2_bases[] = {0};
static const char *swig_RBJBandPass2_base_names[] = {0};
static swig_lua_class _wrap_class_RBJBandPass2 = { "RBJBandPass2", "RBJBandPass2", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t,_proxy__wrap_new_RBJBandPass2, swig_delete_RBJBandPass2, swig_RBJBandPass2_methods, swig_RBJBandPass2_attributes, &swig_RBJBandPass2_Sf_SwigStatic, swig_RBJBandPass2_meta, swig_RBJBandPass2_bases, swig_RBJBandPass2_base_names };

static int _wrap_new_StereoRBJBandPass2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *)new Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass2_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass2_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJBandPass2_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass2_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass2_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJBandPass2_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass2_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoRBJBandPass2_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoRBJBandPass2_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoRBJBandPass2_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoRBJBandPass2_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass2_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoRBJBandPass2_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoRBJBandPass2_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass2_Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass2_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass2_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJBandPass2_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJBandPass2_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass2_Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass2_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass2_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoRBJBandPass2_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoRBJBandPass2_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass2_Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass2_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass2_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJBandPass2_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJBandPass2_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandPass2_Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass2_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJBandPass2_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJBandPass2_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJBandPass2_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJBandPass2_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoRBJBandPass2_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoRBJBandPass2_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass2_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass2_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass2_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass2_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass2_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass2_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass2_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass2_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass2_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass2_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass2_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoRBJBandPass2_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandPass2_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandPass2_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoRBJBandPass2_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoRBJBandPass2(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoRBJBandPass2(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoRBJBandPass2);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoRBJBandPass2_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoRBJBandPass2_methods[]= {
    { "process", _wrap_StereoRBJBandPass2_process},
    { "ProcessBlock", _wrap_StereoRBJBandPass2_ProcessBlock},
    { "getParams", _wrap_StereoRBJBandPass2_getParams},
    { "getParam", _wrap_StereoRBJBandPass2_getParam},
    { "setParam", _wrap_StereoRBJBandPass2_setParam},
    { "findParamId", _wrap_StereoRBJBandPass2_findParamId},
    { "setParamById", _wrap_StereoRBJBandPass2_setParamById},
    { "setParams", _wrap_StereoRBJBandPass2_setParams},
    { "copyParamsFrom", _wrap_StereoRBJBandPass2_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoRBJBandPass2_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoRBJBandPass2_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoRBJBandPass2_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoRBJBandPass2_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoRBJBandPass2_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoRBJBandPass2_Sf_SwigStatic = {
    "StereoRBJBandPass2",
    swig_StereoRBJBandPass2_Sf_SwigStatic_methods,
    swig_StereoRBJBandPass2_Sf_SwigStatic_attributes,
    swig_StereoRBJBandPass2_Sf_SwigStatic_constants,
    swig_StereoRBJBandPass2_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoRBJBandPass2_bases[] = {0};
static const char *swig_StereoRBJBandPass2_base_names[] = {0};
static swig_lua_class _wrap_class_StereoRBJBandPass2 = { "StereoRBJBandPass2", "StereoRBJBandPass2", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t,_proxy__wrap_new_StereoRBJBandPass2, swig_delete_StereoRBJBandPass2, swig_StereoRBJBandPass2_methods, swig_StereoRBJBandPass2_attributes, &swig_StereoRBJBandPass2_Sf_SwigStatic, swig_StereoRBJBandPass2_meta, swig_StereoRBJBandPass2_bases, swig_StereoRBJBandPass2_base_names };

static int _wrap_new_RBJBandStop(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *)new Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandStop_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJBandStop_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandStop_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJBandStop_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandStop_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RBJBandStop_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RBJBandStop_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RBJBandStop_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_RBJBandStop_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RBJBandStop_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RBJBandStop_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandStop_Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandStop_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJBandStop_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJBandStop_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandStop_Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandStop_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RBJBandStop_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RBJBandStop_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandStop_Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandStop_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJBandStop_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJBandStop_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandStop_Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandStop_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJBandStop_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJBandStop_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJBandStop_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJBandStop_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RBJBandStop_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_RBJBandStop_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandStop_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandStop_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandStop_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandStop_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandStop_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandStop_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandStop_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandStop_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandStop_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandStop_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandStop_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("RBJBandStop_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandStop_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandStop_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("RBJBandStop_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RBJBandStop(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJBandStop(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJBandStop);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJBandStop_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJBandStop_methods[]= {
    { "process", _wrap_RBJBandStop_process},
    { "ProcessBlock", _wrap_RBJBandStop_ProcessBlock},
    { "getParams", _wrap_RBJBandStop_getParams},
    { "getParam", _wrap_RBJBandStop_getParam},
    { "setParam", _wrap_RBJBandStop_setParam},
    { "findParamId", _wrap_RBJBandStop_findParamId},
    { "setParamById", _wrap_RBJBandStop_setParamById},
    { "setParams", _wrap_RBJBandStop_setParams},
    { "copyParamsFrom", _wrap_RBJBandStop_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_RBJBandStop_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJBandStop_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJBandStop_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJBandStop_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJBandStop_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJBandStop_SwigStatic = {
    "RBJBandStop",
    swig_RBJBandStop_SwigStatic_methods,
    swig_RBJBandStop_SwigStatic_attributes,
    swig_RBJBandStop_SwigStatic_constants,
    swig_RBJBandStop_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJBandStop_bases[] = {0};
static const char *swig_RBJBandStop_base_names[] = {0};
static swig_lua_class _wrap_class_RBJBandStop = { "RBJBandStop", "RBJBandStop", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t,_proxy__wrap_new_RBJBandStop, swig_delete_RBJBandStop, swig_RBJBandStop_methods, swig_RBJBandStop_attributes, &swig_RBJBandStop_SwigStatic, swig_RBJBandStop_meta, swig_RBJBandStop_bases, swig_RBJBandStop_base_names };

static int _wrap_new_StereoRBJBandStop(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *)new Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandStop_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJBandStop_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandStop_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJBandStop_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandStop_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoRBJBandStop_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoRBJBandStop_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoRBJBandStop_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoRBJBandStop_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoRBJBandStop_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoRBJBandStop_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandStop_Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandStop_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJBandStop_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJBandStop_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandStop_Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandStop_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoRBJBandStop_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoRBJBandStop_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandStop_Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandStop_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJBandStop_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJBandStop_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandStop_Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandStop_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJBandStop_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJBandStop_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJBandStop_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJBandStop_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoRBJBandStop_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoRBJBandStop_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandStop_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandStop_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandStop_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandStop_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandStop_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandStop_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandStop_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandStop_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandStop_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandStop_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandStop_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoRBJBandStop_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandStop_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandStop_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoRBJBandStop_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoRBJBandStop(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoRBJBandStop(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoRBJBandStop);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoRBJBandStop_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoRBJBandStop_methods[]= {
    { "process", _wrap_StereoRBJBandStop_process},
    { "ProcessBlock", _wrap_StereoRBJBandStop_ProcessBlock},
    { "getParams", _wrap_StereoRBJBandStop_getParams},
    { "getParam", _wrap_StereoRBJBandStop_getParam},
    { "setParam", _wrap_StereoRBJBandStop_setParam},
    { "findParamId", _wrap_StereoRBJBandStop_findParamId},
    { "setParamById", _wrap_StereoRBJBandStop_setParamById},
    { "setParams", _wrap_StereoRBJBandStop_setParams},
    { "copyParamsFrom", _wrap_StereoRBJBandStop_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoRBJBandStop_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoRBJBandStop_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoRBJBandStop_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoRBJBandStop_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoRBJBandStop_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoRBJBandStop_SwigStatic = {
    "StereoRBJBandStop",
    swig_StereoRBJBandStop_SwigStatic_methods,
    swig_StereoRBJBandStop_SwigStatic_attributes,
    swig_StereoRBJBandStop_SwigStatic_constants,
    swig_StereoRBJBandStop_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoRBJBandStop_bases[] = {0};
static const char *swig_StereoRBJBandStop_base_names[] = {0};
static swig_lua_class _wrap_class_StereoRBJBandStop = { "StereoRBJBandStop", "StereoRBJBandStop", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t,_proxy__wrap_new_StereoRBJBandStop, swig_delete_StereoRBJBandStop, swig_StereoRBJBandStop_methods, swig_StereoRBJBandStop_attributes, &swig_StereoRBJBandStop_SwigStatic, swig_StereoRBJBandStop_meta, swig_StereoRBJBandStop_bases, swig_StereoRBJBandStop_base_names };

static int _wrap_new_RBJLowShelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *)new Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowShelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJLowShelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowShelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJLowShelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowShelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RBJLowShelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RBJLowShelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RBJLowShelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_RBJLowShelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RBJLowShelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RBJLowShelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowShelf_Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowShelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJLowShelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJLowShelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowShelf_Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowShelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RBJLowShelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RBJLowShelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowShelf_Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowShelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJLowShelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJLowShelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowShelf_Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowShelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJLowShelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJLowShelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJLowShelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJLowShelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RBJLowShelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_RBJLowShelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowShelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowShelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowShelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowShelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowShelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowShelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowShelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowShelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowShelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowShelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowShelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("RBJLowShelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowShelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJLowShelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("RBJLowShelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RBJLowShelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJLowShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJLowShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJLowShelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJLowShelf_methods[]= {
    { "process", _wrap_RBJLowShelf_process},
    { "ProcessBlock", _wrap_RBJLowShelf_ProcessBlock},
    { "getParams", _wrap_RBJLowShelf_getParams},
    { "getParam", _wrap_RBJLowShelf_getParam},
    { "setParam", _wrap_RBJLowShelf_setParam},
    { "findParamId", _wrap_RBJLowShelf_findParamId},
    { "setParamById", _wrap_RBJLowShelf_setParamById},
    { "setParams", _wrap_RBJLowShelf_setParams},
    { "copyParamsFrom", _wrap_RBJLowShelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_RBJLowShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJLowShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJLowShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJLowShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJLowShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJLowShelf_Sf_SwigStatic = {
    "RBJLowShelf",
    swig_RBJLowShelf_Sf_SwigStatic_methods,
    swig_RBJLowShelf_Sf_SwigStatic_attributes,
    swig_RBJLowShelf_Sf_SwigStatic_constants,
    swig_RBJLowShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJLowShelf_bases[] = {0};
static const char *swig_RBJLowShelf_base_names[] = {0};
static swig_lua_class _wrap_class_RBJLowShelf = { "RBJLowShelf", "RBJLowShelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t,_proxy__wrap_new_RBJLowShelf, swig_delete_RBJLowShelf, swig_RBJLowShelf_methods, swig_RBJLowShelf_attributes, &swig_RBJLowShelf_Sf_SwigStatic, swig_RBJLowShelf_meta, swig_RBJLowShelf_bases, swig_RBJLowShelf_base_names };

static int _wrap_new_StereoRBJLowShelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *)new Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowShelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJLowShelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowShelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJLowShelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowShelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoRBJLowShelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoRBJLowShelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoRBJLowShelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoRBJLowShelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoRBJLowShelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoRBJLowShelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowShelf_Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowShelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJLowShelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJLowShelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowShelf_Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowShelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoRBJLowShelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoRBJLowShelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowShelf_Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowShelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJLowShelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJLowShelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_LowShelf_Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowShelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJLowShelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJLowShelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJLowShelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJLowShelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoRBJLowShelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoRBJLowShelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowShelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowShelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowShelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowShelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowShelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowShelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowShelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowShelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowShelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowShelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowShelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoRBJLowShelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJLowShelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJLowShelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoRBJLowShelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoRBJLowShelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoRBJLowShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoRBJLowShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoRBJLowShelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoRBJLowShelf_methods[]= {
    { "process", _wrap_StereoRBJLowShelf_process},
    { "ProcessBlock", _wrap_StereoRBJLowShelf_ProcessBlock},
    { "getParams", _wrap_StereoRBJLowShelf_getParams},
    { "getParam", _wrap_StereoRBJLowShelf_getParam},
    { "setParam", _wrap_StereoRBJLowShelf_setParam},
    { "findParamId", _wrap_StereoRBJLowShelf_findParamId},
    { "setParamById", _wrap_StereoRBJLowShelf_setParamById},
    { "setParams", _wrap_StereoRBJLowShelf_setParams},
    { "copyParamsFrom", _wrap_StereoRBJLowShelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoRBJLowShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoRBJLowShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoRBJLowShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoRBJLowShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoRBJLowShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoRBJLowShelf_Sf_SwigStatic = {
    "StereoRBJLowShelf",
    swig_StereoRBJLowShelf_Sf_SwigStatic_methods,
    swig_StereoRBJLowShelf_Sf_SwigStatic_attributes,
    swig_StereoRBJLowShelf_Sf_SwigStatic_constants,
    swig_StereoRBJLowShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoRBJLowShelf_bases[] = {0};
static const char *swig_StereoRBJLowShelf_base_names[] = {0};
static swig_lua_class _wrap_class_StereoRBJLowShelf = { "StereoRBJLowShelf", "StereoRBJLowShelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t,_proxy__wrap_new_StereoRBJLowShelf, swig_delete_StereoRBJLowShelf, swig_StereoRBJLowShelf_methods, swig_StereoRBJLowShelf_attributes, &swig_StereoRBJLowShelf_Sf_SwigStatic, swig_StereoRBJLowShelf_meta, swig_StereoRBJLowShelf_bases, swig_StereoRBJLowShelf_base_names };

static int _wrap_new_RBJHighShelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *)new Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighShelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJHighShelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighShelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJHighShelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighShelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RBJHighShelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RBJHighShelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RBJHighShelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_RBJHighShelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RBJHighShelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RBJHighShelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighShelf_Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighShelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJHighShelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJHighShelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighShelf_Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighShelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RBJHighShelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RBJHighShelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighShelf_Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighShelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJHighShelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJHighShelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighShelf_Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighShelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJHighShelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJHighShelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJHighShelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJHighShelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RBJHighShelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_RBJHighShelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighShelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighShelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighShelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighShelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighShelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighShelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighShelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighShelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighShelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighShelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighShelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("RBJHighShelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighShelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJHighShelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("RBJHighShelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RBJHighShelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJHighShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJHighShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJHighShelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJHighShelf_methods[]= {
    { "process", _wrap_RBJHighShelf_process},
    { "ProcessBlock", _wrap_RBJHighShelf_ProcessBlock},
    { "getParams", _wrap_RBJHighShelf_getParams},
    { "getParam", _wrap_RBJHighShelf_getParam},
    { "setParam", _wrap_RBJHighShelf_setParam},
    { "findParamId", _wrap_RBJHighShelf_findParamId},
    { "setParamById", _wrap_RBJHighShelf_setParamById},
    { "setParams", _wrap_RBJHighShelf_setParams},
    { "copyParamsFrom", _wrap_RBJHighShelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_RBJHighShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJHighShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJHighShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJHighShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJHighShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJHighShelf_Sf_SwigStatic = {
    "RBJHighShelf",
    swig_RBJHighShelf_Sf_SwigStatic_methods,
    swig_RBJHighShelf_Sf_SwigStatic_attributes,
    swig_RBJHighShelf_Sf_SwigStatic_constants,
    swig_RBJHighShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJHighShelf_bases[] = {0};
static const char *swig_RBJHighShelf_base_names[] = {0};
static swig_lua_class _wrap_class_RBJHighShelf = { "RBJHighShelf", "RBJHighShelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t,_proxy__wrap_new_RBJHighShelf, swig_delete_RBJHighShelf, swig_RBJHighShelf_methods, swig_RBJHighShelf_attributes, &swig_RBJHighShelf_Sf_SwigStatic, swig_RBJHighShelf_meta, swig_RBJHighShelf_bases, swig_RBJHighShelf_base_names };

static int _wrap_new_StereoRBJHighShelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *)new Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighShelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJHighShelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighShelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJHighShelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighShelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoRBJHighShelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoRBJHighShelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoRBJHighShelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoRBJHighShelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoRBJHighShelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoRBJHighShelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighShelf_Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighShelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJHighShelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJHighShelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighShelf_Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighShelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoRBJHighShelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoRBJHighShelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighShelf_Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighShelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJHighShelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJHighShelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_HighShelf_Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighShelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJHighShelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJHighShelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJHighShelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJHighShelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoRBJHighShelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoRBJHighShelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighShelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighShelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighShelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighShelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighShelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighShelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighShelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighShelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighShelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighShelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighShelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoRBJHighShelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJHighShelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJHighShelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoRBJHighShelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoRBJHighShelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoRBJHighShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoRBJHighShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoRBJHighShelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoRBJHighShelf_methods[]= {
    { "process", _wrap_StereoRBJHighShelf_process},
    { "ProcessBlock", _wrap_StereoRBJHighShelf_ProcessBlock},
    { "getParams", _wrap_StereoRBJHighShelf_getParams},
    { "getParam", _wrap_StereoRBJHighShelf_getParam},
    { "setParam", _wrap_StereoRBJHighShelf_setParam},
    { "findParamId", _wrap_StereoRBJHighShelf_findParamId},
    { "setParamById", _wrap_StereoRBJHighShelf_setParamById},
    { "setParams", _wrap_StereoRBJHighShelf_setParams},
    { "copyParamsFrom", _wrap_StereoRBJHighShelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoRBJHighShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoRBJHighShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoRBJHighShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoRBJHighShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoRBJHighShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoRBJHighShelf_Sf_SwigStatic = {
    "StereoRBJHighShelf",
    swig_StereoRBJHighShelf_Sf_SwigStatic_methods,
    swig_StereoRBJHighShelf_Sf_SwigStatic_attributes,
    swig_StereoRBJHighShelf_Sf_SwigStatic_constants,
    swig_StereoRBJHighShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoRBJHighShelf_bases[] = {0};
static const char *swig_StereoRBJHighShelf_base_names[] = {0};
static swig_lua_class _wrap_class_StereoRBJHighShelf = { "StereoRBJHighShelf", "StereoRBJHighShelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t,_proxy__wrap_new_StereoRBJHighShelf, swig_delete_StereoRBJHighShelf, swig_StereoRBJHighShelf_methods, swig_StereoRBJHighShelf_attributes, &swig_StereoRBJHighShelf_Sf_SwigStatic, swig_StereoRBJHighShelf_meta, swig_StereoRBJHighShelf_bases, swig_StereoRBJHighShelf_base_names };

static int _wrap_new_RBJBandShelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *)new Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandShelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJBandShelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandShelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJBandShelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandShelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RBJBandShelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RBJBandShelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RBJBandShelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_RBJBandShelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RBJBandShelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RBJBandShelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandShelf_Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandShelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJBandShelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJBandShelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandShelf_Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandShelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RBJBandShelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RBJBandShelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandShelf_Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandShelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJBandShelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJBandShelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandShelf_Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandShelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJBandShelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJBandShelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJBandShelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJBandShelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RBJBandShelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_RBJBandShelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandShelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandShelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandShelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandShelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandShelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandShelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandShelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandShelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandShelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandShelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandShelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("RBJBandShelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandShelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJBandShelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("RBJBandShelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RBJBandShelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJBandShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJBandShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJBandShelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJBandShelf_methods[]= {
    { "process", _wrap_RBJBandShelf_process},
    { "ProcessBlock", _wrap_RBJBandShelf_ProcessBlock},
    { "getParams", _wrap_RBJBandShelf_getParams},
    { "getParam", _wrap_RBJBandShelf_getParam},
    { "setParam", _wrap_RBJBandShelf_setParam},
    { "findParamId", _wrap_RBJBandShelf_findParamId},
    { "setParamById", _wrap_RBJBandShelf_setParamById},
    { "setParams", _wrap_RBJBandShelf_setParams},
    { "copyParamsFrom", _wrap_RBJBandShelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_RBJBandShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJBandShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJBandShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJBandShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJBandShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJBandShelf_Sf_SwigStatic = {
    "RBJBandShelf",
    swig_RBJBandShelf_Sf_SwigStatic_methods,
    swig_RBJBandShelf_Sf_SwigStatic_attributes,
    swig_RBJBandShelf_Sf_SwigStatic_constants,
    swig_RBJBandShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJBandShelf_bases[] = {0};
static const char *swig_RBJBandShelf_base_names[] = {0};
static swig_lua_class _wrap_class_RBJBandShelf = { "RBJBandShelf", "RBJBandShelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t,_proxy__wrap_new_RBJBandShelf, swig_delete_RBJBandShelf, swig_RBJBandShelf_methods, swig_RBJBandShelf_attributes, &swig_RBJBandShelf_Sf_SwigStatic, swig_RBJBandShelf_meta, swig_RBJBandShelf_bases, swig_RBJBandShelf_base_names };

static int _wrap_new_StereoRBJBandShelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *)new Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandShelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJBandShelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandShelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJBandShelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandShelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoRBJBandShelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoRBJBandShelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoRBJBandShelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoRBJBandShelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoRBJBandShelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoRBJBandShelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandShelf_Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandShelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJBandShelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJBandShelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandShelf_Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandShelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoRBJBandShelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoRBJBandShelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandShelf_Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandShelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJBandShelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJBandShelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_BandShelf_Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandShelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJBandShelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJBandShelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJBandShelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJBandShelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoRBJBandShelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoRBJBandShelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandShelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandShelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandShelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandShelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandShelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandShelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandShelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandShelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandShelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandShelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandShelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoRBJBandShelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJBandShelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJBandShelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoRBJBandShelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoRBJBandShelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoRBJBandShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoRBJBandShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoRBJBandShelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoRBJBandShelf_methods[]= {
    { "process", _wrap_StereoRBJBandShelf_process},
    { "ProcessBlock", _wrap_StereoRBJBandShelf_ProcessBlock},
    { "getParams", _wrap_StereoRBJBandShelf_getParams},
    { "getParam", _wrap_StereoRBJBandShelf_getParam},
    { "setParam", _wrap_StereoRBJBandShelf_setParam},
    { "findParamId", _wrap_StereoRBJBandShelf_findParamId},
    { "setParamById", _wrap_StereoRBJBandShelf_setParamById},
    { "setParams", _wrap_StereoRBJBandShelf_setParams},
    { "copyParamsFrom", _wrap_StereoRBJBandShelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoRBJBandShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoRBJBandShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoRBJBandShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoRBJBandShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoRBJBandShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoRBJBandShelf_Sf_SwigStatic = {
    "StereoRBJBandShelf",
    swig_StereoRBJBandShelf_Sf_SwigStatic_methods,
    swig_StereoRBJBandShelf_Sf_SwigStatic_attributes,
    swig_StereoRBJBandShelf_Sf_SwigStatic_constants,
    swig_StereoRBJBandShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoRBJBandShelf_bases[] = {0};
static const char *swig_StereoRBJBandShelf_base_names[] = {0};
static swig_lua_class _wrap_class_StereoRBJBandShelf = { "StereoRBJBandShelf", "StereoRBJBandShelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t,_proxy__wrap_new_StereoRBJBandShelf, swig_delete_StereoRBJBandShelf, swig_StereoRBJBandShelf_methods, swig_StereoRBJBandShelf_attributes, &swig_StereoRBJBandShelf_Sf_SwigStatic, swig_StereoRBJBandShelf_meta, swig_StereoRBJBandShelf_bases, swig_StereoRBJBandShelf_base_names };

static int _wrap_new_RBJAllPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *)new Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJAllPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJAllPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJAllPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJAllPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJAllPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJAllPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJAllPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RBJAllPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RBJAllPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RBJAllPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_RBJAllPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJAllPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RBJAllPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RBJAllPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_AllPass_Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJAllPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJAllPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJAllPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("RBJAllPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_AllPass_Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJAllPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJAllPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RBJAllPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RBJAllPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_AllPass_Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJAllPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJAllPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJAllPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("RBJAllPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_AllPass_Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJAllPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJAllPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJAllPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJAllPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RBJAllPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RBJAllPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_RBJAllPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJAllPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJAllPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJAllPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJAllPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJAllPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJAllPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJAllPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJAllPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJAllPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJAllPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJAllPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("RBJAllPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJAllPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t,0))){
    SWIG_fail_ptr("RBJAllPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("RBJAllPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RBJAllPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJAllPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJAllPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJAllPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJAllPass_methods[]= {
    { "process", _wrap_RBJAllPass_process},
    { "ProcessBlock", _wrap_RBJAllPass_ProcessBlock},
    { "getParams", _wrap_RBJAllPass_getParams},
    { "getParam", _wrap_RBJAllPass_getParam},
    { "setParam", _wrap_RBJAllPass_setParam},
    { "findParamId", _wrap_RBJAllPass_findParamId},
    { "setParamById", _wrap_RBJAllPass_setParamById},
    { "setParams", _wrap_RBJAllPass_setParams},
    { "copyParamsFrom", _wrap_RBJAllPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_RBJAllPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJAllPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJAllPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJAllPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJAllPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJAllPass_Sf_SwigStatic = {
    "RBJAllPass",
    swig_RBJAllPass_Sf_SwigStatic_methods,
    swig_RBJAllPass_Sf_SwigStatic_attributes,
    swig_RBJAllPass_Sf_SwigStatic_constants,
    swig_RBJAllPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJAllPass_bases[] = {0};
static const char *swig_RBJAllPass_base_names[] = {0};
static swig_lua_class _wrap_class_RBJAllPass = { "RBJAllPass", "RBJAllPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t,_proxy__wrap_new_RBJAllPass, swig_delete_RBJAllPass, swig_RBJAllPass_methods, swig_RBJAllPass_attributes, &swig_RBJAllPass_Sf_SwigStatic, swig_RBJAllPass_meta, swig_RBJAllPass_bases, swig_RBJAllPass_base_names };

static int _wrap_new_StereoRBJAllPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *)new Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJAllPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJAllPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJAllPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJAllPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJAllPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJAllPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJAllPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoRBJAllPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoRBJAllPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoRBJAllPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoRBJAllPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJAllPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoRBJAllPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoRBJAllPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_AllPass_Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJAllPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJAllPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJAllPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoRBJAllPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_AllPass_Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJAllPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJAllPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoRBJAllPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoRBJAllPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_AllPass_Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJAllPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJAllPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJAllPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoRBJAllPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_RBJ_Design_AllPass_Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJAllPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJAllPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJAllPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJAllPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoRBJAllPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoRBJAllPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoRBJAllPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJAllPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJAllPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJAllPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJAllPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJAllPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJAllPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJAllPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJAllPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJAllPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJAllPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJAllPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoRBJAllPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoRBJAllPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoRBJAllPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoRBJAllPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoRBJAllPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoRBJAllPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoRBJAllPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoRBJAllPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoRBJAllPass_methods[]= {
    { "process", _wrap_StereoRBJAllPass_process},
    { "ProcessBlock", _wrap_StereoRBJAllPass_ProcessBlock},
    { "getParams", _wrap_StereoRBJAllPass_getParams},
    { "getParam", _wrap_StereoRBJAllPass_getParam},
    { "setParam", _wrap_StereoRBJAllPass_setParam},
    { "findParamId", _wrap_StereoRBJAllPass_findParamId},
    { "setParamById", _wrap_StereoRBJAllPass_setParamById},
    { "setParams", _wrap_StereoRBJAllPass_setParams},
    { "copyParamsFrom", _wrap_StereoRBJAllPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoRBJAllPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoRBJAllPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoRBJAllPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoRBJAllPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoRBJAllPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoRBJAllPass_Sf_SwigStatic = {
    "StereoRBJAllPass",
    swig_StereoRBJAllPass_Sf_SwigStatic_methods,
    swig_StereoRBJAllPass_Sf_SwigStatic_attributes,
    swig_StereoRBJAllPass_Sf_SwigStatic_constants,
    swig_StereoRBJAllPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoRBJAllPass_bases[] = {0};
static const char *swig_StereoRBJAllPass_base_names[] = {0};
static swig_lua_class _wrap_class_StereoRBJAllPass = { "StereoRBJAllPass", "StereoRBJAllPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t,_proxy__wrap_new_StereoRBJAllPass, swig_delete_StereoRBJAllPass, swig_StereoRBJAllPass_methods, swig_StereoRBJAllPass_attributes, &swig_StereoRBJAllPass_Sf_SwigStatic, swig_StereoRBJAllPass_meta, swig_StereoRBJAllPass_bases, swig_StereoRBJAllPass_base_names };

static int _wrap_new_ButterworthBandPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ButterworthBandPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ButterworthBandPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ButterworthBandPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ButterworthBandPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButterworthBandPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ButterworthBandPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ButterworthBandPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ButterworthBandPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ButterworthBandPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ButterworthBandPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ButterworthBandPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ButterworthBandPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ButterworthBandPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ButterworthBandPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthBandPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthBandPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthBandPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthBandPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButterworthBandPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_ButterworthBandPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("ButterworthBandPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("ButterworthBandPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ButterworthBandPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ButterworthBandPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ButterworthBandPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ButterworthBandPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ButterworthBandPass_methods[]= {
    { "process", _wrap_ButterworthBandPass_process},
    { "ProcessBlock", _wrap_ButterworthBandPass_ProcessBlock},
    { "getParams", _wrap_ButterworthBandPass_getParams},
    { "getParam", _wrap_ButterworthBandPass_getParam},
    { "setParam", _wrap_ButterworthBandPass_setParam},
    { "findParamId", _wrap_ButterworthBandPass_findParamId},
    { "setParamById", _wrap_ButterworthBandPass_setParamById},
    { "setParams", _wrap_ButterworthBandPass_setParams},
    { "copyParamsFrom", _wrap_ButterworthBandPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_ButterworthBandPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthBandPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthBandPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthBandPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthBandPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthBandPass_Sf_SwigStatic = {
    "ButterworthBandPass",
    swig_ButterworthBandPass_Sf_SwigStatic_methods,
    swig_ButterworthBandPass_Sf_SwigStatic_attributes,
    swig_ButterworthBandPass_Sf_SwigStatic_constants,
    swig_ButterworthBandPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthBandPass_bases[] = {0};
static const char *swig_ButterworthBandPass_base_names[] = {0};
static swig_lua_class _wrap_class_ButterworthBandPass = { "ButterworthBandPass", "ButterworthBandPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t,_proxy__wrap_new_ButterworthBandPass, swig_delete_ButterworthBandPass, swig_ButterworthBandPass_methods, swig_ButterworthBandPass_attributes, &swig_ButterworthBandPass_Sf_SwigStatic, swig_ButterworthBandPass_meta, swig_ButterworthBandPass_bases, swig_ButterworthBandPass_base_names };

static int _wrap_new_StereoButterworthBandPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoButterworthBandPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoButterworthBandPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoButterworthBandPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoButterworthBandPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoButterworthBandPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoButterworthBandPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoButterworthBandPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoButterworthBandPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoButterworthBandPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoButterworthBandPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoButterworthBandPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoButterworthBandPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoButterworthBandPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoButterworthBandPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthBandPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthBandPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthBandPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthBandPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoButterworthBandPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoButterworthBandPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoButterworthBandPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoButterworthBandPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoButterworthBandPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoButterworthBandPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoButterworthBandPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoButterworthBandPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoButterworthBandPass_methods[]= {
    { "process", _wrap_StereoButterworthBandPass_process},
    { "ProcessBlock", _wrap_StereoButterworthBandPass_ProcessBlock},
    { "getParams", _wrap_StereoButterworthBandPass_getParams},
    { "getParam", _wrap_StereoButterworthBandPass_getParam},
    { "setParam", _wrap_StereoButterworthBandPass_setParam},
    { "findParamId", _wrap_StereoButterworthBandPass_findParamId},
    { "setParamById", _wrap_StereoButterworthBandPass_setParamById},
    { "setParams", _wrap_StereoButterworthBandPass_setParams},
    { "copyParamsFrom", _wrap_StereoButterworthBandPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoButterworthBandPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoButterworthBandPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoButterworthBandPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoButterworthBandPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoButterworthBandPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoButterworthBandPass_Sf_SwigStatic = {
    "StereoButterworthBandPass",
    swig_StereoButterworthBandPass_Sf_SwigStatic_methods,
    swig_StereoButterworthBandPass_Sf_SwigStatic_attributes,
    swig_StereoButterworthBandPass_Sf_SwigStatic_constants,
    swig_StereoButterworthBandPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoButterworthBandPass_bases[] = {0};
static const char *swig_StereoButterworthBandPass_base_names[] = {0};
static swig_lua_class _wrap_class_StereoButterworthBandPass = { "StereoButterworthBandPass", "StereoButterworthBandPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoButterworthBandPass, swig_delete_StereoButterworthBandPass, swig_StereoButterworthBandPass_methods, swig_StereoButterworthBandPass_attributes, &swig_StereoButterworthBandPass_Sf_SwigStatic, swig_StereoButterworthBandPass_meta, swig_StereoButterworthBandPass_bases, swig_StereoButterworthBandPass_base_names };

static int _wrap_new_ButterworthBandStop(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStop_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ButterworthBandStop_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStop_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ButterworthBandStop_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStop_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ButterworthBandStop_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ButterworthBandStop_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButterworthBandStop_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ButterworthBandStop_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ButterworthBandStop_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ButterworthBandStop_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStop_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ButterworthBandStop_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ButterworthBandStop_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStop_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ButterworthBandStop_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ButterworthBandStop_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStop_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ButterworthBandStop_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ButterworthBandStop_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStop_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthBandStop_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthBandStop_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthBandStop_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthBandStop_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButterworthBandStop_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_ButterworthBandStop_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandStop_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStop_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandStop_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStop_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandStop_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStop_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandStop_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStop_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandStop_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStop_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandStop_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("ButterworthBandStop_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStop_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandStop_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("ButterworthBandStop_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ButterworthBandStop(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ButterworthBandStop(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ButterworthBandStop);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ButterworthBandStop_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ButterworthBandStop_methods[]= {
    { "process", _wrap_ButterworthBandStop_process},
    { "ProcessBlock", _wrap_ButterworthBandStop_ProcessBlock},
    { "getParams", _wrap_ButterworthBandStop_getParams},
    { "getParam", _wrap_ButterworthBandStop_getParam},
    { "setParam", _wrap_ButterworthBandStop_setParam},
    { "findParamId", _wrap_ButterworthBandStop_findParamId},
    { "setParamById", _wrap_ButterworthBandStop_setParamById},
    { "setParams", _wrap_ButterworthBandStop_setParams},
    { "copyParamsFrom", _wrap_ButterworthBandStop_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_ButterworthBandStop_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthBandStop_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthBandStop_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthBandStop_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthBandStop_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthBandStop_SwigStatic = {
    "ButterworthBandStop",
    swig_ButterworthBandStop_SwigStatic_methods,
    swig_ButterworthBandStop_SwigStatic_attributes,
    swig_ButterworthBandStop_SwigStatic_constants,
    swig_ButterworthBandStop_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthBandStop_bases[] = {0};
static const char *swig_ButterworthBandStop_base_names[] = {0};
static swig_lua_class _wrap_class_ButterworthBandStop = { "ButterworthBandStop", "ButterworthBandStop", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t,_proxy__wrap_new_ButterworthBandStop, swig_delete_ButterworthBandStop, swig_ButterworthBandStop_methods, swig_ButterworthBandStop_attributes, &swig_ButterworthBandStop_SwigStatic, swig_ButterworthBandStop_meta, swig_ButterworthBandStop_bases, swig_ButterworthBandStop_base_names };

static int _wrap_new_StereoButterworthBandStop(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandStop_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoButterworthBandStop_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandStop_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoButterworthBandStop_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandStop_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoButterworthBandStop_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoButterworthBandStop_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoButterworthBandStop_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoButterworthBandStop_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoButterworthBandStop_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoButterworthBandStop_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandStop_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoButterworthBandStop_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoButterworthBandStop_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandStop_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoButterworthBandStop_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoButterworthBandStop_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandStop_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoButterworthBandStop_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoButterworthBandStop_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandStop_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthBandStop_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthBandStop_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthBandStop_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthBandStop_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoButterworthBandStop_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoButterworthBandStop_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandStop_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandStop_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandStop_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandStop_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandStop_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandStop_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandStop_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandStop_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandStop_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandStop_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandStop_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoButterworthBandStop_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandStop_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandStop_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoButterworthBandStop_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoButterworthBandStop(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoButterworthBandStop(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoButterworthBandStop);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoButterworthBandStop_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoButterworthBandStop_methods[]= {
    { "process", _wrap_StereoButterworthBandStop_process},
    { "ProcessBlock", _wrap_StereoButterworthBandStop_ProcessBlock},
    { "getParams", _wrap_StereoButterworthBandStop_getParams},
    { "getParam", _wrap_StereoButterworthBandStop_getParam},
    { "setParam", _wrap_StereoButterworthBandStop_setParam},
    { "findParamId", _wrap_StereoButterworthBandStop_findParamId},
    { "setParamById", _wrap_StereoButterworthBandStop_setParamById},
    { "setParams", _wrap_StereoButterworthBandStop_setParams},
    { "copyParamsFrom", _wrap_StereoButterworthBandStop_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoButterworthBandStop_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoButterworthBandStop_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoButterworthBandStop_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoButterworthBandStop_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoButterworthBandStop_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoButterworthBandStop_SwigStatic = {
    "StereoButterworthBandStop",
    swig_StereoButterworthBandStop_SwigStatic_methods,
    swig_StereoButterworthBandStop_SwigStatic_attributes,
    swig_StereoButterworthBandStop_SwigStatic_constants,
    swig_StereoButterworthBandStop_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoButterworthBandStop_bases[] = {0};
static const char *swig_StereoButterworthBandStop_base_names[] = {0};
static swig_lua_class _wrap_class_StereoButterworthBandStop = { "StereoButterworthBandStop", "StereoButterworthBandStop", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoButterworthBandStop, swig_delete_StereoButterworthBandStop, swig_StereoButterworthBandStop_methods, swig_StereoButterworthBandStop_attributes, &swig_StereoButterworthBandStop_SwigStatic, swig_StereoButterworthBandStop_meta, swig_StereoButterworthBandStop_bases, swig_StereoButterworthBandStop_base_names };

static int _wrap_new_ButterworthLowPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ButterworthLowPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ButterworthLowPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ButterworthLowPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ButterworthLowPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButterworthLowPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ButterworthLowPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ButterworthLowPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ButterworthLowPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ButterworthLowPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ButterworthLowPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ButterworthLowPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ButterworthLowPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ButterworthLowPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ButterworthLowPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthLowPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthLowPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthLowPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthLowPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButterworthLowPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_ButterworthLowPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("ButterworthLowPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("ButterworthLowPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ButterworthLowPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ButterworthLowPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ButterworthLowPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ButterworthLowPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ButterworthLowPass_methods[]= {
    { "process", _wrap_ButterworthLowPass_process},
    { "ProcessBlock", _wrap_ButterworthLowPass_ProcessBlock},
    { "getParams", _wrap_ButterworthLowPass_getParams},
    { "getParam", _wrap_ButterworthLowPass_getParam},
    { "setParam", _wrap_ButterworthLowPass_setParam},
    { "findParamId", _wrap_ButterworthLowPass_findParamId},
    { "setParamById", _wrap_ButterworthLowPass_setParamById},
    { "setParams", _wrap_ButterworthLowPass_setParams},
    { "copyParamsFrom", _wrap_ButterworthLowPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_ButterworthLowPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthLowPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthLowPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthLowPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthLowPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthLowPass_Sf_SwigStatic = {
    "ButterworthLowPass",
    swig_ButterworthLowPass_Sf_SwigStatic_methods,
    swig_ButterworthLowPass_Sf_SwigStatic_attributes,
    swig_ButterworthLowPass_Sf_SwigStatic_constants,
    swig_ButterworthLowPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthLowPass_bases[] = {0};
static const char *swig_ButterworthLowPass_base_names[] = {0};
static swig_lua_class _wrap_class_ButterworthLowPass = { "ButterworthLowPass", "ButterworthLowPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t,_proxy__wrap_new_ButterworthLowPass, swig_delete_ButterworthLowPass, swig_ButterworthLowPass_methods, swig_ButterworthLowPass_attributes, &swig_ButterworthLowPass_Sf_SwigStatic, swig_ButterworthLowPass_meta, swig_ButterworthLowPass_bases, swig_ButterworthLowPass_base_names };

static int _wrap_new_StereoButterworthLowPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoButterworthLowPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoButterworthLowPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoButterworthLowPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoButterworthLowPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoButterworthLowPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoButterworthLowPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoButterworthLowPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoButterworthLowPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoButterworthLowPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoButterworthLowPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoButterworthLowPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoButterworthLowPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoButterworthLowPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoButterworthLowPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthLowPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthLowPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthLowPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthLowPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoButterworthLowPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoButterworthLowPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoButterworthLowPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoButterworthLowPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoButterworthLowPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoButterworthLowPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoButterworthLowPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoButterworthLowPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoButterworthLowPass_methods[]= {
    { "process", _wrap_StereoButterworthLowPass_process},
    { "ProcessBlock", _wrap_StereoButterworthLowPass_ProcessBlock},
    { "getParams", _wrap_StereoButterworthLowPass_getParams},
    { "getParam", _wrap_StereoButterworthLowPass_getParam},
    { "setParam", _wrap_StereoButterworthLowPass_setParam},
    { "findParamId", _wrap_StereoButterworthLowPass_findParamId},
    { "setParamById", _wrap_StereoButterworthLowPass_setParamById},
    { "setParams", _wrap_StereoButterworthLowPass_setParams},
    { "copyParamsFrom", _wrap_StereoButterworthLowPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoButterworthLowPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoButterworthLowPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoButterworthLowPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoButterworthLowPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoButterworthLowPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoButterworthLowPass_Sf_SwigStatic = {
    "StereoButterworthLowPass",
    swig_StereoButterworthLowPass_Sf_SwigStatic_methods,
    swig_StereoButterworthLowPass_Sf_SwigStatic_attributes,
    swig_StereoButterworthLowPass_Sf_SwigStatic_constants,
    swig_StereoButterworthLowPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoButterworthLowPass_bases[] = {0};
static const char *swig_StereoButterworthLowPass_base_names[] = {0};
static swig_lua_class _wrap_class_StereoButterworthLowPass = { "StereoButterworthLowPass", "StereoButterworthLowPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoButterworthLowPass, swig_delete_StereoButterworthLowPass, swig_StereoButterworthLowPass_methods, swig_StereoButterworthLowPass_attributes, &swig_StereoButterworthLowPass_Sf_SwigStatic, swig_StereoButterworthLowPass_meta, swig_StereoButterworthLowPass_bases, swig_StereoButterworthLowPass_base_names };

static int _wrap_new_ButterworthHighPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ButterworthHighPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ButterworthHighPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ButterworthHighPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ButterworthHighPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButterworthHighPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ButterworthHighPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ButterworthHighPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ButterworthHighPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ButterworthHighPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ButterworthHighPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ButterworthHighPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ButterworthHighPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ButterworthHighPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ButterworthHighPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthHighPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthHighPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthHighPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthHighPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButterworthHighPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_ButterworthHighPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("ButterworthHighPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("ButterworthHighPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ButterworthHighPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ButterworthHighPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ButterworthHighPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ButterworthHighPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ButterworthHighPass_methods[]= {
    { "process", _wrap_ButterworthHighPass_process},
    { "ProcessBlock", _wrap_ButterworthHighPass_ProcessBlock},
    { "getParams", _wrap_ButterworthHighPass_getParams},
    { "getParam", _wrap_ButterworthHighPass_getParam},
    { "setParam", _wrap_ButterworthHighPass_setParam},
    { "findParamId", _wrap_ButterworthHighPass_findParamId},
    { "setParamById", _wrap_ButterworthHighPass_setParamById},
    { "setParams", _wrap_ButterworthHighPass_setParams},
    { "copyParamsFrom", _wrap_ButterworthHighPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_ButterworthHighPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthHighPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthHighPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthHighPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthHighPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthHighPass_Sf_SwigStatic = {
    "ButterworthHighPass",
    swig_ButterworthHighPass_Sf_SwigStatic_methods,
    swig_ButterworthHighPass_Sf_SwigStatic_attributes,
    swig_ButterworthHighPass_Sf_SwigStatic_constants,
    swig_ButterworthHighPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthHighPass_bases[] = {0};
static const char *swig_ButterworthHighPass_base_names[] = {0};
static swig_lua_class _wrap_class_ButterworthHighPass = { "ButterworthHighPass", "ButterworthHighPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t,_proxy__wrap_new_ButterworthHighPass, swig_delete_ButterworthHighPass, swig_ButterworthHighPass_methods, swig_ButterworthHighPass_attributes, &swig_ButterworthHighPass_Sf_SwigStatic, swig_ButterworthHighPass_meta, swig_ButterworthHighPass_bases, swig_ButterworthHighPass_base_names };

static int _wrap_new_StereoButterworthHighPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoButterworthHighPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoButterworthHighPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoButterworthHighPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoButterworthHighPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoButterworthHighPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoButterworthHighPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoButterworthHighPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoButterworthHighPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoButterworthHighPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoButterworthHighPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoButterworthHighPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoButterworthHighPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoButterworthHighPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoButterworthHighPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthHighPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthHighPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthHighPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthHighPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoButterworthHighPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoButterworthHighPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoButterworthHighPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoButterworthHighPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoButterworthHighPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoButterworthHighPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoButterworthHighPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoButterworthHighPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoButterworthHighPass_methods[]= {
    { "process", _wrap_StereoButterworthHighPass_process},
    { "ProcessBlock", _wrap_StereoButterworthHighPass_ProcessBlock},
    { "getParams", _wrap_StereoButterworthHighPass_getParams},
    { "getParam", _wrap_StereoButterworthHighPass_getParam},
    { "setParam", _wrap_StereoButterworthHighPass_setParam},
    { "findParamId", _wrap_StereoButterworthHighPass_findParamId},
    { "setParamById", _wrap_StereoButterworthHighPass_setParamById},
    { "setParams", _wrap_StereoButterworthHighPass_setParams},
    { "copyParamsFrom", _wrap_StereoButterworthHighPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoButterworthHighPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoButterworthHighPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoButterworthHighPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoButterworthHighPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoButterworthHighPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoButterworthHighPass_Sf_SwigStatic = {
    "StereoButterworthHighPass",
    swig_StereoButterworthHighPass_Sf_SwigStatic_methods,
    swig_StereoButterworthHighPass_Sf_SwigStatic_attributes,
    swig_StereoButterworthHighPass_Sf_SwigStatic_constants,
    swig_StereoButterworthHighPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoButterworthHighPass_bases[] = {0};
static const char *swig_StereoButterworthHighPass_base_names[] = {0};
static swig_lua_class _wrap_class_StereoButterworthHighPass = { "StereoButterworthHighPass", "StereoButterworthHighPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoButterworthHighPass, swig_delete_StereoButterworthHighPass, swig_StereoButterworthHighPass_methods, swig_StereoButterworthHighPass_attributes, &swig_StereoButterworthHighPass_Sf_SwigStatic, swig_StereoButterworthHighPass_meta, swig_StereoButterworthHighPass_bases, swig_StereoButterworthHighPass_base_names };

static int _wrap_new_ButterworthBandShelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandShelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ButterworthBandShelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandShelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ButterworthBandShelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandShelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ButterworthBandShelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ButterworthBandShelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButterworthBandShelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ButterworthBandShelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ButterworthBandShelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ButterworthBandShelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandShelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ButterworthBandShelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ButterworthBandShelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandShelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ButterworthBandShelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ButterworthBandShelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandShelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ButterworthBandShelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ButterworthBandShelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandShelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthBandShelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthBandShelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthBandShelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthBandShelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButterworthBandShelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_ButterworthBandShelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandShelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandShelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandShelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandShelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandShelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandShelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandShelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandShelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandShelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandShelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandShelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("ButterworthBandShelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandShelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthBandShelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("ButterworthBandShelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ButterworthBandShelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ButterworthBandShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ButterworthBandShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ButterworthBandShelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ButterworthBandShelf_methods[]= {
    { "process", _wrap_ButterworthBandShelf_process},
    { "ProcessBlock", _wrap_ButterworthBandShelf_ProcessBlock},
    { "getParams", _wrap_ButterworthBandShelf_getParams},
    { "getParam", _wrap_ButterworthBandShelf_getParam},
    { "setParam", _wrap_ButterworthBandShelf_setParam},
    { "findParamId", _wrap_ButterworthBandShelf_findParamId},
    { "setParamById", _wrap_ButterworthBandShelf_setParamById},
    { "setParams", _wrap_ButterworthBandShelf_setParams},
    { "copyParamsFrom", _wrap_ButterworthBandShelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_ButterworthBandShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthBandShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthBandShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthBandShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthBandShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthBandShelf_Sf_SwigStatic = {
    "ButterworthBandShelf",
    swig_ButterworthBandShelf_Sf_SwigStatic_methods,
    swig_ButterworthBandShelf_Sf_SwigStatic_attributes,
    swig_ButterworthBandShelf_Sf_SwigStatic_constants,
    swig_ButterworthBandShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthBandShelf_bases[] = {0};
static const char *swig_ButterworthBandShelf_base_names[] = {0};
static swig_lua_class _wrap_class_ButterworthBandShelf = { "ButterworthBandShelf", "ButterworthBandShelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t,_proxy__wrap_new_ButterworthBandShelf, swig_delete_ButterworthBandShelf, swig_ButterworthBandShelf_methods, swig_ButterworthBandShelf_attributes, &swig_ButterworthBandShelf_Sf_SwigStatic, swig_ButterworthBandShelf_meta, swig_ButterworthBandShelf_bases, swig_ButterworthBandShelf_base_names };

static int _wrap_new_StereoButterworthBandShelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandShelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoButterworthBandShelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandShelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoButterworthBandShelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandShelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoButterworthBandShelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoButterworthBandShelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoButterworthBandShelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoButterworthBandShelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoButterworthBandShelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoButterworthBandShelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandShelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoButterworthBandShelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoButterworthBandShelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandShelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoButterworthBandShelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoButterworthBandShelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandShelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoButterworthBandShelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoButterworthBandShelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_BandShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandShelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthBandShelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthBandShelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthBandShelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthBandShelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoButterworthBandShelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoButterworthBandShelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandShelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandShelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandShelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandShelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandShelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandShelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandShelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandShelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandShelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandShelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandShelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoButterworthBandShelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthBandShelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthBandShelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoButterworthBandShelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoButterworthBandShelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoButterworthBandShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoButterworthBandShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoButterworthBandShelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoButterworthBandShelf_methods[]= {
    { "process", _wrap_StereoButterworthBandShelf_process},
    { "ProcessBlock", _wrap_StereoButterworthBandShelf_ProcessBlock},
    { "getParams", _wrap_StereoButterworthBandShelf_getParams},
    { "getParam", _wrap_StereoButterworthBandShelf_getParam},
    { "setParam", _wrap_StereoButterworthBandShelf_setParam},
    { "findParamId", _wrap_StereoButterworthBandShelf_findParamId},
    { "setParamById", _wrap_StereoButterworthBandShelf_setParamById},
    { "setParams", _wrap_StereoButterworthBandShelf_setParams},
    { "copyParamsFrom", _wrap_StereoButterworthBandShelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoButterworthBandShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoButterworthBandShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoButterworthBandShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoButterworthBandShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoButterworthBandShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoButterworthBandShelf_Sf_SwigStatic = {
    "StereoButterworthBandShelf",
    swig_StereoButterworthBandShelf_Sf_SwigStatic_methods,
    swig_StereoButterworthBandShelf_Sf_SwigStatic_attributes,
    swig_StereoButterworthBandShelf_Sf_SwigStatic_constants,
    swig_StereoButterworthBandShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoButterworthBandShelf_bases[] = {0};
static const char *swig_StereoButterworthBandShelf_base_names[] = {0};
static swig_lua_class _wrap_class_StereoButterworthBandShelf = { "StereoButterworthBandShelf", "StereoButterworthBandShelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoButterworthBandShelf, swig_delete_StereoButterworthBandShelf, swig_StereoButterworthBandShelf_methods, swig_StereoButterworthBandShelf_attributes, &swig_StereoButterworthBandShelf_Sf_SwigStatic, swig_StereoButterworthBandShelf_meta, swig_StereoButterworthBandShelf_bases, swig_StereoButterworthBandShelf_base_names };

static int _wrap_new_ButterworthLowShelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowShelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ButterworthLowShelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowShelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ButterworthLowShelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowShelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ButterworthLowShelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ButterworthLowShelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButterworthLowShelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ButterworthLowShelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ButterworthLowShelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ButterworthLowShelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowShelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ButterworthLowShelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ButterworthLowShelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowShelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ButterworthLowShelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ButterworthLowShelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowShelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ButterworthLowShelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ButterworthLowShelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowShelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthLowShelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthLowShelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthLowShelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthLowShelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButterworthLowShelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_ButterworthLowShelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowShelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowShelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowShelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowShelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowShelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowShelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowShelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowShelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowShelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowShelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowShelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("ButterworthLowShelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowShelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthLowShelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("ButterworthLowShelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ButterworthLowShelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ButterworthLowShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ButterworthLowShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ButterworthLowShelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ButterworthLowShelf_methods[]= {
    { "process", _wrap_ButterworthLowShelf_process},
    { "ProcessBlock", _wrap_ButterworthLowShelf_ProcessBlock},
    { "getParams", _wrap_ButterworthLowShelf_getParams},
    { "getParam", _wrap_ButterworthLowShelf_getParam},
    { "setParam", _wrap_ButterworthLowShelf_setParam},
    { "findParamId", _wrap_ButterworthLowShelf_findParamId},
    { "setParamById", _wrap_ButterworthLowShelf_setParamById},
    { "setParams", _wrap_ButterworthLowShelf_setParams},
    { "copyParamsFrom", _wrap_ButterworthLowShelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_ButterworthLowShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthLowShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthLowShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthLowShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthLowShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthLowShelf_Sf_SwigStatic = {
    "ButterworthLowShelf",
    swig_ButterworthLowShelf_Sf_SwigStatic_methods,
    swig_ButterworthLowShelf_Sf_SwigStatic_attributes,
    swig_ButterworthLowShelf_Sf_SwigStatic_constants,
    swig_ButterworthLowShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthLowShelf_bases[] = {0};
static const char *swig_ButterworthLowShelf_base_names[] = {0};
static swig_lua_class _wrap_class_ButterworthLowShelf = { "ButterworthLowShelf", "ButterworthLowShelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t,_proxy__wrap_new_ButterworthLowShelf, swig_delete_ButterworthLowShelf, swig_ButterworthLowShelf_methods, swig_ButterworthLowShelf_attributes, &swig_ButterworthLowShelf_Sf_SwigStatic, swig_ButterworthLowShelf_meta, swig_ButterworthLowShelf_bases, swig_ButterworthLowShelf_base_names };

static int _wrap_new_StereoButterworthLowShelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowShelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoButterworthLowShelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowShelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoButterworthLowShelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowShelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoButterworthLowShelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoButterworthLowShelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoButterworthLowShelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoButterworthLowShelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoButterworthLowShelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoButterworthLowShelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowShelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoButterworthLowShelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoButterworthLowShelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowShelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoButterworthLowShelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoButterworthLowShelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowShelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoButterworthLowShelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoButterworthLowShelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowShelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthLowShelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthLowShelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthLowShelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthLowShelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoButterworthLowShelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoButterworthLowShelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowShelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowShelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowShelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowShelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowShelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowShelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowShelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowShelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowShelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowShelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowShelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoButterworthLowShelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthLowShelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthLowShelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoButterworthLowShelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoButterworthLowShelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoButterworthLowShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoButterworthLowShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoButterworthLowShelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoButterworthLowShelf_methods[]= {
    { "process", _wrap_StereoButterworthLowShelf_process},
    { "ProcessBlock", _wrap_StereoButterworthLowShelf_ProcessBlock},
    { "getParams", _wrap_StereoButterworthLowShelf_getParams},
    { "getParam", _wrap_StereoButterworthLowShelf_getParam},
    { "setParam", _wrap_StereoButterworthLowShelf_setParam},
    { "findParamId", _wrap_StereoButterworthLowShelf_findParamId},
    { "setParamById", _wrap_StereoButterworthLowShelf_setParamById},
    { "setParams", _wrap_StereoButterworthLowShelf_setParams},
    { "copyParamsFrom", _wrap_StereoButterworthLowShelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoButterworthLowShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoButterworthLowShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoButterworthLowShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoButterworthLowShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoButterworthLowShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoButterworthLowShelf_Sf_SwigStatic = {
    "StereoButterworthLowShelf",
    swig_StereoButterworthLowShelf_Sf_SwigStatic_methods,
    swig_StereoButterworthLowShelf_Sf_SwigStatic_attributes,
    swig_StereoButterworthLowShelf_Sf_SwigStatic_constants,
    swig_StereoButterworthLowShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoButterworthLowShelf_bases[] = {0};
static const char *swig_StereoButterworthLowShelf_base_names[] = {0};
static swig_lua_class _wrap_class_StereoButterworthLowShelf = { "StereoButterworthLowShelf", "StereoButterworthLowShelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoButterworthLowShelf, swig_delete_StereoButterworthLowShelf, swig_StereoButterworthLowShelf_methods, swig_StereoButterworthLowShelf_attributes, &swig_StereoButterworthLowShelf_Sf_SwigStatic, swig_StereoButterworthLowShelf_meta, swig_StereoButterworthLowShelf_bases, swig_StereoButterworthLowShelf_base_names };

static int _wrap_new_ButterworthHighShelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighShelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ButterworthHighShelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighShelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ButterworthHighShelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighShelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ButterworthHighShelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ButterworthHighShelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButterworthHighShelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ButterworthHighShelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ButterworthHighShelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ButterworthHighShelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighShelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ButterworthHighShelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ButterworthHighShelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighShelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ButterworthHighShelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ButterworthHighShelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighShelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ButterworthHighShelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ButterworthHighShelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighShelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthHighShelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthHighShelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthHighShelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButterworthHighShelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButterworthHighShelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_ButterworthHighShelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighShelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighShelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighShelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighShelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighShelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighShelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighShelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighShelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighShelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighShelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighShelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("ButterworthHighShelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighShelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ButterworthHighShelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("ButterworthHighShelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ButterworthHighShelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ButterworthHighShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ButterworthHighShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ButterworthHighShelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ButterworthHighShelf_methods[]= {
    { "process", _wrap_ButterworthHighShelf_process},
    { "ProcessBlock", _wrap_ButterworthHighShelf_ProcessBlock},
    { "getParams", _wrap_ButterworthHighShelf_getParams},
    { "getParam", _wrap_ButterworthHighShelf_getParam},
    { "setParam", _wrap_ButterworthHighShelf_setParam},
    { "findParamId", _wrap_ButterworthHighShelf_findParamId},
    { "setParamById", _wrap_ButterworthHighShelf_setParamById},
    { "setParams", _wrap_ButterworthHighShelf_setParams},
    { "copyParamsFrom", _wrap_ButterworthHighShelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_ButterworthHighShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthHighShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthHighShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthHighShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthHighShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthHighShelf_Sf_SwigStatic = {
    "ButterworthHighShelf",
    swig_ButterworthHighShelf_Sf_SwigStatic_methods,
    swig_ButterworthHighShelf_Sf_SwigStatic_attributes,
    swig_ButterworthHighShelf_Sf_SwigStatic_constants,
    swig_ButterworthHighShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthHighShelf_bases[] = {0};
static const char *swig_ButterworthHighShelf_base_names[] = {0};
static swig_lua_class _wrap_class_ButterworthHighShelf = { "ButterworthHighShelf", "ButterworthHighShelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t,_proxy__wrap_new_ButterworthHighShelf, swig_delete_ButterworthHighShelf, swig_ButterworthHighShelf_methods, swig_ButterworthHighShelf_attributes, &swig_ButterworthHighShelf_Sf_SwigStatic, swig_ButterworthHighShelf_meta, swig_ButterworthHighShelf_bases, swig_ButterworthHighShelf_base_names };

static int _wrap_new_StereoButterworthHighSHelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighSHelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighSHelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoButterworthHighSHelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighSHelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighSHelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoButterworthHighSHelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighSHelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoButterworthHighSHelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoButterworthHighSHelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoButterworthHighSHelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoButterworthHighSHelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighSHelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoButterworthHighSHelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoButterworthHighSHelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighSHelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighSHelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoButterworthHighSHelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoButterworthHighSHelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighSHelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighSHelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoButterworthHighSHelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoButterworthHighSHelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighSHelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighSHelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoButterworthHighSHelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoButterworthHighSHelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Butterworth_Design_HighShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighSHelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthHighSHelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthHighSHelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthHighSHelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoButterworthHighSHelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoButterworthHighSHelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoButterworthHighSHelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighSHelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighSHelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighSHelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighSHelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighSHelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighSHelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighSHelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighSHelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighSHelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighSHelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighSHelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoButterworthHighSHelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoButterworthHighSHelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoButterworthHighSHelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoButterworthHighSHelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoButterworthHighSHelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoButterworthHighSHelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoButterworthHighSHelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoButterworthHighSHelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoButterworthHighSHelf_methods[]= {
    { "process", _wrap_StereoButterworthHighSHelf_process},
    { "ProcessBlock", _wrap_StereoButterworthHighSHelf_ProcessBlock},
    { "getParams", _wrap_StereoButterworthHighSHelf_getParams},
    { "getParam", _wrap_StereoButterworthHighSHelf_getParam},
    { "setParam", _wrap_StereoButterworthHighSHelf_setParam},
    { "findParamId", _wrap_StereoButterworthHighSHelf_findParamId},
    { "setParamById", _wrap_StereoButterworthHighSHelf_setParamById},
    { "setParams", _wrap_StereoButterworthHighSHelf_setParams},
    { "copyParamsFrom", _wrap_StereoButterworthHighSHelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoButterworthHighSHelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoButterworthHighSHelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoButterworthHighSHelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoButterworthHighSHelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoButterworthHighSHelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoButterworthHighSHelf_Sf_SwigStatic = {
    "StereoButterworthHighSHelf",
    swig_StereoButterworthHighSHelf_Sf_SwigStatic_methods,
    swig_StereoButterworthHighSHelf_Sf_SwigStatic_attributes,
    swig_StereoButterworthHighSHelf_Sf_SwigStatic_constants,
    swig_StereoButterworthHighSHelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoButterworthHighSHelf_bases[] = {0};
static const char *swig_StereoButterworthHighSHelf_base_names[] = {0};
static swig_lua_class _wrap_class_StereoButterworthHighSHelf = { "StereoButterworthHighSHelf", "StereoButterworthHighSHelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoButterworthHighSHelf, swig_delete_StereoButterworthHighSHelf, swig_StereoButterworthHighSHelf_methods, swig_StereoButterworthHighSHelf_attributes, &swig_StereoButterworthHighSHelf_Sf_SwigStatic, swig_StereoButterworthHighSHelf_meta, swig_StereoButterworthHighSHelf_bases, swig_StereoButterworthHighSHelf_base_names };

static int _wrap_new_ChebyshevIBandPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIBandPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIBandPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevIBandPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevIBandPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevIBandPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevIBandPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevIBandPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevIBandPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIBandPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIBandPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevIBandPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevIBandPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIBandPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIBandPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIBandPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIBandPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIBandPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIBandPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevIBandPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevIBandPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("ChebyshevIBandPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("ChebyshevIBandPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChebyshevIBandPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ChebyshevIBandPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ChebyshevIBandPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ChebyshevIBandPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChebyshevIBandPass_methods[]= {
    { "process", _wrap_ChebyshevIBandPass_process},
    { "ProcessBlock", _wrap_ChebyshevIBandPass_ProcessBlock},
    { "getParams", _wrap_ChebyshevIBandPass_getParams},
    { "getParam", _wrap_ChebyshevIBandPass_getParam},
    { "setParam", _wrap_ChebyshevIBandPass_setParam},
    { "findParamId", _wrap_ChebyshevIBandPass_findParamId},
    { "setParamById", _wrap_ChebyshevIBandPass_setParamById},
    { "setParams", _wrap_ChebyshevIBandPass_setParams},
    { "copyParamsFrom", _wrap_ChebyshevIBandPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_ChebyshevIBandPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChebyshevIBandPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChebyshevIBandPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChebyshevIBandPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChebyshevIBandPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChebyshevIBandPass_Sf_SwigStatic = {
    "ChebyshevIBandPass",
    swig_ChebyshevIBandPass_Sf_SwigStatic_methods,
    swig_ChebyshevIBandPass_Sf_SwigStatic_attributes,
    swig_ChebyshevIBandPass_Sf_SwigStatic_constants,
    swig_ChebyshevIBandPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChebyshevIBandPass_bases[] = {0};
static const char *swig_ChebyshevIBandPass_base_names[] = {0};
static swig_lua_class _wrap_class_ChebyshevIBandPass = { "ChebyshevIBandPass", "ChebyshevIBandPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t,_proxy__wrap_new_ChebyshevIBandPass, swig_delete_ChebyshevIBandPass, swig_ChebyshevIBandPass_methods, swig_ChebyshevIBandPass_attributes, &swig_ChebyshevIBandPass_Sf_SwigStatic, swig_ChebyshevIBandPass_meta, swig_ChebyshevIBandPass_bases, swig_ChebyshevIBandPass_base_names };

static int _wrap_new_StereoChebyshevIBandPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIBandPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIBandPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevIBandPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevIBandPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevIBandPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevIBandPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIBandPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIBandPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIBandPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIBandPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIBandPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIBandPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIBandPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIBandPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIBandPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIBandPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIBandPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIBandPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevIBandPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevIBandPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoChebyshevIBandPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoChebyshevIBandPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoChebyshevIBandPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoChebyshevIBandPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoChebyshevIBandPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoChebyshevIBandPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoChebyshevIBandPass_methods[]= {
    { "process", _wrap_StereoChebyshevIBandPass_process},
    { "ProcessBlock", _wrap_StereoChebyshevIBandPass_ProcessBlock},
    { "getParams", _wrap_StereoChebyshevIBandPass_getParams},
    { "getParam", _wrap_StereoChebyshevIBandPass_getParam},
    { "setParam", _wrap_StereoChebyshevIBandPass_setParam},
    { "findParamId", _wrap_StereoChebyshevIBandPass_findParamId},
    { "setParamById", _wrap_StereoChebyshevIBandPass_setParamById},
    { "setParams", _wrap_StereoChebyshevIBandPass_setParams},
    { "copyParamsFrom", _wrap_StereoChebyshevIBandPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoChebyshevIBandPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoChebyshevIBandPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoChebyshevIBandPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoChebyshevIBandPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoChebyshevIBandPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoChebyshevIBandPass_Sf_SwigStatic = {
    "StereoChebyshevIBandPass",
    swig_StereoChebyshevIBandPass_Sf_SwigStatic_methods,
    swig_StereoChebyshevIBandPass_Sf_SwigStatic_attributes,
    swig_StereoChebyshevIBandPass_Sf_SwigStatic_constants,
    swig_StereoChebyshevIBandPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoChebyshevIBandPass_bases[] = {0};
static const char *swig_StereoChebyshevIBandPass_base_names[] = {0};
static swig_lua_class _wrap_class_StereoChebyshevIBandPass = { "StereoChebyshevIBandPass", "StereoChebyshevIBandPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoChebyshevIBandPass, swig_delete_StereoChebyshevIBandPass, swig_StereoChebyshevIBandPass_methods, swig_StereoChebyshevIBandPass_attributes, &swig_StereoChebyshevIBandPass_Sf_SwigStatic, swig_StereoChebyshevIBandPass_meta, swig_StereoChebyshevIBandPass_bases, swig_StereoChebyshevIBandPass_base_names };

static int _wrap_new_ChebyshevIBandStop(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandStop_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIBandStop_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandStop_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIBandStop_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandStop_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevIBandStop_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevIBandStop_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevIBandStop_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevIBandStop_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevIBandStop_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevIBandStop_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandStop_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIBandStop_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIBandStop_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandStop_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevIBandStop_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevIBandStop_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandStop_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIBandStop_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIBandStop_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandStop_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIBandStop_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIBandStop_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIBandStop_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIBandStop_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevIBandStop_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevIBandStop_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandStop_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandStop_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandStop_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandStop_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandStop_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandStop_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandStop_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandStop_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandStop_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandStop_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandStop_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("ChebyshevIBandStop_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandStop_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandStop_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("ChebyshevIBandStop_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChebyshevIBandStop(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ChebyshevIBandStop(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ChebyshevIBandStop);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ChebyshevIBandStop_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChebyshevIBandStop_methods[]= {
    { "process", _wrap_ChebyshevIBandStop_process},
    { "ProcessBlock", _wrap_ChebyshevIBandStop_ProcessBlock},
    { "getParams", _wrap_ChebyshevIBandStop_getParams},
    { "getParam", _wrap_ChebyshevIBandStop_getParam},
    { "setParam", _wrap_ChebyshevIBandStop_setParam},
    { "findParamId", _wrap_ChebyshevIBandStop_findParamId},
    { "setParamById", _wrap_ChebyshevIBandStop_setParamById},
    { "setParams", _wrap_ChebyshevIBandStop_setParams},
    { "copyParamsFrom", _wrap_ChebyshevIBandStop_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_ChebyshevIBandStop_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChebyshevIBandStop_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChebyshevIBandStop_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChebyshevIBandStop_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChebyshevIBandStop_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChebyshevIBandStop_SwigStatic = {
    "ChebyshevIBandStop",
    swig_ChebyshevIBandStop_SwigStatic_methods,
    swig_ChebyshevIBandStop_SwigStatic_attributes,
    swig_ChebyshevIBandStop_SwigStatic_constants,
    swig_ChebyshevIBandStop_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChebyshevIBandStop_bases[] = {0};
static const char *swig_ChebyshevIBandStop_base_names[] = {0};
static swig_lua_class _wrap_class_ChebyshevIBandStop = { "ChebyshevIBandStop", "ChebyshevIBandStop", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t,_proxy__wrap_new_ChebyshevIBandStop, swig_delete_ChebyshevIBandStop, swig_ChebyshevIBandStop_methods, swig_ChebyshevIBandStop_attributes, &swig_ChebyshevIBandStop_SwigStatic, swig_ChebyshevIBandStop_meta, swig_ChebyshevIBandStop_bases, swig_ChebyshevIBandStop_base_names };

static int _wrap_new_StereoChebyshevIBandStop(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandStop_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIBandStop_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandStop_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIBandStop_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandStop_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevIBandStop_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevIBandStop_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevIBandStop_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevIBandStop_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIBandStop_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIBandStop_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandStop_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIBandStop_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIBandStop_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandStop_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIBandStop_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIBandStop_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandStop_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIBandStop_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIBandStop_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandStop_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIBandStop_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIBandStop_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIBandStop_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIBandStop_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevIBandStop_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevIBandStop_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandStop_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandStop_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandStop_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandStop_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandStop_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandStop_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandStop_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandStop_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandStop_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandStop_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandStop_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoChebyshevIBandStop_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandStop_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandStop_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoChebyshevIBandStop_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoChebyshevIBandStop(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoChebyshevIBandStop(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoChebyshevIBandStop);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoChebyshevIBandStop_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoChebyshevIBandStop_methods[]= {
    { "process", _wrap_StereoChebyshevIBandStop_process},
    { "ProcessBlock", _wrap_StereoChebyshevIBandStop_ProcessBlock},
    { "getParams", _wrap_StereoChebyshevIBandStop_getParams},
    { "getParam", _wrap_StereoChebyshevIBandStop_getParam},
    { "setParam", _wrap_StereoChebyshevIBandStop_setParam},
    { "findParamId", _wrap_StereoChebyshevIBandStop_findParamId},
    { "setParamById", _wrap_StereoChebyshevIBandStop_setParamById},
    { "setParams", _wrap_StereoChebyshevIBandStop_setParams},
    { "copyParamsFrom", _wrap_StereoChebyshevIBandStop_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoChebyshevIBandStop_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoChebyshevIBandStop_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoChebyshevIBandStop_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoChebyshevIBandStop_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoChebyshevIBandStop_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoChebyshevIBandStop_SwigStatic = {
    "StereoChebyshevIBandStop",
    swig_StereoChebyshevIBandStop_SwigStatic_methods,
    swig_StereoChebyshevIBandStop_SwigStatic_attributes,
    swig_StereoChebyshevIBandStop_SwigStatic_constants,
    swig_StereoChebyshevIBandStop_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoChebyshevIBandStop_bases[] = {0};
static const char *swig_StereoChebyshevIBandStop_base_names[] = {0};
static swig_lua_class _wrap_class_StereoChebyshevIBandStop = { "StereoChebyshevIBandStop", "StereoChebyshevIBandStop", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoChebyshevIBandStop, swig_delete_StereoChebyshevIBandStop, swig_StereoChebyshevIBandStop_methods, swig_StereoChebyshevIBandStop_attributes, &swig_StereoChebyshevIBandStop_SwigStatic, swig_StereoChebyshevIBandStop_meta, swig_StereoChebyshevIBandStop_bases, swig_StereoChebyshevIBandStop_base_names };

static int _wrap_new_ChebyshevILowPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevILowPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevILowPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevILowPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevILowPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevILowPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevILowPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevILowPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevILowPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevILowPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevILowPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevILowPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevILowPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevILowPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevILowPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevILowPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevILowPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevILowPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevILowPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevILowPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevILowPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("ChebyshevILowPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("ChebyshevILowPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChebyshevILowPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ChebyshevILowPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ChebyshevILowPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ChebyshevILowPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChebyshevILowPass_methods[]= {
    { "process", _wrap_ChebyshevILowPass_process},
    { "ProcessBlock", _wrap_ChebyshevILowPass_ProcessBlock},
    { "getParams", _wrap_ChebyshevILowPass_getParams},
    { "getParam", _wrap_ChebyshevILowPass_getParam},
    { "setParam", _wrap_ChebyshevILowPass_setParam},
    { "findParamId", _wrap_ChebyshevILowPass_findParamId},
    { "setParamById", _wrap_ChebyshevILowPass_setParamById},
    { "setParams", _wrap_ChebyshevILowPass_setParams},
    { "copyParamsFrom", _wrap_ChebyshevILowPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_ChebyshevILowPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChebyshevILowPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChebyshevILowPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChebyshevILowPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChebyshevILowPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChebyshevILowPass_Sf_SwigStatic = {
    "ChebyshevILowPass",
    swig_ChebyshevILowPass_Sf_SwigStatic_methods,
    swig_ChebyshevILowPass_Sf_SwigStatic_attributes,
    swig_ChebyshevILowPass_Sf_SwigStatic_constants,
    swig_ChebyshevILowPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChebyshevILowPass_bases[] = {0};
static const char *swig_ChebyshevILowPass_base_names[] = {0};
static swig_lua_class _wrap_class_ChebyshevILowPass = { "ChebyshevILowPass", "ChebyshevILowPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t,_proxy__wrap_new_ChebyshevILowPass, swig_delete_ChebyshevILowPass, swig_ChebyshevILowPass_methods, swig_ChebyshevILowPass_attributes, &swig_ChebyshevILowPass_Sf_SwigStatic, swig_ChebyshevILowPass_meta, swig_ChebyshevILowPass_bases, swig_ChebyshevILowPass_base_names };

static int _wrap_new_StereoChebyshevILowPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevILowPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevILowPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevILowPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevILowPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevILowPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevILowPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevILowPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevILowPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevILowPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevILowPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevILowPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevILowPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevILowPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevILowPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevILowPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevILowPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevILowPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevILowPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevILowPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevILowPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoChebyshevILowPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoChebyshevILowPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoChebyshevILowPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoChebyshevILowPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoChebyshevILowPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoChebyshevILowPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoChebyshevILowPass_methods[]= {
    { "process", _wrap_StereoChebyshevILowPass_process},
    { "ProcessBlock", _wrap_StereoChebyshevILowPass_ProcessBlock},
    { "getParams", _wrap_StereoChebyshevILowPass_getParams},
    { "getParam", _wrap_StereoChebyshevILowPass_getParam},
    { "setParam", _wrap_StereoChebyshevILowPass_setParam},
    { "findParamId", _wrap_StereoChebyshevILowPass_findParamId},
    { "setParamById", _wrap_StereoChebyshevILowPass_setParamById},
    { "setParams", _wrap_StereoChebyshevILowPass_setParams},
    { "copyParamsFrom", _wrap_StereoChebyshevILowPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoChebyshevILowPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoChebyshevILowPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoChebyshevILowPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoChebyshevILowPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoChebyshevILowPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoChebyshevILowPass_Sf_SwigStatic = {
    "StereoChebyshevILowPass",
    swig_StereoChebyshevILowPass_Sf_SwigStatic_methods,
    swig_StereoChebyshevILowPass_Sf_SwigStatic_attributes,
    swig_StereoChebyshevILowPass_Sf_SwigStatic_constants,
    swig_StereoChebyshevILowPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoChebyshevILowPass_bases[] = {0};
static const char *swig_StereoChebyshevILowPass_base_names[] = {0};
static swig_lua_class _wrap_class_StereoChebyshevILowPass = { "StereoChebyshevILowPass", "StereoChebyshevILowPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoChebyshevILowPass, swig_delete_StereoChebyshevILowPass, swig_StereoChebyshevILowPass_methods, swig_StereoChebyshevILowPass_attributes, &swig_StereoChebyshevILowPass_Sf_SwigStatic, swig_StereoChebyshevILowPass_meta, swig_StereoChebyshevILowPass_bases, swig_StereoChebyshevILowPass_base_names };

static int _wrap_new_ChebyshevIHighPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIHighPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIHighPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevIHighPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevIHighPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevIHighPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevIHighPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevIHighPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevIHighPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIHighPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIHighPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevIHighPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevIHighPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIHighPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIHighPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIHighPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIHighPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIHighPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIHighPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevIHighPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevIHighPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("ChebyshevIHighPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("ChebyshevIHighPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChebyshevIHighPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ChebyshevIHighPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ChebyshevIHighPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ChebyshevIHighPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChebyshevIHighPass_methods[]= {
    { "process", _wrap_ChebyshevIHighPass_process},
    { "ProcessBlock", _wrap_ChebyshevIHighPass_ProcessBlock},
    { "getParams", _wrap_ChebyshevIHighPass_getParams},
    { "getParam", _wrap_ChebyshevIHighPass_getParam},
    { "setParam", _wrap_ChebyshevIHighPass_setParam},
    { "findParamId", _wrap_ChebyshevIHighPass_findParamId},
    { "setParamById", _wrap_ChebyshevIHighPass_setParamById},
    { "setParams", _wrap_ChebyshevIHighPass_setParams},
    { "copyParamsFrom", _wrap_ChebyshevIHighPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_ChebyshevIHighPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChebyshevIHighPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChebyshevIHighPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChebyshevIHighPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChebyshevIHighPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChebyshevIHighPass_Sf_SwigStatic = {
    "ChebyshevIHighPass",
    swig_ChebyshevIHighPass_Sf_SwigStatic_methods,
    swig_ChebyshevIHighPass_Sf_SwigStatic_attributes,
    swig_ChebyshevIHighPass_Sf_SwigStatic_constants,
    swig_ChebyshevIHighPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChebyshevIHighPass_bases[] = {0};
static const char *swig_ChebyshevIHighPass_base_names[] = {0};
static swig_lua_class _wrap_class_ChebyshevIHighPass = { "ChebyshevIHighPass", "ChebyshevIHighPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t,_proxy__wrap_new_ChebyshevIHighPass, swig_delete_ChebyshevIHighPass, swig_ChebyshevIHighPass_methods, swig_ChebyshevIHighPass_attributes, &swig_ChebyshevIHighPass_Sf_SwigStatic, swig_ChebyshevIHighPass_meta, swig_ChebyshevIHighPass_bases, swig_ChebyshevIHighPass_base_names };

static int _wrap_new_StereoChebyshevIHighPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIHighPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIHighPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevIHighPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevIHighPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevIHighPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevIHighPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIHighPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIHighPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIHighPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIHighPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIHighPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIHighPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIHighPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIHighPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIHighPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIHighPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIHighPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIHighPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevIHighPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevIHighPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoChebyshevIHighPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoChebyshevIHighPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoChebyshevIHighPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoChebyshevIHighPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoChebyshevIHighPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoChebyshevIHighPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoChebyshevIHighPass_methods[]= {
    { "process", _wrap_StereoChebyshevIHighPass_process},
    { "ProcessBlock", _wrap_StereoChebyshevIHighPass_ProcessBlock},
    { "getParams", _wrap_StereoChebyshevIHighPass_getParams},
    { "getParam", _wrap_StereoChebyshevIHighPass_getParam},
    { "setParam", _wrap_StereoChebyshevIHighPass_setParam},
    { "findParamId", _wrap_StereoChebyshevIHighPass_findParamId},
    { "setParamById", _wrap_StereoChebyshevIHighPass_setParamById},
    { "setParams", _wrap_StereoChebyshevIHighPass_setParams},
    { "copyParamsFrom", _wrap_StereoChebyshevIHighPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoChebyshevIHighPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoChebyshevIHighPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoChebyshevIHighPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoChebyshevIHighPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoChebyshevIHighPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoChebyshevIHighPass_Sf_SwigStatic = {
    "StereoChebyshevIHighPass",
    swig_StereoChebyshevIHighPass_Sf_SwigStatic_methods,
    swig_StereoChebyshevIHighPass_Sf_SwigStatic_attributes,
    swig_StereoChebyshevIHighPass_Sf_SwigStatic_constants,
    swig_StereoChebyshevIHighPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoChebyshevIHighPass_bases[] = {0};
static const char *swig_StereoChebyshevIHighPass_base_names[] = {0};
static swig_lua_class _wrap_class_StereoChebyshevIHighPass = { "StereoChebyshevIHighPass", "StereoChebyshevIHighPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoChebyshevIHighPass, swig_delete_StereoChebyshevIHighPass, swig_StereoChebyshevIHighPass_methods, swig_StereoChebyshevIHighPass_attributes, &swig_StereoChebyshevIHighPass_Sf_SwigStatic, swig_StereoChebyshevIHighPass_meta, swig_StereoChebyshevIHighPass_bases, swig_StereoChebyshevIHighPass_base_names };

static int _wrap_new_ChebyshevIBandShelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandShelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIBandShelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandShelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIBandShelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandShelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevIBandShelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevIBandShelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevIBandShelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevIBandShelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevIBandShelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevIBandShelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandShelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIBandShelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIBandShelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandShelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevIBandShelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevIBandShelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandShelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIBandShelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIBandShelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandShelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIBandShelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIBandShelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIBandShelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIBandShelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevIBandShelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevIBandShelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandShelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandShelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandShelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandShelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandShelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandShelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandShelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandShelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandShelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandShelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandShelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("ChebyshevIBandShelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIBandShelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIBandShelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("ChebyshevIBandShelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChebyshevIBandShelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ChebyshevIBandShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ChebyshevIBandShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ChebyshevIBandShelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChebyshevIBandShelf_methods[]= {
    { "process", _wrap_ChebyshevIBandShelf_process},
    { "ProcessBlock", _wrap_ChebyshevIBandShelf_ProcessBlock},
    { "getParams", _wrap_ChebyshevIBandShelf_getParams},
    { "getParam", _wrap_ChebyshevIBandShelf_getParam},
    { "setParam", _wrap_ChebyshevIBandShelf_setParam},
    { "findParamId", _wrap_ChebyshevIBandShelf_findParamId},
    { "setParamById", _wrap_ChebyshevIBandShelf_setParamById},
    { "setParams", _wrap_ChebyshevIBandShelf_setParams},
    { "copyParamsFrom", _wrap_ChebyshevIBandShelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_ChebyshevIBandShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChebyshevIBandShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChebyshevIBandShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChebyshevIBandShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChebyshevIBandShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChebyshevIBandShelf_Sf_SwigStatic = {
    "ChebyshevIBandShelf",
    swig_ChebyshevIBandShelf_Sf_SwigStatic_methods,
    swig_ChebyshevIBandShelf_Sf_SwigStatic_attributes,
    swig_ChebyshevIBandShelf_Sf_SwigStatic_constants,
    swig_ChebyshevIBandShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChebyshevIBandShelf_bases[] = {0};
static const char *swig_ChebyshevIBandShelf_base_names[] = {0};
static swig_lua_class _wrap_class_ChebyshevIBandShelf = { "ChebyshevIBandShelf", "ChebyshevIBandShelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t,_proxy__wrap_new_ChebyshevIBandShelf, swig_delete_ChebyshevIBandShelf, swig_ChebyshevIBandShelf_methods, swig_ChebyshevIBandShelf_attributes, &swig_ChebyshevIBandShelf_Sf_SwigStatic, swig_ChebyshevIBandShelf_meta, swig_ChebyshevIBandShelf_bases, swig_ChebyshevIBandShelf_base_names };

static int _wrap_new_StereoChebyshevIBandShelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandShelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIBandShelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandShelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIBandShelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandShelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevIBandShelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevIBandShelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevIBandShelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevIBandShelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIBandShelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIBandShelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandShelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIBandShelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIBandShelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandShelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIBandShelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIBandShelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandShelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIBandShelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIBandShelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_BandShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandShelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIBandShelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIBandShelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIBandShelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIBandShelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevIBandShelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevIBandShelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandShelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandShelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandShelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandShelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandShelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandShelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandShelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandShelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandShelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandShelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandShelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoChebyshevIBandShelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIBandShelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIBandShelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoChebyshevIBandShelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoChebyshevIBandShelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoChebyshevIBandShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoChebyshevIBandShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoChebyshevIBandShelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoChebyshevIBandShelf_methods[]= {
    { "process", _wrap_StereoChebyshevIBandShelf_process},
    { "ProcessBlock", _wrap_StereoChebyshevIBandShelf_ProcessBlock},
    { "getParams", _wrap_StereoChebyshevIBandShelf_getParams},
    { "getParam", _wrap_StereoChebyshevIBandShelf_getParam},
    { "setParam", _wrap_StereoChebyshevIBandShelf_setParam},
    { "findParamId", _wrap_StereoChebyshevIBandShelf_findParamId},
    { "setParamById", _wrap_StereoChebyshevIBandShelf_setParamById},
    { "setParams", _wrap_StereoChebyshevIBandShelf_setParams},
    { "copyParamsFrom", _wrap_StereoChebyshevIBandShelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoChebyshevIBandShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoChebyshevIBandShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoChebyshevIBandShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoChebyshevIBandShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoChebyshevIBandShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoChebyshevIBandShelf_Sf_SwigStatic = {
    "StereoChebyshevIBandShelf",
    swig_StereoChebyshevIBandShelf_Sf_SwigStatic_methods,
    swig_StereoChebyshevIBandShelf_Sf_SwigStatic_attributes,
    swig_StereoChebyshevIBandShelf_Sf_SwigStatic_constants,
    swig_StereoChebyshevIBandShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoChebyshevIBandShelf_bases[] = {0};
static const char *swig_StereoChebyshevIBandShelf_base_names[] = {0};
static swig_lua_class _wrap_class_StereoChebyshevIBandShelf = { "StereoChebyshevIBandShelf", "StereoChebyshevIBandShelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoChebyshevIBandShelf, swig_delete_StereoChebyshevIBandShelf, swig_StereoChebyshevIBandShelf_methods, swig_StereoChebyshevIBandShelf_attributes, &swig_StereoChebyshevIBandShelf_Sf_SwigStatic, swig_StereoChebyshevIBandShelf_meta, swig_StereoChebyshevIBandShelf_bases, swig_StereoChebyshevIBandShelf_base_names };

static int _wrap_new_ChebyshevILowShelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowShelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevILowShelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowShelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevILowShelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowShelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevILowShelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevILowShelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevILowShelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevILowShelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevILowShelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevILowShelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowShelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevILowShelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevILowShelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowShelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevILowShelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevILowShelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowShelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevILowShelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevILowShelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowShelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevILowShelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevILowShelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevILowShelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevILowShelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevILowShelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevILowShelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowShelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowShelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowShelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowShelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowShelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowShelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowShelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowShelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowShelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowShelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowShelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("ChebyshevILowShelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowShelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevILowShelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("ChebyshevILowShelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChebyshevILowShelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ChebyshevILowShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ChebyshevILowShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ChebyshevILowShelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChebyshevILowShelf_methods[]= {
    { "process", _wrap_ChebyshevILowShelf_process},
    { "ProcessBlock", _wrap_ChebyshevILowShelf_ProcessBlock},
    { "getParams", _wrap_ChebyshevILowShelf_getParams},
    { "getParam", _wrap_ChebyshevILowShelf_getParam},
    { "setParam", _wrap_ChebyshevILowShelf_setParam},
    { "findParamId", _wrap_ChebyshevILowShelf_findParamId},
    { "setParamById", _wrap_ChebyshevILowShelf_setParamById},
    { "setParams", _wrap_ChebyshevILowShelf_setParams},
    { "copyParamsFrom", _wrap_ChebyshevILowShelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_ChebyshevILowShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChebyshevILowShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChebyshevILowShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChebyshevILowShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChebyshevILowShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChebyshevILowShelf_Sf_SwigStatic = {
    "ChebyshevILowShelf",
    swig_ChebyshevILowShelf_Sf_SwigStatic_methods,
    swig_ChebyshevILowShelf_Sf_SwigStatic_attributes,
    swig_ChebyshevILowShelf_Sf_SwigStatic_constants,
    swig_ChebyshevILowShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChebyshevILowShelf_bases[] = {0};
static const char *swig_ChebyshevILowShelf_base_names[] = {0};
static swig_lua_class _wrap_class_ChebyshevILowShelf = { "ChebyshevILowShelf", "ChebyshevILowShelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t,_proxy__wrap_new_ChebyshevILowShelf, swig_delete_ChebyshevILowShelf, swig_ChebyshevILowShelf_methods, swig_ChebyshevILowShelf_attributes, &swig_ChebyshevILowShelf_Sf_SwigStatic, swig_ChebyshevILowShelf_meta, swig_ChebyshevILowShelf_bases, swig_ChebyshevILowShelf_base_names };

static int _wrap_new_StereoChebyshevILowShelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowShelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevILowShelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowShelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevILowShelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowShelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevILowShelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevILowShelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevILowShelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevILowShelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevILowShelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevILowShelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowShelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevILowShelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevILowShelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowShelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevILowShelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevILowShelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowShelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevILowShelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevILowShelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowShelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevILowShelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevILowShelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevILowShelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevILowShelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevILowShelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevILowShelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowShelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowShelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowShelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowShelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowShelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowShelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowShelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowShelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowShelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowShelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowShelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoChebyshevILowShelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevILowShelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevILowShelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoChebyshevILowShelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoChebyshevILowShelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoChebyshevILowShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoChebyshevILowShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoChebyshevILowShelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoChebyshevILowShelf_methods[]= {
    { "process", _wrap_StereoChebyshevILowShelf_process},
    { "ProcessBlock", _wrap_StereoChebyshevILowShelf_ProcessBlock},
    { "getParams", _wrap_StereoChebyshevILowShelf_getParams},
    { "getParam", _wrap_StereoChebyshevILowShelf_getParam},
    { "setParam", _wrap_StereoChebyshevILowShelf_setParam},
    { "findParamId", _wrap_StereoChebyshevILowShelf_findParamId},
    { "setParamById", _wrap_StereoChebyshevILowShelf_setParamById},
    { "setParams", _wrap_StereoChebyshevILowShelf_setParams},
    { "copyParamsFrom", _wrap_StereoChebyshevILowShelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoChebyshevILowShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoChebyshevILowShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoChebyshevILowShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoChebyshevILowShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoChebyshevILowShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoChebyshevILowShelf_Sf_SwigStatic = {
    "StereoChebyshevILowShelf",
    swig_StereoChebyshevILowShelf_Sf_SwigStatic_methods,
    swig_StereoChebyshevILowShelf_Sf_SwigStatic_attributes,
    swig_StereoChebyshevILowShelf_Sf_SwigStatic_constants,
    swig_StereoChebyshevILowShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoChebyshevILowShelf_bases[] = {0};
static const char *swig_StereoChebyshevILowShelf_base_names[] = {0};
static swig_lua_class _wrap_class_StereoChebyshevILowShelf = { "StereoChebyshevILowShelf", "StereoChebyshevILowShelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoChebyshevILowShelf, swig_delete_StereoChebyshevILowShelf, swig_StereoChebyshevILowShelf_methods, swig_StereoChebyshevILowShelf_attributes, &swig_StereoChebyshevILowShelf_Sf_SwigStatic, swig_StereoChebyshevILowShelf_meta, swig_StereoChebyshevILowShelf_bases, swig_StereoChebyshevILowShelf_base_names };

static int _wrap_new_ChebyshevIHighShelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighShelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIHighShelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighShelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIHighShelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighShelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevIHighShelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevIHighShelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevIHighShelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevIHighShelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevIHighShelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevIHighShelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighShelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIHighShelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIHighShelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighShelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevIHighShelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevIHighShelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighShelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIHighShelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIHighShelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighShelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIHighShelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIHighShelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIHighShelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIHighShelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevIHighShelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevIHighShelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighShelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighShelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighShelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighShelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighShelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighShelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighShelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighShelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighShelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighShelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighShelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("ChebyshevIHighShelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIHighShelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIHighShelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("ChebyshevIHighShelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChebyshevIHighShelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ChebyshevIHighShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ChebyshevIHighShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ChebyshevIHighShelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChebyshevIHighShelf_methods[]= {
    { "process", _wrap_ChebyshevIHighShelf_process},
    { "ProcessBlock", _wrap_ChebyshevIHighShelf_ProcessBlock},
    { "getParams", _wrap_ChebyshevIHighShelf_getParams},
    { "getParam", _wrap_ChebyshevIHighShelf_getParam},
    { "setParam", _wrap_ChebyshevIHighShelf_setParam},
    { "findParamId", _wrap_ChebyshevIHighShelf_findParamId},
    { "setParamById", _wrap_ChebyshevIHighShelf_setParamById},
    { "setParams", _wrap_ChebyshevIHighShelf_setParams},
    { "copyParamsFrom", _wrap_ChebyshevIHighShelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_ChebyshevIHighShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChebyshevIHighShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChebyshevIHighShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChebyshevIHighShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChebyshevIHighShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChebyshevIHighShelf_Sf_SwigStatic = {
    "ChebyshevIHighShelf",
    swig_ChebyshevIHighShelf_Sf_SwigStatic_methods,
    swig_ChebyshevIHighShelf_Sf_SwigStatic_attributes,
    swig_ChebyshevIHighShelf_Sf_SwigStatic_constants,
    swig_ChebyshevIHighShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChebyshevIHighShelf_bases[] = {0};
static const char *swig_ChebyshevIHighShelf_base_names[] = {0};
static swig_lua_class _wrap_class_ChebyshevIHighShelf = { "ChebyshevIHighShelf", "ChebyshevIHighShelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t,_proxy__wrap_new_ChebyshevIHighShelf, swig_delete_ChebyshevIHighShelf, swig_ChebyshevIHighShelf_methods, swig_ChebyshevIHighShelf_attributes, &swig_ChebyshevIHighShelf_Sf_SwigStatic, swig_ChebyshevIHighShelf_meta, swig_ChebyshevIHighShelf_bases, swig_ChebyshevIHighShelf_base_names };

static int _wrap_new_StereoChebyshevIHighSHelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighSHelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighSHelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIHighSHelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighSHelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighSHelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIHighSHelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighSHelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevIHighSHelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevIHighSHelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevIHighSHelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevIHighSHelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighSHelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIHighSHelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIHighSHelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighSHelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighSHelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIHighSHelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIHighSHelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighSHelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighSHelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIHighSHelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIHighSHelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighSHelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighSHelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIHighSHelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIHighSHelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevI_Design_HighShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighSHelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIHighSHelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIHighSHelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIHighSHelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIHighSHelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevIHighSHelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevIHighSHelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighSHelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighSHelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighSHelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighSHelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighSHelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighSHelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighSHelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighSHelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighSHelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighSHelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighSHelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoChebyshevIHighSHelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIHighSHelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIHighSHelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoChebyshevIHighSHelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoChebyshevIHighSHelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoChebyshevIHighSHelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoChebyshevIHighSHelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoChebyshevIHighSHelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoChebyshevIHighSHelf_methods[]= {
    { "process", _wrap_StereoChebyshevIHighSHelf_process},
    { "ProcessBlock", _wrap_StereoChebyshevIHighSHelf_ProcessBlock},
    { "getParams", _wrap_StereoChebyshevIHighSHelf_getParams},
    { "getParam", _wrap_StereoChebyshevIHighSHelf_getParam},
    { "setParam", _wrap_StereoChebyshevIHighSHelf_setParam},
    { "findParamId", _wrap_StereoChebyshevIHighSHelf_findParamId},
    { "setParamById", _wrap_StereoChebyshevIHighSHelf_setParamById},
    { "setParams", _wrap_StereoChebyshevIHighSHelf_setParams},
    { "copyParamsFrom", _wrap_StereoChebyshevIHighSHelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoChebyshevIHighSHelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoChebyshevIHighSHelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoChebyshevIHighSHelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoChebyshevIHighSHelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoChebyshevIHighSHelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoChebyshevIHighSHelf_Sf_SwigStatic = {
    "StereoChebyshevIHighSHelf",
    swig_StereoChebyshevIHighSHelf_Sf_SwigStatic_methods,
    swig_StereoChebyshevIHighSHelf_Sf_SwigStatic_attributes,
    swig_StereoChebyshevIHighSHelf_Sf_SwigStatic_constants,
    swig_StereoChebyshevIHighSHelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoChebyshevIHighSHelf_bases[] = {0};
static const char *swig_StereoChebyshevIHighSHelf_base_names[] = {0};
static swig_lua_class _wrap_class_StereoChebyshevIHighSHelf = { "StereoChebyshevIHighSHelf", "StereoChebyshevIHighSHelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoChebyshevIHighSHelf, swig_delete_StereoChebyshevIHighSHelf, swig_StereoChebyshevIHighSHelf_methods, swig_StereoChebyshevIHighSHelf_attributes, &swig_StereoChebyshevIHighSHelf_Sf_SwigStatic, swig_StereoChebyshevIHighSHelf_meta, swig_StereoChebyshevIHighSHelf_bases, swig_StereoChebyshevIHighSHelf_base_names };

static int _wrap_new_ChebyshevIIBandPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIIBandPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIIBandPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevIIBandPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevIIBandPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevIIBandPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevIIBandPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevIIBandPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevIIBandPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIIBandPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIIBandPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevIIBandPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevIIBandPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIIBandPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIIBandPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIIBandPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIIBandPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIIBandPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIIBandPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevIIBandPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevIIBandPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("ChebyshevIIBandPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("ChebyshevIIBandPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChebyshevIIBandPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ChebyshevIIBandPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ChebyshevIIBandPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ChebyshevIIBandPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChebyshevIIBandPass_methods[]= {
    { "process", _wrap_ChebyshevIIBandPass_process},
    { "ProcessBlock", _wrap_ChebyshevIIBandPass_ProcessBlock},
    { "getParams", _wrap_ChebyshevIIBandPass_getParams},
    { "getParam", _wrap_ChebyshevIIBandPass_getParam},
    { "setParam", _wrap_ChebyshevIIBandPass_setParam},
    { "findParamId", _wrap_ChebyshevIIBandPass_findParamId},
    { "setParamById", _wrap_ChebyshevIIBandPass_setParamById},
    { "setParams", _wrap_ChebyshevIIBandPass_setParams},
    { "copyParamsFrom", _wrap_ChebyshevIIBandPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_ChebyshevIIBandPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChebyshevIIBandPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChebyshevIIBandPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChebyshevIIBandPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChebyshevIIBandPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChebyshevIIBandPass_Sf_SwigStatic = {
    "ChebyshevIIBandPass",
    swig_ChebyshevIIBandPass_Sf_SwigStatic_methods,
    swig_ChebyshevIIBandPass_Sf_SwigStatic_attributes,
    swig_ChebyshevIIBandPass_Sf_SwigStatic_constants,
    swig_ChebyshevIIBandPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChebyshevIIBandPass_bases[] = {0};
static const char *swig_ChebyshevIIBandPass_base_names[] = {0};
static swig_lua_class _wrap_class_ChebyshevIIBandPass = { "ChebyshevIIBandPass", "ChebyshevIIBandPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t,_proxy__wrap_new_ChebyshevIIBandPass, swig_delete_ChebyshevIIBandPass, swig_ChebyshevIIBandPass_methods, swig_ChebyshevIIBandPass_attributes, &swig_ChebyshevIIBandPass_Sf_SwigStatic, swig_ChebyshevIIBandPass_meta, swig_ChebyshevIIBandPass_bases, swig_ChebyshevIIBandPass_base_names };

static int _wrap_new_StereoChebyshevIIBandPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevIIBandPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevIIBandPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevIIBandPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevIIBandPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIIBandPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIIBandPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIIBandPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIIBandPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevIIBandPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevIIBandPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoChebyshevIIBandPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoChebyshevIIBandPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoChebyshevIIBandPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoChebyshevIIBandPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoChebyshevIIBandPass_methods[]= {
    { "process", _wrap_StereoChebyshevIIBandPass_process},
    { "ProcessBlock", _wrap_StereoChebyshevIIBandPass_ProcessBlock},
    { "getParams", _wrap_StereoChebyshevIIBandPass_getParams},
    { "getParam", _wrap_StereoChebyshevIIBandPass_getParam},
    { "setParam", _wrap_StereoChebyshevIIBandPass_setParam},
    { "findParamId", _wrap_StereoChebyshevIIBandPass_findParamId},
    { "setParamById", _wrap_StereoChebyshevIIBandPass_setParamById},
    { "setParams", _wrap_StereoChebyshevIIBandPass_setParams},
    { "copyParamsFrom", _wrap_StereoChebyshevIIBandPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoChebyshevIIBandPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoChebyshevIIBandPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoChebyshevIIBandPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoChebyshevIIBandPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoChebyshevIIBandPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoChebyshevIIBandPass_Sf_SwigStatic = {
    "StereoChebyshevIIBandPass",
    swig_StereoChebyshevIIBandPass_Sf_SwigStatic_methods,
    swig_StereoChebyshevIIBandPass_Sf_SwigStatic_attributes,
    swig_StereoChebyshevIIBandPass_Sf_SwigStatic_constants,
    swig_StereoChebyshevIIBandPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoChebyshevIIBandPass_bases[] = {0};
static const char *swig_StereoChebyshevIIBandPass_base_names[] = {0};
static swig_lua_class _wrap_class_StereoChebyshevIIBandPass = { "StereoChebyshevIIBandPass", "StereoChebyshevIIBandPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoChebyshevIIBandPass, swig_delete_StereoChebyshevIIBandPass, swig_StereoChebyshevIIBandPass_methods, swig_StereoChebyshevIIBandPass_attributes, &swig_StereoChebyshevIIBandPass_Sf_SwigStatic, swig_StereoChebyshevIIBandPass_meta, swig_StereoChebyshevIIBandPass_bases, swig_StereoChebyshevIIBandPass_base_names };

static int _wrap_new_ChebyshevIIBandStop(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandStop_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIIBandStop_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandStop_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIIBandStop_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandStop_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevIIBandStop_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevIIBandStop_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevIIBandStop_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevIIBandStop_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevIIBandStop_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevIIBandStop_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandStop_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIIBandStop_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIIBandStop_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandStop_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevIIBandStop_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevIIBandStop_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandStop_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIIBandStop_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIIBandStop_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandStop_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIIBandStop_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIIBandStop_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIIBandStop_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIIBandStop_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevIIBandStop_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevIIBandStop_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandStop_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandStop_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandStop_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandStop_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandStop_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandStop_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandStop_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandStop_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandStop_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandStop_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandStop_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("ChebyshevIIBandStop_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandStop_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandStop_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("ChebyshevIIBandStop_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChebyshevIIBandStop(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ChebyshevIIBandStop(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ChebyshevIIBandStop);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ChebyshevIIBandStop_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChebyshevIIBandStop_methods[]= {
    { "process", _wrap_ChebyshevIIBandStop_process},
    { "ProcessBlock", _wrap_ChebyshevIIBandStop_ProcessBlock},
    { "getParams", _wrap_ChebyshevIIBandStop_getParams},
    { "getParam", _wrap_ChebyshevIIBandStop_getParam},
    { "setParam", _wrap_ChebyshevIIBandStop_setParam},
    { "findParamId", _wrap_ChebyshevIIBandStop_findParamId},
    { "setParamById", _wrap_ChebyshevIIBandStop_setParamById},
    { "setParams", _wrap_ChebyshevIIBandStop_setParams},
    { "copyParamsFrom", _wrap_ChebyshevIIBandStop_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_ChebyshevIIBandStop_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChebyshevIIBandStop_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChebyshevIIBandStop_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChebyshevIIBandStop_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChebyshevIIBandStop_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChebyshevIIBandStop_SwigStatic = {
    "ChebyshevIIBandStop",
    swig_ChebyshevIIBandStop_SwigStatic_methods,
    swig_ChebyshevIIBandStop_SwigStatic_attributes,
    swig_ChebyshevIIBandStop_SwigStatic_constants,
    swig_ChebyshevIIBandStop_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChebyshevIIBandStop_bases[] = {0};
static const char *swig_ChebyshevIIBandStop_base_names[] = {0};
static swig_lua_class _wrap_class_ChebyshevIIBandStop = { "ChebyshevIIBandStop", "ChebyshevIIBandStop", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t,_proxy__wrap_new_ChebyshevIIBandStop, swig_delete_ChebyshevIIBandStop, swig_ChebyshevIIBandStop_methods, swig_ChebyshevIIBandStop_attributes, &swig_ChebyshevIIBandStop_SwigStatic, swig_ChebyshevIIBandStop_meta, swig_ChebyshevIIBandStop_bases, swig_ChebyshevIIBandStop_base_names };

static int _wrap_new_StereoChebyshevIIBandStop(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandStop_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandStop_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandStop_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandStop_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandStop_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevIIBandStop_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevIIBandStop_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevIIBandStop_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevIIBandStop_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandStop_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandStop_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandStop_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandStop_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandStop_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandStop_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandStop_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandStop_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandStop_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandStop_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandStop_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandStop_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIIBandStop_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIIBandStop_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIIBandStop_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIIBandStop_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevIIBandStop_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevIIBandStop_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandStop_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandStop_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandStop_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandStop_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandStop_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandStop_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandStop_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandStop_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandStop_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandStop_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandStop_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandStop_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandStop_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandStop_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandStop_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoChebyshevIIBandStop(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoChebyshevIIBandStop(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoChebyshevIIBandStop);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoChebyshevIIBandStop_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoChebyshevIIBandStop_methods[]= {
    { "process", _wrap_StereoChebyshevIIBandStop_process},
    { "ProcessBlock", _wrap_StereoChebyshevIIBandStop_ProcessBlock},
    { "getParams", _wrap_StereoChebyshevIIBandStop_getParams},
    { "getParam", _wrap_StereoChebyshevIIBandStop_getParam},
    { "setParam", _wrap_StereoChebyshevIIBandStop_setParam},
    { "findParamId", _wrap_StereoChebyshevIIBandStop_findParamId},
    { "setParamById", _wrap_StereoChebyshevIIBandStop_setParamById},
    { "setParams", _wrap_StereoChebyshevIIBandStop_setParams},
    { "copyParamsFrom", _wrap_StereoChebyshevIIBandStop_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoChebyshevIIBandStop_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoChebyshevIIBandStop_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoChebyshevIIBandStop_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoChebyshevIIBandStop_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoChebyshevIIBandStop_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoChebyshevIIBandStop_SwigStatic = {
    "StereoChebyshevIIBandStop",
    swig_StereoChebyshevIIBandStop_SwigStatic_methods,
    swig_StereoChebyshevIIBandStop_SwigStatic_attributes,
    swig_StereoChebyshevIIBandStop_SwigStatic_constants,
    swig_StereoChebyshevIIBandStop_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoChebyshevIIBandStop_bases[] = {0};
static const char *swig_StereoChebyshevIIBandStop_base_names[] = {0};
static swig_lua_class _wrap_class_StereoChebyshevIIBandStop = { "StereoChebyshevIIBandStop", "StereoChebyshevIIBandStop", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoChebyshevIIBandStop, swig_delete_StereoChebyshevIIBandStop, swig_StereoChebyshevIIBandStop_methods, swig_StereoChebyshevIIBandStop_attributes, &swig_StereoChebyshevIIBandStop_SwigStatic, swig_StereoChebyshevIIBandStop_meta, swig_StereoChebyshevIIBandStop_bases, swig_StereoChebyshevIIBandStop_base_names };

static int _wrap_new_ChebyshevIILowPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIILowPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIILowPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevIILowPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevIILowPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevIILowPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevIILowPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevIILowPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevIILowPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIILowPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIILowPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevIILowPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevIILowPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIILowPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIILowPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIILowPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIILowPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIILowPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIILowPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevIILowPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevIILowPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("ChebyshevIILowPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("ChebyshevIILowPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChebyshevIILowPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ChebyshevIILowPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ChebyshevIILowPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ChebyshevIILowPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChebyshevIILowPass_methods[]= {
    { "process", _wrap_ChebyshevIILowPass_process},
    { "ProcessBlock", _wrap_ChebyshevIILowPass_ProcessBlock},
    { "getParams", _wrap_ChebyshevIILowPass_getParams},
    { "getParam", _wrap_ChebyshevIILowPass_getParam},
    { "setParam", _wrap_ChebyshevIILowPass_setParam},
    { "findParamId", _wrap_ChebyshevIILowPass_findParamId},
    { "setParamById", _wrap_ChebyshevIILowPass_setParamById},
    { "setParams", _wrap_ChebyshevIILowPass_setParams},
    { "copyParamsFrom", _wrap_ChebyshevIILowPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_ChebyshevIILowPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChebyshevIILowPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChebyshevIILowPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChebyshevIILowPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChebyshevIILowPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChebyshevIILowPass_Sf_SwigStatic = {
    "ChebyshevIILowPass",
    swig_ChebyshevIILowPass_Sf_SwigStatic_methods,
    swig_ChebyshevIILowPass_Sf_SwigStatic_attributes,
    swig_ChebyshevIILowPass_Sf_SwigStatic_constants,
    swig_ChebyshevIILowPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChebyshevIILowPass_bases[] = {0};
static const char *swig_ChebyshevIILowPass_base_names[] = {0};
static swig_lua_class _wrap_class_ChebyshevIILowPass = { "ChebyshevIILowPass", "ChebyshevIILowPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t,_proxy__wrap_new_ChebyshevIILowPass, swig_delete_ChebyshevIILowPass, swig_ChebyshevIILowPass_methods, swig_ChebyshevIILowPass_attributes, &swig_ChebyshevIILowPass_Sf_SwigStatic, swig_ChebyshevIILowPass_meta, swig_ChebyshevIILowPass_bases, swig_ChebyshevIILowPass_base_names };

static int _wrap_new_StereoChebyshevIILowPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIILowPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIILowPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevIILowPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevIILowPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevIILowPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevIILowPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIILowPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIILowPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIILowPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIILowPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIILowPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIILowPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIILowPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIILowPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIILowPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIILowPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIILowPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIILowPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevIILowPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevIILowPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoChebyshevIILowPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoChebyshevIILowPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoChebyshevIILowPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoChebyshevIILowPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoChebyshevIILowPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoChebyshevIILowPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoChebyshevIILowPass_methods[]= {
    { "process", _wrap_StereoChebyshevIILowPass_process},
    { "ProcessBlock", _wrap_StereoChebyshevIILowPass_ProcessBlock},
    { "getParams", _wrap_StereoChebyshevIILowPass_getParams},
    { "getParam", _wrap_StereoChebyshevIILowPass_getParam},
    { "setParam", _wrap_StereoChebyshevIILowPass_setParam},
    { "findParamId", _wrap_StereoChebyshevIILowPass_findParamId},
    { "setParamById", _wrap_StereoChebyshevIILowPass_setParamById},
    { "setParams", _wrap_StereoChebyshevIILowPass_setParams},
    { "copyParamsFrom", _wrap_StereoChebyshevIILowPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoChebyshevIILowPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoChebyshevIILowPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoChebyshevIILowPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoChebyshevIILowPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoChebyshevIILowPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoChebyshevIILowPass_Sf_SwigStatic = {
    "StereoChebyshevIILowPass",
    swig_StereoChebyshevIILowPass_Sf_SwigStatic_methods,
    swig_StereoChebyshevIILowPass_Sf_SwigStatic_attributes,
    swig_StereoChebyshevIILowPass_Sf_SwigStatic_constants,
    swig_StereoChebyshevIILowPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoChebyshevIILowPass_bases[] = {0};
static const char *swig_StereoChebyshevIILowPass_base_names[] = {0};
static swig_lua_class _wrap_class_StereoChebyshevIILowPass = { "StereoChebyshevIILowPass", "StereoChebyshevIILowPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoChebyshevIILowPass, swig_delete_StereoChebyshevIILowPass, swig_StereoChebyshevIILowPass_methods, swig_StereoChebyshevIILowPass_attributes, &swig_StereoChebyshevIILowPass_Sf_SwigStatic, swig_StereoChebyshevIILowPass_meta, swig_StereoChebyshevIILowPass_bases, swig_StereoChebyshevIILowPass_base_names };

static int _wrap_new_ChebyshevIIHighPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIIHighPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIIHighPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevIIHighPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevIIHighPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevIIHighPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevIIHighPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevIIHighPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevIIHighPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIIHighPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIIHighPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevIIHighPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevIIHighPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIIHighPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIIHighPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIIHighPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIIHighPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIIHighPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIIHighPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevIIHighPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevIIHighPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("ChebyshevIIHighPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("ChebyshevIIHighPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChebyshevIIHighPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ChebyshevIIHighPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ChebyshevIIHighPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ChebyshevIIHighPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChebyshevIIHighPass_methods[]= {
    { "process", _wrap_ChebyshevIIHighPass_process},
    { "ProcessBlock", _wrap_ChebyshevIIHighPass_ProcessBlock},
    { "getParams", _wrap_ChebyshevIIHighPass_getParams},
    { "getParam", _wrap_ChebyshevIIHighPass_getParam},
    { "setParam", _wrap_ChebyshevIIHighPass_setParam},
    { "findParamId", _wrap_ChebyshevIIHighPass_findParamId},
    { "setParamById", _wrap_ChebyshevIIHighPass_setParamById},
    { "setParams", _wrap_ChebyshevIIHighPass_setParams},
    { "copyParamsFrom", _wrap_ChebyshevIIHighPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_ChebyshevIIHighPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChebyshevIIHighPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChebyshevIIHighPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChebyshevIIHighPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChebyshevIIHighPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChebyshevIIHighPass_Sf_SwigStatic = {
    "ChebyshevIIHighPass",
    swig_ChebyshevIIHighPass_Sf_SwigStatic_methods,
    swig_ChebyshevIIHighPass_Sf_SwigStatic_attributes,
    swig_ChebyshevIIHighPass_Sf_SwigStatic_constants,
    swig_ChebyshevIIHighPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChebyshevIIHighPass_bases[] = {0};
static const char *swig_ChebyshevIIHighPass_base_names[] = {0};
static swig_lua_class _wrap_class_ChebyshevIIHighPass = { "ChebyshevIIHighPass", "ChebyshevIIHighPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t,_proxy__wrap_new_ChebyshevIIHighPass, swig_delete_ChebyshevIIHighPass, swig_ChebyshevIIHighPass_methods, swig_ChebyshevIIHighPass_attributes, &swig_ChebyshevIIHighPass_Sf_SwigStatic, swig_ChebyshevIIHighPass_meta, swig_ChebyshevIIHighPass_bases, swig_ChebyshevIIHighPass_base_names };

static int _wrap_new_StereoChebyshevIIHighPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevIIHighPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevIIHighPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevIIHighPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevIIHighPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIIHighPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIIHighPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIIHighPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIIHighPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevIIHighPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevIIHighPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoChebyshevIIHighPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoChebyshevIIHighPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoChebyshevIIHighPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoChebyshevIIHighPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoChebyshevIIHighPass_methods[]= {
    { "process", _wrap_StereoChebyshevIIHighPass_process},
    { "ProcessBlock", _wrap_StereoChebyshevIIHighPass_ProcessBlock},
    { "getParams", _wrap_StereoChebyshevIIHighPass_getParams},
    { "getParam", _wrap_StereoChebyshevIIHighPass_getParam},
    { "setParam", _wrap_StereoChebyshevIIHighPass_setParam},
    { "findParamId", _wrap_StereoChebyshevIIHighPass_findParamId},
    { "setParamById", _wrap_StereoChebyshevIIHighPass_setParamById},
    { "setParams", _wrap_StereoChebyshevIIHighPass_setParams},
    { "copyParamsFrom", _wrap_StereoChebyshevIIHighPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoChebyshevIIHighPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoChebyshevIIHighPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoChebyshevIIHighPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoChebyshevIIHighPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoChebyshevIIHighPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoChebyshevIIHighPass_Sf_SwigStatic = {
    "StereoChebyshevIIHighPass",
    swig_StereoChebyshevIIHighPass_Sf_SwigStatic_methods,
    swig_StereoChebyshevIIHighPass_Sf_SwigStatic_attributes,
    swig_StereoChebyshevIIHighPass_Sf_SwigStatic_constants,
    swig_StereoChebyshevIIHighPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoChebyshevIIHighPass_bases[] = {0};
static const char *swig_StereoChebyshevIIHighPass_base_names[] = {0};
static swig_lua_class _wrap_class_StereoChebyshevIIHighPass = { "StereoChebyshevIIHighPass", "StereoChebyshevIIHighPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoChebyshevIIHighPass, swig_delete_StereoChebyshevIIHighPass, swig_StereoChebyshevIIHighPass_methods, swig_StereoChebyshevIIHighPass_attributes, &swig_StereoChebyshevIIHighPass_Sf_SwigStatic, swig_StereoChebyshevIIHighPass_meta, swig_StereoChebyshevIIHighPass_bases, swig_StereoChebyshevIIHighPass_base_names };

static int _wrap_new_ChebyshevIIBandShelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandShelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIIBandShelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandShelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIIBandShelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandShelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevIIBandShelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevIIBandShelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevIIBandShelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevIIBandShelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevIIBandShelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevIIBandShelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandShelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIIBandShelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIIBandShelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandShelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevIIBandShelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevIIBandShelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandShelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIIBandShelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIIBandShelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandShelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIIBandShelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIIBandShelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIIBandShelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIIBandShelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevIIBandShelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevIIBandShelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandShelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandShelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandShelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandShelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandShelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandShelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandShelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandShelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandShelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandShelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandShelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("ChebyshevIIBandShelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIBandShelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIBandShelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("ChebyshevIIBandShelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChebyshevIIBandShelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ChebyshevIIBandShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ChebyshevIIBandShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ChebyshevIIBandShelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChebyshevIIBandShelf_methods[]= {
    { "process", _wrap_ChebyshevIIBandShelf_process},
    { "ProcessBlock", _wrap_ChebyshevIIBandShelf_ProcessBlock},
    { "getParams", _wrap_ChebyshevIIBandShelf_getParams},
    { "getParam", _wrap_ChebyshevIIBandShelf_getParam},
    { "setParam", _wrap_ChebyshevIIBandShelf_setParam},
    { "findParamId", _wrap_ChebyshevIIBandShelf_findParamId},
    { "setParamById", _wrap_ChebyshevIIBandShelf_setParamById},
    { "setParams", _wrap_ChebyshevIIBandShelf_setParams},
    { "copyParamsFrom", _wrap_ChebyshevIIBandShelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_ChebyshevIIBandShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChebyshevIIBandShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChebyshevIIBandShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChebyshevIIBandShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChebyshevIIBandShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChebyshevIIBandShelf_Sf_SwigStatic = {
    "ChebyshevIIBandShelf",
    swig_ChebyshevIIBandShelf_Sf_SwigStatic_methods,
    swig_ChebyshevIIBandShelf_Sf_SwigStatic_attributes,
    swig_ChebyshevIIBandShelf_Sf_SwigStatic_constants,
    swig_ChebyshevIIBandShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChebyshevIIBandShelf_bases[] = {0};
static const char *swig_ChebyshevIIBandShelf_base_names[] = {0};
static swig_lua_class _wrap_class_ChebyshevIIBandShelf = { "ChebyshevIIBandShelf", "ChebyshevIIBandShelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t,_proxy__wrap_new_ChebyshevIIBandShelf, swig_delete_ChebyshevIIBandShelf, swig_ChebyshevIIBandShelf_methods, swig_ChebyshevIIBandShelf_attributes, &swig_ChebyshevIIBandShelf_Sf_SwigStatic, swig_ChebyshevIIBandShelf_meta, swig_ChebyshevIIBandShelf_bases, swig_ChebyshevIIBandShelf_base_names };

static int _wrap_new_StereoChebyshevIIBandShelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandShelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandShelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandShelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandShelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandShelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevIIBandShelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevIIBandShelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevIIBandShelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevIIBandShelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandShelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandShelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandShelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandShelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandShelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandShelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandShelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandShelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandShelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandShelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandShelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_BandShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandShelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIIBandShelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIIBandShelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIIBandShelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIIBandShelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevIIBandShelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevIIBandShelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandShelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandShelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandShelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandShelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandShelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandShelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandShelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandShelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandShelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandShelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandShelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandShelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIBandShelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandShelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoChebyshevIIBandShelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoChebyshevIIBandShelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoChebyshevIIBandShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoChebyshevIIBandShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoChebyshevIIBandShelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoChebyshevIIBandShelf_methods[]= {
    { "process", _wrap_StereoChebyshevIIBandShelf_process},
    { "ProcessBlock", _wrap_StereoChebyshevIIBandShelf_ProcessBlock},
    { "getParams", _wrap_StereoChebyshevIIBandShelf_getParams},
    { "getParam", _wrap_StereoChebyshevIIBandShelf_getParam},
    { "setParam", _wrap_StereoChebyshevIIBandShelf_setParam},
    { "findParamId", _wrap_StereoChebyshevIIBandShelf_findParamId},
    { "setParamById", _wrap_StereoChebyshevIIBandShelf_setParamById},
    { "setParams", _wrap_StereoChebyshevIIBandShelf_setParams},
    { "copyParamsFrom", _wrap_StereoChebyshevIIBandShelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoChebyshevIIBandShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoChebyshevIIBandShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoChebyshevIIBandShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoChebyshevIIBandShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoChebyshevIIBandShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoChebyshevIIBandShelf_Sf_SwigStatic = {
    "StereoChebyshevIIBandShelf",
    swig_StereoChebyshevIIBandShelf_Sf_SwigStatic_methods,
    swig_StereoChebyshevIIBandShelf_Sf_SwigStatic_attributes,
    swig_StereoChebyshevIIBandShelf_Sf_SwigStatic_constants,
    swig_StereoChebyshevIIBandShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoChebyshevIIBandShelf_bases[] = {0};
static const char *swig_StereoChebyshevIIBandShelf_base_names[] = {0};
static swig_lua_class _wrap_class_StereoChebyshevIIBandShelf = { "StereoChebyshevIIBandShelf", "StereoChebyshevIIBandShelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoChebyshevIIBandShelf, swig_delete_StereoChebyshevIIBandShelf, swig_StereoChebyshevIIBandShelf_methods, swig_StereoChebyshevIIBandShelf_attributes, &swig_StereoChebyshevIIBandShelf_Sf_SwigStatic, swig_StereoChebyshevIIBandShelf_meta, swig_StereoChebyshevIIBandShelf_bases, swig_StereoChebyshevIIBandShelf_base_names };

static int _wrap_new_ChebyshevIILowShelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowShelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIILowShelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowShelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIILowShelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowShelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevIILowShelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevIILowShelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevIILowShelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevIILowShelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevIILowShelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevIILowShelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowShelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIILowShelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIILowShelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowShelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevIILowShelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevIILowShelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowShelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIILowShelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIILowShelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowShelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIILowShelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIILowShelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIILowShelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIILowShelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevIILowShelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevIILowShelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowShelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowShelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowShelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowShelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowShelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowShelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowShelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowShelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowShelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowShelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowShelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("ChebyshevIILowShelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowShelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIILowShelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("ChebyshevIILowShelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChebyshevIILowShelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ChebyshevIILowShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ChebyshevIILowShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ChebyshevIILowShelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChebyshevIILowShelf_methods[]= {
    { "process", _wrap_ChebyshevIILowShelf_process},
    { "ProcessBlock", _wrap_ChebyshevIILowShelf_ProcessBlock},
    { "getParams", _wrap_ChebyshevIILowShelf_getParams},
    { "getParam", _wrap_ChebyshevIILowShelf_getParam},
    { "setParam", _wrap_ChebyshevIILowShelf_setParam},
    { "findParamId", _wrap_ChebyshevIILowShelf_findParamId},
    { "setParamById", _wrap_ChebyshevIILowShelf_setParamById},
    { "setParams", _wrap_ChebyshevIILowShelf_setParams},
    { "copyParamsFrom", _wrap_ChebyshevIILowShelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_ChebyshevIILowShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChebyshevIILowShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChebyshevIILowShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChebyshevIILowShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChebyshevIILowShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChebyshevIILowShelf_Sf_SwigStatic = {
    "ChebyshevIILowShelf",
    swig_ChebyshevIILowShelf_Sf_SwigStatic_methods,
    swig_ChebyshevIILowShelf_Sf_SwigStatic_attributes,
    swig_ChebyshevIILowShelf_Sf_SwigStatic_constants,
    swig_ChebyshevIILowShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChebyshevIILowShelf_bases[] = {0};
static const char *swig_ChebyshevIILowShelf_base_names[] = {0};
static swig_lua_class _wrap_class_ChebyshevIILowShelf = { "ChebyshevIILowShelf", "ChebyshevIILowShelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t,_proxy__wrap_new_ChebyshevIILowShelf, swig_delete_ChebyshevIILowShelf, swig_ChebyshevIILowShelf_methods, swig_ChebyshevIILowShelf_attributes, &swig_ChebyshevIILowShelf_Sf_SwigStatic, swig_ChebyshevIILowShelf_meta, swig_ChebyshevIILowShelf_bases, swig_ChebyshevIILowShelf_base_names };

static int _wrap_new_StereoChebyshevIILowShelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowShelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIILowShelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowShelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIILowShelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowShelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevIILowShelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevIILowShelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevIILowShelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevIILowShelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIILowShelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIILowShelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowShelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIILowShelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIILowShelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowShelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIILowShelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIILowShelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowShelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIILowShelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIILowShelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowShelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIILowShelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIILowShelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIILowShelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIILowShelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevIILowShelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevIILowShelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowShelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowShelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowShelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowShelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowShelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowShelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowShelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowShelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowShelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowShelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowShelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoChebyshevIILowShelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIILowShelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIILowShelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoChebyshevIILowShelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoChebyshevIILowShelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoChebyshevIILowShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoChebyshevIILowShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoChebyshevIILowShelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoChebyshevIILowShelf_methods[]= {
    { "process", _wrap_StereoChebyshevIILowShelf_process},
    { "ProcessBlock", _wrap_StereoChebyshevIILowShelf_ProcessBlock},
    { "getParams", _wrap_StereoChebyshevIILowShelf_getParams},
    { "getParam", _wrap_StereoChebyshevIILowShelf_getParam},
    { "setParam", _wrap_StereoChebyshevIILowShelf_setParam},
    { "findParamId", _wrap_StereoChebyshevIILowShelf_findParamId},
    { "setParamById", _wrap_StereoChebyshevIILowShelf_setParamById},
    { "setParams", _wrap_StereoChebyshevIILowShelf_setParams},
    { "copyParamsFrom", _wrap_StereoChebyshevIILowShelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoChebyshevIILowShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoChebyshevIILowShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoChebyshevIILowShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoChebyshevIILowShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoChebyshevIILowShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoChebyshevIILowShelf_Sf_SwigStatic = {
    "StereoChebyshevIILowShelf",
    swig_StereoChebyshevIILowShelf_Sf_SwigStatic_methods,
    swig_StereoChebyshevIILowShelf_Sf_SwigStatic_attributes,
    swig_StereoChebyshevIILowShelf_Sf_SwigStatic_constants,
    swig_StereoChebyshevIILowShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoChebyshevIILowShelf_bases[] = {0};
static const char *swig_StereoChebyshevIILowShelf_base_names[] = {0};
static swig_lua_class _wrap_class_StereoChebyshevIILowShelf = { "StereoChebyshevIILowShelf", "StereoChebyshevIILowShelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoChebyshevIILowShelf, swig_delete_StereoChebyshevIILowShelf, swig_StereoChebyshevIILowShelf_methods, swig_StereoChebyshevIILowShelf_attributes, &swig_StereoChebyshevIILowShelf_Sf_SwigStatic, swig_StereoChebyshevIILowShelf_meta, swig_StereoChebyshevIILowShelf_bases, swig_StereoChebyshevIILowShelf_base_names };

static int _wrap_new_ChebyshevIIHighShelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighShelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIIHighShelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighShelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIIHighShelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighShelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevIIHighShelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ChebyshevIIHighShelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevIIHighShelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevIIHighShelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevIIHighShelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ChebyshevIIHighShelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighShelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIIHighShelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("ChebyshevIIHighShelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighShelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevIIHighShelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ChebyshevIIHighShelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighShelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIIHighShelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("ChebyshevIIHighShelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighShelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIIHighShelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIIHighShelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIIHighShelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ChebyshevIIHighShelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevIIHighShelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevIIHighShelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighShelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighShelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighShelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighShelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighShelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighShelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighShelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighShelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighShelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighShelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighShelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("ChebyshevIIHighShelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIIHighShelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("ChebyshevIIHighShelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("ChebyshevIIHighShelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChebyshevIIHighShelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ChebyshevIIHighShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ChebyshevIIHighShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ChebyshevIIHighShelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChebyshevIIHighShelf_methods[]= {
    { "process", _wrap_ChebyshevIIHighShelf_process},
    { "ProcessBlock", _wrap_ChebyshevIIHighShelf_ProcessBlock},
    { "getParams", _wrap_ChebyshevIIHighShelf_getParams},
    { "getParam", _wrap_ChebyshevIIHighShelf_getParam},
    { "setParam", _wrap_ChebyshevIIHighShelf_setParam},
    { "findParamId", _wrap_ChebyshevIIHighShelf_findParamId},
    { "setParamById", _wrap_ChebyshevIIHighShelf_setParamById},
    { "setParams", _wrap_ChebyshevIIHighShelf_setParams},
    { "copyParamsFrom", _wrap_ChebyshevIIHighShelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_ChebyshevIIHighShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChebyshevIIHighShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChebyshevIIHighShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChebyshevIIHighShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChebyshevIIHighShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChebyshevIIHighShelf_Sf_SwigStatic = {
    "ChebyshevIIHighShelf",
    swig_ChebyshevIIHighShelf_Sf_SwigStatic_methods,
    swig_ChebyshevIIHighShelf_Sf_SwigStatic_attributes,
    swig_ChebyshevIIHighShelf_Sf_SwigStatic_constants,
    swig_ChebyshevIIHighShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChebyshevIIHighShelf_bases[] = {0};
static const char *swig_ChebyshevIIHighShelf_base_names[] = {0};
static swig_lua_class _wrap_class_ChebyshevIIHighShelf = { "ChebyshevIIHighShelf", "ChebyshevIIHighShelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t,_proxy__wrap_new_ChebyshevIIHighShelf, swig_delete_ChebyshevIIHighShelf, swig_ChebyshevIIHighShelf_methods, swig_ChebyshevIIHighShelf_attributes, &swig_ChebyshevIIHighShelf_Sf_SwigStatic, swig_ChebyshevIIHighShelf_meta, swig_ChebyshevIIHighShelf_bases, swig_ChebyshevIIHighShelf_base_names };

static int _wrap_new_StereoChebyshevIIHighSHelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighSHelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighSHelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighSHelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighSHelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighSHelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighSHelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighSHelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevIIHighSHelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoChebyshevIIHighSHelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevIIHighSHelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevIIHighSHelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighSHelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighSHelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighSHelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighSHelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighSHelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighSHelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighSHelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighSHelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighSHelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighSHelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighSHelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighSHelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighSHelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighSHelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighSHelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_ChebyshevII_Design_HighShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighSHelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIIHighSHelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIIHighSHelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIIHighSHelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoChebyshevIIHighSHelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoChebyshevIIHighSHelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoChebyshevIIHighSHelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighSHelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighSHelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighSHelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighSHelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighSHelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighSHelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighSHelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighSHelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighSHelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighSHelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighSHelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighSHelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoChebyshevIIHighSHelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighSHelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoChebyshevIIHighSHelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoChebyshevIIHighSHelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoChebyshevIIHighSHelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoChebyshevIIHighSHelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoChebyshevIIHighSHelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoChebyshevIIHighSHelf_methods[]= {
    { "process", _wrap_StereoChebyshevIIHighSHelf_process},
    { "ProcessBlock", _wrap_StereoChebyshevIIHighSHelf_ProcessBlock},
    { "getParams", _wrap_StereoChebyshevIIHighSHelf_getParams},
    { "getParam", _wrap_StereoChebyshevIIHighSHelf_getParam},
    { "setParam", _wrap_StereoChebyshevIIHighSHelf_setParam},
    { "findParamId", _wrap_StereoChebyshevIIHighSHelf_findParamId},
    { "setParamById", _wrap_StereoChebyshevIIHighSHelf_setParamById},
    { "setParams", _wrap_StereoChebyshevIIHighSHelf_setParams},
    { "copyParamsFrom", _wrap_StereoChebyshevIIHighSHelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoChebyshevIIHighSHelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoChebyshevIIHighSHelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoChebyshevIIHighSHelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoChebyshevIIHighSHelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoChebyshevIIHighSHelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoChebyshevIIHighSHelf_Sf_SwigStatic = {
    "StereoChebyshevIIHighSHelf",
    swig_StereoChebyshevIIHighSHelf_Sf_SwigStatic_methods,
    swig_StereoChebyshevIIHighSHelf_Sf_SwigStatic_attributes,
    swig_StereoChebyshevIIHighSHelf_Sf_SwigStatic_constants,
    swig_StereoChebyshevIIHighSHelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoChebyshevIIHighSHelf_bases[] = {0};
static const char *swig_StereoChebyshevIIHighSHelf_base_names[] = {0};
static swig_lua_class _wrap_class_StereoChebyshevIIHighSHelf = { "StereoChebyshevIIHighSHelf", "StereoChebyshevIIHighSHelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoChebyshevIIHighSHelf, swig_delete_StereoChebyshevIIHighSHelf, swig_StereoChebyshevIIHighSHelf_methods, swig_StereoChebyshevIIHighSHelf_attributes, &swig_StereoChebyshevIIHighSHelf_Sf_SwigStatic, swig_StereoChebyshevIIHighSHelf_meta, swig_StereoChebyshevIIHighSHelf_bases, swig_StereoChebyshevIIHighSHelf_base_names };

static int _wrap_new_EllipticBandPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("EllipticBandPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("EllipticBandPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_EllipticBandPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_EllipticBandPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EllipticBandPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_EllipticBandPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("EllipticBandPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("EllipticBandPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("EllipticBandPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("EllipticBandPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("EllipticBandPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("EllipticBandPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("EllipticBandPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("EllipticBandPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_EllipticBandPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_EllipticBandPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_EllipticBandPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_EllipticBandPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EllipticBandPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_EllipticBandPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("EllipticBandPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("EllipticBandPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EllipticBandPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_EllipticBandPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_EllipticBandPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_EllipticBandPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EllipticBandPass_methods[]= {
    { "process", _wrap_EllipticBandPass_process},
    { "ProcessBlock", _wrap_EllipticBandPass_ProcessBlock},
    { "getParams", _wrap_EllipticBandPass_getParams},
    { "getParam", _wrap_EllipticBandPass_getParam},
    { "setParam", _wrap_EllipticBandPass_setParam},
    { "findParamId", _wrap_EllipticBandPass_findParamId},
    { "setParamById", _wrap_EllipticBandPass_setParamById},
    { "setParams", _wrap_EllipticBandPass_setParams},
    { "copyParamsFrom", _wrap_EllipticBandPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_EllipticBandPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EllipticBandPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EllipticBandPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EllipticBandPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EllipticBandPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EllipticBandPass_Sf_SwigStatic = {
    "EllipticBandPass",
    swig_EllipticBandPass_Sf_SwigStatic_methods,
    swig_EllipticBandPass_Sf_SwigStatic_attributes,
    swig_EllipticBandPass_Sf_SwigStatic_constants,
    swig_EllipticBandPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EllipticBandPass_bases[] = {0};
static const char *swig_EllipticBandPass_base_names[] = {0};
static swig_lua_class _wrap_class_EllipticBandPass = { "EllipticBandPass", "EllipticBandPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t,_proxy__wrap_new_EllipticBandPass, swig_delete_EllipticBandPass, swig_EllipticBandPass_methods, swig_EllipticBandPass_attributes, &swig_EllipticBandPass_Sf_SwigStatic, swig_EllipticBandPass_meta, swig_EllipticBandPass_bases, swig_EllipticBandPass_base_names };

static int _wrap_new_StereoEllipticBandPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoEllipticBandPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoEllipticBandPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoEllipticBandPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoEllipticBandPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoEllipticBandPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoEllipticBandPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoEllipticBandPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoEllipticBandPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoEllipticBandPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoEllipticBandPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoEllipticBandPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoEllipticBandPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoEllipticBandPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoEllipticBandPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoEllipticBandPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoEllipticBandPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoEllipticBandPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoEllipticBandPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoEllipticBandPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoEllipticBandPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoEllipticBandPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoEllipticBandPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoEllipticBandPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoEllipticBandPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoEllipticBandPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoEllipticBandPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoEllipticBandPass_methods[]= {
    { "process", _wrap_StereoEllipticBandPass_process},
    { "ProcessBlock", _wrap_StereoEllipticBandPass_ProcessBlock},
    { "getParams", _wrap_StereoEllipticBandPass_getParams},
    { "getParam", _wrap_StereoEllipticBandPass_getParam},
    { "setParam", _wrap_StereoEllipticBandPass_setParam},
    { "findParamId", _wrap_StereoEllipticBandPass_findParamId},
    { "setParamById", _wrap_StereoEllipticBandPass_setParamById},
    { "setParams", _wrap_StereoEllipticBandPass_setParams},
    { "copyParamsFrom", _wrap_StereoEllipticBandPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoEllipticBandPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoEllipticBandPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoEllipticBandPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoEllipticBandPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoEllipticBandPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoEllipticBandPass_Sf_SwigStatic = {
    "StereoEllipticBandPass",
    swig_StereoEllipticBandPass_Sf_SwigStatic_methods,
    swig_StereoEllipticBandPass_Sf_SwigStatic_attributes,
    swig_StereoEllipticBandPass_Sf_SwigStatic_constants,
    swig_StereoEllipticBandPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoEllipticBandPass_bases[] = {0};
static const char *swig_StereoEllipticBandPass_base_names[] = {0};
static swig_lua_class _wrap_class_StereoEllipticBandPass = { "StereoEllipticBandPass", "StereoEllipticBandPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoEllipticBandPass, swig_delete_StereoEllipticBandPass, swig_StereoEllipticBandPass_methods, swig_StereoEllipticBandPass_attributes, &swig_StereoEllipticBandPass_Sf_SwigStatic, swig_StereoEllipticBandPass_meta, swig_StereoEllipticBandPass_bases, swig_StereoEllipticBandPass_base_names };

static int _wrap_new_EllipticBandStop(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandStop_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("EllipticBandStop_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandStop_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("EllipticBandStop_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandStop_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_EllipticBandStop_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_EllipticBandStop_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EllipticBandStop_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_EllipticBandStop_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("EllipticBandStop_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("EllipticBandStop_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandStop_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("EllipticBandStop_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("EllipticBandStop_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandStop_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("EllipticBandStop_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("EllipticBandStop_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandStop_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("EllipticBandStop_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("EllipticBandStop_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandStop_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_EllipticBandStop_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_EllipticBandStop_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_EllipticBandStop_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_EllipticBandStop_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EllipticBandStop_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_EllipticBandStop_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandStop_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandStop_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandStop_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandStop_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandStop_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandStop_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandStop_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandStop_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandStop_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandStop_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandStop_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("EllipticBandStop_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticBandStop_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticBandStop_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("EllipticBandStop_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EllipticBandStop(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_EllipticBandStop(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_EllipticBandStop);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_EllipticBandStop_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EllipticBandStop_methods[]= {
    { "process", _wrap_EllipticBandStop_process},
    { "ProcessBlock", _wrap_EllipticBandStop_ProcessBlock},
    { "getParams", _wrap_EllipticBandStop_getParams},
    { "getParam", _wrap_EllipticBandStop_getParam},
    { "setParam", _wrap_EllipticBandStop_setParam},
    { "findParamId", _wrap_EllipticBandStop_findParamId},
    { "setParamById", _wrap_EllipticBandStop_setParamById},
    { "setParams", _wrap_EllipticBandStop_setParams},
    { "copyParamsFrom", _wrap_EllipticBandStop_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_EllipticBandStop_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EllipticBandStop_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EllipticBandStop_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EllipticBandStop_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EllipticBandStop_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EllipticBandStop_SwigStatic = {
    "EllipticBandStop",
    swig_EllipticBandStop_SwigStatic_methods,
    swig_EllipticBandStop_SwigStatic_attributes,
    swig_EllipticBandStop_SwigStatic_constants,
    swig_EllipticBandStop_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EllipticBandStop_bases[] = {0};
static const char *swig_EllipticBandStop_base_names[] = {0};
static swig_lua_class _wrap_class_EllipticBandStop = { "EllipticBandStop", "EllipticBandStop", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t,_proxy__wrap_new_EllipticBandStop, swig_delete_EllipticBandStop, swig_EllipticBandStop_methods, swig_EllipticBandStop_attributes, &swig_EllipticBandStop_SwigStatic, swig_EllipticBandStop_meta, swig_EllipticBandStop_bases, swig_EllipticBandStop_base_names };

static int _wrap_new_StereoEllipticBandStop(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandStop_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoEllipticBandStop_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandStop_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoEllipticBandStop_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandStop_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoEllipticBandStop_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoEllipticBandStop_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoEllipticBandStop_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoEllipticBandStop_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoEllipticBandStop_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoEllipticBandStop_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandStop_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoEllipticBandStop_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoEllipticBandStop_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandStop_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoEllipticBandStop_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoEllipticBandStop_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandStop_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoEllipticBandStop_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoEllipticBandStop_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandStop_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoEllipticBandStop_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoEllipticBandStop_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoEllipticBandStop_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoEllipticBandStop_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoEllipticBandStop_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoEllipticBandStop_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandStop_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandStop_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandStop_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandStop_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandStop_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandStop_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandStop_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandStop_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandStop_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandStop_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandStop_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoEllipticBandStop_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticBandStop_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticBandStop_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoEllipticBandStop_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoEllipticBandStop(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoEllipticBandStop(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoEllipticBandStop);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoEllipticBandStop_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoEllipticBandStop_methods[]= {
    { "process", _wrap_StereoEllipticBandStop_process},
    { "ProcessBlock", _wrap_StereoEllipticBandStop_ProcessBlock},
    { "getParams", _wrap_StereoEllipticBandStop_getParams},
    { "getParam", _wrap_StereoEllipticBandStop_getParam},
    { "setParam", _wrap_StereoEllipticBandStop_setParam},
    { "findParamId", _wrap_StereoEllipticBandStop_findParamId},
    { "setParamById", _wrap_StereoEllipticBandStop_setParamById},
    { "setParams", _wrap_StereoEllipticBandStop_setParams},
    { "copyParamsFrom", _wrap_StereoEllipticBandStop_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoEllipticBandStop_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoEllipticBandStop_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoEllipticBandStop_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoEllipticBandStop_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoEllipticBandStop_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoEllipticBandStop_SwigStatic = {
    "StereoEllipticBandStop",
    swig_StereoEllipticBandStop_SwigStatic_methods,
    swig_StereoEllipticBandStop_SwigStatic_attributes,
    swig_StereoEllipticBandStop_SwigStatic_constants,
    swig_StereoEllipticBandStop_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoEllipticBandStop_bases[] = {0};
static const char *swig_StereoEllipticBandStop_base_names[] = {0};
static swig_lua_class _wrap_class_StereoEllipticBandStop = { "StereoEllipticBandStop", "StereoEllipticBandStop", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoEllipticBandStop, swig_delete_StereoEllipticBandStop, swig_StereoEllipticBandStop_methods, swig_StereoEllipticBandStop_attributes, &swig_StereoEllipticBandStop_SwigStatic, swig_StereoEllipticBandStop_meta, swig_StereoEllipticBandStop_bases, swig_StereoEllipticBandStop_base_names };

static int _wrap_new_EllipticLowPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticLowPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticLowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("EllipticLowPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticLowPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticLowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("EllipticLowPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticLowPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_EllipticLowPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_EllipticLowPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EllipticLowPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_EllipticLowPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("EllipticLowPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("EllipticLowPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticLowPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("EllipticLowPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("EllipticLowPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticLowPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("EllipticLowPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("EllipticLowPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticLowPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("EllipticLowPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("EllipticLowPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticLowPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_EllipticLowPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_EllipticLowPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_EllipticLowPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_EllipticLowPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EllipticLowPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_EllipticLowPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticLowPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticLowPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticLowPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticLowPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticLowPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticLowPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticLowPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticLowPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticLowPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticLowPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticLowPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("EllipticLowPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticLowPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticLowPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("EllipticLowPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EllipticLowPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_EllipticLowPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_EllipticLowPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_EllipticLowPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EllipticLowPass_methods[]= {
    { "process", _wrap_EllipticLowPass_process},
    { "ProcessBlock", _wrap_EllipticLowPass_ProcessBlock},
    { "getParams", _wrap_EllipticLowPass_getParams},
    { "getParam", _wrap_EllipticLowPass_getParam},
    { "setParam", _wrap_EllipticLowPass_setParam},
    { "findParamId", _wrap_EllipticLowPass_findParamId},
    { "setParamById", _wrap_EllipticLowPass_setParamById},
    { "setParams", _wrap_EllipticLowPass_setParams},
    { "copyParamsFrom", _wrap_EllipticLowPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_EllipticLowPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EllipticLowPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EllipticLowPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EllipticLowPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EllipticLowPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EllipticLowPass_Sf_SwigStatic = {
    "EllipticLowPass",
    swig_EllipticLowPass_Sf_SwigStatic_methods,
    swig_EllipticLowPass_Sf_SwigStatic_attributes,
    swig_EllipticLowPass_Sf_SwigStatic_constants,
    swig_EllipticLowPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EllipticLowPass_bases[] = {0};
static const char *swig_EllipticLowPass_base_names[] = {0};
static swig_lua_class _wrap_class_EllipticLowPass = { "EllipticLowPass", "EllipticLowPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t,_proxy__wrap_new_EllipticLowPass, swig_delete_EllipticLowPass, swig_EllipticLowPass_methods, swig_EllipticLowPass_attributes, &swig_EllipticLowPass_Sf_SwigStatic, swig_EllipticLowPass_meta, swig_EllipticLowPass_bases, swig_EllipticLowPass_base_names };

static int _wrap_new_StereoEllipticLowPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticLowPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticLowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoEllipticLowPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticLowPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticLowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoEllipticLowPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticLowPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoEllipticLowPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoEllipticLowPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoEllipticLowPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoEllipticLowPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoEllipticLowPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoEllipticLowPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticLowPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoEllipticLowPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoEllipticLowPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticLowPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoEllipticLowPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoEllipticLowPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticLowPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoEllipticLowPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoEllipticLowPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticLowPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoEllipticLowPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoEllipticLowPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoEllipticLowPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoEllipticLowPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoEllipticLowPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoEllipticLowPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticLowPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticLowPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticLowPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticLowPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticLowPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticLowPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticLowPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticLowPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticLowPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticLowPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticLowPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoEllipticLowPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticLowPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticLowPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoEllipticLowPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoEllipticLowPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoEllipticLowPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoEllipticLowPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoEllipticLowPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoEllipticLowPass_methods[]= {
    { "process", _wrap_StereoEllipticLowPass_process},
    { "ProcessBlock", _wrap_StereoEllipticLowPass_ProcessBlock},
    { "getParams", _wrap_StereoEllipticLowPass_getParams},
    { "getParam", _wrap_StereoEllipticLowPass_getParam},
    { "setParam", _wrap_StereoEllipticLowPass_setParam},
    { "findParamId", _wrap_StereoEllipticLowPass_findParamId},
    { "setParamById", _wrap_StereoEllipticLowPass_setParamById},
    { "setParams", _wrap_StereoEllipticLowPass_setParams},
    { "copyParamsFrom", _wrap_StereoEllipticLowPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoEllipticLowPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoEllipticLowPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoEllipticLowPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoEllipticLowPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoEllipticLowPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoEllipticLowPass_Sf_SwigStatic = {
    "StereoEllipticLowPass",
    swig_StereoEllipticLowPass_Sf_SwigStatic_methods,
    swig_StereoEllipticLowPass_Sf_SwigStatic_attributes,
    swig_StereoEllipticLowPass_Sf_SwigStatic_constants,
    swig_StereoEllipticLowPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoEllipticLowPass_bases[] = {0};
static const char *swig_StereoEllipticLowPass_base_names[] = {0};
static swig_lua_class _wrap_class_StereoEllipticLowPass = { "StereoEllipticLowPass", "StereoEllipticLowPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoEllipticLowPass, swig_delete_StereoEllipticLowPass, swig_StereoEllipticLowPass_methods, swig_StereoEllipticLowPass_attributes, &swig_StereoEllipticLowPass_Sf_SwigStatic, swig_StereoEllipticLowPass_meta, swig_StereoEllipticLowPass_bases, swig_StereoEllipticLowPass_base_names };

static int _wrap_new_EllipticHighPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticHighPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("EllipticHighPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticHighPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("EllipticHighPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticHighPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_EllipticHighPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_EllipticHighPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EllipticHighPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_EllipticHighPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("EllipticHighPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("EllipticHighPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticHighPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("EllipticHighPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("EllipticHighPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticHighPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("EllipticHighPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("EllipticHighPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticHighPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("EllipticHighPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("EllipticHighPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticHighPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_EllipticHighPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_EllipticHighPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_EllipticHighPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_EllipticHighPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EllipticHighPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_EllipticHighPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticHighPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticHighPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticHighPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticHighPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticHighPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticHighPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticHighPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticHighPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticHighPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticHighPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticHighPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("EllipticHighPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EllipticHighPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("EllipticHighPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("EllipticHighPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EllipticHighPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_EllipticHighPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_EllipticHighPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_EllipticHighPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EllipticHighPass_methods[]= {
    { "process", _wrap_EllipticHighPass_process},
    { "ProcessBlock", _wrap_EllipticHighPass_ProcessBlock},
    { "getParams", _wrap_EllipticHighPass_getParams},
    { "getParam", _wrap_EllipticHighPass_getParam},
    { "setParam", _wrap_EllipticHighPass_setParam},
    { "findParamId", _wrap_EllipticHighPass_findParamId},
    { "setParamById", _wrap_EllipticHighPass_setParamById},
    { "setParams", _wrap_EllipticHighPass_setParams},
    { "copyParamsFrom", _wrap_EllipticHighPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_EllipticHighPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EllipticHighPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EllipticHighPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EllipticHighPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EllipticHighPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EllipticHighPass_Sf_SwigStatic = {
    "EllipticHighPass",
    swig_EllipticHighPass_Sf_SwigStatic_methods,
    swig_EllipticHighPass_Sf_SwigStatic_attributes,
    swig_EllipticHighPass_Sf_SwigStatic_constants,
    swig_EllipticHighPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EllipticHighPass_bases[] = {0};
static const char *swig_EllipticHighPass_base_names[] = {0};
static swig_lua_class _wrap_class_EllipticHighPass = { "EllipticHighPass", "EllipticHighPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t,_proxy__wrap_new_EllipticHighPass, swig_delete_EllipticHighPass, swig_EllipticHighPass_methods, swig_EllipticHighPass_attributes, &swig_EllipticHighPass_Sf_SwigStatic, swig_EllipticHighPass_meta, swig_EllipticHighPass_bases, swig_EllipticHighPass_base_names };

static int _wrap_new_StereoEllipticHighPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticHighPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoEllipticHighPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticHighPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoEllipticHighPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticHighPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoEllipticHighPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoEllipticHighPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoEllipticHighPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoEllipticHighPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoEllipticHighPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoEllipticHighPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticHighPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoEllipticHighPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoEllipticHighPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticHighPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoEllipticHighPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoEllipticHighPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticHighPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoEllipticHighPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoEllipticHighPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Elliptic_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticHighPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoEllipticHighPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoEllipticHighPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoEllipticHighPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoEllipticHighPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoEllipticHighPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoEllipticHighPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticHighPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticHighPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticHighPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticHighPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticHighPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticHighPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticHighPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticHighPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticHighPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticHighPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticHighPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoEllipticHighPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoEllipticHighPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoEllipticHighPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoEllipticHighPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoEllipticHighPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoEllipticHighPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoEllipticHighPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoEllipticHighPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoEllipticHighPass_methods[]= {
    { "process", _wrap_StereoEllipticHighPass_process},
    { "ProcessBlock", _wrap_StereoEllipticHighPass_ProcessBlock},
    { "getParams", _wrap_StereoEllipticHighPass_getParams},
    { "getParam", _wrap_StereoEllipticHighPass_getParam},
    { "setParam", _wrap_StereoEllipticHighPass_setParam},
    { "findParamId", _wrap_StereoEllipticHighPass_findParamId},
    { "setParamById", _wrap_StereoEllipticHighPass_setParamById},
    { "setParams", _wrap_StereoEllipticHighPass_setParams},
    { "copyParamsFrom", _wrap_StereoEllipticHighPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoEllipticHighPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoEllipticHighPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoEllipticHighPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoEllipticHighPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoEllipticHighPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoEllipticHighPass_Sf_SwigStatic = {
    "StereoEllipticHighPass",
    swig_StereoEllipticHighPass_Sf_SwigStatic_methods,
    swig_StereoEllipticHighPass_Sf_SwigStatic_attributes,
    swig_StereoEllipticHighPass_Sf_SwigStatic_constants,
    swig_StereoEllipticHighPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoEllipticHighPass_bases[] = {0};
static const char *swig_StereoEllipticHighPass_base_names[] = {0};
static swig_lua_class _wrap_class_StereoEllipticHighPass = { "StereoEllipticHighPass", "StereoEllipticHighPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoEllipticHighPass, swig_delete_StereoEllipticHighPass, swig_StereoEllipticHighPass_methods, swig_StereoEllipticHighPass_attributes, &swig_StereoEllipticHighPass_Sf_SwigStatic, swig_StereoEllipticHighPass_meta, swig_StereoEllipticHighPass_bases, swig_StereoEllipticHighPass_base_names };

static int _wrap_new_BesselBandPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("BesselBandPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("BesselBandPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BesselBandPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BesselBandPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BesselBandPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_BesselBandPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BesselBandPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BesselBandPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("BesselBandPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("BesselBandPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("BesselBandPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("BesselBandPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("BesselBandPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("BesselBandPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_BesselBandPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_BesselBandPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_BesselBandPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_BesselBandPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BesselBandPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_BesselBandPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("BesselBandPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("BesselBandPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BesselBandPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_BesselBandPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BesselBandPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BesselBandPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BesselBandPass_methods[]= {
    { "process", _wrap_BesselBandPass_process},
    { "ProcessBlock", _wrap_BesselBandPass_ProcessBlock},
    { "getParams", _wrap_BesselBandPass_getParams},
    { "getParam", _wrap_BesselBandPass_getParam},
    { "setParam", _wrap_BesselBandPass_setParam},
    { "findParamId", _wrap_BesselBandPass_findParamId},
    { "setParamById", _wrap_BesselBandPass_setParamById},
    { "setParams", _wrap_BesselBandPass_setParams},
    { "copyParamsFrom", _wrap_BesselBandPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_BesselBandPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BesselBandPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BesselBandPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BesselBandPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BesselBandPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BesselBandPass_Sf_SwigStatic = {
    "BesselBandPass",
    swig_BesselBandPass_Sf_SwigStatic_methods,
    swig_BesselBandPass_Sf_SwigStatic_attributes,
    swig_BesselBandPass_Sf_SwigStatic_constants,
    swig_BesselBandPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BesselBandPass_bases[] = {0};
static const char *swig_BesselBandPass_base_names[] = {0};
static swig_lua_class _wrap_class_BesselBandPass = { "BesselBandPass", "BesselBandPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t,_proxy__wrap_new_BesselBandPass, swig_delete_BesselBandPass, swig_BesselBandPass_methods, swig_BesselBandPass_attributes, &swig_BesselBandPass_Sf_SwigStatic, swig_BesselBandPass_meta, swig_BesselBandPass_bases, swig_BesselBandPass_base_names };

static int _wrap_new_StereoBesselBandPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoBesselBandPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoBesselBandPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoBesselBandPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoBesselBandPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoBesselBandPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoBesselBandPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoBesselBandPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoBesselBandPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoBesselBandPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoBesselBandPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoBesselBandPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoBesselBandPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoBesselBandPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoBesselBandPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoBesselBandPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoBesselBandPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoBesselBandPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoBesselBandPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoBesselBandPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoBesselBandPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoBesselBandPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoBesselBandPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoBesselBandPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoBesselBandPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoBesselBandPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoBesselBandPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoBesselBandPass_methods[]= {
    { "process", _wrap_StereoBesselBandPass_process},
    { "ProcessBlock", _wrap_StereoBesselBandPass_ProcessBlock},
    { "getParams", _wrap_StereoBesselBandPass_getParams},
    { "getParam", _wrap_StereoBesselBandPass_getParam},
    { "setParam", _wrap_StereoBesselBandPass_setParam},
    { "findParamId", _wrap_StereoBesselBandPass_findParamId},
    { "setParamById", _wrap_StereoBesselBandPass_setParamById},
    { "setParams", _wrap_StereoBesselBandPass_setParams},
    { "copyParamsFrom", _wrap_StereoBesselBandPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoBesselBandPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoBesselBandPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoBesselBandPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoBesselBandPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoBesselBandPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoBesselBandPass_Sf_SwigStatic = {
    "StereoBesselBandPass",
    swig_StereoBesselBandPass_Sf_SwigStatic_methods,
    swig_StereoBesselBandPass_Sf_SwigStatic_attributes,
    swig_StereoBesselBandPass_Sf_SwigStatic_constants,
    swig_StereoBesselBandPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoBesselBandPass_bases[] = {0};
static const char *swig_StereoBesselBandPass_base_names[] = {0};
static swig_lua_class _wrap_class_StereoBesselBandPass = { "StereoBesselBandPass", "StereoBesselBandPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoBesselBandPass, swig_delete_StereoBesselBandPass, swig_StereoBesselBandPass_methods, swig_StereoBesselBandPass_attributes, &swig_StereoBesselBandPass_Sf_SwigStatic, swig_StereoBesselBandPass_meta, swig_StereoBesselBandPass_bases, swig_StereoBesselBandPass_base_names };

static int _wrap_new_BesselBandStop(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandStop_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("BesselBandStop_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandStop_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("BesselBandStop_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandStop_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BesselBandStop_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BesselBandStop_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BesselBandStop_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_BesselBandStop_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BesselBandStop_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BesselBandStop_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandStop_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("BesselBandStop_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("BesselBandStop_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandStop_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("BesselBandStop_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("BesselBandStop_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandStop_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("BesselBandStop_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("BesselBandStop_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandStop_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_BesselBandStop_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_BesselBandStop_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_BesselBandStop_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_BesselBandStop_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BesselBandStop_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_BesselBandStop_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandStop_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandStop_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandStop_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandStop_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandStop_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandStop_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandStop_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandStop_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandStop_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandStop_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandStop_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("BesselBandStop_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandStop_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselBandStop_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("BesselBandStop_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BesselBandStop(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_BesselBandStop(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BesselBandStop);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BesselBandStop_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BesselBandStop_methods[]= {
    { "process", _wrap_BesselBandStop_process},
    { "ProcessBlock", _wrap_BesselBandStop_ProcessBlock},
    { "getParams", _wrap_BesselBandStop_getParams},
    { "getParam", _wrap_BesselBandStop_getParam},
    { "setParam", _wrap_BesselBandStop_setParam},
    { "findParamId", _wrap_BesselBandStop_findParamId},
    { "setParamById", _wrap_BesselBandStop_setParamById},
    { "setParams", _wrap_BesselBandStop_setParams},
    { "copyParamsFrom", _wrap_BesselBandStop_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_BesselBandStop_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BesselBandStop_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BesselBandStop_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BesselBandStop_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BesselBandStop_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BesselBandStop_SwigStatic = {
    "BesselBandStop",
    swig_BesselBandStop_SwigStatic_methods,
    swig_BesselBandStop_SwigStatic_attributes,
    swig_BesselBandStop_SwigStatic_constants,
    swig_BesselBandStop_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BesselBandStop_bases[] = {0};
static const char *swig_BesselBandStop_base_names[] = {0};
static swig_lua_class _wrap_class_BesselBandStop = { "BesselBandStop", "BesselBandStop", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t,_proxy__wrap_new_BesselBandStop, swig_delete_BesselBandStop, swig_BesselBandStop_methods, swig_BesselBandStop_attributes, &swig_BesselBandStop_SwigStatic, swig_BesselBandStop_meta, swig_BesselBandStop_bases, swig_BesselBandStop_base_names };

static int _wrap_new_StereoBesselBandStop(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandStop_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoBesselBandStop_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandStop_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoBesselBandStop_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandStop_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoBesselBandStop_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoBesselBandStop_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoBesselBandStop_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoBesselBandStop_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoBesselBandStop_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoBesselBandStop_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandStop_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoBesselBandStop_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoBesselBandStop_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandStop_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoBesselBandStop_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoBesselBandStop_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandStop_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoBesselBandStop_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoBesselBandStop_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandStop_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoBesselBandStop_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoBesselBandStop_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoBesselBandStop_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoBesselBandStop_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoBesselBandStop_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoBesselBandStop_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandStop_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandStop_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandStop_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandStop_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandStop_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandStop_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandStop_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandStop_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandStop_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandStop_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandStop_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoBesselBandStop_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselBandStop_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselBandStop_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoBesselBandStop_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoBesselBandStop(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoBesselBandStop(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoBesselBandStop);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoBesselBandStop_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoBesselBandStop_methods[]= {
    { "process", _wrap_StereoBesselBandStop_process},
    { "ProcessBlock", _wrap_StereoBesselBandStop_ProcessBlock},
    { "getParams", _wrap_StereoBesselBandStop_getParams},
    { "getParam", _wrap_StereoBesselBandStop_getParam},
    { "setParam", _wrap_StereoBesselBandStop_setParam},
    { "findParamId", _wrap_StereoBesselBandStop_findParamId},
    { "setParamById", _wrap_StereoBesselBandStop_setParamById},
    { "setParams", _wrap_StereoBesselBandStop_setParams},
    { "copyParamsFrom", _wrap_StereoBesselBandStop_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoBesselBandStop_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoBesselBandStop_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoBesselBandStop_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoBesselBandStop_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoBesselBandStop_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoBesselBandStop_SwigStatic = {
    "StereoBesselBandStop",
    swig_StereoBesselBandStop_SwigStatic_methods,
    swig_StereoBesselBandStop_SwigStatic_attributes,
    swig_StereoBesselBandStop_SwigStatic_constants,
    swig_StereoBesselBandStop_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoBesselBandStop_bases[] = {0};
static const char *swig_StereoBesselBandStop_base_names[] = {0};
static swig_lua_class _wrap_class_StereoBesselBandStop = { "StereoBesselBandStop", "StereoBesselBandStop", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoBesselBandStop, swig_delete_StereoBesselBandStop, swig_StereoBesselBandStop_methods, swig_StereoBesselBandStop_attributes, &swig_StereoBesselBandStop_SwigStatic, swig_StereoBesselBandStop_meta, swig_StereoBesselBandStop_bases, swig_StereoBesselBandStop_base_names };

static int _wrap_new_BesselLowPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("BesselLowPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("BesselLowPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BesselLowPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BesselLowPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BesselLowPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_BesselLowPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BesselLowPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BesselLowPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("BesselLowPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("BesselLowPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("BesselLowPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("BesselLowPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("BesselLowPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("BesselLowPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_BesselLowPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_BesselLowPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_BesselLowPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_BesselLowPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BesselLowPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_BesselLowPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("BesselLowPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("BesselLowPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BesselLowPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_BesselLowPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BesselLowPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BesselLowPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BesselLowPass_methods[]= {
    { "process", _wrap_BesselLowPass_process},
    { "ProcessBlock", _wrap_BesselLowPass_ProcessBlock},
    { "getParams", _wrap_BesselLowPass_getParams},
    { "getParam", _wrap_BesselLowPass_getParam},
    { "setParam", _wrap_BesselLowPass_setParam},
    { "findParamId", _wrap_BesselLowPass_findParamId},
    { "setParamById", _wrap_BesselLowPass_setParamById},
    { "setParams", _wrap_BesselLowPass_setParams},
    { "copyParamsFrom", _wrap_BesselLowPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_BesselLowPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BesselLowPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BesselLowPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BesselLowPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BesselLowPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BesselLowPass_Sf_SwigStatic = {
    "BesselLowPass",
    swig_BesselLowPass_Sf_SwigStatic_methods,
    swig_BesselLowPass_Sf_SwigStatic_attributes,
    swig_BesselLowPass_Sf_SwigStatic_constants,
    swig_BesselLowPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BesselLowPass_bases[] = {0};
static const char *swig_BesselLowPass_base_names[] = {0};
static swig_lua_class _wrap_class_BesselLowPass = { "BesselLowPass", "BesselLowPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t,_proxy__wrap_new_BesselLowPass, swig_delete_BesselLowPass, swig_BesselLowPass_methods, swig_BesselLowPass_attributes, &swig_BesselLowPass_Sf_SwigStatic, swig_BesselLowPass_meta, swig_BesselLowPass_bases, swig_BesselLowPass_base_names };

static int _wrap_new_StereoBesselLowPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoBesselLowPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoBesselLowPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoBesselLowPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoBesselLowPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoBesselLowPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoBesselLowPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoBesselLowPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoBesselLowPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoBesselLowPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoBesselLowPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoBesselLowPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoBesselLowPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoBesselLowPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoBesselLowPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoBesselLowPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoBesselLowPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoBesselLowPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoBesselLowPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoBesselLowPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoBesselLowPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoBesselLowPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoBesselLowPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoBesselLowPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoBesselLowPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoBesselLowPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoBesselLowPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoBesselLowPass_methods[]= {
    { "process", _wrap_StereoBesselLowPass_process},
    { "ProcessBlock", _wrap_StereoBesselLowPass_ProcessBlock},
    { "getParams", _wrap_StereoBesselLowPass_getParams},
    { "getParam", _wrap_StereoBesselLowPass_getParam},
    { "setParam", _wrap_StereoBesselLowPass_setParam},
    { "findParamId", _wrap_StereoBesselLowPass_findParamId},
    { "setParamById", _wrap_StereoBesselLowPass_setParamById},
    { "setParams", _wrap_StereoBesselLowPass_setParams},
    { "copyParamsFrom", _wrap_StereoBesselLowPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoBesselLowPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoBesselLowPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoBesselLowPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoBesselLowPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoBesselLowPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoBesselLowPass_Sf_SwigStatic = {
    "StereoBesselLowPass",
    swig_StereoBesselLowPass_Sf_SwigStatic_methods,
    swig_StereoBesselLowPass_Sf_SwigStatic_attributes,
    swig_StereoBesselLowPass_Sf_SwigStatic_constants,
    swig_StereoBesselLowPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoBesselLowPass_bases[] = {0};
static const char *swig_StereoBesselLowPass_base_names[] = {0};
static swig_lua_class _wrap_class_StereoBesselLowPass = { "StereoBesselLowPass", "StereoBesselLowPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoBesselLowPass, swig_delete_StereoBesselLowPass, swig_StereoBesselLowPass_methods, swig_StereoBesselLowPass_attributes, &swig_StereoBesselLowPass_Sf_SwigStatic, swig_StereoBesselLowPass_meta, swig_StereoBesselLowPass_bases, swig_StereoBesselLowPass_base_names };

static int _wrap_new_BesselHighPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselHighPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("BesselHighPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselHighPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("BesselHighPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselHighPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BesselHighPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BesselHighPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BesselHighPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_BesselHighPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BesselHighPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BesselHighPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselHighPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("BesselHighPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("BesselHighPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselHighPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("BesselHighPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("BesselHighPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselHighPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("BesselHighPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("BesselHighPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselHighPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_BesselHighPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_BesselHighPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_BesselHighPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_BesselHighPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BesselHighPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_BesselHighPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselHighPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselHighPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselHighPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselHighPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselHighPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselHighPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselHighPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselHighPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselHighPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselHighPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselHighPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("BesselHighPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselHighPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselHighPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("BesselHighPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BesselHighPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_BesselHighPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BesselHighPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BesselHighPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BesselHighPass_methods[]= {
    { "process", _wrap_BesselHighPass_process},
    { "ProcessBlock", _wrap_BesselHighPass_ProcessBlock},
    { "getParams", _wrap_BesselHighPass_getParams},
    { "getParam", _wrap_BesselHighPass_getParam},
    { "setParam", _wrap_BesselHighPass_setParam},
    { "findParamId", _wrap_BesselHighPass_findParamId},
    { "setParamById", _wrap_BesselHighPass_setParamById},
    { "setParams", _wrap_BesselHighPass_setParams},
    { "copyParamsFrom", _wrap_BesselHighPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_BesselHighPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BesselHighPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BesselHighPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BesselHighPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BesselHighPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BesselHighPass_Sf_SwigStatic = {
    "BesselHighPass",
    swig_BesselHighPass_Sf_SwigStatic_methods,
    swig_BesselHighPass_Sf_SwigStatic_attributes,
    swig_BesselHighPass_Sf_SwigStatic_constants,
    swig_BesselHighPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BesselHighPass_bases[] = {0};
static const char *swig_BesselHighPass_base_names[] = {0};
static swig_lua_class _wrap_class_BesselHighPass = { "BesselHighPass", "BesselHighPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t,_proxy__wrap_new_BesselHighPass, swig_delete_BesselHighPass, swig_BesselHighPass_methods, swig_BesselHighPass_attributes, &swig_BesselHighPass_Sf_SwigStatic, swig_BesselHighPass_meta, swig_BesselHighPass_bases, swig_BesselHighPass_base_names };

static int _wrap_new_StereoBesselHighPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselHighPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoBesselHighPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselHighPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoBesselHighPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselHighPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoBesselHighPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoBesselHighPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoBesselHighPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoBesselHighPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoBesselHighPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoBesselHighPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselHighPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoBesselHighPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoBesselHighPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselHighPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoBesselHighPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoBesselHighPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselHighPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoBesselHighPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoBesselHighPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselHighPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoBesselHighPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoBesselHighPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoBesselHighPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoBesselHighPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoBesselHighPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoBesselHighPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselHighPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselHighPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselHighPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselHighPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselHighPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselHighPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselHighPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselHighPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselHighPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselHighPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselHighPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoBesselHighPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselHighPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselHighPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoBesselHighPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoBesselHighPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoBesselHighPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoBesselHighPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoBesselHighPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoBesselHighPass_methods[]= {
    { "process", _wrap_StereoBesselHighPass_process},
    { "ProcessBlock", _wrap_StereoBesselHighPass_ProcessBlock},
    { "getParams", _wrap_StereoBesselHighPass_getParams},
    { "getParam", _wrap_StereoBesselHighPass_getParam},
    { "setParam", _wrap_StereoBesselHighPass_setParam},
    { "findParamId", _wrap_StereoBesselHighPass_findParamId},
    { "setParamById", _wrap_StereoBesselHighPass_setParamById},
    { "setParams", _wrap_StereoBesselHighPass_setParams},
    { "copyParamsFrom", _wrap_StereoBesselHighPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoBesselHighPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoBesselHighPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoBesselHighPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoBesselHighPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoBesselHighPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoBesselHighPass_Sf_SwigStatic = {
    "StereoBesselHighPass",
    swig_StereoBesselHighPass_Sf_SwigStatic_methods,
    swig_StereoBesselHighPass_Sf_SwigStatic_attributes,
    swig_StereoBesselHighPass_Sf_SwigStatic_constants,
    swig_StereoBesselHighPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoBesselHighPass_bases[] = {0};
static const char *swig_StereoBesselHighPass_base_names[] = {0};
static swig_lua_class _wrap_class_StereoBesselHighPass = { "StereoBesselHighPass", "StereoBesselHighPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoBesselHighPass, swig_delete_StereoBesselHighPass, swig_StereoBesselHighPass_methods, swig_StereoBesselHighPass_attributes, &swig_StereoBesselHighPass_Sf_SwigStatic, swig_StereoBesselHighPass_meta, swig_StereoBesselHighPass_bases, swig_StereoBesselHighPass_base_names };

static int _wrap_new_BesselLowShelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowShelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("BesselLowShelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowShelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("BesselLowShelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowShelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BesselLowShelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BesselLowShelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BesselLowShelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_BesselLowShelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BesselLowShelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BesselLowShelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowShelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("BesselLowShelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("BesselLowShelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowShelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("BesselLowShelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("BesselLowShelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowShelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("BesselLowShelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("BesselLowShelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowShelf_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowShelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_BesselLowShelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_BesselLowShelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_BesselLowShelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_BesselLowShelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BesselLowShelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_BesselLowShelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowShelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowShelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowShelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowShelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowShelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowShelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowShelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowShelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowShelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowShelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowShelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("BesselLowShelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowShelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("BesselLowShelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("BesselLowShelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BesselLowShelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_BesselLowShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BesselLowShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BesselLowShelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BesselLowShelf_methods[]= {
    { "process", _wrap_BesselLowShelf_process},
    { "ProcessBlock", _wrap_BesselLowShelf_ProcessBlock},
    { "getParams", _wrap_BesselLowShelf_getParams},
    { "getParam", _wrap_BesselLowShelf_getParam},
    { "setParam", _wrap_BesselLowShelf_setParam},
    { "findParamId", _wrap_BesselLowShelf_findParamId},
    { "setParamById", _wrap_BesselLowShelf_setParamById},
    { "setParams", _wrap_BesselLowShelf_setParams},
    { "copyParamsFrom", _wrap_BesselLowShelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_BesselLowShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BesselLowShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BesselLowShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BesselLowShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BesselLowShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BesselLowShelf_Sf_SwigStatic = {
    "BesselLowShelf",
    swig_BesselLowShelf_Sf_SwigStatic_methods,
    swig_BesselLowShelf_Sf_SwigStatic_attributes,
    swig_BesselLowShelf_Sf_SwigStatic_constants,
    swig_BesselLowShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BesselLowShelf_bases[] = {0};
static const char *swig_BesselLowShelf_base_names[] = {0};
static swig_lua_class _wrap_class_BesselLowShelf = { "BesselLowShelf", "BesselLowShelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t,_proxy__wrap_new_BesselLowShelf, swig_delete_BesselLowShelf, swig_BesselLowShelf_methods, swig_BesselLowShelf_attributes, &swig_BesselLowShelf_Sf_SwigStatic, swig_BesselLowShelf_meta, swig_BesselLowShelf_bases, swig_BesselLowShelf_base_names };

static int _wrap_new_StereoBesselLowShelf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowShelf_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoBesselLowShelf_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowShelf_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowShelf_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoBesselLowShelf_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowShelf_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoBesselLowShelf_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoBesselLowShelf_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoBesselLowShelf_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoBesselLowShelf_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoBesselLowShelf_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoBesselLowShelf_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowShelf_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoBesselLowShelf_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoBesselLowShelf_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowShelf_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoBesselLowShelf_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoBesselLowShelf_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowShelf_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowShelf_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoBesselLowShelf_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoBesselLowShelf_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Bessel_Design_LowShelf_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowShelf_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoBesselLowShelf_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoBesselLowShelf_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoBesselLowShelf_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoBesselLowShelf_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoBesselLowShelf_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoBesselLowShelf_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowShelf_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowShelf_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowShelf_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowShelf_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowShelf_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowShelf_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowShelf_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowShelf_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowShelf_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowShelf_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowShelf_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoBesselLowShelf_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoBesselLowShelf_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoBesselLowShelf_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoBesselLowShelf_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoBesselLowShelf(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoBesselLowShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoBesselLowShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoBesselLowShelf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoBesselLowShelf_methods[]= {
    { "process", _wrap_StereoBesselLowShelf_process},
    { "ProcessBlock", _wrap_StereoBesselLowShelf_ProcessBlock},
    { "getParams", _wrap_StereoBesselLowShelf_getParams},
    { "getParam", _wrap_StereoBesselLowShelf_getParam},
    { "setParam", _wrap_StereoBesselLowShelf_setParam},
    { "findParamId", _wrap_StereoBesselLowShelf_findParamId},
    { "setParamById", _wrap_StereoBesselLowShelf_setParamById},
    { "setParams", _wrap_StereoBesselLowShelf_setParams},
    { "copyParamsFrom", _wrap_StereoBesselLowShelf_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoBesselLowShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoBesselLowShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoBesselLowShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoBesselLowShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoBesselLowShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoBesselLowShelf_Sf_SwigStatic = {
    "StereoBesselLowShelf",
    swig_StereoBesselLowShelf_Sf_SwigStatic_methods,
    swig_StereoBesselLowShelf_Sf_SwigStatic_attributes,
    swig_StereoBesselLowShelf_Sf_SwigStatic_constants,
    swig_StereoBesselLowShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoBesselLowShelf_bases[] = {0};
static const char *swig_StereoBesselLowShelf_base_names[] = {0};
static swig_lua_class _wrap_class_StereoBesselLowShelf = { "StereoBesselLowShelf", "StereoBesselLowShelf", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoBesselLowShelf, swig_delete_StereoBesselLowShelf, swig_StereoBesselLowShelf_methods, swig_StereoBesselLowShelf_attributes, &swig_StereoBesselLowShelf_Sf_SwigStatic, swig_StereoBesselLowShelf_meta, swig_StereoBesselLowShelf_bases, swig_StereoBesselLowShelf_base_names };

static int _wrap_new_LegendreBandPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("LegendreBandPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("LegendreBandPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LegendreBandPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LegendreBandPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LegendreBandPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_LegendreBandPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LegendreBandPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LegendreBandPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("LegendreBandPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("LegendreBandPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("LegendreBandPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("LegendreBandPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("LegendreBandPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("LegendreBandPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_LegendreBandPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_LegendreBandPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_LegendreBandPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_LegendreBandPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LegendreBandPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_LegendreBandPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("LegendreBandPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("LegendreBandPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LegendreBandPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_LegendreBandPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LegendreBandPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LegendreBandPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LegendreBandPass_methods[]= {
    { "process", _wrap_LegendreBandPass_process},
    { "ProcessBlock", _wrap_LegendreBandPass_ProcessBlock},
    { "getParams", _wrap_LegendreBandPass_getParams},
    { "getParam", _wrap_LegendreBandPass_getParam},
    { "setParam", _wrap_LegendreBandPass_setParam},
    { "findParamId", _wrap_LegendreBandPass_findParamId},
    { "setParamById", _wrap_LegendreBandPass_setParamById},
    { "setParams", _wrap_LegendreBandPass_setParams},
    { "copyParamsFrom", _wrap_LegendreBandPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_LegendreBandPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LegendreBandPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LegendreBandPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LegendreBandPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LegendreBandPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LegendreBandPass_Sf_SwigStatic = {
    "LegendreBandPass",
    swig_LegendreBandPass_Sf_SwigStatic_methods,
    swig_LegendreBandPass_Sf_SwigStatic_attributes,
    swig_LegendreBandPass_Sf_SwigStatic_constants,
    swig_LegendreBandPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LegendreBandPass_bases[] = {0};
static const char *swig_LegendreBandPass_base_names[] = {0};
static swig_lua_class _wrap_class_LegendreBandPass = { "LegendreBandPass", "LegendreBandPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t,_proxy__wrap_new_LegendreBandPass, swig_delete_LegendreBandPass, swig_LegendreBandPass_methods, swig_LegendreBandPass_attributes, &swig_LegendreBandPass_Sf_SwigStatic, swig_LegendreBandPass_meta, swig_LegendreBandPass_bases, swig_LegendreBandPass_base_names };

static int _wrap_new_StereoLegendreBandPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoLegendreBandPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoLegendreBandPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoLegendreBandPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoLegendreBandPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoLegendreBandPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoLegendreBandPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoLegendreBandPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoLegendreBandPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoLegendreBandPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoLegendreBandPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoLegendreBandPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoLegendreBandPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoLegendreBandPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoLegendreBandPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoLegendreBandPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoLegendreBandPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoLegendreBandPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoLegendreBandPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoLegendreBandPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoLegendreBandPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoLegendreBandPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoLegendreBandPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoLegendreBandPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoLegendreBandPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoLegendreBandPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoLegendreBandPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoLegendreBandPass_methods[]= {
    { "process", _wrap_StereoLegendreBandPass_process},
    { "ProcessBlock", _wrap_StereoLegendreBandPass_ProcessBlock},
    { "getParams", _wrap_StereoLegendreBandPass_getParams},
    { "getParam", _wrap_StereoLegendreBandPass_getParam},
    { "setParam", _wrap_StereoLegendreBandPass_setParam},
    { "findParamId", _wrap_StereoLegendreBandPass_findParamId},
    { "setParamById", _wrap_StereoLegendreBandPass_setParamById},
    { "setParams", _wrap_StereoLegendreBandPass_setParams},
    { "copyParamsFrom", _wrap_StereoLegendreBandPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoLegendreBandPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoLegendreBandPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoLegendreBandPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoLegendreBandPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoLegendreBandPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoLegendreBandPass_Sf_SwigStatic = {
    "StereoLegendreBandPass",
    swig_StereoLegendreBandPass_Sf_SwigStatic_methods,
    swig_StereoLegendreBandPass_Sf_SwigStatic_attributes,
    swig_StereoLegendreBandPass_Sf_SwigStatic_constants,
    swig_StereoLegendreBandPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoLegendreBandPass_bases[] = {0};
static const char *swig_StereoLegendreBandPass_base_names[] = {0};
static swig_lua_class _wrap_class_StereoLegendreBandPass = { "StereoLegendreBandPass", "StereoLegendreBandPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoLegendreBandPass, swig_delete_StereoLegendreBandPass, swig_StereoLegendreBandPass_methods, swig_StereoLegendreBandPass_attributes, &swig_StereoLegendreBandPass_Sf_SwigStatic, swig_StereoLegendreBandPass_meta, swig_StereoLegendreBandPass_bases, swig_StereoLegendreBandPass_base_names };

static int _wrap_new_LegendreBandStop(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandStop_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("LegendreBandStop_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandStop_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("LegendreBandStop_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandStop_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LegendreBandStop_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LegendreBandStop_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LegendreBandStop_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_LegendreBandStop_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LegendreBandStop_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LegendreBandStop_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandStop_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("LegendreBandStop_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("LegendreBandStop_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandStop_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("LegendreBandStop_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("LegendreBandStop_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandStop_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("LegendreBandStop_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("LegendreBandStop_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandStop_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandStop_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_LegendreBandStop_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_LegendreBandStop_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_LegendreBandStop_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_LegendreBandStop_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LegendreBandStop_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_LegendreBandStop_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandStop_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandStop_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandStop_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandStop_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandStop_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandStop_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandStop_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandStop_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandStop_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandStop_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandStop_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("LegendreBandStop_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreBandStop_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreBandStop_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("LegendreBandStop_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LegendreBandStop(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_LegendreBandStop(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LegendreBandStop);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LegendreBandStop_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LegendreBandStop_methods[]= {
    { "process", _wrap_LegendreBandStop_process},
    { "ProcessBlock", _wrap_LegendreBandStop_ProcessBlock},
    { "getParams", _wrap_LegendreBandStop_getParams},
    { "getParam", _wrap_LegendreBandStop_getParam},
    { "setParam", _wrap_LegendreBandStop_setParam},
    { "findParamId", _wrap_LegendreBandStop_findParamId},
    { "setParamById", _wrap_LegendreBandStop_setParamById},
    { "setParams", _wrap_LegendreBandStop_setParams},
    { "copyParamsFrom", _wrap_LegendreBandStop_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_LegendreBandStop_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LegendreBandStop_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LegendreBandStop_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LegendreBandStop_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LegendreBandStop_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LegendreBandStop_SwigStatic = {
    "LegendreBandStop",
    swig_LegendreBandStop_SwigStatic_methods,
    swig_LegendreBandStop_SwigStatic_attributes,
    swig_LegendreBandStop_SwigStatic_constants,
    swig_LegendreBandStop_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LegendreBandStop_bases[] = {0};
static const char *swig_LegendreBandStop_base_names[] = {0};
static swig_lua_class _wrap_class_LegendreBandStop = { "LegendreBandStop", "LegendreBandStop", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t,_proxy__wrap_new_LegendreBandStop, swig_delete_LegendreBandStop, swig_LegendreBandStop_methods, swig_LegendreBandStop_attributes, &swig_LegendreBandStop_SwigStatic, swig_LegendreBandStop_meta, swig_LegendreBandStop_bases, swig_LegendreBandStop_base_names };

static int _wrap_new_StereoLegendreBandStop(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandStop_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoLegendreBandStop_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandStop_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandStop_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoLegendreBandStop_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandStop_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoLegendreBandStop_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoLegendreBandStop_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoLegendreBandStop_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoLegendreBandStop_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoLegendreBandStop_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoLegendreBandStop_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandStop_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoLegendreBandStop_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoLegendreBandStop_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandStop_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoLegendreBandStop_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoLegendreBandStop_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandStop_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandStop_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoLegendreBandStop_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoLegendreBandStop_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_BandStop_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandStop_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoLegendreBandStop_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoLegendreBandStop_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoLegendreBandStop_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoLegendreBandStop_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoLegendreBandStop_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoLegendreBandStop_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandStop_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandStop_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandStop_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandStop_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandStop_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandStop_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandStop_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandStop_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandStop_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandStop_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandStop_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoLegendreBandStop_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreBandStop_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreBandStop_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoLegendreBandStop_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoLegendreBandStop(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoLegendreBandStop(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoLegendreBandStop);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoLegendreBandStop_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoLegendreBandStop_methods[]= {
    { "process", _wrap_StereoLegendreBandStop_process},
    { "ProcessBlock", _wrap_StereoLegendreBandStop_ProcessBlock},
    { "getParams", _wrap_StereoLegendreBandStop_getParams},
    { "getParam", _wrap_StereoLegendreBandStop_getParam},
    { "setParam", _wrap_StereoLegendreBandStop_setParam},
    { "findParamId", _wrap_StereoLegendreBandStop_findParamId},
    { "setParamById", _wrap_StereoLegendreBandStop_setParamById},
    { "setParams", _wrap_StereoLegendreBandStop_setParams},
    { "copyParamsFrom", _wrap_StereoLegendreBandStop_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoLegendreBandStop_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoLegendreBandStop_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoLegendreBandStop_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoLegendreBandStop_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoLegendreBandStop_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoLegendreBandStop_SwigStatic = {
    "StereoLegendreBandStop",
    swig_StereoLegendreBandStop_SwigStatic_methods,
    swig_StereoLegendreBandStop_SwigStatic_attributes,
    swig_StereoLegendreBandStop_SwigStatic_constants,
    swig_StereoLegendreBandStop_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoLegendreBandStop_bases[] = {0};
static const char *swig_StereoLegendreBandStop_base_names[] = {0};
static swig_lua_class _wrap_class_StereoLegendreBandStop = { "StereoLegendreBandStop", "StereoLegendreBandStop", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoLegendreBandStop, swig_delete_StereoLegendreBandStop, swig_StereoLegendreBandStop_methods, swig_StereoLegendreBandStop_attributes, &swig_StereoLegendreBandStop_SwigStatic, swig_StereoLegendreBandStop_meta, swig_StereoLegendreBandStop_bases, swig_StereoLegendreBandStop_base_names };

static int _wrap_new_LegendreLowPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreLowPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreLowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("LegendreLowPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreLowPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreLowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("LegendreLowPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreLowPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LegendreLowPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LegendreLowPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LegendreLowPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_LegendreLowPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LegendreLowPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LegendreLowPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreLowPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("LegendreLowPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("LegendreLowPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreLowPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("LegendreLowPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("LegendreLowPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreLowPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("LegendreLowPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("LegendreLowPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_LowPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreLowPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_LegendreLowPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_LegendreLowPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_LegendreLowPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_LegendreLowPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LegendreLowPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_LegendreLowPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreLowPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreLowPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreLowPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreLowPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreLowPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreLowPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreLowPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreLowPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreLowPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreLowPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreLowPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("LegendreLowPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreLowPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreLowPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("LegendreLowPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LegendreLowPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_LegendreLowPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LegendreLowPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LegendreLowPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LegendreLowPass_methods[]= {
    { "process", _wrap_LegendreLowPass_process},
    { "ProcessBlock", _wrap_LegendreLowPass_ProcessBlock},
    { "getParams", _wrap_LegendreLowPass_getParams},
    { "getParam", _wrap_LegendreLowPass_getParam},
    { "setParam", _wrap_LegendreLowPass_setParam},
    { "findParamId", _wrap_LegendreLowPass_findParamId},
    { "setParamById", _wrap_LegendreLowPass_setParamById},
    { "setParams", _wrap_LegendreLowPass_setParams},
    { "copyParamsFrom", _wrap_LegendreLowPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_LegendreLowPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LegendreLowPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LegendreLowPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LegendreLowPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LegendreLowPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LegendreLowPass_Sf_SwigStatic = {
    "LegendreLowPass",
    swig_LegendreLowPass_Sf_SwigStatic_methods,
    swig_LegendreLowPass_Sf_SwigStatic_attributes,
    swig_LegendreLowPass_Sf_SwigStatic_constants,
    swig_LegendreLowPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LegendreLowPass_bases[] = {0};
static const char *swig_LegendreLowPass_base_names[] = {0};
static swig_lua_class _wrap_class_LegendreLowPass = { "LegendreLowPass", "LegendreLowPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t,_proxy__wrap_new_LegendreLowPass, swig_delete_LegendreLowPass, swig_LegendreLowPass_methods, swig_LegendreLowPass_attributes, &swig_LegendreLowPass_Sf_SwigStatic, swig_LegendreLowPass_meta, swig_LegendreLowPass_bases, swig_LegendreLowPass_base_names };

static int _wrap_new_StereoLegendreLowPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreLowPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreLowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoLegendreLowPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreLowPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreLowPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoLegendreLowPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreLowPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoLegendreLowPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoLegendreLowPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoLegendreLowPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoLegendreLowPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoLegendreLowPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoLegendreLowPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreLowPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoLegendreLowPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoLegendreLowPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreLowPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoLegendreLowPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoLegendreLowPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreLowPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreLowPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoLegendreLowPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoLegendreLowPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_LowPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreLowPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoLegendreLowPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoLegendreLowPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoLegendreLowPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoLegendreLowPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoLegendreLowPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoLegendreLowPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreLowPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreLowPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreLowPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreLowPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreLowPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreLowPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreLowPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreLowPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreLowPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreLowPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreLowPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoLegendreLowPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreLowPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreLowPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoLegendreLowPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoLegendreLowPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoLegendreLowPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoLegendreLowPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoLegendreLowPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoLegendreLowPass_methods[]= {
    { "process", _wrap_StereoLegendreLowPass_process},
    { "ProcessBlock", _wrap_StereoLegendreLowPass_ProcessBlock},
    { "getParams", _wrap_StereoLegendreLowPass_getParams},
    { "getParam", _wrap_StereoLegendreLowPass_getParam},
    { "setParam", _wrap_StereoLegendreLowPass_setParam},
    { "findParamId", _wrap_StereoLegendreLowPass_findParamId},
    { "setParamById", _wrap_StereoLegendreLowPass_setParamById},
    { "setParams", _wrap_StereoLegendreLowPass_setParams},
    { "copyParamsFrom", _wrap_StereoLegendreLowPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoLegendreLowPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoLegendreLowPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoLegendreLowPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoLegendreLowPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoLegendreLowPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoLegendreLowPass_Sf_SwigStatic = {
    "StereoLegendreLowPass",
    swig_StereoLegendreLowPass_Sf_SwigStatic_methods,
    swig_StereoLegendreLowPass_Sf_SwigStatic_attributes,
    swig_StereoLegendreLowPass_Sf_SwigStatic_constants,
    swig_StereoLegendreLowPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoLegendreLowPass_bases[] = {0};
static const char *swig_StereoLegendreLowPass_base_names[] = {0};
static swig_lua_class _wrap_class_StereoLegendreLowPass = { "StereoLegendreLowPass", "StereoLegendreLowPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoLegendreLowPass, swig_delete_StereoLegendreLowPass, swig_StereoLegendreLowPass_methods, swig_StereoLegendreLowPass_attributes, &swig_StereoLegendreLowPass_Sf_SwigStatic, swig_StereoLegendreLowPass_meta, swig_StereoLegendreLowPass_bases, swig_StereoLegendreLowPass_base_names };

static int _wrap_new_LegendreHighPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *)new Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreHighPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("LegendreHighPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreHighPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("LegendreHighPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreHighPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LegendreHighPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LegendreHighPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LegendreHighPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_LegendreHighPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LegendreHighPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LegendreHighPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreHighPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("LegendreHighPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("LegendreHighPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreHighPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("LegendreHighPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("LegendreHighPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreHighPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("LegendreHighPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("LegendreHighPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_HighPass_Sl_64_Sg__Sc_1_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreHighPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_LegendreHighPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_LegendreHighPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_LegendreHighPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_LegendreHighPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LegendreHighPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_LegendreHighPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreHighPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreHighPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreHighPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreHighPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreHighPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreHighPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreHighPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreHighPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreHighPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreHighPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreHighPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("LegendreHighPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegendreHighPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t,0))){
    SWIG_fail_ptr("LegendreHighPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("LegendreHighPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LegendreHighPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_LegendreHighPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LegendreHighPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LegendreHighPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LegendreHighPass_methods[]= {
    { "process", _wrap_LegendreHighPass_process},
    { "ProcessBlock", _wrap_LegendreHighPass_ProcessBlock},
    { "getParams", _wrap_LegendreHighPass_getParams},
    { "getParam", _wrap_LegendreHighPass_getParam},
    { "setParam", _wrap_LegendreHighPass_setParam},
    { "findParamId", _wrap_LegendreHighPass_findParamId},
    { "setParamById", _wrap_LegendreHighPass_setParamById},
    { "setParams", _wrap_LegendreHighPass_setParams},
    { "copyParamsFrom", _wrap_LegendreHighPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_LegendreHighPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LegendreHighPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LegendreHighPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LegendreHighPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LegendreHighPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LegendreHighPass_Sf_SwigStatic = {
    "LegendreHighPass",
    swig_LegendreHighPass_Sf_SwigStatic_methods,
    swig_LegendreHighPass_Sf_SwigStatic_attributes,
    swig_LegendreHighPass_Sf_SwigStatic_constants,
    swig_LegendreHighPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LegendreHighPass_bases[] = {0};
static const char *swig_LegendreHighPass_base_names[] = {0};
static swig_lua_class _wrap_class_LegendreHighPass = { "LegendreHighPass", "LegendreHighPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t,_proxy__wrap_new_LegendreHighPass, swig_delete_LegendreHighPass, swig_LegendreHighPass_methods, swig_LegendreHighPass_attributes, &swig_LegendreHighPass_Sf_SwigStatic, swig_LegendreHighPass_meta, swig_LegendreHighPass_bases, swig_LegendreHighPass_base_names };

static int _wrap_new_StereoLegendreHighPass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::SmoothedFilterDesign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::SmoothedFilterDesign",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *)new Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreHighPass_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::process",3,"float *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoLegendreHighPass_process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->process(arg2,(float *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreHighPass_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::process",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::process",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::process",3,"double *const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreHighPass_process",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoLegendreHighPass_process",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->process(arg2,(double *const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreHighPass_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoLegendreHighPass_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StereoLegendreHighPass_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoLegendreHighPass_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::process(int,float *const *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::process(int,double *const *)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoLegendreHighPass_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoLegendreHighPass_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoLegendreHighPass_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreHighPass_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoLegendreHighPass_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoLegendreHighPass_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreHighPass_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoLegendreHighPass_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoLegendreHighPass_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreHighPass_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *) 0 ;
  size_t arg2 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::ProcessBlock",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::ProcessBlock",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::ProcessBlock",4,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreHighPass_ProcessBlock",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoLegendreHighPass_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoLegendreHighPass_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  Dsp_SmoothedFilterDesign_Sl_Dsp_Legendre_Design_HighPass_Sl_64_Sg__Sc_2_Sg__ProcessBlock__SWIG_3(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreHighPass_ProcessBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoLegendreHighPass_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoLegendreHighPass_ProcessBlock__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoLegendreHighPass_ProcessBlock__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StereoLegendreHighPass_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoLegendreHighPass_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::ProcessBlock(size_t,float *,float *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::ProcessBlock(size_t,float **,float **)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::ProcessBlock(size_t,double *,double *)\n"
    "    Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::ProcessBlock(size_t,double **,double **)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoLegendreHighPass_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *) 0 ;
  Dsp::Params *result = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::getParams",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreHighPass_getParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  result = (Dsp::Params *) &((Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > const *)arg1)->getParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__Params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreHighPass_getParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::getParam",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreHighPass_getParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreHighPass_setParam(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::setParam",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::setParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreHighPass_setParam",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreHighPass_findParamId(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::findParamId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::findParamId",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::findParamId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreHighPass_findParamId",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->findParamId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreHighPass_setParamById(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::setParamById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::setParamById",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::setParamById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::setParamById",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreHighPass_setParamById",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setParamById(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreHighPass_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *) 0 ;
  Dsp::Params *arg2 = 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::setParams",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::setParams",2,"Dsp::Params const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreHighPass_setParams",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Params,0))){
    SWIG_fail_ptr("StereoLegendreHighPass_setParams",2,SWIGTYPE_p_Dsp__Params);
  }
  
  (arg1)->setParams((Dsp::Params const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoLegendreHighPass_copyParamsFrom(lua_State* L) {
  int SWIG_arg = 0;
  Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *) 0 ;
  Dsp::Filter *arg2 = (Dsp::Filter *) 0 ;
  
  SWIG_check_num_args("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::copyParamsFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::copyParamsFrom",1,"Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 >::copyParamsFrom",2,"Dsp::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t,0))){
    SWIG_fail_ptr("StereoLegendreHighPass_copyParamsFrom",1,SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__Filter,0))){
    SWIG_fail_ptr("StereoLegendreHighPass_copyParamsFrom",2,SWIGTYPE_p_Dsp__Filter);
  }
  
  (arg1)->copyParamsFrom((Dsp::Filter const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoLegendreHighPass(void *obj) {
Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *arg1 = (Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoLegendreHighPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoLegendreHighPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoLegendreHighPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoLegendreHighPass_methods[]= {
    { "process", _wrap_StereoLegendreHighPass_process},
    { "ProcessBlock", _wrap_StereoLegendreHighPass_ProcessBlock},
    { "getParams", _wrap_StereoLegendreHighPass_getParams},
    { "getParam", _wrap_StereoLegendreHighPass_getParam},
    { "setParam", _wrap_StereoLegendreHighPass_setParam},
    { "findParamId", _wrap_StereoLegendreHighPass_findParamId},
    { "setParamById", _wrap_StereoLegendreHighPass_setParamById},
    { "setParams", _wrap_StereoLegendreHighPass_setParams},
    { "copyParamsFrom", _wrap_StereoLegendreHighPass_copyParamsFrom},
    {0,0}
};
static swig_lua_method swig_StereoLegendreHighPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoLegendreHighPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoLegendreHighPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoLegendreHighPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoLegendreHighPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoLegendreHighPass_Sf_SwigStatic = {
    "StereoLegendreHighPass",
    swig_StereoLegendreHighPass_Sf_SwigStatic_methods,
    swig_StereoLegendreHighPass_Sf_SwigStatic_attributes,
    swig_StereoLegendreHighPass_Sf_SwigStatic_constants,
    swig_StereoLegendreHighPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoLegendreHighPass_bases[] = {0};
static const char *swig_StereoLegendreHighPass_base_names[] = {0};
static swig_lua_class _wrap_class_StereoLegendreHighPass = { "StereoLegendreHighPass", "StereoLegendreHighPass", &SWIGTYPE_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t,_proxy__wrap_new_StereoLegendreHighPass, swig_delete_StereoLegendreHighPass, swig_StereoLegendreHighPass_methods, swig_StereoLegendreHighPass_attributes, &swig_StereoLegendreHighPass_Sf_SwigStatic, swig_StereoLegendreHighPass_meta, swig_StereoLegendreHighPass_bases, swig_StereoLegendreHighPass_base_names };

static int _wrap_new_pole_zero_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Dsp::PoleZeroPair *arg2 = 0 ;
  std::vector< Dsp::PoleZeroPair > *result = 0 ;
  
  SWIG_check_num_args("std::vector< Dsp::PoleZeroPair >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::vector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::vector",2,"Dsp::PoleZeroPair const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__PoleZeroPair,0))){
    SWIG_fail_ptr("new_pole_zero_vector",2,SWIGTYPE_p_Dsp__PoleZeroPair);
  }
  
  result = (std::vector< Dsp::PoleZeroPair > *)new std::vector< Dsp::PoleZeroPair >(arg1,(Dsp::PoleZeroPair const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_pole_zero_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< Dsp::PoleZeroPair > *result = 0 ;
  
  SWIG_check_num_args("std::vector< Dsp::PoleZeroPair >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< Dsp::PoleZeroPair > *)new std::vector< Dsp::PoleZeroPair >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_pole_zero_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< Dsp::PoleZeroPair > *arg1 = 0 ;
  std::vector< Dsp::PoleZeroPair > *result = 0 ;
  
  SWIG_check_num_args("std::vector< Dsp::PoleZeroPair >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::vector",1,"std::vector< Dsp::PoleZeroPair > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,0))){
    SWIG_fail_ptr("new_pole_zero_vector",1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t);
  }
  
  result = (std::vector< Dsp::PoleZeroPair > *)new std::vector< Dsp::PoleZeroPair >((std::vector< Dsp::PoleZeroPair > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_pole_zero_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_pole_zero_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_pole_zero_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Dsp__PoleZeroPair, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_pole_zero_vector__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_pole_zero_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Dsp::PoleZeroPair >::vector(size_t,Dsp::PoleZeroPair const &)\n"
    "    std::vector< Dsp::PoleZeroPair >::vector(size_t)\n"
    "    std::vector< Dsp::PoleZeroPair >::vector(std::vector< Dsp::PoleZeroPair > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_pole_zero_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< Dsp::PoleZeroPair > *arg1 = (std::vector< Dsp::PoleZeroPair > *) 0 ;
  size_t arg2 ;
  Dsp::PoleZeroPair result;
  
  SWIG_check_num_args("std::vector< Dsp::PoleZeroPair >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::__getitem",1,"std::vector< Dsp::PoleZeroPair > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,0))){
    SWIG_fail_ptr("pole_zero_vector___getitem",1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = std_vector_Sl_Dsp_PoleZeroPair_Sg____getitem__SWIG(arg1,arg2);
  {
    Dsp::PoleZeroPair * resultptr = new Dsp::PoleZeroPair((const Dsp::PoleZeroPair &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__PoleZeroPair,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pole_zero_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< Dsp::PoleZeroPair > *arg1 = (std::vector< Dsp::PoleZeroPair > *) 0 ;
  size_t arg2 ;
  Dsp::PoleZeroPair arg3 ;
  Dsp::PoleZeroPair *argp3 ;
  
  SWIG_check_num_args("std::vector< Dsp::PoleZeroPair >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::__setitem",1,"std::vector< Dsp::PoleZeroPair > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::__setitem",3,"Dsp::PoleZeroPair");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,0))){
    SWIG_fail_ptr("pole_zero_vector___setitem",1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_Dsp__PoleZeroPair,0))){
    SWIG_fail_ptr("pole_zero_vector___setitem",3,SWIGTYPE_p_Dsp__PoleZeroPair);
  }
  arg3 = *argp3;
  
  std_vector_Sl_Dsp_PoleZeroPair_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pole_zero_vector_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< Dsp::PoleZeroPair > *arg1 = (std::vector< Dsp::PoleZeroPair > *) 0 ;
  SwigValueWrapper< std::vector_iterator< Dsp::PoleZeroPair > > result;
  
  SWIG_check_num_args("std::vector< Dsp::PoleZeroPair >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::begin",1,"std::vector< Dsp::PoleZeroPair > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,0))){
    SWIG_fail_ptr("pole_zero_vector_begin",1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t);
  }
  
  result = std_vector_Sl_Dsp_PoleZeroPair_Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< Dsp::PoleZeroPair > * resultptr = new std::vector_iterator< Dsp::PoleZeroPair >((const std::vector_iterator< Dsp::PoleZeroPair > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_Dsp__PoleZeroPair_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pole_zero_vector_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< Dsp::PoleZeroPair > *arg1 = (std::vector< Dsp::PoleZeroPair > *) 0 ;
  SwigValueWrapper< std::vector_iterator< Dsp::PoleZeroPair > > result;
  
  SWIG_check_num_args("std::vector< Dsp::PoleZeroPair >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::end",1,"std::vector< Dsp::PoleZeroPair > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,0))){
    SWIG_fail_ptr("pole_zero_vector_c_end",1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t);
  }
  
  result = std_vector_Sl_Dsp_PoleZeroPair_Sg__end__SWIG(arg1);
  {
    std::vector_iterator< Dsp::PoleZeroPair > * resultptr = new std::vector_iterator< Dsp::PoleZeroPair >((const std::vector_iterator< Dsp::PoleZeroPair > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_Dsp__PoleZeroPair_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pole_zero_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< Dsp::PoleZeroPair > *arg1 = (std::vector< Dsp::PoleZeroPair > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< Dsp::PoleZeroPair >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::erase",1,"std::vector< Dsp::PoleZeroPair > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,0))){
    SWIG_fail_ptr("pole_zero_vector_erase",1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_Dsp_PoleZeroPair_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pole_zero_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< Dsp::PoleZeroPair > *arg1 = (std::vector< Dsp::PoleZeroPair > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< Dsp::PoleZeroPair >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::erase",1,"std::vector< Dsp::PoleZeroPair > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,0))){
    SWIG_fail_ptr("pole_zero_vector_erase",1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_Dsp_PoleZeroPair_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pole_zero_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_pole_zero_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_pole_zero_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'pole_zero_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Dsp::PoleZeroPair >::erase(size_t)\n"
    "    std::vector< Dsp::PoleZeroPair >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_pole_zero_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< Dsp::PoleZeroPair > *arg1 = (std::vector< Dsp::PoleZeroPair > *) 0 ;
  Dsp::PoleZeroPair *result = 0 ;
  
  SWIG_check_num_args("std::vector< Dsp::PoleZeroPair >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::front",1,"std::vector< Dsp::PoleZeroPair > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,0))){
    SWIG_fail_ptr("pole_zero_vector_front",1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t);
  }
  
  result = (Dsp::PoleZeroPair *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__PoleZeroPair,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pole_zero_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< Dsp::PoleZeroPair > *arg1 = (std::vector< Dsp::PoleZeroPair > *) 0 ;
  Dsp::PoleZeroPair *result = 0 ;
  
  SWIG_check_num_args("std::vector< Dsp::PoleZeroPair >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::back",1,"std::vector< Dsp::PoleZeroPair > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,0))){
    SWIG_fail_ptr("pole_zero_vector_back",1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t);
  }
  
  result = (Dsp::PoleZeroPair *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__PoleZeroPair,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pole_zero_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< Dsp::PoleZeroPair > *arg1 = (std::vector< Dsp::PoleZeroPair > *) 0 ;
  Dsp::PoleZeroPair *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< Dsp::PoleZeroPair >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::push_back",1,"std::vector< Dsp::PoleZeroPair > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::push_back",2,"Dsp::PoleZeroPair const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,0))){
    SWIG_fail_ptr("pole_zero_vector_push_back",1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Dsp__PoleZeroPair,0))){
    SWIG_fail_ptr("pole_zero_vector_push_back",2,SWIGTYPE_p_Dsp__PoleZeroPair);
  }
  
  (arg1)->push_back((Dsp::PoleZeroPair const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pole_zero_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< Dsp::PoleZeroPair > *arg1 = (std::vector< Dsp::PoleZeroPair > *) 0 ;
  
  SWIG_check_num_args("std::vector< Dsp::PoleZeroPair >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::pop_back",1,"std::vector< Dsp::PoleZeroPair > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,0))){
    SWIG_fail_ptr("pole_zero_vector_pop_back",1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pole_zero_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< Dsp::PoleZeroPair > *arg1 = (std::vector< Dsp::PoleZeroPair > *) 0 ;
  size_t arg2 ;
  Dsp::PoleZeroPair *result = 0 ;
  
  SWIG_check_num_args("std::vector< Dsp::PoleZeroPair >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::at",1,"std::vector< Dsp::PoleZeroPair > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,0))){
    SWIG_fail_ptr("pole_zero_vector_at",1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Dsp::PoleZeroPair *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__PoleZeroPair,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pole_zero_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< Dsp::PoleZeroPair > *arg1 = (std::vector< Dsp::PoleZeroPair > *) 0 ;
  size_t arg2 ;
  Dsp::PoleZeroPair *arg3 = 0 ;
  
  SWIG_check_num_args("std::vector< Dsp::PoleZeroPair >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::assign",1,"std::vector< Dsp::PoleZeroPair > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::assign",3,"Dsp::PoleZeroPair const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,0))){
    SWIG_fail_ptr("pole_zero_vector_assign",1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Dsp__PoleZeroPair,0))){
    SWIG_fail_ptr("pole_zero_vector_assign",3,SWIGTYPE_p_Dsp__PoleZeroPair);
  }
  
  (arg1)->assign(arg2,(Dsp::PoleZeroPair const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pole_zero_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< Dsp::PoleZeroPair > *arg1 = (std::vector< Dsp::PoleZeroPair > *) 0 ;
  Dsp::PoleZeroPair *result = 0 ;
  
  SWIG_check_num_args("std::vector< Dsp::PoleZeroPair >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::data",1,"std::vector< Dsp::PoleZeroPair > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,0))){
    SWIG_fail_ptr("pole_zero_vector_data",1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t);
  }
  
  result = (Dsp::PoleZeroPair *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dsp__PoleZeroPair,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pole_zero_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< Dsp::PoleZeroPair > *arg1 = (std::vector< Dsp::PoleZeroPair > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< Dsp::PoleZeroPair >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::size",1,"std::vector< Dsp::PoleZeroPair > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,0))){
    SWIG_fail_ptr("pole_zero_vector_size",1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pole_zero_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< Dsp::PoleZeroPair > *arg1 = (std::vector< Dsp::PoleZeroPair > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< Dsp::PoleZeroPair >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::empty",1,"std::vector< Dsp::PoleZeroPair > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,0))){
    SWIG_fail_ptr("pole_zero_vector_empty",1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t);
  }
  
  result = (bool)((std::vector< Dsp::PoleZeroPair > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pole_zero_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< Dsp::PoleZeroPair > *arg1 = (std::vector< Dsp::PoleZeroPair > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< Dsp::PoleZeroPair >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::resize",1,"std::vector< Dsp::PoleZeroPair > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,0))){
    SWIG_fail_ptr("pole_zero_vector_resize",1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pole_zero_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< Dsp::PoleZeroPair > *arg1 = (std::vector< Dsp::PoleZeroPair > *) 0 ;
  
  SWIG_check_num_args("std::vector< Dsp::PoleZeroPair >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::clear",1,"std::vector< Dsp::PoleZeroPair > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,0))){
    SWIG_fail_ptr("pole_zero_vector_clear",1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pole_zero_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< Dsp::PoleZeroPair > *arg1 = (std::vector< Dsp::PoleZeroPair > *) 0 ;
  std::vector< Dsp::PoleZeroPair > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< Dsp::PoleZeroPair >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::swap",1,"std::vector< Dsp::PoleZeroPair > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::swap",2,"std::vector< Dsp::PoleZeroPair > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,0))){
    SWIG_fail_ptr("pole_zero_vector_swap",1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,0))){
    SWIG_fail_ptr("pole_zero_vector_swap",2,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pole_zero_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< Dsp::PoleZeroPair > *arg1 = (std::vector< Dsp::PoleZeroPair > *) 0 ;
  
  SWIG_check_num_args("std::vector< Dsp::PoleZeroPair >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::shrink_to_fit",1,"std::vector< Dsp::PoleZeroPair > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,0))){
    SWIG_fail_ptr("pole_zero_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pole_zero_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< Dsp::PoleZeroPair > *arg1 = (std::vector< Dsp::PoleZeroPair > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< Dsp::PoleZeroPair >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::reserve",1,"std::vector< Dsp::PoleZeroPair > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,0))){
    SWIG_fail_ptr("pole_zero_vector_reserve",1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pole_zero_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< Dsp::PoleZeroPair > *arg1 = (std::vector< Dsp::PoleZeroPair > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< Dsp::PoleZeroPair >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::max_size",1,"std::vector< Dsp::PoleZeroPair > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,0))){
    SWIG_fail_ptr("pole_zero_vector_max_size",1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pole_zero_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< Dsp::PoleZeroPair > *arg1 = (std::vector< Dsp::PoleZeroPair > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< Dsp::PoleZeroPair >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< Dsp::PoleZeroPair >::capacity",1,"std::vector< Dsp::PoleZeroPair > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,0))){
    SWIG_fail_ptr("pole_zero_vector_capacity",1,SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_pole_zero_vector(void *obj) {
std::vector< Dsp::PoleZeroPair > *arg1 = (std::vector< Dsp::PoleZeroPair > *) obj;
delete arg1;
}
static int _proxy__wrap_new_pole_zero_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_pole_zero_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_pole_zero_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_pole_zero_vector_methods[]= {
    { "__getitem", _wrap_pole_zero_vector___getitem},
    { "__setitem", _wrap_pole_zero_vector___setitem},
    { "begin", _wrap_pole_zero_vector_begin},
    { "c_end", _wrap_pole_zero_vector_c_end},
    { "erase", _wrap_pole_zero_vector_erase},
    { "front", _wrap_pole_zero_vector_front},
    { "back", _wrap_pole_zero_vector_back},
    { "push_back", _wrap_pole_zero_vector_push_back},
    { "pop_back", _wrap_pole_zero_vector_pop_back},
    { "at", _wrap_pole_zero_vector_at},
    { "assign", _wrap_pole_zero_vector_assign},
    { "data", _wrap_pole_zero_vector_data},
    { "size", _wrap_pole_zero_vector_size},
    { "empty", _wrap_pole_zero_vector_empty},
    { "resize", _wrap_pole_zero_vector_resize},
    { "clear", _wrap_pole_zero_vector_clear},
    { "swap", _wrap_pole_zero_vector_swap},
    { "shrink_to_fit", _wrap_pole_zero_vector_shrink_to_fit},
    { "reserve", _wrap_pole_zero_vector_reserve},
    { "max_size", _wrap_pole_zero_vector_max_size},
    { "capacity", _wrap_pole_zero_vector_capacity},
    {0,0}
};
static swig_lua_method swig_pole_zero_vector_meta[] = {
    { "__getitem", _wrap_pole_zero_vector___getitem},
    { "__setitem", _wrap_pole_zero_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_pole_zero_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_pole_zero_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_pole_zero_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_pole_zero_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_pole_zero_vector_Sf_SwigStatic = {
    "pole_zero_vector",
    swig_pole_zero_vector_Sf_SwigStatic_methods,
    swig_pole_zero_vector_Sf_SwigStatic_attributes,
    swig_pole_zero_vector_Sf_SwigStatic_constants,
    swig_pole_zero_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_pole_zero_vector_bases[] = {0};
static const char *swig_pole_zero_vector_base_names[] = {0};
static swig_lua_class _wrap_class_pole_zero_vector = { "pole_zero_vector", "pole_zero_vector", &SWIGTYPE_p_std__vectorT_Dsp__PoleZeroPair_t,_proxy__wrap_new_pole_zero_vector, swig_delete_pole_zero_vector, swig_pole_zero_vector_methods, swig_pole_zero_vector_attributes, &swig_pole_zero_vector_Sf_SwigStatic, swig_pole_zero_vector_meta, swig_pole_zero_vector_bases, swig_pole_zero_vector_base_names };

static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("fe_divbyzero", FE_DIVBYZERO)},
    {SWIG_LUA_CONSTTAB_INT("fe_inexact", FE_INEXACT)},
    {SWIG_LUA_CONSTTAB_INT("fe_invalid", FE_INVALID)},
    {SWIG_LUA_CONSTTAB_INT("fe_overflow", FE_OVERFLOW)},
    {SWIG_LUA_CONSTTAB_INT("fe_underflow", FE_UNDERFLOW)},
    {SWIG_LUA_CONSTTAB_INT("fe_all_except", FE_ALL_EXCEPT)},
    {SWIG_LUA_CONSTTAB_INT("fe_downward", FE_DOWNWARD)},
    {SWIG_LUA_CONSTTAB_INT("fe_tonearest", FE_TONEAREST)},
    {SWIG_LUA_CONSTTAB_INT("fe_towardzero", FE_TOWARDZERO)},
    {SWIG_LUA_CONSTTAB_INT("fe_upward", FE_UPWARD)},
    {SWIG_LUA_CONSTTAB_INT("fe_dfl_env", FE_DFL_ENV)},
    {SWIG_LUA_CONSTTAB_INT("char_bit", CHAR_BIT)},
    {SWIG_LUA_CONSTTAB_INT("schar_min", SCHAR_MIN)},
    {SWIG_LUA_CONSTTAB_INT("schar_max", SCHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("uchar_max", UCHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("char_min", CHAR_MIN)},
    {SWIG_LUA_CONSTTAB_INT("char_max", CHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("mb_len_max", MB_LEN_MAX)},
    {SWIG_LUA_CONSTTAB_INT("shrt_min", SHRT_MIN)},
    {SWIG_LUA_CONSTTAB_INT("shrt_max", SHRT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ushrt_max", USHRT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("int_min", INT_MIN)},
    {SWIG_LUA_CONSTTAB_INT("int_max", INT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("uint_max", UINT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("long_min", LONG_MIN)},
    {SWIG_LUA_CONSTTAB_INT("long_max", LONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ulong_max", ULONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("llong_min", LLONG_MIN)},
    {SWIG_LUA_CONSTTAB_INT("llong_max", LLONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ullong_max", ULLONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("kindLowPass", Dsp::kindLowPass)},
    {SWIG_LUA_CONSTTAB_INT("kindHighPass", Dsp::kindHighPass)},
    {SWIG_LUA_CONSTTAB_INT("kindBandPass", Dsp::kindBandPass)},
    {SWIG_LUA_CONSTTAB_INT("kindBandStop", Dsp::kindBandStop)},
    {SWIG_LUA_CONSTTAB_INT("kindLowShelf", Dsp::kindLowShelf)},
    {SWIG_LUA_CONSTTAB_INT("kindHighShelf", Dsp::kindHighShelf)},
    {SWIG_LUA_CONSTTAB_INT("kindBandShelf", Dsp::kindBandShelf)},
    {SWIG_LUA_CONSTTAB_INT("kindOther", Dsp::kindOther)},
    {SWIG_LUA_CONSTTAB_INT("idSampleRate", Dsp::idSampleRate)},
    {SWIG_LUA_CONSTTAB_INT("idFrequency", Dsp::idFrequency)},
    {SWIG_LUA_CONSTTAB_INT("idQ", Dsp::idQ)},
    {SWIG_LUA_CONSTTAB_INT("idBandwidth", Dsp::idBandwidth)},
    {SWIG_LUA_CONSTTAB_INT("idBandwidthHz", Dsp::idBandwidthHz)},
    {SWIG_LUA_CONSTTAB_INT("idGain", Dsp::idGain)},
    {SWIG_LUA_CONSTTAB_INT("idSlope", Dsp::idSlope)},
    {SWIG_LUA_CONSTTAB_INT("idOrder", Dsp::idOrder)},
    {SWIG_LUA_CONSTTAB_INT("idRippleDb", Dsp::idRippleDb)},
    {SWIG_LUA_CONSTTAB_INT("idStopDb", Dsp::idStopDb)},
    {SWIG_LUA_CONSTTAB_INT("idRolloff", Dsp::idRolloff)},
    {SWIG_LUA_CONSTTAB_INT("idPoleRho", Dsp::idPoleRho)},
    {SWIG_LUA_CONSTTAB_INT("idPoleTheta", Dsp::idPoleTheta)},
    {SWIG_LUA_CONSTTAB_INT("idZeroRho", Dsp::idZeroRho)},
    {SWIG_LUA_CONSTTAB_INT("idZeroTheta", Dsp::idZeroTheta)},
    {SWIG_LUA_CONSTTAB_INT("idPoleReal", Dsp::idPoleReal)},
    {SWIG_LUA_CONSTTAB_INT("idZeroReal", Dsp::idZeroReal)},
    {SWIG_LUA_CONSTTAB_INT("maxParameters", Dsp::maxParameters)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "Huge", _wrap_Huge},
    { "Hugef", _wrap_Hugef},
    { "Infinity", _wrap_Infinity},
    { "NaN", _wrap_NaN},
    { "absf", _wrap_absf},
    { "cubef", _wrap_cubef},
    { "sqrtf", _wrap_sqrtf},
    { "expf", _wrap_expf},
    { "exp2f", _wrap_exp2f},
    { "logf", _wrap_logf},
    { "log10f", _wrap_log10f},
    { "log2f", _wrap_log2f},
    { "logbf", _wrap_logbf},
    { "powf", _wrap_powf},
    { "floorf", _wrap_floorf},
    { "acosf", _wrap_acosf},
    { "asinf", _wrap_asinf},
    { "atanf", _wrap_atanf},
    { "atan2f", _wrap_atan2f},
    { "cosf", _wrap_cosf},
    { "sinf", _wrap_sinf},
    { "tanf", _wrap_tanf},
    { "coshf", _wrap_coshf},
    { "sinhf", _wrap_sinhf},
    { "tanhf", _wrap_tanhf},
    { "lgammaf", _wrap_lgammaf},
    { "acoshf", _wrap_acoshf},
    { "asinhf", _wrap_asinhf},
    { "atanhf", _wrap_atanhf},
    { "cbrtf", _wrap_cbrtf},
    { "ceilf", _wrap_ceilf},
    { "copysignf", _wrap_copysignf},
    { "erff", _wrap_erff},
    { "erfcf", _wrap_erfcf},
    { "expm1f", _wrap_expm1f},
    { "fdimf", _wrap_fdimf},
    { "fmaf", _wrap_fmaf},
    { "fmaxf", _wrap_fmaxf},
    { "fminf", _wrap_fminf},
    { "fmodf", _wrap_fmodf},
    { "fpclassifyf", _wrap_fpclassifyf},
    { "hypotf", _wrap_hypotf},
    { "ilogbf", _wrap_ilogbf},
    { "isfinitef", _wrap_isfinitef},
    { "isgreaterf", _wrap_isgreaterf},
    { "isgreaterequalf", _wrap_isgreaterequalf},
    { "isinff", _wrap_isinff},
    { "islessf", _wrap_islessf},
    { "islessequalf", _wrap_islessequalf},
    { "isnanf", _wrap_isnanf},
    { "isnormalf", _wrap_isnormalf},
    { "isunorderedf", _wrap_isunorderedf},
    { "ldexpf", _wrap_ldexpf},
    { "llrintf", _wrap_llrintf},
    { "llroundf", _wrap_llroundf},
    { "log1pf", _wrap_log1pf},
    { "lrintf", _wrap_lrintf},
    { "lroundf", _wrap_lroundf},
    { "nanf", _wrap_nanf},
    { "nanff", _wrap_nanff},
    { "nanlf", _wrap_nanlf},
    { "nearbyintf", _wrap_nearbyintf},
    { "nextafterf", _wrap_nextafterf},
    { "nexttowardf", _wrap_nexttowardf},
    { "remainderf", _wrap_remainderf},
    { "rintf", _wrap_rintf},
    { "roundf", _wrap_roundf},
    { "scalblnf", _wrap_scalblnf},
    { "scalbnf", _wrap_scalbnf},
    { "squaref", _wrap_squaref},
    { "tgammaf", _wrap_tgammaf},
    { "truncf", _wrap_truncf},
    { "absd", _wrap_absd},
    { "sqrtd", _wrap_sqrtd},
    { "expd", _wrap_expd},
    { "exp2d", _wrap_exp2d},
    { "logd", _wrap_logd},
    { "log10d", _wrap_log10d},
    { "log2d", _wrap_log2d},
    { "logbd", _wrap_logbd},
    { "powd", _wrap_powd},
    { "floord", _wrap_floord},
    { "acosd", _wrap_acosd},
    { "asind", _wrap_asind},
    { "atand", _wrap_atand},
    { "atan2d", _wrap_atan2d},
    { "cosd", _wrap_cosd},
    { "sind", _wrap_sind},
    { "tand", _wrap_tand},
    { "coshd", _wrap_coshd},
    { "sinhd", _wrap_sinhd},
    { "tanhd", _wrap_tanhd},
    { "lgammad", _wrap_lgammad},
    { "acoshd", _wrap_acoshd},
    { "asinhd", _wrap_asinhd},
    { "atanhd", _wrap_atanhd},
    { "cbrtd", _wrap_cbrtd},
    { "ceild", _wrap_ceild},
    { "copysignd", _wrap_copysignd},
    { "erfd", _wrap_erfd},
    { "erfcd", _wrap_erfcd},
    { "expm1d", _wrap_expm1d},
    { "fdimd", _wrap_fdimd},
    { "fmad", _wrap_fmad},
    { "fmaxd", _wrap_fmaxd},
    { "fmind", _wrap_fmind},
    { "fmodd", _wrap_fmodd},
    { "fpclassifyd", _wrap_fpclassifyd},
    { "hypotd", _wrap_hypotd},
    { "ilogbd", _wrap_ilogbd},
    { "isfinited", _wrap_isfinited},
    { "isgreaterd", _wrap_isgreaterd},
    { "isgreaterequald", _wrap_isgreaterequald},
    { "isinfd", _wrap_isinfd},
    { "islessd", _wrap_islessd},
    { "islessequald", _wrap_islessequald},
    { "isnand", _wrap_isnand},
    { "isnormald", _wrap_isnormald},
    { "isunorderedd", _wrap_isunorderedd},
    { "ldexpd", _wrap_ldexpd},
    { "llrintd", _wrap_llrintd},
    { "llroundd", _wrap_llroundd},
    { "log1pd", _wrap_log1pd},
    { "lrintd", _wrap_lrintd},
    { "lroundd", _wrap_lroundd},
    { "nand", _wrap_nand},
    { "nanfd", _wrap_nanfd},
    { "nanld", _wrap_nanld},
    { "nearbyintd", _wrap_nearbyintd},
    { "nextafterd", _wrap_nextafterd},
    { "nexttowardd", _wrap_nexttowardd},
    { "remainderd", _wrap_remainderd},
    { "rintd", _wrap_rintd},
    { "roundd", _wrap_roundd},
    { "scalblnd", _wrap_scalblnd},
    { "scalbnd", _wrap_scalbnd},
    { "squared", _wrap_squared},
    { "tgammad", _wrap_tgammad},
    { "truncd", _wrap_truncd},
    { "feclearexcept", _wrap_feclearexcept},
    { "fegetexceptflag", _wrap_fegetexceptflag},
    { "feraiseexcept", _wrap_feraiseexcept},
    { "fesetexceptflag", _wrap_fesetexceptflag},
    { "fetestexcept", _wrap_fetestexcept},
    { "fegetround", _wrap_fegetround},
    { "fesetround", _wrap_fesetround},
    { "fegetenv", _wrap_fegetenv},
    { "feholdexcept", _wrap_feholdexcept},
    { "fesetenv", _wrap_fesetenv},
    { "feupdateenv", _wrap_feupdateenv},
    { "ParamInfo_defaultSampleRateParam", _wrap_ParamInfo_defaultSampleRateParam},
    { "ParamInfo_defaultCutoffFrequencyParam", _wrap_ParamInfo_defaultCutoffFrequencyParam},
    { "ParamInfo_defaultCenterFrequencyParam", _wrap_ParamInfo_defaultCenterFrequencyParam},
    { "ParamInfo_defaultQParam", _wrap_ParamInfo_defaultQParam},
    { "ParamInfo_defaultBandwidthParam", _wrap_ParamInfo_defaultBandwidthParam},
    { "ParamInfo_defaultBandwidthHzParam", _wrap_ParamInfo_defaultBandwidthHzParam},
    { "ParamInfo_defaultGainParam", _wrap_ParamInfo_defaultGainParam},
    { "ParamInfo_defaultSlopeParam", _wrap_ParamInfo_defaultSlopeParam},
    { "ParamInfo_defaultRippleDbParam", _wrap_ParamInfo_defaultRippleDbParam},
    { "ParamInfo_defaultStopDbParam", _wrap_ParamInfo_defaultStopDbParam},
    { "ParamInfo_defaultRolloffParam", _wrap_ParamInfo_defaultRolloffParam},
    { "ParamInfo_defaultPoleRhoParam", _wrap_ParamInfo_defaultPoleRhoParam},
    { "ParamInfo_defaultPoleThetaParam", _wrap_ParamInfo_defaultPoleThetaParam},
    { "ParamInfo_defaultZeroRhoParam", _wrap_ParamInfo_defaultZeroRhoParam},
    { "ParamInfo_defaultZeroThetaParam", _wrap_ParamInfo_defaultZeroThetaParam},
    { "ParamInfo_defaultPoleRealParam", _wrap_ParamInfo_defaultPoleRealParam},
    { "ParamInfo_defaultZeroRealParam", _wrap_ParamInfo_defaultZeroRealParam},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_string,
&_wrap_class_gslice,
&_wrap_class_slice,
&_wrap_class_float_complex,
&_wrap_class_double_complex,
&_wrap_class_float_valarray,
&_wrap_class_float_numeric_limits,
&_wrap_class_double_numeric_limits,
&_wrap_class_int_numeric_limits,
&_wrap_class_uint_numeric_limits,
&_wrap_class_short_numeric_limits,
&_wrap_class_ushort_numeric_limits,
&_wrap_class_long_numeric_limits,
&_wrap_class_ulong_numeric_limits,
&_wrap_class_llong_numeric_limits,
&_wrap_class_ullong_numeric_limits,
&_wrap_class_ComplexPair,
&_wrap_class_PoleZeroPair,
&_wrap_class_Params,
&_wrap_class_ParamInfo,
&_wrap_class_Filter,
&_wrap_class_float_vector_stereo,
&_wrap_class_double_vector_stereo,
&_wrap_class_RBJLowPass,
&_wrap_class_StereoRBJLowPass,
&_wrap_class_RBJHighPass,
&_wrap_class_StereoRBJHighPass,
&_wrap_class_RBJBandPass1,
&_wrap_class_StereoRBJBandPass1,
&_wrap_class_RBJBandPass2,
&_wrap_class_StereoRBJBandPass2,
&_wrap_class_RBJBandStop,
&_wrap_class_StereoRBJBandStop,
&_wrap_class_RBJLowShelf,
&_wrap_class_StereoRBJLowShelf,
&_wrap_class_RBJHighShelf,
&_wrap_class_StereoRBJHighShelf,
&_wrap_class_RBJBandShelf,
&_wrap_class_StereoRBJBandShelf,
&_wrap_class_RBJAllPass,
&_wrap_class_StereoRBJAllPass,
&_wrap_class_ButterworthBandPass,
&_wrap_class_StereoButterworthBandPass,
&_wrap_class_ButterworthBandStop,
&_wrap_class_StereoButterworthBandStop,
&_wrap_class_ButterworthLowPass,
&_wrap_class_StereoButterworthLowPass,
&_wrap_class_ButterworthHighPass,
&_wrap_class_StereoButterworthHighPass,
&_wrap_class_ButterworthBandShelf,
&_wrap_class_StereoButterworthBandShelf,
&_wrap_class_ButterworthLowShelf,
&_wrap_class_StereoButterworthLowShelf,
&_wrap_class_ButterworthHighShelf,
&_wrap_class_StereoButterworthHighSHelf,
&_wrap_class_ChebyshevIBandPass,
&_wrap_class_StereoChebyshevIBandPass,
&_wrap_class_ChebyshevIBandStop,
&_wrap_class_StereoChebyshevIBandStop,
&_wrap_class_ChebyshevILowPass,
&_wrap_class_StereoChebyshevILowPass,
&_wrap_class_ChebyshevIHighPass,
&_wrap_class_StereoChebyshevIHighPass,
&_wrap_class_ChebyshevIBandShelf,
&_wrap_class_StereoChebyshevIBandShelf,
&_wrap_class_ChebyshevILowShelf,
&_wrap_class_StereoChebyshevILowShelf,
&_wrap_class_ChebyshevIHighShelf,
&_wrap_class_StereoChebyshevIHighSHelf,
&_wrap_class_ChebyshevIIBandPass,
&_wrap_class_StereoChebyshevIIBandPass,
&_wrap_class_ChebyshevIIBandStop,
&_wrap_class_StereoChebyshevIIBandStop,
&_wrap_class_ChebyshevIILowPass,
&_wrap_class_StereoChebyshevIILowPass,
&_wrap_class_ChebyshevIIHighPass,
&_wrap_class_StereoChebyshevIIHighPass,
&_wrap_class_ChebyshevIIBandShelf,
&_wrap_class_StereoChebyshevIIBandShelf,
&_wrap_class_ChebyshevIILowShelf,
&_wrap_class_StereoChebyshevIILowShelf,
&_wrap_class_ChebyshevIIHighShelf,
&_wrap_class_StereoChebyshevIIHighSHelf,
&_wrap_class_EllipticBandPass,
&_wrap_class_StereoEllipticBandPass,
&_wrap_class_EllipticBandStop,
&_wrap_class_StereoEllipticBandStop,
&_wrap_class_EllipticLowPass,
&_wrap_class_StereoEllipticLowPass,
&_wrap_class_EllipticHighPass,
&_wrap_class_StereoEllipticHighPass,
&_wrap_class_BesselBandPass,
&_wrap_class_StereoBesselBandPass,
&_wrap_class_BesselBandStop,
&_wrap_class_StereoBesselBandStop,
&_wrap_class_BesselLowPass,
&_wrap_class_StereoBesselLowPass,
&_wrap_class_BesselHighPass,
&_wrap_class_StereoBesselHighPass,
&_wrap_class_BesselLowShelf,
&_wrap_class_StereoBesselLowShelf,
&_wrap_class_LegendreBandPass,
&_wrap_class_StereoLegendreBandPass,
&_wrap_class_LegendreBandStop,
&_wrap_class_StereoLegendreBandStop,
&_wrap_class_LegendreLowPass,
&_wrap_class_StereoLegendreLowPass,
&_wrap_class_LegendreHighPass,
&_wrap_class_StereoLegendreHighPass,
&_wrap_class_pole_zero_vector,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "DspFilters",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__m_ParamInfo__q_const__f_double__double = {"_m_ParamInfo__q_const__f_double__double", "double (ParamInfo::*)(double) const|Dsp::ParamInfo::toControlValue_t|Dsp::ParamInfo::toNativeValue_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__m_ParamInfo__q_const__f_double__std__string = {"_m_ParamInfo__q_const__f_double__std__string", "std::string (ParamInfo::*)(double) const|Dsp::ParamInfo::toString_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__ComplexPair = {"_p_Dsp__ComplexPair", "Dsp::ComplexPair *", 0, 0, (void*)&_wrap_class_ComplexPair, 0};
static swig_type_info _swigt__p_Dsp__Filter = {"_p_Dsp__Filter", "Dsp::Filter *", 0, 0, (void*)&_wrap_class_Filter, 0};
static swig_type_info _swigt__p_Dsp__ParamInfo = {"_p_Dsp__ParamInfo", "Dsp::ParamInfo *", 0, 0, (void*)&_wrap_class_ParamInfo, 0};
static swig_type_info _swigt__p_Dsp__Params = {"_p_Dsp__Params", "Dsp::Params *", 0, 0, (void*)&_wrap_class_Params, 0};
static swig_type_info _swigt__p_Dsp__PoleZeroPair = {"_p_Dsp__PoleZeroPair", "Dsp::PoleZeroPair *", 0, 0, (void*)&_wrap_class_PoleZeroPair, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_BesselBandPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandPass< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoBesselBandPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_BesselBandStop, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::BandStop< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoBesselBandStop, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_BesselHighPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::HighPass< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoBesselHighPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_BesselLowPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowPass< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoBesselLowPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_BesselLowShelf, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::Bessel::Design::LowShelf< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoBesselLowShelf, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_ButterworthBandPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandPass< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoButterworthBandPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_ButterworthBandShelf, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandShelf< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoButterworthBandShelf, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_ButterworthBandStop, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::BandStop< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoButterworthBandStop, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_ButterworthHighPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighPass< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoButterworthHighPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_ButterworthHighShelf, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::HighShelf< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoButterworthHighSHelf, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_ButterworthLowPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowPass< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoButterworthLowPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_ButterworthLowShelf, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::Butterworth::Design::LowShelf< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoButterworthLowShelf, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_ChebyshevIIBandPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandPass< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoChebyshevIIBandPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_ChebyshevIIBandShelf, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandShelf< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoChebyshevIIBandShelf, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_ChebyshevIIBandStop, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::BandStop< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoChebyshevIIBandStop, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_ChebyshevIIHighPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighPass< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoChebyshevIIHighPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_ChebyshevIIHighShelf, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::HighShelf< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoChebyshevIIHighSHelf, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_ChebyshevIILowPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowPass< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoChebyshevIILowPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_ChebyshevIILowShelf, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevII::Design::LowShelf< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoChebyshevIILowShelf, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_ChebyshevIBandPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandPass< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoChebyshevIBandPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_ChebyshevIBandShelf, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandShelf< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoChebyshevIBandShelf, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_ChebyshevIBandStop, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::BandStop< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoChebyshevIBandStop, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_ChebyshevIHighPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighPass< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoChebyshevIHighPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_ChebyshevIHighShelf, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::HighShelf< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoChebyshevIHighSHelf, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_ChebyshevILowPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowPass< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoChebyshevILowPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_ChebyshevILowShelf, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::ChebyshevI::Design::LowShelf< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoChebyshevILowShelf, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_EllipticBandPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandPass< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoEllipticBandPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_EllipticBandStop, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::BandStop< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoEllipticBandStop, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_EllipticHighPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::HighPass< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoEllipticHighPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_EllipticLowPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::Elliptic::Design::LowPass< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoEllipticLowPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_LegendreBandPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandPass< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoLegendreBandPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_LegendreBandStop, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::BandStop< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoLegendreBandStop, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_LegendreHighPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::HighPass< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoLegendreHighPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1 > *|Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_LegendreLowPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2 > *|Dsp::SmoothedFilterDesign< Dsp::Legendre::Design::LowPass< 64 >,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoLegendreLowPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1 > *|Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_RBJAllPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2 > *|Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::AllPass,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoRBJAllPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1 > *|Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_RBJBandPass1, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2 > *|Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass1,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoRBJBandPass1, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1 > *|Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_RBJBandPass2, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2 > *|Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandPass2,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoRBJBandPass2, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1 > *|Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_RBJBandShelf, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2 > *|Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandShelf,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoRBJBandShelf, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1 > *|Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_RBJBandStop, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2 > *|Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::BandStop,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoRBJBandStop, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1 > *|Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_RBJHighPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2 > *|Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighPass,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoRBJHighPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1 > *|Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_RBJHighShelf, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2 > *|Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::HighShelf,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoRBJHighShelf, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1 > *|Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_RBJLowPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2 > *|Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowPass,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoRBJLowPass, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1 > *|Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,1,DirectFormII > *", 0, 0, (void*)&_wrap_class_RBJLowShelf, 0};
static swig_type_info _swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t = {"_p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t", "Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2 > *|Dsp::SmoothedFilterDesign< Dsp::RBJ::Design::LowShelf,2,DirectFormII > *", 0, 0, (void*)&_wrap_class_StereoRBJLowShelf, 0};
static swig_type_info _swigt__p_double = {"_p_double", "f64 *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_float__float = {"_p_f_float__float", "float (*)(float)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_q_const__float__float = {"_p_f_r_q_const__float__float", "float (*)(float const &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fenv_t = {"_p_fenv_t", "fenv_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fexcept_t = {"_p_fexcept_t", "fexcept_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_filter_type_t = {"_p_filter_type_t", "filter_type_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "f32 *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|i32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int32_t = {"_p_int32_t", "int32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int64_t = {"_p_int64_t", "int64_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "ilong *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "long long *|i64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_double = {"_p_p_double", "double **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_float = {"_p_p_float", "float **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|i16 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|i8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "Dsp::complex_t *|std::complex< double > *", 0, 0, (void*)&_wrap_class_double_complex, 0};
static swig_type_info _swigt__p_std__complexT_float_t = {"_p_std__complexT_float_t", "std::complex< float > *", 0, 0, (void*)&_wrap_class_float_complex, 0};
static swig_type_info _swigt__p_std__gslice = {"_p_std__gslice", "std::gslice *", 0, 0, (void*)&_wrap_class_gslice, 0};
static swig_type_info _swigt__p_std__gslice_arrayT_float_t = {"_p_std__gslice_arrayT_float_t", "std::gslice_array< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__indirect_arrayT_float_t = {"_p_std__indirect_arrayT_float_t", "std::indirect_array< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mask_arrayT_float_t = {"_p_std__mask_arrayT_float_t", "std::mask_array< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_double_t = {"_p_std__numeric_limitsT_double_t", "std::numeric_limits< double > *", 0, 0, (void*)&_wrap_class_double_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_float_t = {"_p_std__numeric_limitsT_float_t", "std::numeric_limits< float > *", 0, 0, (void*)&_wrap_class_float_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_int_t = {"_p_std__numeric_limitsT_int_t", "std::numeric_limits< int > *", 0, 0, (void*)&_wrap_class_int_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_long_long_t = {"_p_std__numeric_limitsT_long_long_t", "std::numeric_limits< long long > *", 0, 0, (void*)&_wrap_class_llong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_long_t = {"_p_std__numeric_limitsT_long_t", "std::numeric_limits< long > *", 0, 0, (void*)&_wrap_class_long_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_short_t = {"_p_std__numeric_limitsT_short_t", "std::numeric_limits< short > *", 0, 0, (void*)&_wrap_class_short_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_int_t = {"_p_std__numeric_limitsT_unsigned_int_t", "std::numeric_limits< unsigned int > *", 0, 0, (void*)&_wrap_class_uint_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_long_long_t = {"_p_std__numeric_limitsT_unsigned_long_long_t", "std::numeric_limits< unsigned long long > *", 0, 0, (void*)&_wrap_class_ullong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_long_t = {"_p_std__numeric_limitsT_unsigned_long_t", "std::numeric_limits< unsigned long > *", 0, 0, (void*)&_wrap_class_ulong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_short_t = {"_p_std__numeric_limitsT_unsigned_short_t", "std::numeric_limits< unsigned short > *", 0, 0, (void*)&_wrap_class_ushort_numeric_limits, 0};
static swig_type_info _swigt__p_std__pairT_std__complexT_double_t_std__complexT_double_t_t = {"_p_std__pairT_std__complexT_double_t_std__complexT_double_t_t", "Dsp::complex_pair_t *|std::pair< std::complex< double >,std::complex< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__slice = {"_p_std__slice", "std::slice *", 0, 0, (void*)&_wrap_class_slice, 0};
static swig_type_info _swigt__p_std__slice_arrayT_float_t = {"_p_std__slice_arrayT_float_t", "std::slice_array< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_string, 0};
static swig_type_info _swigt__p_std__valarrayT_float_t = {"_p_std__valarrayT_float_t", "std::valarray< float > *", 0, 0, (void*)&_wrap_class_float_valarray, 0};
static swig_type_info _swigt__p_std__vectorT_Dsp__PoleZeroPair_t = {"_p_std__vectorT_Dsp__PoleZeroPair_t", "std::vector< Dsp::PoleZeroPair > *", 0, 0, (void*)&_wrap_class_pole_zero_vector, 0};
static swig_type_info _swigt__p_std__vectorT_double_p_t = {"_p_std__vectorT_double_p_t", "std::vector< double * > *", 0, 0, (void*)&_wrap_class_double_vector_stereo, 0};
static swig_type_info _swigt__p_std__vectorT_float_p_t = {"_p_std__vectorT_float_p_t", "std::vector< float * > *", 0, 0, (void*)&_wrap_class_float_vector_stereo, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_Dsp__PoleZeroPair_t = {"_p_std__vector_iteratorT_Dsp__PoleZeroPair_t", "std::vector_iterator< Dsp::PoleZeroPair > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_double_p_t = {"_p_std__vector_iteratorT_double_p_t", "std::vector_iterator< double * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_float_p_t = {"_p_std__vector_iteratorT_float_p_t", "std::vector_iterator< float * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_toControlValue_t = {"_p_toControlValue_t", "toControlValue_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_toNativeValue_t = {"_p_toNativeValue_t", "toNativeValue_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_toString_t = {"_p_toString_t", "toString_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "u8 *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *|u32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "ulong *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "unsigned long long *|u64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|u16 *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__m_ParamInfo__q_const__f_double__double,
  &_swigt__m_ParamInfo__q_const__f_double__std__string,
  &_swigt__p_Dsp__ComplexPair,
  &_swigt__p_Dsp__Filter,
  &_swigt__p_Dsp__ParamInfo,
  &_swigt__p_Dsp__Params,
  &_swigt__p_Dsp__PoleZeroPair,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t,
  &_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t,
  &_swigt__p_double,
  &_swigt__p_f_float__float,
  &_swigt__p_f_r_q_const__float__float,
  &_swigt__p_fenv_t,
  &_swigt__p_fexcept_t,
  &_swigt__p_filter_type_t,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_int32_t,
  &_swigt__p_int64_t,
  &_swigt__p_long,
  &_swigt__p_long_long,
  &_swigt__p_p_double,
  &_swigt__p_p_float,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__complexT_float_t,
  &_swigt__p_std__gslice,
  &_swigt__p_std__gslice_arrayT_float_t,
  &_swigt__p_std__indirect_arrayT_float_t,
  &_swigt__p_std__mask_arrayT_float_t,
  &_swigt__p_std__numeric_limitsT_double_t,
  &_swigt__p_std__numeric_limitsT_float_t,
  &_swigt__p_std__numeric_limitsT_int_t,
  &_swigt__p_std__numeric_limitsT_long_long_t,
  &_swigt__p_std__numeric_limitsT_long_t,
  &_swigt__p_std__numeric_limitsT_short_t,
  &_swigt__p_std__numeric_limitsT_unsigned_int_t,
  &_swigt__p_std__numeric_limitsT_unsigned_long_long_t,
  &_swigt__p_std__numeric_limitsT_unsigned_long_t,
  &_swigt__p_std__numeric_limitsT_unsigned_short_t,
  &_swigt__p_std__pairT_std__complexT_double_t_std__complexT_double_t_t,
  &_swigt__p_std__slice,
  &_swigt__p_std__slice_arrayT_float_t,
  &_swigt__p_std__string,
  &_swigt__p_std__valarrayT_float_t,
  &_swigt__p_std__vectorT_Dsp__PoleZeroPair_t,
  &_swigt__p_std__vectorT_double_p_t,
  &_swigt__p_std__vectorT_float_p_t,
  &_swigt__p_std__vector_iteratorT_Dsp__PoleZeroPair_t,
  &_swigt__p_std__vector_iteratorT_double_p_t,
  &_swigt__p_std__vector_iteratorT_float_p_t,
  &_swigt__p_toControlValue_t,
  &_swigt__p_toNativeValue_t,
  &_swigt__p_toString_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__m_ParamInfo__q_const__f_double__double[] = {  {&_swigt__m_ParamInfo__q_const__f_double__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__m_ParamInfo__q_const__f_double__std__string[] = {  {&_swigt__m_ParamInfo__q_const__f_double__std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__ComplexPair[] = {  {&_swigt__p_Dsp__ComplexPair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__Filter[] = {  {&_swigt__p_Dsp__Filter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__ParamInfo[] = {  {&_swigt__p_Dsp__ParamInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__Params[] = {  {&_swigt__p_Dsp__Params, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__PoleZeroPair[] = {  {&_swigt__p_Dsp__PoleZeroPair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t[] = {  {&_swigt__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_float__float[] = {  {&_swigt__p_f_float__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_q_const__float__float[] = {  {&_swigt__p_f_r_q_const__float__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fenv_t[] = {  {&_swigt__p_fenv_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fexcept_t[] = {  {&_swigt__p_fexcept_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_filter_type_t[] = {  {&_swigt__p_filter_type_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int32_t[] = {  {&_swigt__p_int32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int64_t[] = {  {&_swigt__p_int64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_double[] = {  {&_swigt__p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_float[] = {  {&_swigt__p_p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_float_t[] = {  {&_swigt__p_std__complexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__gslice[] = {  {&_swigt__p_std__gslice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__gslice_arrayT_float_t[] = {  {&_swigt__p_std__gslice_arrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__indirect_arrayT_float_t[] = {  {&_swigt__p_std__indirect_arrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mask_arrayT_float_t[] = {  {&_swigt__p_std__mask_arrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_double_t[] = {  {&_swigt__p_std__numeric_limitsT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_float_t[] = {  {&_swigt__p_std__numeric_limitsT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_int_t[] = {  {&_swigt__p_std__numeric_limitsT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_long_long_t[] = {  {&_swigt__p_std__numeric_limitsT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_long_t[] = {  {&_swigt__p_std__numeric_limitsT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_short_t[] = {  {&_swigt__p_std__numeric_limitsT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_int_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_long_long_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_long_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_short_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__complexT_double_t_std__complexT_double_t_t[] = {  {&_swigt__p_std__pairT_std__complexT_double_t_std__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__slice[] = {  {&_swigt__p_std__slice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__slice_arrayT_float_t[] = {  {&_swigt__p_std__slice_arrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__valarrayT_float_t[] = {  {&_swigt__p_std__valarrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Dsp__PoleZeroPair_t[] = {  {&_swigt__p_std__vectorT_Dsp__PoleZeroPair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_p_t[] = {  {&_swigt__p_std__vectorT_double_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_p_t[] = {  {&_swigt__p_std__vectorT_float_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_Dsp__PoleZeroPair_t[] = {  {&_swigt__p_std__vector_iteratorT_Dsp__PoleZeroPair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_double_p_t[] = {  {&_swigt__p_std__vector_iteratorT_double_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_float_p_t[] = {  {&_swigt__p_std__vector_iteratorT_float_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_toControlValue_t[] = {  {&_swigt__p_toControlValue_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_toNativeValue_t[] = {  {&_swigt__p_toNativeValue_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_toString_t[] = {  {&_swigt__p_toString_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__m_ParamInfo__q_const__f_double__double,
  _swigc__m_ParamInfo__q_const__f_double__std__string,
  _swigc__p_Dsp__ComplexPair,
  _swigc__p_Dsp__Filter,
  _swigc__p_Dsp__ParamInfo,
  _swigc__p_Dsp__Params,
  _swigc__p_Dsp__PoleZeroPair,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandPassT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__BandStopT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__HighPassT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowPassT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Bessel__Design__LowShelfT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandPassT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandShelfT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__BandStopT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighPassT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__HighShelfT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowPassT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Butterworth__Design__LowShelfT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandPassT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandShelfT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__BandStopT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighPassT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__HighShelfT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowPassT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevII__Design__LowShelfT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandPassT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandShelfT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__BandStopT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighPassT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__HighShelfT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowPassT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__ChebyshevI__Design__LowShelfT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandPassT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__BandStopT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__HighPassT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Elliptic__Design__LowPassT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandPassT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__BandStopT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__HighPassT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__Legendre__Design__LowPassT_64_t_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__AllPass_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass1_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandPass2_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandShelf_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__BandStop_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighPass_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__HighShelf_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowPass_2_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_1_DirectFormII_t,
  _swigc__p_Dsp__SmoothedFilterDesignT_Dsp__RBJ__Design__LowShelf_2_DirectFormII_t,
  _swigc__p_double,
  _swigc__p_f_float__float,
  _swigc__p_f_r_q_const__float__float,
  _swigc__p_fenv_t,
  _swigc__p_fexcept_t,
  _swigc__p_filter_type_t,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_int32_t,
  _swigc__p_int64_t,
  _swigc__p_long,
  _swigc__p_long_long,
  _swigc__p_p_double,
  _swigc__p_p_float,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__complexT_float_t,
  _swigc__p_std__gslice,
  _swigc__p_std__gslice_arrayT_float_t,
  _swigc__p_std__indirect_arrayT_float_t,
  _swigc__p_std__mask_arrayT_float_t,
  _swigc__p_std__numeric_limitsT_double_t,
  _swigc__p_std__numeric_limitsT_float_t,
  _swigc__p_std__numeric_limitsT_int_t,
  _swigc__p_std__numeric_limitsT_long_long_t,
  _swigc__p_std__numeric_limitsT_long_t,
  _swigc__p_std__numeric_limitsT_short_t,
  _swigc__p_std__numeric_limitsT_unsigned_int_t,
  _swigc__p_std__numeric_limitsT_unsigned_long_long_t,
  _swigc__p_std__numeric_limitsT_unsigned_long_t,
  _swigc__p_std__numeric_limitsT_unsigned_short_t,
  _swigc__p_std__pairT_std__complexT_double_t_std__complexT_double_t_t,
  _swigc__p_std__slice,
  _swigc__p_std__slice_arrayT_float_t,
  _swigc__p_std__string,
  _swigc__p_std__valarrayT_float_t,
  _swigc__p_std__vectorT_Dsp__PoleZeroPair_t,
  _swigc__p_std__vectorT_double_p_t,
  _swigc__p_std__vectorT_float_p_t,
  _swigc__p_std__vector_iteratorT_Dsp__PoleZeroPair_t,
  _swigc__p_std__vector_iteratorT_double_p_t,
  _swigc__p_std__vector_iteratorT_float_p_t,
  _swigc__p_toControlValue_t,
  _swigc__p_toNativeValue_t,
  _swigc__p_toString_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

