/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AnalogMagData swig_types[0]
#define SWIGTYPE_p_AudioFilter swig_types[1]
#define SWIGTYPE_p_AudioFilterParameters swig_types[2]
#define SWIGTYPE_p_Biquad swig_types[3]
#define SWIGTYPE_p_BiquadParameters swig_types[4]
#define SWIGTYPE_p_BitCrusher swig_types[5]
#define SWIGTYPE_p_BitCrusherParameters swig_types[6]
#define SWIGTYPE_p_BrickwallMagData swig_types[7]
#define SWIGTYPE_p_ClassATubePre swig_types[8]
#define SWIGTYPE_p_ClassATubePreParameters swig_types[9]
#define SWIGTYPE_p_ComplexNumber swig_types[10]
#define SWIGTYPE_p_EnvelopeFollower swig_types[11]
#define SWIGTYPE_p_EnvelopeFollowerParameters swig_types[12]
#define SWIGTYPE_p_FilterBankOutput swig_types[13]
#define SWIGTYPE_p_IAudioSignalGenerator swig_types[14]
#define SWIGTYPE_p_IAudioSignalProcessor swig_types[15]
#define SWIGTYPE_p_LRFilterBank swig_types[16]
#define SWIGTYPE_p_LRFilterBankParameters swig_types[17]
#define SWIGTYPE_p_PhaseShifter swig_types[18]
#define SWIGTYPE_p_PhaseShifterParameters swig_types[19]
#define SWIGTYPE_p_SignalGenData swig_types[20]
#define SWIGTYPE_p_SimpleLPF swig_types[21]
#define SWIGTYPE_p_SimpleLPFParameters swig_types[22]
#define SWIGTYPE_p_TransitionBandData swig_types[23]
#define SWIGTYPE_p_TriodeClassA swig_types[24]
#define SWIGTYPE_p_TriodeClassAParameters swig_types[25]
#define SWIGTYPE_p_TwoBandShelvingFilter swig_types[26]
#define SWIGTYPE_p_TwoBandShelvingFilterParameters swig_types[27]
#define SWIGTYPE_p_ZVAFilter swig_types[28]
#define SWIGTYPE_p_ZVAFilterParameters swig_types[29]
#define SWIGTYPE_p_double swig_types[30]
#define SWIGTYPE_p_f_float__float swig_types[31]
#define SWIGTYPE_p_f_r_q_const__float__float swig_types[32]
#define SWIGTYPE_p_fenv_t swig_types[33]
#define SWIGTYPE_p_fexcept_t swig_types[34]
#define SWIGTYPE_p_float swig_types[35]
#define SWIGTYPE_p_int swig_types[36]
#define SWIGTYPE_p_long swig_types[37]
#define SWIGTYPE_p_long_long swig_types[38]
#define SWIGTYPE_p_short swig_types[39]
#define SWIGTYPE_p_signed_char swig_types[40]
#define SWIGTYPE_p_std__complexT_double_t swig_types[41]
#define SWIGTYPE_p_std__complexT_float_t swig_types[42]
#define SWIGTYPE_p_std__gslice swig_types[43]
#define SWIGTYPE_p_std__gslice_arrayT_float_t swig_types[44]
#define SWIGTYPE_p_std__indirect_arrayT_float_t swig_types[45]
#define SWIGTYPE_p_std__mask_arrayT_float_t swig_types[46]
#define SWIGTYPE_p_std__numeric_limitsT_double_t swig_types[47]
#define SWIGTYPE_p_std__numeric_limitsT_float_t swig_types[48]
#define SWIGTYPE_p_std__numeric_limitsT_int_t swig_types[49]
#define SWIGTYPE_p_std__numeric_limitsT_long_long_t swig_types[50]
#define SWIGTYPE_p_std__numeric_limitsT_long_t swig_types[51]
#define SWIGTYPE_p_std__numeric_limitsT_short_t swig_types[52]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t swig_types[53]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t swig_types[54]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t swig_types[55]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t swig_types[56]
#define SWIGTYPE_p_std__slice swig_types[57]
#define SWIGTYPE_p_std__slice_arrayT_float_t swig_types[58]
#define SWIGTYPE_p_std__valarrayT_float_t swig_types[59]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[60]
#define SWIGTYPE_p_std__vectorT_float_t swig_types[61]
#define SWIGTYPE_p_std__vectorT_std__complexT_double_t_t swig_types[62]
#define SWIGTYPE_p_std__vectorT_std__complexT_float_t_t swig_types[63]
#define SWIGTYPE_p_std__vector_iteratorT_double_t swig_types[64]
#define SWIGTYPE_p_std__vector_iteratorT_float_t swig_types[65]
#define SWIGTYPE_p_std__vector_iteratorT_std__complexT_double_t_t swig_types[66]
#define SWIGTYPE_p_std__vector_iteratorT_std__complexT_float_t_t swig_types[67]
#define SWIGTYPE_p_unsigned_char swig_types[68]
#define SWIGTYPE_p_unsigned_int swig_types[69]
#define SWIGTYPE_p_unsigned_long swig_types[70]
#define SWIGTYPE_p_unsigned_long_long swig_types[71]
#define SWIGTYPE_p_unsigned_short swig_types[72]
static swig_type_info *swig_types[74];
static swig_module_info swig_module = {swig_types, 73, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "fxdistortion"
#define SWIG_init      luaopen_fxdistortion
#define SWIG_init_user luaopen_fxdistortion_user

#define SWIG_LUACODE   luaopen_fxdistortion_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


typedef float DspFloatType;
#include "FXObjects.hpp"
#include "FXFilters.hpp"
#include "FXDistortion.hpp"


#include <stdint.h>		// Use the C99 official header


#include <complex>
#include <valarray>
#include <fenv.h>


#include <complex>


#include <valarray>
#include <algorithm>

SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____add____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self + b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____sub____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self - b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____div____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self / b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____mul____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self * b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____pow____SWIG_0(std::complex< float > *self,std::complex< float > const &b){ return std::pow(*self,b); }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____pow____SWIG_1(std::complex< float > *self,float const &b){ return std::pow(*self,b); }
SWIGINTERN bool std_complex_Sl_float_Sg____eq____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self == b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____add____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self + b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____sub____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self - b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____div____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self / b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____mul____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self * b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____pow____SWIG_0(std::complex< double > *self,std::complex< double > const &b){ return std::pow(*self,b); }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____pow____SWIG_1(std::complex< double > *self,double const &b){ return std::pow(*self,b); }
SWIGINTERN bool std_complex_Sl_double_Sg____eq____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self == b; }
SWIGINTERN float std_valarray_Sl_float_Sg____getitem____SWIG_0(std::valarray< float > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_valarray_Sl_float_Sg____setitem____SWIG_0(std::valarray< float > *self,size_t i,float const &v){ (*self)[i-1] = v; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____getitem____SWIG_1(std::valarray< float > *self,std::gslice const &i){ return (*self)[i]; }
SWIGINTERN void std_valarray_Sl_float_Sg____setitem____SWIG_1(std::valarray< float > *self,std::gslice const &i,float const &v){ (*self)[i] = v; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____getitem____SWIG_2(std::valarray< float > *self,std::slice const &i){ return (*self)[i]; }
SWIGINTERN void std_valarray_Sl_float_Sg____setitem____SWIG_2(std::valarray< float > *self,std::slice const &i,float const &v){ (*self)[i] = v; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____add____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return *self + b; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____sub____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return *self - b; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____mul____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return *self * b; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____div____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return *self / b; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____unm____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return -*self; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____pow____SWIG_0(std::valarray< float > *self,std::valarray< float > const &b){ return std::pow(*self,b); }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____pow____SWIG_1(std::valarray< float > *self,float const &b){ return std::pow(*self,b); }

#include <limits>



    typedef float f32;
    typedef double f64;
    typedef signed char i8;
    typedef unsigned char u8;
    typedef signed short i16;
    typedef unsigned short u16;
    typedef signed int i32;
    typedef unsigned int u32;
    typedef signed long ilong;
    typedef unsigned long ulong;
    typedef signed long long i64;
    typedef unsigned long long u64;
    
    
    
    
    template<typename T> T abs(const T& x) { return std::abs(x); }
    template<typename T> T fabs(const T& x) { return std::fabs(x); }
    template<typename T> T acos(const T& x) { return std::acos(x); }
    template<typename T> T acosh(const T& x) { return std::acosh(x); }
    template<typename T> T asinh(const T& x) { return std::asinh(x); }
    template<typename T> T asin(const T& x) { return std::asinh(x); }
    template<typename T> T atan(const T& x) { return std::atan(x); }
    template<typename T> T atan2(const T& x,const T& y) { return std::atan2(x,y); }
    template<typename T> T atanh(const T& x) { return std::atanh(x); }
    template<typename T> T cbrt(const T& x) { return std::cbrt(x); }
    template<typename T> T ceil(const T& x) { return std::ceil(x); }    
    template<typename T> T copysign(const T& x, const T& y) { return std::copysign(x,y); }
    template<typename T> T cos(const T& x) { return std::cos(x); }
    template<typename T> T cosh(const T& x) { return std::cosh(x); }
    template<typename T> T erf(const T& x) { return std::erf(x); }
    template<typename T> T erfc(const T& x) { return std::erfc(x); }
    template<typename T> T exp(const T& x) { return std::exp(x); }
    template<typename T> T exp2(const T& x) { return std::exp2(x); }
    template<typename T> T expm1(const T& x) { return std::expm1(x); }
    template<typename T> T fdim(const T & x, const T & y) { return std::fdim(x,y); }
    template<typename T> T floor(const T & x) { return std::floor(x); }
    template<typename T> T fma(const T & x, const T & y, const T& z) { return std::fma(x,y,z); }
    template<typename T> T fmax(const T & x, const T & y) { return std::fmax(x,y); }
    template<typename T> T fmin(const T & x, const T & y) { return std::fmax(x,y); }
    template<typename T> T fmod(const T & x, const T & y) { return std::fmod(x,y); }
    template<typename T> int fpclassify(const T & x) { return std::fpclassify(x); }
    template<typename T> T hypot(const T & x, const T & y) { return std::hypot(x,y); }
    template<typename T> int ilogb(const T & x) { return std::ilogb(x); }
    template<typename T> bool isfinite(const T & x) { return std::isfinite(x); }
    template<typename T> bool isgreater(const T & x, const T & y) { return std::isgreater(x,y); }
    template<typename T> bool isgreaterequal(const T & x, const T & y) { return std::isgreaterequal(x,y); }
    template<typename T> bool isinf(const T & x) { return std::isinf(x); }
    template<typename T> bool isless(const T & x, const T & y) { return std::isless(x,y); }
    template<typename T> bool islessequal(const T & x, const T & y) { return std::islessequal(x,y); }
    template<typename T> bool islessgreater(const T & x, const T & y) { return std::islessgreater(x,y); }
    template<typename T> bool isnan(const T & x) { return std::isnan(x); }
    template<typename T> bool isnormal(const T & x) { return std::isnormal(x); }
    template<typename T> bool isunordered(const T & x, const T& y) { return std::isunordered(x,y); }
    template<typename T> T ldexp(const T & x, int exp) { return std::ldexp(x,exp); }
    template<typename T> T lgamma(const T & x) { return std::lgamma(x); }
    template<typename T> T llrint(const T & x) { return std::llrint(x); }
    template<typename T> T llround(const T & x) { return std::llround(x); }
    template<typename T> T log(const T & x) { return std::log(x); }
    template<typename T> T log10(const T & x) { return std::log10(x); }
    template<typename T> T log1p(const T & x) { return std::log1p(x); }
    template<typename T> T log2(const T & x) { return std::log2(x); }
    template<typename T> T logb(const T & x) { return std::logb(x); }
    template<typename T> T lrint(const T & x) { return std::lrint(x); }
    template<typename T> T lround(const T & x) { return std::lround(x); }
    template<typename T> T nan(const char *tagp) { return std::nan(tagp);}
    template<typename T> T nanf(const char *tagp) { return std::nanf(tagp);}
    template<typename T> T nanl(const char *tagp) { return std::nanl(tagp);}
    template<typename T> T nearbyint(const T &x) { return std::nearbyint(x); }
    template<typename T> T nextafter(const T & x, const T & y) { return std::nextafter(x,y); }
    template<typename T> T nexttoward(const T & x, const T & y) { return std::nexttoward(x,y); }
    template<typename T> T pow(const T & b, const T & e) { return std::pow(b,e); }
    template<typename T> T remainder(const T & n, const T & d) { return std::remainder(n,d); }
    template<typename T> T rint(const T& x) { return std::rint(x); }
    template<typename T> T round(const T& x) { return std::round(x); }
    template<typename T> T scalbln(const T& x, long int n) { return std::scalbln(x,n);}
    template<typename T> T scalbn(const T& x, int n) { return std::scalbln(x,n);}
    template<typename T> bool signbit(const T & x) { return signbit(x); }
    template<typename T> T sin(const T& x) { return std::sin(x); }
    template<typename T> T sinh(const T& x) { return std::sinh(x); }    
    template<typename T> T sqrt(const T& x) { return std::sqrt(x); }
    template<typename T> T square(const T& x) { return x*x; }
    template<typename T> T cube(const T& x) { return x*x*x; }
    template<typename T> T tan(const T& x) { return std::tan(x); }
    template<typename T> T tanh(const T& x) { return std::tanh(x); }        
    template<typename T> T tgamma(const T& x) { return std::tgamma(x); }    
    template<typename T> T trunc(const T& x) { return std::trunc(x); }
    double Huge() { return HUGE_VAL; }
    float Hugef() { return HUGE_VALF; }
    double Infinity() { return INFINITY; }
    double NaN() { return NAN; }

    


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <algorithm>
#include <vector>
#include <map>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cassert>
#include <iostream>
#include <random>
#include <memory>


namespace std {
    template<typename T>
    struct vector_iterator
    {
        typename std::vector<T>::iterator iter;
        std::vector<T> v;

        vector_iterator(const std::vector<T> & vec) {
            v = vec;
        }   
        vector_iterator(const std::vector<T> & vec, const typename std::vector<T>::iterator & i) {
            iter = i;
            v = vec;
        }

        vector_iterator<T>& operator = (const T& val) {
            *iter = val;
            return *this;
        }
        vector_iterator<T>& operator = (const vector_iterator<T>& val) {
            iter = val.iter;
            v    = val.v;
            return *this;;
        }
                
        void next() {
            if(iter != v.end()) iter++;
        }
        void prev() {
            if(iter != v.begin()) iter--;
        }
        void forward(size_t i) {
            iter += i;
        }
        void backward(size_t i) {
            iter -= i;
        }
        void jump(size_t i) {
            iter = i;
        }
        
        T value() { return *iter; }
        void set_value(const T& val) { *iter = val; }
    };
}

#include <list>


  namespace std {
    template<typename T>
        struct list_iterator 
        {
            typename std::list<T>::iterator _iter;
            std::list<T> _list;;

            list_iterator(const std::list<T> & l, const typename std::list<T>::iterator & i) {
                _list = l;
                _iter = i;
            }

            void next() { if(_iter != _list.end()) _iter++; }
            void prev() { if(_iter != _list.begin()) _iter--; }
            T& get() { return *_iter;}

            //void insert(const Data& value) { _map.insert(_iter,value); }
            //bool find(const Key& key) { return _map.find(key) != _map.end(); }   
            
        };
    }


#include <map>


  namespace std {
    template<typename Key,  typename Data>
        struct map_iterator 
        {
            typename std::map<Key,Data>::iterator _iter;
            std::map<Key,Data> _map;

            map_iterator(const std::map<Key,Data> & m, const typename std::map<Key,Data>::iterator & i) {
                _map = m;
                _iter = i;
            }

            void next() { if(_iter != _map.end()) _iter++; }
            void prev() { if(_iter != _map.begin()) _iter--; }
            Data& get() { return *_iter;}

            void insert(const Data& value) { _map.insert(_iter,value); }
            bool find(const Key& key) { return _map.find(key) != _map.end(); }   
            
        };
    }


typedef struct{
  lua_State* L; /* the state */
  int idx;      /* the index on the stack */
}SWIGLUA_FN;

#define SWIGLUA_FN_GET(fn) {lua_pushvalue(fn.L,fn.idx);}


typedef struct{
  lua_State* L; /* the state */
  int ref;      /* a ref in the lua global index */
}SWIGLUA_REF;


void swiglua_ref_clear(SWIGLUA_REF* pref){
 	if (pref->L!=0 && pref->ref!=LUA_NOREF && pref->ref!=LUA_REFNIL){
		luaL_unref(pref->L,LUA_REGISTRYINDEX,pref->ref);
	}
	pref->L=0; pref->ref=0;
}

void swiglua_ref_set(SWIGLUA_REF* pref,lua_State* L,int idx){
	pref->L=L;
	lua_pushvalue(L,idx);                 /* copy obj to top */
	pref->ref=luaL_ref(L,LUA_REGISTRYINDEX); /* remove obj from top & put into registry */
}

void swiglua_ref_get(SWIGLUA_REF* pref){
	if (pref->L!=0)
		lua_rawgeti(pref->L,LUA_REGISTRYINDEX,pref->ref);
}



#include <string.h>

SWIGINTERN float std_vector_Sl_float_Sg____getitem__SWIG(std::vector< float > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_float_Sg____setitem__SWIG(std::vector< float > *self,size_t i,float val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< float > std_vector_Sl_float_Sg__begin__SWIG(std::vector< float > *self){
                std::vector_iterator<float> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< float > std_vector_Sl_float_Sg__end__SWIG(std::vector< float > *self){
                std::vector_iterator<float> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_float_Sg__erase__SWIG_0(std::vector< float > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_float_Sg__erase__SWIG_1(std::vector< float > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN double std_vector_Sl_double_Sg____getitem__SWIG(std::vector< double > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_double_Sg____setitem__SWIG(std::vector< double > *self,size_t i,double val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< double > std_vector_Sl_double_Sg__begin__SWIG(std::vector< double > *self){
                std::vector_iterator<double> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< double > std_vector_Sl_double_Sg__end__SWIG(std::vector< double > *self){
                std::vector_iterator<double> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_double_Sg__erase__SWIG_0(std::vector< double > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_double_Sg__erase__SWIG_1(std::vector< double > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN std::complex< float > std_vector_Sl_std_complex_Sl_float_Sg__Sg____getitem__SWIG(std::vector< std::complex< float > > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sg____setitem__SWIG(std::vector< std::complex< float > > *self,size_t i,std::complex< float > val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< std::complex< float > > std_vector_Sl_std_complex_Sl_float_Sg__Sg__begin__SWIG(std::vector< std::complex< float > > *self){
                std::vector_iterator<std::complex< float >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< std::complex< float > > std_vector_Sl_std_complex_Sl_float_Sg__Sg__end__SWIG(std::vector< std::complex< float > > *self){
                std::vector_iterator<std::complex< float >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sg__erase__SWIG_0(std::vector< std::complex< float > > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sg__erase__SWIG_1(std::vector< std::complex< float > > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN std::complex< double > std_vector_Sl_std_complex_Sl_double_Sg__Sg____getitem__SWIG(std::vector< std::complex< double > > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sg____setitem__SWIG(std::vector< std::complex< double > > *self,size_t i,std::complex< double > val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< std::complex< double > > std_vector_Sl_std_complex_Sl_double_Sg__Sg__begin__SWIG(std::vector< std::complex< double > > *self){
                std::vector_iterator<std::complex< double >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< std::complex< double > > std_vector_Sl_std_complex_Sl_double_Sg__Sg__end__SWIG(std::vector< std::complex< double > > *self){
                std::vector_iterator<std::complex< double >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sg__erase__SWIG_0(std::vector< std::complex< double > > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sg__erase__SWIG_1(std::vector< std::complex< double > > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
#ifdef __cplusplus
extern "C" {
#endif
static void swig_delete_gslice(void *obj) {
std::gslice *arg1 = (std::gslice *) obj;
delete arg1;
}
static swig_lua_attribute swig_gslice_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_gslice_methods[]= {
    {0,0}
};
static swig_lua_method swig_gslice_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_gslice_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_gslice_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_gslice_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_gslice_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_gslice_Sf_SwigStatic = {
    "gslice",
    swig_gslice_Sf_SwigStatic_methods,
    swig_gslice_Sf_SwigStatic_attributes,
    swig_gslice_Sf_SwigStatic_constants,
    swig_gslice_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_gslice_bases[] = {0};
static const char *swig_gslice_base_names[] = {0};
static swig_lua_class _wrap_class_gslice = { "gslice", "gslice", &SWIGTYPE_p_std__gslice,0, swig_delete_gslice, swig_gslice_methods, swig_gslice_attributes, &swig_gslice_Sf_SwigStatic, swig_gslice_meta, swig_gslice_bases, swig_gslice_base_names };

static void swig_delete_slice(void *obj) {
std::slice *arg1 = (std::slice *) obj;
delete arg1;
}
static swig_lua_attribute swig_slice_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_slice_methods[]= {
    {0,0}
};
static swig_lua_method swig_slice_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_slice_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_slice_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_slice_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_slice_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_slice_Sf_SwigStatic = {
    "slice",
    swig_slice_Sf_SwigStatic_methods,
    swig_slice_Sf_SwigStatic_attributes,
    swig_slice_Sf_SwigStatic_constants,
    swig_slice_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_slice_bases[] = {0};
static const char *swig_slice_base_names[] = {0};
static swig_lua_class _wrap_class_slice = { "slice", "slice", &SWIGTYPE_p_std__slice,0, swig_delete_slice, swig_slice_methods, swig_slice_attributes, &swig_slice_Sf_SwigStatic, swig_slice_meta, swig_slice_bases, swig_slice_base_names };

static int _wrap_new_float_complex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::complex",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (std::complex< float > *)new std::complex< float >((float const &)*arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (std::complex< float > *)new std::complex< float >((float const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",0,0)
  result = (std::complex< float > *)new std::complex< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("new_float_complex",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (std::complex< float > *)new std::complex< float >((std::complex< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_float_complex__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_complex__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_complex__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_complex__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_complex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::complex(float const &,float const &)\n"
    "    std::complex< float >::complex(float const &)\n"
    "    std::complex< float >::complex()\n"
    "    std::complex< float >::complex(std::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::complex< float >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::real",1,"std::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_real",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)((std::complex< float > const *)arg1)->real();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::complex< float >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::imag",1,"std::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_imag",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)((std::complex< float > const *)arg1)->imag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("std::complex< float >::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::real",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::real",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_real",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_float_complex_real__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_complex_real__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_complex_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::real() const\n"
    "    std::complex< float >::real(float)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("std::complex< float >::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::imag",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::imag",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_imag",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_imag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_float_complex_imag__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_complex_imag__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_complex_imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::imag() const\n"
    "    std::complex< float >::imag(float)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex___add(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__add__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__add__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___add",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___add",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____add____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__sub__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__sub__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___sub",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___sub",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____sub____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___div(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__div__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__div__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___div",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___div",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____div____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__mul__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__mul__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___mul",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___mul",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____mul____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__pow__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__pow__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___pow",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___pow",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____pow____SWIG_0(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__pow__",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::__pow__",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___pow",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = std_complex_Sl_float_Sg____pow____SWIG_1(arg1,(float const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_complex___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_complex___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_complex___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::__pow__(std::complex< float > const &)\n"
    "    std::complex< float >::__pow__(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex___eq(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("std::complex< float >::__eq__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__eq__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__eq__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___eq",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___eq",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (bool)std_complex_Sl_float_Sg____eq____SWIG(arg1,(std::complex< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_complex(void *obj) {
std::complex< float > *arg1 = (std::complex< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_complex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_complex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_complex_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_complex_methods[]= {
    { "real", _wrap_float_complex_real},
    { "imag", _wrap_float_complex_imag},
    { "__add", _wrap_float_complex___add},
    { "__sub", _wrap_float_complex___sub},
    { "__div", _wrap_float_complex___div},
    { "__mul", _wrap_float_complex___mul},
    { "__pow", _wrap_float_complex___pow},
    { "__eq", _wrap_float_complex___eq},
    {0,0}
};
static swig_lua_method swig_float_complex_meta[] = {
    { "__add", _wrap_float_complex___add},
    { "__sub", _wrap_float_complex___sub},
    { "__div", _wrap_float_complex___div},
    { "__mul", _wrap_float_complex___mul},
    { "__pow", _wrap_float_complex___pow},
    { "__eq", _wrap_float_complex___eq},
    {0,0}
};

static swig_lua_attribute swig_float_complex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_complex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_complex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_complex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_complex_Sf_SwigStatic = {
    "float_complex",
    swig_float_complex_Sf_SwigStatic_methods,
    swig_float_complex_Sf_SwigStatic_attributes,
    swig_float_complex_Sf_SwigStatic_constants,
    swig_float_complex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_complex_bases[] = {0};
static const char *swig_float_complex_base_names[] = {0};
static swig_lua_class _wrap_class_float_complex = { "float_complex", "float_complex", &SWIGTYPE_p_std__complexT_float_t,_proxy__wrap_new_float_complex, swig_delete_float_complex, swig_float_complex_methods, swig_float_complex_attributes, &swig_float_complex_Sf_SwigStatic, swig_float_complex_meta, swig_float_complex_bases, swig_float_complex_base_names };

static int _wrap_new_double_complex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::complex",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (std::complex< double > *)new std::complex< double >((double const &)*arg1,(double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (std::complex< double > *)new std::complex< double >((double const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",0,0)
  result = (std::complex< double > *)new std::complex< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_double_complex",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (std::complex< double > *)new std::complex< double >((std::complex< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_double_complex__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_complex__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_double_complex__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_double_complex__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_double_complex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::complex(double const &,double const &)\n"
    "    std::complex< double >::complex(double const &)\n"
    "    std::complex< double >::complex()\n"
    "    std::complex< double >::complex(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::complex< double >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::real",1,"std::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_real",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)((std::complex< double > const *)arg1)->real();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::complex< double >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::imag",1,"std::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_imag",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)((std::complex< double > const *)arg1)->imag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::complex< double >::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::real",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::real",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_real",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_double_complex_real__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_complex_real__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_complex_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::real() const\n"
    "    std::complex< double >::real(double)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::complex< double >::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::imag",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::imag",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_imag",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_imag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_double_complex_imag__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_complex_imag__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_complex_imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::imag() const\n"
    "    std::complex< double >::imag(double)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex___add(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__add__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__add__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___add",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___add",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____add____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__sub__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__sub__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___sub",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___sub",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____sub____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___div(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__div__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__div__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___div",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___div",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____div____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__mul__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__mul__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___mul",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___mul",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____mul____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__pow__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__pow__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___pow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___pow",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____pow____SWIG_0(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__pow__",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::__pow__",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___pow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = std_complex_Sl_double_Sg____pow____SWIG_1(arg1,(double const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_double_complex___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_complex___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_complex___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::__pow__(std::complex< double > const &)\n"
    "    std::complex< double >::__pow__(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex___eq(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("std::complex< double >::__eq__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__eq__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__eq__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___eq",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___eq",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (bool)std_complex_Sl_double_Sg____eq____SWIG(arg1,(std::complex< double > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_complex(void *obj) {
std::complex< double > *arg1 = (std::complex< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_complex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_complex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_complex_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_complex_methods[]= {
    { "real", _wrap_double_complex_real},
    { "imag", _wrap_double_complex_imag},
    { "__add", _wrap_double_complex___add},
    { "__sub", _wrap_double_complex___sub},
    { "__div", _wrap_double_complex___div},
    { "__mul", _wrap_double_complex___mul},
    { "__pow", _wrap_double_complex___pow},
    { "__eq", _wrap_double_complex___eq},
    {0,0}
};
static swig_lua_method swig_double_complex_meta[] = {
    { "__add", _wrap_double_complex___add},
    { "__sub", _wrap_double_complex___sub},
    { "__div", _wrap_double_complex___div},
    { "__mul", _wrap_double_complex___mul},
    { "__pow", _wrap_double_complex___pow},
    { "__eq", _wrap_double_complex___eq},
    {0,0}
};

static swig_lua_attribute swig_double_complex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_complex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_complex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_complex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_complex_Sf_SwigStatic = {
    "double_complex",
    swig_double_complex_Sf_SwigStatic_methods,
    swig_double_complex_Sf_SwigStatic_attributes,
    swig_double_complex_Sf_SwigStatic_constants,
    swig_double_complex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_complex_bases[] = {0};
static const char *swig_double_complex_base_names[] = {0};
static swig_lua_class _wrap_class_double_complex = { "double_complex", "double_complex", &SWIGTYPE_p_std__complexT_double_t,_proxy__wrap_new_double_complex, swig_delete_double_complex, swig_double_complex_methods, swig_double_complex_attributes, &swig_double_complex_Sf_SwigStatic, swig_double_complex_meta, swig_double_complex_bases, swig_double_complex_base_names };

static int _wrap_new_float_valarray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",0,0)
  result = (std::valarray< float > *)new std::valarray< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::valarray< float > *)new std::valarray< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  size_t arg2 ;
  float temp1 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::valarray",2,"size_t");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::valarray< float > *)new std::valarray< float >((float const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  size_t arg2 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"float const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::valarray",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::valarray< float > *)new std::valarray< float >((float const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::valarray< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  std::slice_array< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::slice_array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__slice_arrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__slice_arrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::slice_array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  std::gslice_array< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::gslice_array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__gslice_arrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__gslice_arrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::gslice_array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  std::mask_array< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::mask_array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mask_arrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__mask_arrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::mask_array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  std::indirect_array< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::indirect_array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__indirect_arrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__indirect_arrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::indirect_array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_float_valarray__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__slice_arrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__gslice_arrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__mask_arrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__indirect_arrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_valarray__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_valarray__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_valarray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::valarray()\n"
    "    std::valarray< float >::valarray(size_t)\n"
    "    std::valarray< float >::valarray(float const &,size_t)\n"
    "    std::valarray< float >::valarray(float const *,size_t)\n"
    "    std::valarray< float >::valarray(std::valarray< float > const &)\n"
    "    std::valarray< float >::valarray(std::slice_array< float > const &)\n"
    "    std::valarray< float >::valarray(std::gslice_array< float > const &)\n"
    "    std::valarray< float >::valarray(std::mask_array< float > const &)\n"
    "    std::valarray< float >::valarray(std::indirect_array< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray___getitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("std::valarray< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__getitem__",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___getitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)std_valarray_Sl_float_Sg____getitem____SWIG_0(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___setitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::valarray< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__setitem__",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::valarray< float >::__setitem__",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___setitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  std_valarray_Sl_float_Sg____setitem____SWIG_0(arg1,arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___getitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::gslice *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__getitem__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__getitem__",2,"std::gslice const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___getitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__gslice,0))){
    SWIG_fail_ptr("float_valarray___getitem",2,SWIGTYPE_p_std__gslice);
  }
  
  result = std_valarray_Sl_float_Sg____getitem____SWIG_1(arg1,(std::gslice const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___setitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::gslice *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::valarray< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__setitem__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__setitem__",2,"std::gslice const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::valarray< float >::__setitem__",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___setitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__gslice,0))){
    SWIG_fail_ptr("float_valarray___setitem",2,SWIGTYPE_p_std__gslice);
  }
  
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  std_valarray_Sl_float_Sg____setitem____SWIG_1(arg1,(std::gslice const &)*arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___getitem__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::slice *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__getitem__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__getitem__",2,"std::slice const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___getitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__slice,0))){
    SWIG_fail_ptr("float_valarray___getitem",2,SWIGTYPE_p_std__slice);
  }
  
  result = std_valarray_Sl_float_Sg____getitem____SWIG_2(arg1,(std::slice const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___getitem(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__gslice, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray___getitem__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__slice, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray___getitem__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_valarray___getitem__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray___getitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::__getitem__(size_t)\n"
    "    std::valarray< float >::__getitem__(std::gslice const &)\n"
    "    std::valarray< float >::__getitem__(std::slice const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray___setitem__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::slice *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::valarray< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__setitem__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__setitem__",2,"std::slice const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::valarray< float >::__setitem__",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___setitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__slice,0))){
    SWIG_fail_ptr("float_valarray___setitem",2,SWIGTYPE_p_std__slice);
  }
  
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  std_valarray_Sl_float_Sg____setitem____SWIG_2(arg1,(std::slice const &)*arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___setitem(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__gslice, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_valarray___setitem__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__slice, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_valarray___setitem__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_valarray___setitem__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray___setitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::__setitem__(size_t,float const &)\n"
    "    std::valarray< float >::__setitem__(std::gslice const &,float const &)\n"
    "    std::valarray< float >::__setitem__(std::slice const &,float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray___add(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__add__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__add__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___add",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___add",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____add____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__sub__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__sub__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___sub",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___sub",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____sub____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__mul__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__mul__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___mul",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___mul",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____mul____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___div(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__div__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__div__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___div",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___div",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____div____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___unm__(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__unm__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__unm__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__unm__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___unm__",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___unm__",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____unm____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__pow__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__pow__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___pow",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___pow",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____pow____SWIG_0(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__pow__",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::__pow__",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___pow",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = std_valarray_Sl_float_Sg____pow____SWIG_1(arg1,(float const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_valarray___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::__pow__(std::valarray< float > const &)\n"
    "    std::valarray< float >::__pow__(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray_size(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::valarray< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::size",1,"std::valarray< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_size",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = ((std::valarray< float > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("std::valarray< float >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::resize",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::valarray< float >::resize",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_resize",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::valarray< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::resize",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_resize",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_resize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_valarray_resize__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_valarray_resize__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::resize(size_t,float)\n"
    "    std::valarray< float >::resize(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray_sum(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::valarray< float >::sum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::sum",1,"std::valarray< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_sum",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = (float)((std::valarray< float > const *)arg1)->sum();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_min(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::valarray< float >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::min",1,"std::valarray< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_min",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = (float)((std::valarray< float > const *)arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_max(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::valarray< float >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::max",1,"std::valarray< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_max",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = (float)((std::valarray< float > const *)arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_shift(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  int arg2 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::shift",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::shift",1,"std::valarray< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::shift",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_shift",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((std::valarray< float > const *)arg1)->shift(arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_cshift(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  int arg2 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::cshift",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::cshift",1,"std::valarray< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::cshift",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_cshift",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((std::valarray< float > const *)arg1)->cshift(arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float (*arg2)(float) = (float (*)(float)) 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::apply",1,"std::valarray< float > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::valarray< float >::apply",2,"float (*)(float)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_apply",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_float__float,0))){
    SWIG_fail_ptr("float_valarray_apply",2,SWIGTYPE_p_f_float__float);
  }
  
  result = ((std::valarray< float > const *)arg1)->apply(arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float (*arg2)(float const &) = (float (*)(float const &)) 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::apply",1,"std::valarray< float > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::valarray< float >::apply",2,"float (*)(float const &)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_apply",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_r_q_const__float__float,0))){
    SWIG_fail_ptr("float_valarray_apply",2,SWIGTYPE_p_f_r_q_const__float__float);
  }
  
  result = ((std::valarray< float > const *)arg1)->apply(arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_apply(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_float__float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_r_q_const__float__float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray_apply__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::apply(float (*)(float)) const\n"
    "    std::valarray< float >::apply(float (*)(float const &)) const\n");
  lua_error(L);return 0;
}


static void swig_delete_float_valarray(void *obj) {
std::valarray< float > *arg1 = (std::valarray< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_valarray(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_valarray);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_valarray_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_valarray_methods[]= {
    { "__getitem", _wrap_float_valarray___getitem},
    { "__setitem", _wrap_float_valarray___setitem},
    { "__add", _wrap_float_valarray___add},
    { "__sub", _wrap_float_valarray___sub},
    { "__mul", _wrap_float_valarray___mul},
    { "__div", _wrap_float_valarray___div},
    { "__unm__", _wrap_float_valarray___unm__},
    { "__pow", _wrap_float_valarray___pow},
    { "size", _wrap_float_valarray_size},
    { "resize", _wrap_float_valarray_resize},
    { "sum", _wrap_float_valarray_sum},
    { "min", _wrap_float_valarray_min},
    { "max", _wrap_float_valarray_max},
    { "shift", _wrap_float_valarray_shift},
    { "cshift", _wrap_float_valarray_cshift},
    { "apply", _wrap_float_valarray_apply},
    {0,0}
};
static swig_lua_method swig_float_valarray_meta[] = {
    { "__getitem", _wrap_float_valarray___getitem},
    { "__setitem", _wrap_float_valarray___setitem},
    { "__add", _wrap_float_valarray___add},
    { "__sub", _wrap_float_valarray___sub},
    { "__mul", _wrap_float_valarray___mul},
    { "__div", _wrap_float_valarray___div},
    { "__unm__", _wrap_float_valarray___unm__},
    { "__pow", _wrap_float_valarray___pow},
    {0,0}
};

static swig_lua_attribute swig_float_valarray_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_valarray_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_valarray_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_valarray_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_valarray_Sf_SwigStatic = {
    "float_valarray",
    swig_float_valarray_Sf_SwigStatic_methods,
    swig_float_valarray_Sf_SwigStatic_attributes,
    swig_float_valarray_Sf_SwigStatic_constants,
    swig_float_valarray_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_valarray_bases[] = {0};
static const char *swig_float_valarray_base_names[] = {0};
static swig_lua_class _wrap_class_float_valarray = { "float_valarray", "float_valarray", &SWIGTYPE_p_std__valarrayT_float_t,_proxy__wrap_new_float_valarray, swig_delete_float_valarray, swig_float_valarray_methods, swig_float_valarray_attributes, &swig_float_valarray_Sf_SwigStatic, swig_float_valarray_meta, swig_float_valarray_bases, swig_float_valarray_base_names };

static int _wrap_float_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::min",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::max",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::epsilon",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::round_error",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::infinity",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::quiet_NaN",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::signaling_NaN",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::denorm_min",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< float >::numeric_limits",0,0)
  result = (std::numeric_limits< float > *)new std::numeric_limits< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_numeric_limits(void *obj) {
std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_numeric_limits_methods[]= {
    { "min", _wrap_float_numeric_limits_min},
    { "max", _wrap_float_numeric_limits_max},
    { "epsilon", _wrap_float_numeric_limits_epsilon},
    { "round_error", _wrap_float_numeric_limits_round_error},
    { "infinity", _wrap_float_numeric_limits_infinity},
    { "quiet_NaN", _wrap_float_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_float_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_float_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_float_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_float_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_numeric_limits_Sf_SwigStatic = {
    "float_numeric_limits",
    swig_float_numeric_limits_Sf_SwigStatic_methods,
    swig_float_numeric_limits_Sf_SwigStatic_attributes,
    swig_float_numeric_limits_Sf_SwigStatic_constants,
    swig_float_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_numeric_limits_bases[] = {0};
static const char *swig_float_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_float_numeric_limits = { "float_numeric_limits", "float_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_float_t,_proxy__wrap_new_float_numeric_limits, swig_delete_float_numeric_limits, swig_float_numeric_limits_methods, swig_float_numeric_limits_attributes, &swig_float_numeric_limits_Sf_SwigStatic, swig_float_numeric_limits_meta, swig_float_numeric_limits_bases, swig_float_numeric_limits_base_names };

static int _wrap_double_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::min",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::max",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::epsilon",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::round_error",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::infinity",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::quiet_NaN",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::signaling_NaN",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::denorm_min",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< double >::numeric_limits",0,0)
  result = (std::numeric_limits< double > *)new std::numeric_limits< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_numeric_limits(void *obj) {
std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_numeric_limits_methods[]= {
    { "min", _wrap_double_numeric_limits_min},
    { "max", _wrap_double_numeric_limits_max},
    { "epsilon", _wrap_double_numeric_limits_epsilon},
    { "round_error", _wrap_double_numeric_limits_round_error},
    { "infinity", _wrap_double_numeric_limits_infinity},
    { "quiet_NaN", _wrap_double_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_double_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_double_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_double_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_double_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_numeric_limits_Sf_SwigStatic = {
    "double_numeric_limits",
    swig_double_numeric_limits_Sf_SwigStatic_methods,
    swig_double_numeric_limits_Sf_SwigStatic_attributes,
    swig_double_numeric_limits_Sf_SwigStatic_constants,
    swig_double_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_numeric_limits_bases[] = {0};
static const char *swig_double_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_double_numeric_limits = { "double_numeric_limits", "double_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_double_t,_proxy__wrap_new_double_numeric_limits, swig_delete_double_numeric_limits, swig_double_numeric_limits_methods, swig_double_numeric_limits_attributes, &swig_double_numeric_limits_Sf_SwigStatic, swig_double_numeric_limits_meta, swig_double_numeric_limits_bases, swig_double_numeric_limits_base_names };

static int _wrap_int_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::min",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::max",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::epsilon",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::round_error",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::infinity",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::quiet_NaN",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::signaling_NaN",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::denorm_min",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< int >::numeric_limits",0,0)
  result = (std::numeric_limits< int > *)new std::numeric_limits< int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int_numeric_limits(void *obj) {
std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int_numeric_limits_methods[]= {
    { "min", _wrap_int_numeric_limits_min},
    { "max", _wrap_int_numeric_limits_max},
    { "epsilon", _wrap_int_numeric_limits_epsilon},
    { "round_error", _wrap_int_numeric_limits_round_error},
    { "infinity", _wrap_int_numeric_limits_infinity},
    { "quiet_NaN", _wrap_int_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_int_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_int_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_int_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_int_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int_numeric_limits_Sf_SwigStatic = {
    "int_numeric_limits",
    swig_int_numeric_limits_Sf_SwigStatic_methods,
    swig_int_numeric_limits_Sf_SwigStatic_attributes,
    swig_int_numeric_limits_Sf_SwigStatic_constants,
    swig_int_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int_numeric_limits_bases[] = {0};
static const char *swig_int_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_int_numeric_limits = { "int_numeric_limits", "int_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_int_t,_proxy__wrap_new_int_numeric_limits, swig_delete_int_numeric_limits, swig_int_numeric_limits_methods, swig_int_numeric_limits_attributes, &swig_int_numeric_limits_Sf_SwigStatic, swig_int_numeric_limits_meta, swig_int_numeric_limits_bases, swig_int_numeric_limits_base_names };

static int _wrap_uint_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::min",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::max",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::epsilon",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::round_error",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::infinity",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::quiet_NaN",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::signaling_NaN",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::denorm_min",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned int > *)new std::numeric_limits< unsigned int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint_numeric_limits(void *obj) {
std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint_numeric_limits_methods[]= {
    { "min", _wrap_uint_numeric_limits_min},
    { "max", _wrap_uint_numeric_limits_max},
    { "epsilon", _wrap_uint_numeric_limits_epsilon},
    { "round_error", _wrap_uint_numeric_limits_round_error},
    { "infinity", _wrap_uint_numeric_limits_infinity},
    { "quiet_NaN", _wrap_uint_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_uint_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_uint_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_uint_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uint_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint_numeric_limits_Sf_SwigStatic = {
    "uint_numeric_limits",
    swig_uint_numeric_limits_Sf_SwigStatic_methods,
    swig_uint_numeric_limits_Sf_SwigStatic_attributes,
    swig_uint_numeric_limits_Sf_SwigStatic_constants,
    swig_uint_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint_numeric_limits_bases[] = {0};
static const char *swig_uint_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_uint_numeric_limits = { "uint_numeric_limits", "uint_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,_proxy__wrap_new_uint_numeric_limits, swig_delete_uint_numeric_limits, swig_uint_numeric_limits_methods, swig_uint_numeric_limits_attributes, &swig_uint_numeric_limits_Sf_SwigStatic, swig_uint_numeric_limits_meta, swig_uint_numeric_limits_bases, swig_uint_numeric_limits_base_names };

static int _wrap_short_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::min",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::max",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::epsilon",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::round_error",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::infinity",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::quiet_NaN",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::signaling_NaN",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::denorm_min",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_short_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< short >::numeric_limits",0,0)
  result = (std::numeric_limits< short > *)new std::numeric_limits< short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_short_numeric_limits(void *obj) {
std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_short_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_short_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_short_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_short_numeric_limits_methods[]= {
    { "min", _wrap_short_numeric_limits_min},
    { "max", _wrap_short_numeric_limits_max},
    { "epsilon", _wrap_short_numeric_limits_epsilon},
    { "round_error", _wrap_short_numeric_limits_round_error},
    { "infinity", _wrap_short_numeric_limits_infinity},
    { "quiet_NaN", _wrap_short_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_short_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_short_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_short_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_short_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_short_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_short_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_short_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_short_numeric_limits_Sf_SwigStatic = {
    "short_numeric_limits",
    swig_short_numeric_limits_Sf_SwigStatic_methods,
    swig_short_numeric_limits_Sf_SwigStatic_attributes,
    swig_short_numeric_limits_Sf_SwigStatic_constants,
    swig_short_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_short_numeric_limits_bases[] = {0};
static const char *swig_short_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_short_numeric_limits = { "short_numeric_limits", "short_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_short_t,_proxy__wrap_new_short_numeric_limits, swig_delete_short_numeric_limits, swig_short_numeric_limits_methods, swig_short_numeric_limits_attributes, &swig_short_numeric_limits_Sf_SwigStatic, swig_short_numeric_limits_meta, swig_short_numeric_limits_bases, swig_short_numeric_limits_base_names };

static int _wrap_ushort_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::min",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::max",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::epsilon",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::round_error",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::infinity",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::quiet_NaN",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::signaling_NaN",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::denorm_min",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ushort_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned short > *)new std::numeric_limits< unsigned short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ushort_numeric_limits(void *obj) {
std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ushort_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ushort_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ushort_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ushort_numeric_limits_methods[]= {
    { "min", _wrap_ushort_numeric_limits_min},
    { "max", _wrap_ushort_numeric_limits_max},
    { "epsilon", _wrap_ushort_numeric_limits_epsilon},
    { "round_error", _wrap_ushort_numeric_limits_round_error},
    { "infinity", _wrap_ushort_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ushort_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ushort_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ushort_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ushort_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ushort_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ushort_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ushort_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ushort_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ushort_numeric_limits_Sf_SwigStatic = {
    "ushort_numeric_limits",
    swig_ushort_numeric_limits_Sf_SwigStatic_methods,
    swig_ushort_numeric_limits_Sf_SwigStatic_attributes,
    swig_ushort_numeric_limits_Sf_SwigStatic_constants,
    swig_ushort_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ushort_numeric_limits_bases[] = {0};
static const char *swig_ushort_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ushort_numeric_limits = { "ushort_numeric_limits", "ushort_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,_proxy__wrap_new_ushort_numeric_limits, swig_delete_ushort_numeric_limits, swig_ushort_numeric_limits_methods, swig_ushort_numeric_limits_attributes, &swig_ushort_numeric_limits_Sf_SwigStatic, swig_ushort_numeric_limits_meta, swig_ushort_numeric_limits_bases, swig_ushort_numeric_limits_base_names };

static int _wrap_long_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::min",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::max",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::epsilon",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::round_error",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::infinity",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::quiet_NaN",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::signaling_NaN",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::denorm_min",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_long_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< long >::numeric_limits",0,0)
  result = (std::numeric_limits< long > *)new std::numeric_limits< long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_long_numeric_limits(void *obj) {
std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_long_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_long_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_long_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_long_numeric_limits_methods[]= {
    { "min", _wrap_long_numeric_limits_min},
    { "max", _wrap_long_numeric_limits_max},
    { "epsilon", _wrap_long_numeric_limits_epsilon},
    { "round_error", _wrap_long_numeric_limits_round_error},
    { "infinity", _wrap_long_numeric_limits_infinity},
    { "quiet_NaN", _wrap_long_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_long_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_long_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_long_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_long_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_long_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_long_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_long_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_long_numeric_limits_Sf_SwigStatic = {
    "long_numeric_limits",
    swig_long_numeric_limits_Sf_SwigStatic_methods,
    swig_long_numeric_limits_Sf_SwigStatic_attributes,
    swig_long_numeric_limits_Sf_SwigStatic_constants,
    swig_long_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_long_numeric_limits_bases[] = {0};
static const char *swig_long_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_long_numeric_limits = { "long_numeric_limits", "long_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_long_t,_proxy__wrap_new_long_numeric_limits, swig_delete_long_numeric_limits, swig_long_numeric_limits_methods, swig_long_numeric_limits_attributes, &swig_long_numeric_limits_Sf_SwigStatic, swig_long_numeric_limits_meta, swig_long_numeric_limits_bases, swig_long_numeric_limits_base_names };

static int _wrap_ulong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::min",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::max",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::epsilon",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::round_error",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::infinity",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::quiet_NaN",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::signaling_NaN",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::denorm_min",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ulong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned long > *)new std::numeric_limits< unsigned long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ulong_numeric_limits(void *obj) {
std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ulong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ulong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ulong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ulong_numeric_limits_methods[]= {
    { "min", _wrap_ulong_numeric_limits_min},
    { "max", _wrap_ulong_numeric_limits_max},
    { "epsilon", _wrap_ulong_numeric_limits_epsilon},
    { "round_error", _wrap_ulong_numeric_limits_round_error},
    { "infinity", _wrap_ulong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ulong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ulong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ulong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ulong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ulong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ulong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ulong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ulong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ulong_numeric_limits_Sf_SwigStatic = {
    "ulong_numeric_limits",
    swig_ulong_numeric_limits_Sf_SwigStatic_methods,
    swig_ulong_numeric_limits_Sf_SwigStatic_attributes,
    swig_ulong_numeric_limits_Sf_SwigStatic_constants,
    swig_ulong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ulong_numeric_limits_bases[] = {0};
static const char *swig_ulong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ulong_numeric_limits = { "ulong_numeric_limits", "ulong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,_proxy__wrap_new_ulong_numeric_limits, swig_delete_ulong_numeric_limits, swig_ulong_numeric_limits_methods, swig_ulong_numeric_limits_attributes, &swig_ulong_numeric_limits_Sf_SwigStatic, swig_ulong_numeric_limits_meta, swig_ulong_numeric_limits_bases, swig_ulong_numeric_limits_base_names };

static int _wrap_llong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::min",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::max",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::epsilon",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::round_error",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::infinity",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::quiet_NaN",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::signaling_NaN",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::denorm_min",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_llong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< long long >::numeric_limits",0,0)
  result = (std::numeric_limits< long long > *)new std::numeric_limits< long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_llong_numeric_limits(void *obj) {
std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_llong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_llong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_llong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_llong_numeric_limits_methods[]= {
    { "min", _wrap_llong_numeric_limits_min},
    { "max", _wrap_llong_numeric_limits_max},
    { "epsilon", _wrap_llong_numeric_limits_epsilon},
    { "round_error", _wrap_llong_numeric_limits_round_error},
    { "infinity", _wrap_llong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_llong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_llong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_llong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_llong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_llong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_llong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_llong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_llong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_llong_numeric_limits_Sf_SwigStatic = {
    "llong_numeric_limits",
    swig_llong_numeric_limits_Sf_SwigStatic_methods,
    swig_llong_numeric_limits_Sf_SwigStatic_attributes,
    swig_llong_numeric_limits_Sf_SwigStatic_constants,
    swig_llong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_llong_numeric_limits_bases[] = {0};
static const char *swig_llong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_llong_numeric_limits = { "llong_numeric_limits", "llong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_long_long_t,_proxy__wrap_new_llong_numeric_limits, swig_delete_llong_numeric_limits, swig_llong_numeric_limits_methods, swig_llong_numeric_limits_attributes, &swig_llong_numeric_limits_Sf_SwigStatic, swig_llong_numeric_limits_meta, swig_llong_numeric_limits_bases, swig_llong_numeric_limits_base_names };

static int _wrap_ullong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::min",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::max",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::epsilon",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::round_error",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::infinity",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::quiet_NaN",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::signaling_NaN",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::denorm_min",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ullong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned long long > *)new std::numeric_limits< unsigned long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ullong_numeric_limits(void *obj) {
std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ullong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ullong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ullong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ullong_numeric_limits_methods[]= {
    { "min", _wrap_ullong_numeric_limits_min},
    { "max", _wrap_ullong_numeric_limits_max},
    { "epsilon", _wrap_ullong_numeric_limits_epsilon},
    { "round_error", _wrap_ullong_numeric_limits_round_error},
    { "infinity", _wrap_ullong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ullong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ullong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ullong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ullong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ullong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ullong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ullong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ullong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ullong_numeric_limits_Sf_SwigStatic = {
    "ullong_numeric_limits",
    swig_ullong_numeric_limits_Sf_SwigStatic_methods,
    swig_ullong_numeric_limits_Sf_SwigStatic_attributes,
    swig_ullong_numeric_limits_Sf_SwigStatic_constants,
    swig_ullong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ullong_numeric_limits_bases[] = {0};
static const char *swig_ullong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ullong_numeric_limits = { "ullong_numeric_limits", "ullong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,_proxy__wrap_new_ullong_numeric_limits, swig_delete_ullong_numeric_limits, swig_ullong_numeric_limits_methods, swig_ullong_numeric_limits_attributes, &swig_ullong_numeric_limits_Sf_SwigStatic, swig_ullong_numeric_limits_meta, swig_ullong_numeric_limits_bases, swig_ullong_numeric_limits_base_names };

static int _wrap_Huge(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Huge",0,0)
  result = (double)Huge();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Hugef(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("Hugef",0,0)
  result = (float)Hugef();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Infinity(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Infinity",0,0)
  result = (double)Infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NaN(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("NaN",0,0)
  result = (double)NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("abs< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("abs< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)abs< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cubef(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cube< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cube< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cube< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("sqrt< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sqrt< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)sqrt< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("exp< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)exp< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("exp2< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp2< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)exp2< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log10< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log10< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log10< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log2< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log2< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log2< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("logb< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("logb< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)logb< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("pow< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("pow< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pow< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)pow< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("floor< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("floor< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)floor< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("acos< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acos< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)acos< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("asin< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asin< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)asin< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("atan< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)atan< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("atan2< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan2< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("atan2< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)atan2< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cos< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cos< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cos< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("sin< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sin< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)sin< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("tan< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tan< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)tan< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cosh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cosh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cosh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("sinh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sinh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)sinh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("tanh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tanh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)tanh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgammaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("lgamma< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lgamma< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)lgamma< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("acosh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acosh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)acosh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("asinh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asinh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)asinh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("atanh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atanh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)atanh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrtf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cbrt< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cbrt< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cbrt< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cbrt< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysignf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("copysign< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("copysign< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("copysign< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)copysign< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erff(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("erf< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erf< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)erf< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfcf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("erfc< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erfc< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)erfc< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("expm1< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("expm1< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)expm1< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdimf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fdim< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fdim< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fdim< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fdim< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp1 ;
  float temp2 ;
  float temp3 ;
  float result;
  
  SWIG_check_num_args("fma< f32 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fma< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fma< f32 >",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fma< f32 >",3,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  result = (float)fma< f32 >((float const &)*arg1,(float const &)*arg2,(float const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaxf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fmax< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmax< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmax< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fmax< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fminf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fmin< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmin< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmin< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fmin< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmodf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fmod< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmod< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmod< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fmod< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fpclassifyf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  int result;
  
  SWIG_check_num_args("fpclassify< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fpclassify< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (int)fpclassify< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypotf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("hypot< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("hypot< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("hypot< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)hypot< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogbf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  int result;
  
  SWIG_check_num_args("ilogb< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ilogb< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (int)ilogb< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isfinitef(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isfinite< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isfinite< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isfinite< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreater< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreater< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreater< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreater< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterequalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreaterequal< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreaterequal< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreaterequal< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreaterequal< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isinff(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isinf< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isinf< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isinf< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isless< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isless< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isless< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isless< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessequalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("islessequal< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("islessequal< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("islessequal< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)islessequal< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isnan< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnan< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnan< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnormalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isnormal< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnormal< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnormal< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isunorderedf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isunordered< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isunordered< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isunordered< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isunordered< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldexpf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("ldexp< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ldexp< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ldexp< f32 >",2,"int");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)ldexp< f32 >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llrintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("llrint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llrint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)llrint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llroundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("llround< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llround< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)llround< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log1p< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log1p< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log1p< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lrintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("lrint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lrint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)lrint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lroundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("lround< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lround< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)lround< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("nan< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nan< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)nan< f32 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanff(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("nanf< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanf< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)nanf< f32 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanlf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("nanl< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanl< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)nanl< f32 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nearbyintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("nearbyint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nearbyint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)nearbyint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextafterf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("nextafter< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nextafter< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nextafter< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)nextafter< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nexttowardf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("nexttoward< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nexttoward< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nexttoward< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)nexttoward< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainderf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("remainder< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("remainder< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("remainder< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)remainder< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("rint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)rint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("round< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("round< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)round< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalblnf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  long arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("scalbln< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbln< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbln< f32 >",2,"long");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (long)lua_tonumber(L, 2);
  result = (float)scalbln< f32 >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbnf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("scalbn< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbn< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbn< f32 >",2,"int");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)scalbn< f32 >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squaref(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("square< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("square< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)square< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgammaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("tgamma< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tgamma< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)tgamma< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_truncf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("trunc< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("trunc< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)trunc< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("abs< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("abs< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)abs< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("sqrt< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sqrt< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)sqrt< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("exp< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)exp< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("exp2< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp2< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)exp2< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log10< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log10< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log10< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log2< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log2< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log2< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("logb< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("logb< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)logb< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("pow< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("pow< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pow< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)pow< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floord(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("floor< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("floor< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)floor< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("acos< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acos< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)acos< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("asin< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asin< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)asin< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("atan< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)atan< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("atan2< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan2< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("atan2< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)atan2< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cos< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cos< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cos< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("sin< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sin< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)sin< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("tan< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tan< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)tan< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cosh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cosh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cosh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("sinh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sinh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)sinh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("tanh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tanh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)tanh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgammad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("lgamma< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lgamma< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)lgamma< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("acosh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acosh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)acosh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("asinh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asinh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)asinh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("atanh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atanh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)atanh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrtd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cbrt< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cbrt< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceild(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cbrt< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cbrt< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysignd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("copysign< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("copysign< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("copysign< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)copysign< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("erf< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erf< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)erf< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfcd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("erfc< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erfc< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)erfc< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("expm1< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("expm1< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)expm1< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdimd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fdim< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fdim< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fdim< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fdim< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp1 ;
  double temp2 ;
  double temp3 ;
  double result;
  
  SWIG_check_num_args("fma< f64 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fma< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fma< f64 >",2,"double const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fma< f64 >",3,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  result = (double)fma< f64 >((double const &)*arg1,(double const &)*arg2,(double const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaxd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fmax< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmax< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmax< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fmax< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fmin< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmin< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmin< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fmin< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmodd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fmod< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmod< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmod< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fmod< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fpclassifyd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  int result;
  
  SWIG_check_num_args("fpclassify< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fpclassify< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (int)fpclassify< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypotd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("hypot< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("hypot< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("hypot< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)hypot< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogbd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  int result;
  
  SWIG_check_num_args("ilogb< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ilogb< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (int)ilogb< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isfinited(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isfinite< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isfinite< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isfinite< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreater< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreater< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreater< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreater< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterequald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreaterequal< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreaterequal< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreaterequal< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreaterequal< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isinfd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isinf< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isinf< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isinf< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isless< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isless< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isless< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isless< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessequald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("islessequal< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("islessequal< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("islessequal< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)islessequal< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isnan< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnan< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnan< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnormald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isnormal< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnormal< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnormal< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isunorderedd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isunordered< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isunordered< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isunordered< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isunordered< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldexpd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("ldexp< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ldexp< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ldexp< f64 >",2,"int");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)ldexp< f64 >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llrintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("llrint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llrint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)llrint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llroundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("llround< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llround< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)llround< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log1p< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log1p< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log1p< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lrintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("lrint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lrint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)lrint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lroundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("lround< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lround< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)lround< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nand(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("nan< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nan< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)nan< f64 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanfd(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("nanf< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanf< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)nanf< f64 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanld(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("nanl< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanl< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)nanl< f64 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nearbyintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("nearbyint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nearbyint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)nearbyint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextafterd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("nextafter< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nextafter< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nextafter< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)nextafter< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nexttowardd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("nexttoward< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nexttoward< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nexttoward< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)nexttoward< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainderd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("remainder< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("remainder< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("remainder< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)remainder< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("rint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)rint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("round< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("round< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)round< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalblnd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  long arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("scalbln< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbln< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbln< f64 >",2,"long");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (long)lua_tonumber(L, 2);
  result = (double)scalbln< f64 >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbnd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("scalbn< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbn< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbn< f64 >",2,"int");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)scalbn< f64 >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squared(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("square< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("square< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)square< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgammad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("tgamma< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tgamma< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)tgamma< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_truncd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("trunc< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("trunc< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)trunc< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feclearexcept(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("feclearexcept",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("feclearexcept",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)feclearexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fegetexceptflag(lua_State* L) {
  int SWIG_arg = 0;
  fexcept_t *arg1 = (fexcept_t *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("fegetexceptflag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fegetexceptflag",1,"fexcept_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fegetexceptflag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fexcept_t,0))){
    SWIG_fail_ptr("fegetexceptflag",1,SWIGTYPE_p_fexcept_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)fegetexceptflag(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feraiseexcept(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("feraiseexcept",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("feraiseexcept",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)feraiseexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fesetexceptflag(lua_State* L) {
  int SWIG_arg = 0;
  fexcept_t *arg1 = (fexcept_t *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("fesetexceptflag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fesetexceptflag",1,"fexcept_t const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fesetexceptflag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fexcept_t,0))){
    SWIG_fail_ptr("fesetexceptflag",1,SWIGTYPE_p_fexcept_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)fesetexceptflag((fexcept_t const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fetestexcept(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("fetestexcept",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fetestexcept",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)fetestexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fegetround(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("fegetround",0,0)
  result = (int)fegetround();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fesetround(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("fesetround",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fesetround",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)fesetround(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fegetenv(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("fegetenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fegetenv",1,"fenv_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("fegetenv",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)fegetenv(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feholdexcept(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("feholdexcept",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("feholdexcept",1,"fenv_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("feholdexcept",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)feholdexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fesetenv(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("fesetenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fesetenv",1,"fenv_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("fesetenv",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)fesetenv((fenv_t const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feupdateenv(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("feupdateenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("feupdateenv",1,"fenv_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("feupdateenv",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)feupdateenv((fenv_t const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF128_882_set(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 ;
  
  SWIG_check_num_args("LPF128_882",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LPF128_882",1,"DspFloatType [128]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LPF128_882_set",1,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) LPF128_882;
    for (ii = 0; ii < (size_t)128; ii++) b[ii] = *((DspFloatType *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF128_882_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("LPF128_882",0,0)
  result = (DspFloatType *)(DspFloatType *)LPF128_882;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF128_1764_set(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 ;
  
  SWIG_check_num_args("LPF128_1764",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LPF128_1764",1,"DspFloatType [128]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LPF128_1764_set",1,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) LPF128_1764;
    for (ii = 0; ii < (size_t)128; ii++) b[ii] = *((DspFloatType *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF128_1764_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("LPF128_1764",0,0)
  result = (DspFloatType *)(DspFloatType *)LPF128_1764;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF128_96_set(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 ;
  
  SWIG_check_num_args("LPF128_96",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LPF128_96",1,"DspFloatType [128]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LPF128_96_set",1,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) LPF128_96;
    for (ii = 0; ii < (size_t)128; ii++) b[ii] = *((DspFloatType *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF128_96_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("LPF128_96",0,0)
  result = (DspFloatType *)(DspFloatType *)LPF128_96;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF128_192_set(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 ;
  
  SWIG_check_num_args("LPF128_192",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LPF128_192",1,"DspFloatType [128]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LPF128_192_set",1,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) LPF128_192;
    for (ii = 0; ii < (size_t)128; ii++) b[ii] = *((DspFloatType *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF128_192_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("LPF128_192",0,0)
  result = (DspFloatType *)(DspFloatType *)LPF128_192;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF256_882_set(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 ;
  
  SWIG_check_num_args("LPF256_882",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LPF256_882",1,"DspFloatType [256]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LPF256_882_set",1,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) LPF256_882;
    for (ii = 0; ii < (size_t)256; ii++) b[ii] = *((DspFloatType *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF256_882_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("LPF256_882",0,0)
  result = (DspFloatType *)(DspFloatType *)LPF256_882;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF256_1764_set(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 ;
  
  SWIG_check_num_args("LPF256_1764",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LPF256_1764",1,"DspFloatType [256]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LPF256_1764_set",1,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) LPF256_1764;
    for (ii = 0; ii < (size_t)256; ii++) b[ii] = *((DspFloatType *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF256_1764_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("LPF256_1764",0,0)
  result = (DspFloatType *)(DspFloatType *)LPF256_1764;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF256_96_set(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 ;
  
  SWIG_check_num_args("LPF256_96",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LPF256_96",1,"DspFloatType [256]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LPF256_96_set",1,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) LPF256_96;
    for (ii = 0; ii < (size_t)256; ii++) b[ii] = *((DspFloatType *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF256_96_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("LPF256_96",0,0)
  result = (DspFloatType *)(DspFloatType *)LPF256_96;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF256_192_set(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 ;
  
  SWIG_check_num_args("LPF256_192",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LPF256_192",1,"DspFloatType [256]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LPF256_192_set",1,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) LPF256_192;
    for (ii = 0; ii < (size_t)256; ii++) b[ii] = *((DspFloatType *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF256_192_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("LPF256_192",0,0)
  result = (DspFloatType *)(DspFloatType *)LPF256_192;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF512_882_set(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 ;
  
  SWIG_check_num_args("LPF512_882",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LPF512_882",1,"DspFloatType [512]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LPF512_882_set",1,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) LPF512_882;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((DspFloatType *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF512_882_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("LPF512_882",0,0)
  result = (DspFloatType *)(DspFloatType *)LPF512_882;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF512_1764_set(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 ;
  
  SWIG_check_num_args("LPF512_1764",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LPF512_1764",1,"DspFloatType [512]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LPF512_1764_set",1,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) LPF512_1764;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((DspFloatType *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF512_1764_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("LPF512_1764",0,0)
  result = (DspFloatType *)(DspFloatType *)LPF512_1764;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF512_96_set(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 ;
  
  SWIG_check_num_args("LPF512_96",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LPF512_96",1,"DspFloatType [512]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LPF512_96_set",1,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) LPF512_96;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((DspFloatType *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF512_96_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("LPF512_96",0,0)
  result = (DspFloatType *)(DspFloatType *)LPF512_96;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF512_192_set(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 ;
  
  SWIG_check_num_args("LPF512_192",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LPF512_192",1,"DspFloatType [512]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LPF512_192_set",1,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) LPF512_192;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((DspFloatType *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF512_192_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("LPF512_192",0,0)
  result = (DspFloatType *)(DspFloatType *)LPF512_192;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF1024_882_set(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 ;
  
  SWIG_check_num_args("LPF1024_882",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LPF1024_882",1,"DspFloatType [1024]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LPF1024_882_set",1,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) LPF1024_882;
    for (ii = 0; ii < (size_t)1024; ii++) b[ii] = *((DspFloatType *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF1024_882_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("LPF1024_882",0,0)
  result = (DspFloatType *)(DspFloatType *)LPF1024_882;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF1024_1764_set(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 ;
  
  SWIG_check_num_args("LPF1024_1764",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LPF1024_1764",1,"DspFloatType [1024]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LPF1024_1764_set",1,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) LPF1024_1764;
    for (ii = 0; ii < (size_t)1024; ii++) b[ii] = *((DspFloatType *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF1024_1764_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("LPF1024_1764",0,0)
  result = (DspFloatType *)(DspFloatType *)LPF1024_1764;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF1024_96_set(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 ;
  
  SWIG_check_num_args("LPF1024_96",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LPF1024_96",1,"DspFloatType [1024]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LPF1024_96_set",1,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) LPF1024_96;
    for (ii = 0; ii < (size_t)1024; ii++) b[ii] = *((DspFloatType *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF1024_96_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("LPF1024_96",0,0)
  result = (DspFloatType *)(DspFloatType *)LPF1024_96;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF1024_192_set(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 ;
  
  SWIG_check_num_args("LPF1024_192",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LPF1024_192",1,"DspFloatType [1024]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LPF1024_192_set",1,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) LPF1024_192;
    for (ii = 0; ii < (size_t)1024; ii++) b[ii] = *((DspFloatType *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPF1024_192_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("LPF1024_192",0,0)
  result = (DspFloatType *)(DspFloatType *)LPF1024_192;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kSmallestPositiveFloatValue_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("kSmallestPositiveFloatValue",0,0)
  result = (DspFloatType)(DspFloatType)kSmallestPositiveFloatValue;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kSmallestNegativeFloatValue_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("kSmallestNegativeFloatValue",0,0)
  result = (DspFloatType)(DspFloatType)kSmallestNegativeFloatValue;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kSqrtTwo_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("kSqrtTwo",0,0)
  result = (DspFloatType)(DspFloatType)kSqrtTwo;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kMinFilterFrequency_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("kMinFilterFrequency",0,0)
  result = (DspFloatType)(DspFloatType)kMinFilterFrequency;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kMaxFilterFrequency_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("kMaxFilterFrequency",0,0)
  result = (DspFloatType)(DspFloatType)kMaxFilterFrequency;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ARC4RANDOMMAX_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("ARC4RANDOMMAX",0,0)
  result = (DspFloatType)(DspFloatType)ARC4RANDOMMAX;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kPi_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("kPi",0,0)
  result = (DspFloatType)(DspFloatType)kPi;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kTwoPi_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("kTwoPi",0,0)
  result = (DspFloatType)(DspFloatType)kTwoPi;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ENVELOPE_DETECT_MODE_PEAK_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("ENVELOPE_DETECT_MODE_PEAK",0,0)
  result = (uint32_t)(uint32_t)ENVELOPE_DETECT_MODE_PEAK;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ENVELOPE_DETECT_MODE_MS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("ENVELOPE_DETECT_MODE_MS",0,0)
  result = (uint32_t)(uint32_t)ENVELOPE_DETECT_MODE_MS;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ENVELOPE_DETECT_MODE_RMS_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("ENVELOPE_DETECT_MODE_RMS",0,0)
  result = (uint32_t)(uint32_t)ENVELOPE_DETECT_MODE_RMS;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ENVELOPE_DETECT_MODE_NONE_get(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("ENVELOPE_DETECT_MODE_NONE",0,0)
  result = (uint32_t)(uint32_t)ENVELOPE_DETECT_MODE_NONE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ENVELOPE_DIGITAL_TC_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("ENVELOPE_DIGITAL_TC",0,0)
  result = (DspFloatType)(DspFloatType)ENVELOPE_DIGITAL_TC;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ENVELOPE_ANALOG_TC_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("ENVELOPE_ANALOG_TC",0,0)
  result = (DspFloatType)(DspFloatType)ENVELOPE_ANALOG_TC;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_arc4random(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("arc4random",0,0)
  result = (DspFloatType)arc4random();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_checkFloatUnderflow(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("checkFloatUnderflow",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("checkFloatUnderflow",1,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("checkFloatUnderflow",1,SWIGTYPE_p_float);
  }
  
  result = (bool)checkFloatUnderflow(*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_doLinearInterpolation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("doLinearInterpolation",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("doLinearInterpolation",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("doLinearInterpolation",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("doLinearInterpolation",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("doLinearInterpolation",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("doLinearInterpolation",5,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)doLinearInterpolation(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_doLinearInterpolation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("doLinearInterpolation",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("doLinearInterpolation",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("doLinearInterpolation",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("doLinearInterpolation",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)doLinearInterpolation(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_doLinearInterpolation(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_doLinearInterpolation__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_doLinearInterpolation__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'doLinearInterpolation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    doLinearInterpolation(DspFloatType,DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    doLinearInterpolation(DspFloatType,DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_doLagrangeInterpolation(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 = (DspFloatType *) 0 ;
  DspFloatType *arg2 = (DspFloatType *) 0 ;
  int arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("doLagrangeInterpolation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("doLagrangeInterpolation",1,"DspFloatType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("doLagrangeInterpolation",2,"DspFloatType *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("doLagrangeInterpolation",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("doLagrangeInterpolation",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("doLagrangeInterpolation",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("doLagrangeInterpolation",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)doLagrangeInterpolation(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_boundValue(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 = 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("boundValue",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("boundValue",1,"DspFloatType &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("boundValue",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("boundValue",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("boundValue",1,SWIGTYPE_p_float);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  boundValue(*arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_doUnipolarModulationFromMin(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("doUnipolarModulationFromMin",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("doUnipolarModulationFromMin",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("doUnipolarModulationFromMin",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("doUnipolarModulationFromMin",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)doUnipolarModulationFromMin(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_doUnipolarModulationFromMax(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("doUnipolarModulationFromMax",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("doUnipolarModulationFromMax",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("doUnipolarModulationFromMax",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("doUnipolarModulationFromMax",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)doUnipolarModulationFromMax(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_doBipolarModulation(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("doBipolarModulation",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("doBipolarModulation",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("doBipolarModulation",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("doBipolarModulation",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)doBipolarModulation(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unipolarToBipolar(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType result;
  
  SWIG_check_num_args("unipolarToBipolar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("unipolarToBipolar",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (DspFloatType)unipolarToBipolar(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bipolarToUnipolar(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType result;
  
  SWIG_check_num_args("bipolarToUnipolar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("bipolarToUnipolar",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (DspFloatType)bipolarToUnipolar(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw2dB(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType result;
  
  SWIG_check_num_args("raw2dB",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("raw2dB",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (DspFloatType)raw2dB(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dB2Raw(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType result;
  
  SWIG_check_num_args("dB2Raw",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dB2Raw",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (DspFloatType)dB2Raw(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_peakGainFor_Q(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType result;
  
  SWIG_check_num_args("peakGainFor_Q",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("peakGainFor_Q",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (DspFloatType)peakGainFor_Q(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dBPeakGainFor_Q(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType result;
  
  SWIG_check_num_args("dBPeakGainFor_Q",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dBPeakGainFor_Q",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (DspFloatType)dBPeakGainFor_Q(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_doWhiteNoise(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("doWhiteNoise",0,0)
  result = (DspFloatType)doWhiteNoise();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sgn(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType result;
  
  SWIG_check_num_args("sgn",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sgn",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (DspFloatType)sgn(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calcWSGain(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("calcWSGain",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("calcWSGain",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("calcWSGain",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("calcWSGain",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)calcWSGain(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanWaveShaper(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("atanWaveShaper",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atanWaveShaper",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("atanWaveShaper",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)atanWaveShaper(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhWaveShaper(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("tanhWaveShaper",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tanhWaveShaper",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("tanhWaveShaper",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)tanhWaveShaper(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_softClipWaveShaper(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("softClipWaveShaper",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("softClipWaveShaper",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("softClipWaveShaper",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)softClipWaveShaper(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fuzzExp1WaveShaper(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("fuzzExp1WaveShaper",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fuzzExp1WaveShaper",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fuzzExp1WaveShaper",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fuzzExp1WaveShaper",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)fuzzExp1WaveShaper(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getMagResponse(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType arg6 ;
  DspFloatType result;
  
  SWIG_check_num_args("getMagResponse",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("getMagResponse",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getMagResponse",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getMagResponse",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getMagResponse",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("getMagResponse",5,"DspFloatType");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("getMagResponse",6,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = (DspFloatType)getMagResponse(arg1,arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexNumber__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNumber *result = 0 ;
  
  SWIG_check_num_args("ComplexNumber::ComplexNumber",0,0)
  result = (ComplexNumber *)new ComplexNumber();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexNumber,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexNumber__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  ComplexNumber *result = 0 ;
  
  SWIG_check_num_args("ComplexNumber::ComplexNumber",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ComplexNumber::ComplexNumber",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexNumber::ComplexNumber",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (ComplexNumber *)new ComplexNumber(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexNumber,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexNumber(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ComplexNumber__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ComplexNumber__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ComplexNumber'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexNumber::ComplexNumber()\n"
    "    ComplexNumber::ComplexNumber(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexNumber_real_set(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNumber *arg1 = (ComplexNumber *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("ComplexNumber::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNumber::real",1,"ComplexNumber *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexNumber::real",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNumber,0))){
    SWIG_fail_ptr("ComplexNumber_real_set",1,SWIGTYPE_p_ComplexNumber);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->real = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNumber_real_get(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNumber *arg1 = (ComplexNumber *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("ComplexNumber::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNumber::real",1,"ComplexNumber *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNumber,0))){
    SWIG_fail_ptr("ComplexNumber_real_get",1,SWIGTYPE_p_ComplexNumber);
  }
  
  result = (DspFloatType) ((arg1)->real);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNumber_imag_set(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNumber *arg1 = (ComplexNumber *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("ComplexNumber::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNumber::imag",1,"ComplexNumber *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexNumber::imag",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNumber,0))){
    SWIG_fail_ptr("ComplexNumber_imag_set",1,SWIGTYPE_p_ComplexNumber);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->imag = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNumber_imag_get(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNumber *arg1 = (ComplexNumber *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("ComplexNumber::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNumber::imag",1,"ComplexNumber *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNumber,0))){
    SWIG_fail_ptr("ComplexNumber_imag_get",1,SWIGTYPE_p_ComplexNumber);
  }
  
  result = (DspFloatType) ((arg1)->imag);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ComplexNumber(void *obj) {
ComplexNumber *arg1 = (ComplexNumber *) obj;
delete arg1;
}
static int _proxy__wrap_new_ComplexNumber(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ComplexNumber);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ComplexNumber_attributes[] = {
    { "real", _wrap_ComplexNumber_real_get, _wrap_ComplexNumber_real_set },
    { "imag", _wrap_ComplexNumber_imag_get, _wrap_ComplexNumber_imag_set },
    {0,0,0}
};
static swig_lua_method swig_ComplexNumber_methods[]= {
    {0,0}
};
static swig_lua_method swig_ComplexNumber_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ComplexNumber_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ComplexNumber_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ComplexNumber_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ComplexNumber_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ComplexNumber_Sf_SwigStatic = {
    "ComplexNumber",
    swig_ComplexNumber_Sf_SwigStatic_methods,
    swig_ComplexNumber_Sf_SwigStatic_attributes,
    swig_ComplexNumber_Sf_SwigStatic_constants,
    swig_ComplexNumber_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ComplexNumber_bases[] = {0};
static const char *swig_ComplexNumber_base_names[] = {0};
static swig_lua_class _wrap_class_ComplexNumber = { "ComplexNumber", "ComplexNumber", &SWIGTYPE_p_ComplexNumber,_proxy__wrap_new_ComplexNumber, swig_delete_ComplexNumber, swig_ComplexNumber_methods, swig_ComplexNumber_attributes, &swig_ComplexNumber_Sf_SwigStatic, swig_ComplexNumber_meta, swig_ComplexNumber_bases, swig_ComplexNumber_base_names };

static int _wrap_complexMultiply(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNumber arg1 ;
  ComplexNumber arg2 ;
  ComplexNumber *argp1 ;
  ComplexNumber *argp2 ;
  ComplexNumber result;
  
  SWIG_check_num_args("complexMultiply",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("complexMultiply",1,"ComplexNumber");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("complexMultiply",2,"ComplexNumber");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ComplexNumber,0))){
    SWIG_fail_ptr("complexMultiply",1,SWIGTYPE_p_ComplexNumber);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ComplexNumber,0))){
    SWIG_fail_ptr("complexMultiply",2,SWIGTYPE_p_ComplexNumber);
  }
  arg2 = *argp2;
  
  result = complexMultiply(arg1,arg2);
  {
    ComplexNumber * resultptr = new ComplexNumber((const ComplexNumber &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNumber,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calcEdgeFrequencies(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType *arg3 = 0 ;
  DspFloatType *arg4 = 0 ;
  
  SWIG_check_num_args("calcEdgeFrequencies",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("calcEdgeFrequencies",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("calcEdgeFrequencies",2,"DspFloatType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("calcEdgeFrequencies",3,"DspFloatType &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("calcEdgeFrequencies",4,"DspFloatType &");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("calcEdgeFrequencies",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("calcEdgeFrequencies",4,SWIGTYPE_p_float);
  }
  
  calcEdgeFrequencies(arg1,arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BrickwallMagData(lua_State* L) {
  int SWIG_arg = 0;
  BrickwallMagData *result = 0 ;
  
  SWIG_check_num_args("BrickwallMagData::BrickwallMagData",0,0)
  result = (BrickwallMagData *)new BrickwallMagData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BrickwallMagData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrickwallMagData_filterType_set(lua_State* L) {
  int SWIG_arg = 0;
  BrickwallMagData *arg1 = (BrickwallMagData *) 0 ;
  brickwallFilter arg2 ;
  
  SWIG_check_num_args("BrickwallMagData::filterType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BrickwallMagData::filterType",1,"BrickwallMagData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BrickwallMagData::filterType",2,"brickwallFilter");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BrickwallMagData,0))){
    SWIG_fail_ptr("BrickwallMagData_filterType_set",1,SWIGTYPE_p_BrickwallMagData);
  }
  
  arg2 = (brickwallFilter)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->filterType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrickwallMagData_filterType_get(lua_State* L) {
  int SWIG_arg = 0;
  BrickwallMagData *arg1 = (BrickwallMagData *) 0 ;
  brickwallFilter result;
  
  SWIG_check_num_args("BrickwallMagData::filterType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BrickwallMagData::filterType",1,"BrickwallMagData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BrickwallMagData,0))){
    SWIG_fail_ptr("BrickwallMagData_filterType_get",1,SWIGTYPE_p_BrickwallMagData);
  }
  
  result = (brickwallFilter) ((arg1)->filterType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrickwallMagData_magArray_set(lua_State* L) {
  int SWIG_arg = 0;
  BrickwallMagData *arg1 = (BrickwallMagData *) 0 ;
  DspFloatType *arg2 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("BrickwallMagData::magArray",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BrickwallMagData::magArray",1,"BrickwallMagData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BrickwallMagData::magArray",2,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BrickwallMagData,0))){
    SWIG_fail_ptr("BrickwallMagData_magArray_set",1,SWIGTYPE_p_BrickwallMagData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("BrickwallMagData_magArray_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->magArray = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrickwallMagData_magArray_get(lua_State* L) {
  int SWIG_arg = 0;
  BrickwallMagData *arg1 = (BrickwallMagData *) 0 ;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("BrickwallMagData::magArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BrickwallMagData::magArray",1,"BrickwallMagData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BrickwallMagData,0))){
    SWIG_fail_ptr("BrickwallMagData_magArray_get",1,SWIGTYPE_p_BrickwallMagData);
  }
  
  result = (DspFloatType *) ((arg1)->magArray);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrickwallMagData_dftArrayLen_set(lua_State* L) {
  int SWIG_arg = 0;
  BrickwallMagData *arg1 = (BrickwallMagData *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("BrickwallMagData::dftArrayLen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BrickwallMagData::dftArrayLen",1,"BrickwallMagData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BrickwallMagData::dftArrayLen",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BrickwallMagData,0))){
    SWIG_fail_ptr("BrickwallMagData_dftArrayLen_set",1,SWIGTYPE_p_BrickwallMagData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->dftArrayLen = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrickwallMagData_dftArrayLen_get(lua_State* L) {
  int SWIG_arg = 0;
  BrickwallMagData *arg1 = (BrickwallMagData *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("BrickwallMagData::dftArrayLen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BrickwallMagData::dftArrayLen",1,"BrickwallMagData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BrickwallMagData,0))){
    SWIG_fail_ptr("BrickwallMagData_dftArrayLen_get",1,SWIGTYPE_p_BrickwallMagData);
  }
  
  result = (unsigned int) ((arg1)->dftArrayLen);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrickwallMagData_sampleRate_set(lua_State* L) {
  int SWIG_arg = 0;
  BrickwallMagData *arg1 = (BrickwallMagData *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("BrickwallMagData::sampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BrickwallMagData::sampleRate",1,"BrickwallMagData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BrickwallMagData::sampleRate",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BrickwallMagData,0))){
    SWIG_fail_ptr("BrickwallMagData_sampleRate_set",1,SWIGTYPE_p_BrickwallMagData);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sampleRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrickwallMagData_sampleRate_get(lua_State* L) {
  int SWIG_arg = 0;
  BrickwallMagData *arg1 = (BrickwallMagData *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("BrickwallMagData::sampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BrickwallMagData::sampleRate",1,"BrickwallMagData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BrickwallMagData,0))){
    SWIG_fail_ptr("BrickwallMagData_sampleRate_get",1,SWIGTYPE_p_BrickwallMagData);
  }
  
  result = (DspFloatType) ((arg1)->sampleRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrickwallMagData_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  BrickwallMagData *arg1 = (BrickwallMagData *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("BrickwallMagData::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BrickwallMagData::fc",1,"BrickwallMagData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BrickwallMagData::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BrickwallMagData,0))){
    SWIG_fail_ptr("BrickwallMagData_fc_set",1,SWIGTYPE_p_BrickwallMagData);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrickwallMagData_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  BrickwallMagData *arg1 = (BrickwallMagData *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("BrickwallMagData::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BrickwallMagData::fc",1,"BrickwallMagData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BrickwallMagData,0))){
    SWIG_fail_ptr("BrickwallMagData_fc_get",1,SWIGTYPE_p_BrickwallMagData);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrickwallMagData_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  BrickwallMagData *arg1 = (BrickwallMagData *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("BrickwallMagData::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BrickwallMagData::Q",1,"BrickwallMagData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BrickwallMagData::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BrickwallMagData,0))){
    SWIG_fail_ptr("BrickwallMagData_Q_set",1,SWIGTYPE_p_BrickwallMagData);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrickwallMagData_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  BrickwallMagData *arg1 = (BrickwallMagData *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("BrickwallMagData::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BrickwallMagData::Q",1,"BrickwallMagData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BrickwallMagData,0))){
    SWIG_fail_ptr("BrickwallMagData_Q_get",1,SWIGTYPE_p_BrickwallMagData);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrickwallMagData_f_Low_set(lua_State* L) {
  int SWIG_arg = 0;
  BrickwallMagData *arg1 = (BrickwallMagData *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("BrickwallMagData::f_Low",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BrickwallMagData::f_Low",1,"BrickwallMagData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BrickwallMagData::f_Low",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BrickwallMagData,0))){
    SWIG_fail_ptr("BrickwallMagData_f_Low_set",1,SWIGTYPE_p_BrickwallMagData);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->f_Low = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrickwallMagData_f_Low_get(lua_State* L) {
  int SWIG_arg = 0;
  BrickwallMagData *arg1 = (BrickwallMagData *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("BrickwallMagData::f_Low",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BrickwallMagData::f_Low",1,"BrickwallMagData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BrickwallMagData,0))){
    SWIG_fail_ptr("BrickwallMagData_f_Low_get",1,SWIGTYPE_p_BrickwallMagData);
  }
  
  result = (DspFloatType) ((arg1)->f_Low);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrickwallMagData_f_High_set(lua_State* L) {
  int SWIG_arg = 0;
  BrickwallMagData *arg1 = (BrickwallMagData *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("BrickwallMagData::f_High",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BrickwallMagData::f_High",1,"BrickwallMagData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BrickwallMagData::f_High",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BrickwallMagData,0))){
    SWIG_fail_ptr("BrickwallMagData_f_High_set",1,SWIGTYPE_p_BrickwallMagData);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->f_High = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrickwallMagData_f_High_get(lua_State* L) {
  int SWIG_arg = 0;
  BrickwallMagData *arg1 = (BrickwallMagData *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("BrickwallMagData::f_High",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BrickwallMagData::f_High",1,"BrickwallMagData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BrickwallMagData,0))){
    SWIG_fail_ptr("BrickwallMagData_f_High_get",1,SWIGTYPE_p_BrickwallMagData);
  }
  
  result = (DspFloatType) ((arg1)->f_High);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrickwallMagData_relaxationBins_set(lua_State* L) {
  int SWIG_arg = 0;
  BrickwallMagData *arg1 = (BrickwallMagData *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("BrickwallMagData::relaxationBins",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BrickwallMagData::relaxationBins",1,"BrickwallMagData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BrickwallMagData::relaxationBins",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BrickwallMagData,0))){
    SWIG_fail_ptr("BrickwallMagData_relaxationBins_set",1,SWIGTYPE_p_BrickwallMagData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->relaxationBins = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrickwallMagData_relaxationBins_get(lua_State* L) {
  int SWIG_arg = 0;
  BrickwallMagData *arg1 = (BrickwallMagData *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("BrickwallMagData::relaxationBins",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BrickwallMagData::relaxationBins",1,"BrickwallMagData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BrickwallMagData,0))){
    SWIG_fail_ptr("BrickwallMagData_relaxationBins_get",1,SWIGTYPE_p_BrickwallMagData);
  }
  
  result = (unsigned int) ((arg1)->relaxationBins);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrickwallMagData_mirrorMag_set(lua_State* L) {
  int SWIG_arg = 0;
  BrickwallMagData *arg1 = (BrickwallMagData *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("BrickwallMagData::mirrorMag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BrickwallMagData::mirrorMag",1,"BrickwallMagData *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("BrickwallMagData::mirrorMag",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BrickwallMagData,0))){
    SWIG_fail_ptr("BrickwallMagData_mirrorMag_set",1,SWIGTYPE_p_BrickwallMagData);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->mirrorMag = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrickwallMagData_mirrorMag_get(lua_State* L) {
  int SWIG_arg = 0;
  BrickwallMagData *arg1 = (BrickwallMagData *) 0 ;
  bool result;
  
  SWIG_check_num_args("BrickwallMagData::mirrorMag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BrickwallMagData::mirrorMag",1,"BrickwallMagData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BrickwallMagData,0))){
    SWIG_fail_ptr("BrickwallMagData_mirrorMag_get",1,SWIGTYPE_p_BrickwallMagData);
  }
  
  result = (bool) ((arg1)->mirrorMag);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BrickwallMagData(void *obj) {
BrickwallMagData *arg1 = (BrickwallMagData *) obj;
delete arg1;
}
static int _proxy__wrap_new_BrickwallMagData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BrickwallMagData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BrickwallMagData_attributes[] = {
    { "filterType", _wrap_BrickwallMagData_filterType_get, _wrap_BrickwallMagData_filterType_set },
    { "magArray", _wrap_BrickwallMagData_magArray_get, _wrap_BrickwallMagData_magArray_set },
    { "dftArrayLen", _wrap_BrickwallMagData_dftArrayLen_get, _wrap_BrickwallMagData_dftArrayLen_set },
    { "sampleRate", _wrap_BrickwallMagData_sampleRate_get, _wrap_BrickwallMagData_sampleRate_set },
    { "fc", _wrap_BrickwallMagData_fc_get, _wrap_BrickwallMagData_fc_set },
    { "Q", _wrap_BrickwallMagData_Q_get, _wrap_BrickwallMagData_Q_set },
    { "f_Low", _wrap_BrickwallMagData_f_Low_get, _wrap_BrickwallMagData_f_Low_set },
    { "f_High", _wrap_BrickwallMagData_f_High_get, _wrap_BrickwallMagData_f_High_set },
    { "relaxationBins", _wrap_BrickwallMagData_relaxationBins_get, _wrap_BrickwallMagData_relaxationBins_set },
    { "mirrorMag", _wrap_BrickwallMagData_mirrorMag_get, _wrap_BrickwallMagData_mirrorMag_set },
    {0,0,0}
};
static swig_lua_method swig_BrickwallMagData_methods[]= {
    {0,0}
};
static swig_lua_method swig_BrickwallMagData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BrickwallMagData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BrickwallMagData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BrickwallMagData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BrickwallMagData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BrickwallMagData_Sf_SwigStatic = {
    "BrickwallMagData",
    swig_BrickwallMagData_Sf_SwigStatic_methods,
    swig_BrickwallMagData_Sf_SwigStatic_attributes,
    swig_BrickwallMagData_Sf_SwigStatic_constants,
    swig_BrickwallMagData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BrickwallMagData_bases[] = {0};
static const char *swig_BrickwallMagData_base_names[] = {0};
static swig_lua_class _wrap_class_BrickwallMagData = { "BrickwallMagData", "BrickwallMagData", &SWIGTYPE_p_BrickwallMagData,_proxy__wrap_new_BrickwallMagData, swig_delete_BrickwallMagData, swig_BrickwallMagData_methods, swig_BrickwallMagData_attributes, &swig_BrickwallMagData_Sf_SwigStatic, swig_BrickwallMagData_meta, swig_BrickwallMagData_bases, swig_BrickwallMagData_base_names };

static int _wrap_new_TransitionBandData(lua_State* L) {
  int SWIG_arg = 0;
  TransitionBandData *result = 0 ;
  
  SWIG_check_num_args("TransitionBandData::TransitionBandData",0,0)
  result = (TransitionBandData *)new TransitionBandData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TransitionBandData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransitionBandData_edgeType_set(lua_State* L) {
  int SWIG_arg = 0;
  TransitionBandData *arg1 = (TransitionBandData *) 0 ;
  edgeTransition arg2 ;
  
  SWIG_check_num_args("TransitionBandData::edgeType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransitionBandData::edgeType",1,"TransitionBandData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransitionBandData::edgeType",2,"edgeTransition");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransitionBandData,0))){
    SWIG_fail_ptr("TransitionBandData_edgeType_set",1,SWIGTYPE_p_TransitionBandData);
  }
  
  arg2 = (edgeTransition)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->edgeType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransitionBandData_edgeType_get(lua_State* L) {
  int SWIG_arg = 0;
  TransitionBandData *arg1 = (TransitionBandData *) 0 ;
  edgeTransition result;
  
  SWIG_check_num_args("TransitionBandData::edgeType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransitionBandData::edgeType",1,"TransitionBandData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransitionBandData,0))){
    SWIG_fail_ptr("TransitionBandData_edgeType_get",1,SWIGTYPE_p_TransitionBandData);
  }
  
  result = (edgeTransition) ((arg1)->edgeType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransitionBandData_startBin_set(lua_State* L) {
  int SWIG_arg = 0;
  TransitionBandData *arg1 = (TransitionBandData *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("TransitionBandData::startBin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransitionBandData::startBin",1,"TransitionBandData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransitionBandData::startBin",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransitionBandData,0))){
    SWIG_fail_ptr("TransitionBandData_startBin_set",1,SWIGTYPE_p_TransitionBandData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->startBin = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransitionBandData_startBin_get(lua_State* L) {
  int SWIG_arg = 0;
  TransitionBandData *arg1 = (TransitionBandData *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("TransitionBandData::startBin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransitionBandData::startBin",1,"TransitionBandData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransitionBandData,0))){
    SWIG_fail_ptr("TransitionBandData_startBin_get",1,SWIGTYPE_p_TransitionBandData);
  }
  
  result = (unsigned int) ((arg1)->startBin);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransitionBandData_stopBin_set(lua_State* L) {
  int SWIG_arg = 0;
  TransitionBandData *arg1 = (TransitionBandData *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("TransitionBandData::stopBin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransitionBandData::stopBin",1,"TransitionBandData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransitionBandData::stopBin",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransitionBandData,0))){
    SWIG_fail_ptr("TransitionBandData_stopBin_set",1,SWIGTYPE_p_TransitionBandData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->stopBin = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransitionBandData_stopBin_get(lua_State* L) {
  int SWIG_arg = 0;
  TransitionBandData *arg1 = (TransitionBandData *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("TransitionBandData::stopBin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransitionBandData::stopBin",1,"TransitionBandData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransitionBandData,0))){
    SWIG_fail_ptr("TransitionBandData_stopBin_get",1,SWIGTYPE_p_TransitionBandData);
  }
  
  result = (unsigned int) ((arg1)->stopBin);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransitionBandData_slopeIncrement_set(lua_State* L) {
  int SWIG_arg = 0;
  TransitionBandData *arg1 = (TransitionBandData *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("TransitionBandData::slopeIncrement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransitionBandData::slopeIncrement",1,"TransitionBandData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransitionBandData::slopeIncrement",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransitionBandData,0))){
    SWIG_fail_ptr("TransitionBandData_slopeIncrement_set",1,SWIGTYPE_p_TransitionBandData);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->slopeIncrement = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransitionBandData_slopeIncrement_get(lua_State* L) {
  int SWIG_arg = 0;
  TransitionBandData *arg1 = (TransitionBandData *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("TransitionBandData::slopeIncrement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransitionBandData::slopeIncrement",1,"TransitionBandData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TransitionBandData,0))){
    SWIG_fail_ptr("TransitionBandData_slopeIncrement_get",1,SWIGTYPE_p_TransitionBandData);
  }
  
  result = (DspFloatType) ((arg1)->slopeIncrement);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TransitionBandData(void *obj) {
TransitionBandData *arg1 = (TransitionBandData *) obj;
delete arg1;
}
static int _proxy__wrap_new_TransitionBandData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TransitionBandData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TransitionBandData_attributes[] = {
    { "edgeType", _wrap_TransitionBandData_edgeType_get, _wrap_TransitionBandData_edgeType_set },
    { "startBin", _wrap_TransitionBandData_startBin_get, _wrap_TransitionBandData_startBin_set },
    { "stopBin", _wrap_TransitionBandData_stopBin_get, _wrap_TransitionBandData_stopBin_set },
    { "slopeIncrement", _wrap_TransitionBandData_slopeIncrement_get, _wrap_TransitionBandData_slopeIncrement_set },
    {0,0,0}
};
static swig_lua_method swig_TransitionBandData_methods[]= {
    {0,0}
};
static swig_lua_method swig_TransitionBandData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TransitionBandData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TransitionBandData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TransitionBandData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TransitionBandData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TransitionBandData_Sf_SwigStatic = {
    "TransitionBandData",
    swig_TransitionBandData_Sf_SwigStatic_methods,
    swig_TransitionBandData_Sf_SwigStatic_attributes,
    swig_TransitionBandData_Sf_SwigStatic_constants,
    swig_TransitionBandData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TransitionBandData_bases[] = {0};
static const char *swig_TransitionBandData_base_names[] = {0};
static swig_lua_class _wrap_class_TransitionBandData = { "TransitionBandData", "TransitionBandData", &SWIGTYPE_p_TransitionBandData,_proxy__wrap_new_TransitionBandData, swig_delete_TransitionBandData, swig_TransitionBandData_methods, swig_TransitionBandData_attributes, &swig_TransitionBandData_Sf_SwigStatic, swig_TransitionBandData_meta, swig_TransitionBandData_bases, swig_TransitionBandData_base_names };

static int _wrap_findEdgeTargetBin(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  int result;
  
  SWIG_check_num_args("findEdgeTargetBin",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("findEdgeTargetBin",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findEdgeTargetBin",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (int)findEdgeTargetBin(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getTransitionBandData(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  unsigned int arg3 ;
  TransitionBandData *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("getTransitionBandData",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("getTransitionBandData",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getTransitionBandData",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getTransitionBandData",3,"unsigned int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("getTransitionBandData",4,"TransitionBandData &");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_TransitionBandData,0))){
    SWIG_fail_ptr("getTransitionBandData",4,SWIGTYPE_p_TransitionBandData);
  }
  
  result = (bool)getTransitionBandData(arg1,arg2,arg3,*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calculateBrickwallMagArray(lua_State* L) {
  int SWIG_arg = 0;
  BrickwallMagData *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("calculateBrickwallMagArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("calculateBrickwallMagArray",1,"BrickwallMagData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BrickwallMagData,0))){
    SWIG_fail_ptr("calculateBrickwallMagArray",1,SWIGTYPE_p_BrickwallMagData);
  }
  
  result = (bool)calculateBrickwallMagArray(*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AnalogMagData(lua_State* L) {
  int SWIG_arg = 0;
  AnalogMagData *result = 0 ;
  
  SWIG_check_num_args("AnalogMagData::AnalogMagData",0,0)
  result = (AnalogMagData *)new AnalogMagData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AnalogMagData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogMagData_filterType_set(lua_State* L) {
  int SWIG_arg = 0;
  AnalogMagData *arg1 = (AnalogMagData *) 0 ;
  analogFilter arg2 ;
  
  SWIG_check_num_args("AnalogMagData::filterType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogMagData::filterType",1,"AnalogMagData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogMagData::filterType",2,"analogFilter");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogMagData,0))){
    SWIG_fail_ptr("AnalogMagData_filterType_set",1,SWIGTYPE_p_AnalogMagData);
  }
  
  arg2 = (analogFilter)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->filterType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogMagData_filterType_get(lua_State* L) {
  int SWIG_arg = 0;
  AnalogMagData *arg1 = (AnalogMagData *) 0 ;
  analogFilter result;
  
  SWIG_check_num_args("AnalogMagData::filterType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogMagData::filterType",1,"AnalogMagData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogMagData,0))){
    SWIG_fail_ptr("AnalogMagData_filterType_get",1,SWIGTYPE_p_AnalogMagData);
  }
  
  result = (analogFilter) ((arg1)->filterType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogMagData_magArray_set(lua_State* L) {
  int SWIG_arg = 0;
  AnalogMagData *arg1 = (AnalogMagData *) 0 ;
  DspFloatType *arg2 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("AnalogMagData::magArray",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogMagData::magArray",1,"AnalogMagData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AnalogMagData::magArray",2,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogMagData,0))){
    SWIG_fail_ptr("AnalogMagData_magArray_set",1,SWIGTYPE_p_AnalogMagData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("AnalogMagData_magArray_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->magArray = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogMagData_magArray_get(lua_State* L) {
  int SWIG_arg = 0;
  AnalogMagData *arg1 = (AnalogMagData *) 0 ;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("AnalogMagData::magArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogMagData::magArray",1,"AnalogMagData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogMagData,0))){
    SWIG_fail_ptr("AnalogMagData_magArray_get",1,SWIGTYPE_p_AnalogMagData);
  }
  
  result = (DspFloatType *) ((arg1)->magArray);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogMagData_dftArrayLen_set(lua_State* L) {
  int SWIG_arg = 0;
  AnalogMagData *arg1 = (AnalogMagData *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("AnalogMagData::dftArrayLen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogMagData::dftArrayLen",1,"AnalogMagData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogMagData::dftArrayLen",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogMagData,0))){
    SWIG_fail_ptr("AnalogMagData_dftArrayLen_set",1,SWIGTYPE_p_AnalogMagData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->dftArrayLen = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogMagData_dftArrayLen_get(lua_State* L) {
  int SWIG_arg = 0;
  AnalogMagData *arg1 = (AnalogMagData *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("AnalogMagData::dftArrayLen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogMagData::dftArrayLen",1,"AnalogMagData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogMagData,0))){
    SWIG_fail_ptr("AnalogMagData_dftArrayLen_get",1,SWIGTYPE_p_AnalogMagData);
  }
  
  result = (unsigned int) ((arg1)->dftArrayLen);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogMagData_sampleRate_set(lua_State* L) {
  int SWIG_arg = 0;
  AnalogMagData *arg1 = (AnalogMagData *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("AnalogMagData::sampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogMagData::sampleRate",1,"AnalogMagData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogMagData::sampleRate",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogMagData,0))){
    SWIG_fail_ptr("AnalogMagData_sampleRate_set",1,SWIGTYPE_p_AnalogMagData);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sampleRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogMagData_sampleRate_get(lua_State* L) {
  int SWIG_arg = 0;
  AnalogMagData *arg1 = (AnalogMagData *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("AnalogMagData::sampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogMagData::sampleRate",1,"AnalogMagData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogMagData,0))){
    SWIG_fail_ptr("AnalogMagData_sampleRate_get",1,SWIGTYPE_p_AnalogMagData);
  }
  
  result = (DspFloatType) ((arg1)->sampleRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogMagData_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  AnalogMagData *arg1 = (AnalogMagData *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("AnalogMagData::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogMagData::fc",1,"AnalogMagData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogMagData::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogMagData,0))){
    SWIG_fail_ptr("AnalogMagData_fc_set",1,SWIGTYPE_p_AnalogMagData);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogMagData_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  AnalogMagData *arg1 = (AnalogMagData *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("AnalogMagData::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogMagData::fc",1,"AnalogMagData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogMagData,0))){
    SWIG_fail_ptr("AnalogMagData_fc_get",1,SWIGTYPE_p_AnalogMagData);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogMagData_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  AnalogMagData *arg1 = (AnalogMagData *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("AnalogMagData::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogMagData::Q",1,"AnalogMagData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogMagData::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogMagData,0))){
    SWIG_fail_ptr("AnalogMagData_Q_set",1,SWIGTYPE_p_AnalogMagData);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogMagData_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  AnalogMagData *arg1 = (AnalogMagData *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("AnalogMagData::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogMagData::Q",1,"AnalogMagData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogMagData,0))){
    SWIG_fail_ptr("AnalogMagData_Q_get",1,SWIGTYPE_p_AnalogMagData);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogMagData_mirrorMag_set(lua_State* L) {
  int SWIG_arg = 0;
  AnalogMagData *arg1 = (AnalogMagData *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("AnalogMagData::mirrorMag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogMagData::mirrorMag",1,"AnalogMagData *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("AnalogMagData::mirrorMag",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogMagData,0))){
    SWIG_fail_ptr("AnalogMagData_mirrorMag_set",1,SWIGTYPE_p_AnalogMagData);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->mirrorMag = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogMagData_mirrorMag_get(lua_State* L) {
  int SWIG_arg = 0;
  AnalogMagData *arg1 = (AnalogMagData *) 0 ;
  bool result;
  
  SWIG_check_num_args("AnalogMagData::mirrorMag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogMagData::mirrorMag",1,"AnalogMagData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogMagData,0))){
    SWIG_fail_ptr("AnalogMagData_mirrorMag_get",1,SWIGTYPE_p_AnalogMagData);
  }
  
  result = (bool) ((arg1)->mirrorMag);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AnalogMagData(void *obj) {
AnalogMagData *arg1 = (AnalogMagData *) obj;
delete arg1;
}
static int _proxy__wrap_new_AnalogMagData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AnalogMagData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AnalogMagData_attributes[] = {
    { "filterType", _wrap_AnalogMagData_filterType_get, _wrap_AnalogMagData_filterType_set },
    { "magArray", _wrap_AnalogMagData_magArray_get, _wrap_AnalogMagData_magArray_set },
    { "dftArrayLen", _wrap_AnalogMagData_dftArrayLen_get, _wrap_AnalogMagData_dftArrayLen_set },
    { "sampleRate", _wrap_AnalogMagData_sampleRate_get, _wrap_AnalogMagData_sampleRate_set },
    { "fc", _wrap_AnalogMagData_fc_get, _wrap_AnalogMagData_fc_set },
    { "Q", _wrap_AnalogMagData_Q_get, _wrap_AnalogMagData_Q_set },
    { "mirrorMag", _wrap_AnalogMagData_mirrorMag_get, _wrap_AnalogMagData_mirrorMag_set },
    {0,0,0}
};
static swig_lua_method swig_AnalogMagData_methods[]= {
    {0,0}
};
static swig_lua_method swig_AnalogMagData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AnalogMagData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AnalogMagData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AnalogMagData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AnalogMagData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AnalogMagData_Sf_SwigStatic = {
    "AnalogMagData",
    swig_AnalogMagData_Sf_SwigStatic_methods,
    swig_AnalogMagData_Sf_SwigStatic_attributes,
    swig_AnalogMagData_Sf_SwigStatic_constants,
    swig_AnalogMagData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AnalogMagData_bases[] = {0};
static const char *swig_AnalogMagData_base_names[] = {0};
static swig_lua_class _wrap_class_AnalogMagData = { "AnalogMagData", "AnalogMagData", &SWIGTYPE_p_AnalogMagData,_proxy__wrap_new_AnalogMagData, swig_delete_AnalogMagData, swig_AnalogMagData_methods, swig_AnalogMagData_attributes, &swig_AnalogMagData_Sf_SwigStatic, swig_AnalogMagData_meta, swig_AnalogMagData_bases, swig_AnalogMagData_base_names };

static int _wrap_calculateAnalogMagArray(lua_State* L) {
  int SWIG_arg = 0;
  AnalogMagData *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("calculateAnalogMagArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("calculateAnalogMagArray",1,"AnalogMagData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogMagData,0))){
    SWIG_fail_ptr("calculateAnalogMagArray",1,SWIGTYPE_p_AnalogMagData);
  }
  
  result = (bool)calculateAnalogMagArray(*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_freqSample(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DspFloatType *arg2 ;
  DspFloatType *arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("freqSample",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("freqSample",1,"int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("freqSample",2,"DspFloatType []");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("freqSample",3,"DspFloatType []");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("freqSample",4,"int");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("freqSample",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("freqSample",3,SWIGTYPE_p_float);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  freqSample(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getMagnitude(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("getMagnitude",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("getMagnitude",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getMagnitude",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)getMagnitude(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getPhase(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("getPhase",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("getPhase",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getPhase",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)getPhase(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_principalArg(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType result;
  
  SWIG_check_num_args("principalArg",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("principalArg",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (DspFloatType)principalArg(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_resample__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 = (DspFloatType *) 0 ;
  DspFloatType *arg2 = (DspFloatType *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  interpolation arg5 ;
  DspFloatType arg6 ;
  DspFloatType *arg7 = (DspFloatType *) 0 ;
  bool result;
  
  SWIG_check_num_args("resample",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("resample",1,"DspFloatType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("resample",2,"DspFloatType *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("resample",3,"uint32_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("resample",4,"uint32_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("resample",5,"interpolation");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("resample",6,"DspFloatType");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("resample",7,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("resample",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("resample",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (uint32_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (uint32_t)lua_tonumber(L, 4);
  arg5 = (interpolation)(int)lua_tonumber(L, 5);
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("resample",7,SWIGTYPE_p_float);
  }
  
  result = (bool)resample(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_resample__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 = (DspFloatType *) 0 ;
  DspFloatType *arg2 = (DspFloatType *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  interpolation arg5 ;
  DspFloatType arg6 ;
  bool result;
  
  SWIG_check_num_args("resample",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("resample",1,"DspFloatType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("resample",2,"DspFloatType *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("resample",3,"uint32_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("resample",4,"uint32_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("resample",5,"interpolation");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("resample",6,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("resample",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("resample",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (uint32_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (uint32_t)lua_tonumber(L, 4);
  arg5 = (interpolation)(int)lua_tonumber(L, 5);
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = (bool)resample(arg1,arg2,arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_resample__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 = (DspFloatType *) 0 ;
  DspFloatType *arg2 = (DspFloatType *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  interpolation arg5 ;
  bool result;
  
  SWIG_check_num_args("resample",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("resample",1,"DspFloatType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("resample",2,"DspFloatType *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("resample",3,"uint32_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("resample",4,"uint32_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("resample",5,"interpolation");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("resample",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("resample",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (uint32_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (uint32_t)lua_tonumber(L, 4);
  arg5 = (interpolation)(int)lua_tonumber(L, 5);
  result = (bool)resample(arg1,arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_resample__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 = (DspFloatType *) 0 ;
  DspFloatType *arg2 = (DspFloatType *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  bool result;
  
  SWIG_check_num_args("resample",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("resample",1,"DspFloatType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("resample",2,"DspFloatType *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("resample",3,"uint32_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("resample",4,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("resample",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("resample",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (uint32_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (uint32_t)lua_tonumber(L, 4);
  result = (bool)resample(arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_resample(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_resample__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_resample__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_resample__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_resample__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'resample'\n"
    "  Possible C/C++ prototypes are:\n"
    "    resample(DspFloatType *,DspFloatType *,uint32_t,uint32_t,interpolation,DspFloatType,DspFloatType *)\n"
    "    resample(DspFloatType *,DspFloatType *,uint32_t,uint32_t,interpolation,DspFloatType)\n"
    "    resample(DspFloatType *,DspFloatType *,uint32_t,uint32_t,interpolation)\n"
    "    resample(DspFloatType *,DspFloatType *,uint32_t,uint32_t)\n");
  lua_error(L);return 0;
}


static int _wrap_IAudioSignalProcessor_reset(lua_State* L) {
  int SWIG_arg = 0;
  IAudioSignalProcessor *arg1 = (IAudioSignalProcessor *) 0 ;
  DspFloatType arg2 ;
  bool result;
  
  SWIG_check_num_args("IAudioSignalProcessor::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IAudioSignalProcessor::reset",1,"IAudioSignalProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("IAudioSignalProcessor::reset",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IAudioSignalProcessor,0))){
    SWIG_fail_ptr("IAudioSignalProcessor_reset",1,SWIGTYPE_p_IAudioSignalProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAudioSignalProcessor_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  IAudioSignalProcessor *arg1 = (IAudioSignalProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("IAudioSignalProcessor::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IAudioSignalProcessor::processAudioSample",1,"IAudioSignalProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("IAudioSignalProcessor::processAudioSample",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IAudioSignalProcessor,0))){
    SWIG_fail_ptr("IAudioSignalProcessor_processAudioSample",1,SWIGTYPE_p_IAudioSignalProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAudioSignalProcessor_canProcessAudioFrame(lua_State* L) {
  int SWIG_arg = 0;
  IAudioSignalProcessor *arg1 = (IAudioSignalProcessor *) 0 ;
  bool result;
  
  SWIG_check_num_args("IAudioSignalProcessor::canProcessAudioFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IAudioSignalProcessor::canProcessAudioFrame",1,"IAudioSignalProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IAudioSignalProcessor,0))){
    SWIG_fail_ptr("IAudioSignalProcessor_canProcessAudioFrame",1,SWIGTYPE_p_IAudioSignalProcessor);
  }
  
  result = (bool)(arg1)->canProcessAudioFrame();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAudioSignalProcessor_setSampleRate(lua_State* L) {
  int SWIG_arg = 0;
  IAudioSignalProcessor *arg1 = (IAudioSignalProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("IAudioSignalProcessor::setSampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IAudioSignalProcessor::setSampleRate",1,"IAudioSignalProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("IAudioSignalProcessor::setSampleRate",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IAudioSignalProcessor,0))){
    SWIG_fail_ptr("IAudioSignalProcessor_setSampleRate",1,SWIGTYPE_p_IAudioSignalProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setSampleRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAudioSignalProcessor_enableAuxInput(lua_State* L) {
  int SWIG_arg = 0;
  IAudioSignalProcessor *arg1 = (IAudioSignalProcessor *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("IAudioSignalProcessor::enableAuxInput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IAudioSignalProcessor::enableAuxInput",1,"IAudioSignalProcessor *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("IAudioSignalProcessor::enableAuxInput",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IAudioSignalProcessor,0))){
    SWIG_fail_ptr("IAudioSignalProcessor_enableAuxInput",1,SWIGTYPE_p_IAudioSignalProcessor);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableAuxInput(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAudioSignalProcessor_processAuxInputAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  IAudioSignalProcessor *arg1 = (IAudioSignalProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("IAudioSignalProcessor::processAuxInputAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IAudioSignalProcessor::processAuxInputAudioSample",1,"IAudioSignalProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("IAudioSignalProcessor::processAuxInputAudioSample",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IAudioSignalProcessor,0))){
    SWIG_fail_ptr("IAudioSignalProcessor_processAuxInputAudioSample",1,SWIGTYPE_p_IAudioSignalProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->processAuxInputAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAudioSignalProcessor_processAudioFrame(lua_State* L) {
  int SWIG_arg = 0;
  IAudioSignalProcessor *arg1 = (IAudioSignalProcessor *) 0 ;
  DspFloatType *arg2 = (DspFloatType *) 0 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  uint32_t arg4 ;
  uint32_t arg5 ;
  bool result;
  
  SWIG_check_num_args("IAudioSignalProcessor::processAudioFrame",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IAudioSignalProcessor::processAudioFrame",1,"IAudioSignalProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("IAudioSignalProcessor::processAudioFrame",2,"DspFloatType const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("IAudioSignalProcessor::processAudioFrame",3,"DspFloatType *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("IAudioSignalProcessor::processAudioFrame",4,"uint32_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("IAudioSignalProcessor::processAudioFrame",5,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IAudioSignalProcessor,0))){
    SWIG_fail_ptr("IAudioSignalProcessor_processAudioFrame",1,SWIGTYPE_p_IAudioSignalProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("IAudioSignalProcessor_processAudioFrame",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("IAudioSignalProcessor_processAudioFrame",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (uint32_t)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (uint32_t)lua_tonumber(L, 5);
  result = (bool)(arg1)->processAudioFrame((DspFloatType const *)arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IAudioSignalProcessor(void *obj) {
IAudioSignalProcessor *arg1 = (IAudioSignalProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_IAudioSignalProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IAudioSignalProcessor_methods[]= {
    { "reset", _wrap_IAudioSignalProcessor_reset},
    { "processAudioSample", _wrap_IAudioSignalProcessor_processAudioSample},
    { "canProcessAudioFrame", _wrap_IAudioSignalProcessor_canProcessAudioFrame},
    { "setSampleRate", _wrap_IAudioSignalProcessor_setSampleRate},
    { "enableAuxInput", _wrap_IAudioSignalProcessor_enableAuxInput},
    { "processAuxInputAudioSample", _wrap_IAudioSignalProcessor_processAuxInputAudioSample},
    { "processAudioFrame", _wrap_IAudioSignalProcessor_processAudioFrame},
    {0,0}
};
static swig_lua_method swig_IAudioSignalProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IAudioSignalProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IAudioSignalProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IAudioSignalProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IAudioSignalProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IAudioSignalProcessor_Sf_SwigStatic = {
    "IAudioSignalProcessor",
    swig_IAudioSignalProcessor_Sf_SwigStatic_methods,
    swig_IAudioSignalProcessor_Sf_SwigStatic_attributes,
    swig_IAudioSignalProcessor_Sf_SwigStatic_constants,
    swig_IAudioSignalProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IAudioSignalProcessor_bases[] = {0};
static const char *swig_IAudioSignalProcessor_base_names[] = {0};
static swig_lua_class _wrap_class_IAudioSignalProcessor = { "IAudioSignalProcessor", "IAudioSignalProcessor", &SWIGTYPE_p_IAudioSignalProcessor,0, swig_delete_IAudioSignalProcessor, swig_IAudioSignalProcessor_methods, swig_IAudioSignalProcessor_attributes, &swig_IAudioSignalProcessor_Sf_SwigStatic, swig_IAudioSignalProcessor_meta, swig_IAudioSignalProcessor_bases, swig_IAudioSignalProcessor_base_names };

static int _wrap_new_SignalGenData(lua_State* L) {
  int SWIG_arg = 0;
  SignalGenData *result = 0 ;
  
  SWIG_check_num_args("SignalGenData::SignalGenData",0,0)
  result = (SignalGenData *)new SignalGenData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SignalGenData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SignalGenData_normalOutput_set(lua_State* L) {
  int SWIG_arg = 0;
  SignalGenData *arg1 = (SignalGenData *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("SignalGenData::normalOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SignalGenData::normalOutput",1,"SignalGenData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SignalGenData::normalOutput",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SignalGenData,0))){
    SWIG_fail_ptr("SignalGenData_normalOutput_set",1,SWIGTYPE_p_SignalGenData);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->normalOutput = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SignalGenData_normalOutput_get(lua_State* L) {
  int SWIG_arg = 0;
  SignalGenData *arg1 = (SignalGenData *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("SignalGenData::normalOutput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SignalGenData::normalOutput",1,"SignalGenData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SignalGenData,0))){
    SWIG_fail_ptr("SignalGenData_normalOutput_get",1,SWIGTYPE_p_SignalGenData);
  }
  
  result = (DspFloatType) ((arg1)->normalOutput);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SignalGenData_invertedOutput_set(lua_State* L) {
  int SWIG_arg = 0;
  SignalGenData *arg1 = (SignalGenData *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("SignalGenData::invertedOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SignalGenData::invertedOutput",1,"SignalGenData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SignalGenData::invertedOutput",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SignalGenData,0))){
    SWIG_fail_ptr("SignalGenData_invertedOutput_set",1,SWIGTYPE_p_SignalGenData);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->invertedOutput = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SignalGenData_invertedOutput_get(lua_State* L) {
  int SWIG_arg = 0;
  SignalGenData *arg1 = (SignalGenData *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("SignalGenData::invertedOutput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SignalGenData::invertedOutput",1,"SignalGenData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SignalGenData,0))){
    SWIG_fail_ptr("SignalGenData_invertedOutput_get",1,SWIGTYPE_p_SignalGenData);
  }
  
  result = (DspFloatType) ((arg1)->invertedOutput);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SignalGenData_quadPhaseOutput_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  SignalGenData *arg1 = (SignalGenData *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("SignalGenData::quadPhaseOutput_pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SignalGenData::quadPhaseOutput_pos",1,"SignalGenData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SignalGenData::quadPhaseOutput_pos",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SignalGenData,0))){
    SWIG_fail_ptr("SignalGenData_quadPhaseOutput_pos_set",1,SWIGTYPE_p_SignalGenData);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->quadPhaseOutput_pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SignalGenData_quadPhaseOutput_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  SignalGenData *arg1 = (SignalGenData *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("SignalGenData::quadPhaseOutput_pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SignalGenData::quadPhaseOutput_pos",1,"SignalGenData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SignalGenData,0))){
    SWIG_fail_ptr("SignalGenData_quadPhaseOutput_pos_get",1,SWIGTYPE_p_SignalGenData);
  }
  
  result = (DspFloatType) ((arg1)->quadPhaseOutput_pos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SignalGenData_quadPhaseOutput_neg_set(lua_State* L) {
  int SWIG_arg = 0;
  SignalGenData *arg1 = (SignalGenData *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("SignalGenData::quadPhaseOutput_neg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SignalGenData::quadPhaseOutput_neg",1,"SignalGenData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SignalGenData::quadPhaseOutput_neg",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SignalGenData,0))){
    SWIG_fail_ptr("SignalGenData_quadPhaseOutput_neg_set",1,SWIGTYPE_p_SignalGenData);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->quadPhaseOutput_neg = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SignalGenData_quadPhaseOutput_neg_get(lua_State* L) {
  int SWIG_arg = 0;
  SignalGenData *arg1 = (SignalGenData *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("SignalGenData::quadPhaseOutput_neg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SignalGenData::quadPhaseOutput_neg",1,"SignalGenData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SignalGenData,0))){
    SWIG_fail_ptr("SignalGenData_quadPhaseOutput_neg_get",1,SWIGTYPE_p_SignalGenData);
  }
  
  result = (DspFloatType) ((arg1)->quadPhaseOutput_neg);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SignalGenData(void *obj) {
SignalGenData *arg1 = (SignalGenData *) obj;
delete arg1;
}
static int _proxy__wrap_new_SignalGenData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SignalGenData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SignalGenData_attributes[] = {
    { "normalOutput", _wrap_SignalGenData_normalOutput_get, _wrap_SignalGenData_normalOutput_set },
    { "invertedOutput", _wrap_SignalGenData_invertedOutput_get, _wrap_SignalGenData_invertedOutput_set },
    { "quadPhaseOutput_pos", _wrap_SignalGenData_quadPhaseOutput_pos_get, _wrap_SignalGenData_quadPhaseOutput_pos_set },
    { "quadPhaseOutput_neg", _wrap_SignalGenData_quadPhaseOutput_neg_get, _wrap_SignalGenData_quadPhaseOutput_neg_set },
    {0,0,0}
};
static swig_lua_method swig_SignalGenData_methods[]= {
    {0,0}
};
static swig_lua_method swig_SignalGenData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SignalGenData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SignalGenData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SignalGenData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SignalGenData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SignalGenData_Sf_SwigStatic = {
    "SignalGenData",
    swig_SignalGenData_Sf_SwigStatic_methods,
    swig_SignalGenData_Sf_SwigStatic_attributes,
    swig_SignalGenData_Sf_SwigStatic_constants,
    swig_SignalGenData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SignalGenData_bases[] = {0};
static const char *swig_SignalGenData_base_names[] = {0};
static swig_lua_class _wrap_class_SignalGenData = { "SignalGenData", "SignalGenData", &SWIGTYPE_p_SignalGenData,_proxy__wrap_new_SignalGenData, swig_delete_SignalGenData, swig_SignalGenData_methods, swig_SignalGenData_attributes, &swig_SignalGenData_Sf_SwigStatic, swig_SignalGenData_meta, swig_SignalGenData_bases, swig_SignalGenData_base_names };

static int _wrap_IAudioSignalGenerator_reset(lua_State* L) {
  int SWIG_arg = 0;
  IAudioSignalGenerator *arg1 = (IAudioSignalGenerator *) 0 ;
  DspFloatType arg2 ;
  bool result;
  
  SWIG_check_num_args("IAudioSignalGenerator::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IAudioSignalGenerator::reset",1,"IAudioSignalGenerator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("IAudioSignalGenerator::reset",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IAudioSignalGenerator,0))){
    SWIG_fail_ptr("IAudioSignalGenerator_reset",1,SWIGTYPE_p_IAudioSignalGenerator);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAudioSignalGenerator_renderAudioOutput(lua_State* L) {
  int SWIG_arg = 0;
  IAudioSignalGenerator *arg1 = (IAudioSignalGenerator *) 0 ;
  SignalGenData result;
  
  SWIG_check_num_args("IAudioSignalGenerator::renderAudioOutput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IAudioSignalGenerator::renderAudioOutput",1,"IAudioSignalGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IAudioSignalGenerator,0))){
    SWIG_fail_ptr("IAudioSignalGenerator_renderAudioOutput",1,SWIGTYPE_p_IAudioSignalGenerator);
  }
  
  result = (arg1)->renderAudioOutput();
  {
    SignalGenData * resultptr = new SignalGenData((const SignalGenData &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SignalGenData,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IAudioSignalGenerator(void *obj) {
IAudioSignalGenerator *arg1 = (IAudioSignalGenerator *) obj;
delete arg1;
}
static swig_lua_attribute swig_IAudioSignalGenerator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IAudioSignalGenerator_methods[]= {
    { "reset", _wrap_IAudioSignalGenerator_reset},
    { "renderAudioOutput", _wrap_IAudioSignalGenerator_renderAudioOutput},
    {0,0}
};
static swig_lua_method swig_IAudioSignalGenerator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IAudioSignalGenerator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IAudioSignalGenerator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IAudioSignalGenerator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IAudioSignalGenerator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IAudioSignalGenerator_Sf_SwigStatic = {
    "IAudioSignalGenerator",
    swig_IAudioSignalGenerator_Sf_SwigStatic_methods,
    swig_IAudioSignalGenerator_Sf_SwigStatic_attributes,
    swig_IAudioSignalGenerator_Sf_SwigStatic_constants,
    swig_IAudioSignalGenerator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IAudioSignalGenerator_bases[] = {0};
static const char *swig_IAudioSignalGenerator_base_names[] = {0};
static swig_lua_class _wrap_class_IAudioSignalGenerator = { "IAudioSignalGenerator", "IAudioSignalGenerator", &SWIGTYPE_p_IAudioSignalGenerator,0, swig_delete_IAudioSignalGenerator, swig_IAudioSignalGenerator_methods, swig_IAudioSignalGenerator_attributes, &swig_IAudioSignalGenerator_Sf_SwigStatic, swig_IAudioSignalGenerator_meta, swig_IAudioSignalGenerator_bases, swig_IAudioSignalGenerator_base_names };

static int _wrap_new_BiquadParameters(lua_State* L) {
  int SWIG_arg = 0;
  BiquadParameters *result = 0 ;
  
  SWIG_check_num_args("BiquadParameters::BiquadParameters",0,0)
  result = (BiquadParameters *)new BiquadParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BiquadParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParameters_biquadCalcType_set(lua_State* L) {
  int SWIG_arg = 0;
  BiquadParameters *arg1 = (BiquadParameters *) 0 ;
  biquadAlgorithm arg2 ;
  
  SWIG_check_num_args("BiquadParameters::biquadCalcType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BiquadParameters::biquadCalcType",1,"BiquadParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BiquadParameters::biquadCalcType",2,"biquadAlgorithm");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BiquadParameters,0))){
    SWIG_fail_ptr("BiquadParameters_biquadCalcType_set",1,SWIGTYPE_p_BiquadParameters);
  }
  
  arg2 = (biquadAlgorithm)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->biquadCalcType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParameters_biquadCalcType_get(lua_State* L) {
  int SWIG_arg = 0;
  BiquadParameters *arg1 = (BiquadParameters *) 0 ;
  biquadAlgorithm result;
  
  SWIG_check_num_args("BiquadParameters::biquadCalcType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BiquadParameters::biquadCalcType",1,"BiquadParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BiquadParameters,0))){
    SWIG_fail_ptr("BiquadParameters_biquadCalcType_get",1,SWIGTYPE_p_BiquadParameters);
  }
  
  result = (biquadAlgorithm) ((arg1)->biquadCalcType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BiquadParameters(void *obj) {
BiquadParameters *arg1 = (BiquadParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadParameters_attributes[] = {
    { "biquadCalcType", _wrap_BiquadParameters_biquadCalcType_get, _wrap_BiquadParameters_biquadCalcType_set },
    {0,0,0}
};
static swig_lua_method swig_BiquadParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_BiquadParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadParameters_Sf_SwigStatic = {
    "BiquadParameters",
    swig_BiquadParameters_Sf_SwigStatic_methods,
    swig_BiquadParameters_Sf_SwigStatic_attributes,
    swig_BiquadParameters_Sf_SwigStatic_constants,
    swig_BiquadParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadParameters_bases[] = {0};
static const char *swig_BiquadParameters_base_names[] = {0};
static swig_lua_class _wrap_class_BiquadParameters = { "BiquadParameters", "BiquadParameters", &SWIGTYPE_p_BiquadParameters,_proxy__wrap_new_BiquadParameters, swig_delete_BiquadParameters, swig_BiquadParameters_methods, swig_BiquadParameters_attributes, &swig_BiquadParameters_Sf_SwigStatic, swig_BiquadParameters_meta, swig_BiquadParameters_bases, swig_BiquadParameters_base_names };

static int _wrap_new_Biquad(lua_State* L) {
  int SWIG_arg = 0;
  Biquad *result = 0 ;
  
  SWIG_check_num_args("Biquad::Biquad",0,0)
  result = (Biquad *)new Biquad();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Biquad,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_reset(lua_State* L) {
  int SWIG_arg = 0;
  Biquad *arg1 = (Biquad *) 0 ;
  DspFloatType arg2 ;
  bool result;
  
  SWIG_check_num_args("Biquad::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Biquad::reset",1,"Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Biquad::reset",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Biquad,0))){
    SWIG_fail_ptr("Biquad_reset",1,SWIGTYPE_p_Biquad);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_canProcessAudioFrame(lua_State* L) {
  int SWIG_arg = 0;
  Biquad *arg1 = (Biquad *) 0 ;
  bool result;
  
  SWIG_check_num_args("Biquad::canProcessAudioFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Biquad::canProcessAudioFrame",1,"Biquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Biquad,0))){
    SWIG_fail_ptr("Biquad_canProcessAudioFrame",1,SWIGTYPE_p_Biquad);
  }
  
  result = (bool)(arg1)->canProcessAudioFrame();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  Biquad *arg1 = (Biquad *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Biquad::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Biquad::processAudioSample",1,"Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Biquad::processAudioSample",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Biquad,0))){
    SWIG_fail_ptr("Biquad_processAudioSample",1,SWIGTYPE_p_Biquad);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  Biquad *arg1 = (Biquad *) 0 ;
  BiquadParameters result;
  
  SWIG_check_num_args("Biquad::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Biquad::getParameters",1,"Biquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Biquad,0))){
    SWIG_fail_ptr("Biquad_getParameters",1,SWIGTYPE_p_Biquad);
  }
  
  result = (arg1)->getParameters();
  {
    BiquadParameters * resultptr = new BiquadParameters((const BiquadParameters &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BiquadParameters,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_setParameters(lua_State* L) {
  int SWIG_arg = 0;
  Biquad *arg1 = (Biquad *) 0 ;
  BiquadParameters *arg2 = 0 ;
  
  SWIG_check_num_args("Biquad::setParameters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Biquad::setParameters",1,"Biquad *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Biquad::setParameters",2,"BiquadParameters const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Biquad,0))){
    SWIG_fail_ptr("Biquad_setParameters",1,SWIGTYPE_p_Biquad);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BiquadParameters,0))){
    SWIG_fail_ptr("Biquad_setParameters",2,SWIGTYPE_p_BiquadParameters);
  }
  
  (arg1)->setParameters((BiquadParameters const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_setCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  Biquad *arg1 = (Biquad *) 0 ;
  DspFloatType *arg2 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Biquad::setCoefficients",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Biquad::setCoefficients",1,"Biquad *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Biquad::setCoefficients",2,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Biquad,0))){
    SWIG_fail_ptr("Biquad_setCoefficients",1,SWIGTYPE_p_Biquad);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Biquad_setCoefficients",2,SWIGTYPE_p_float);
  }
  
  (arg1)->setCoefficients(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_getCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  Biquad *arg1 = (Biquad *) 0 ;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("Biquad::getCoefficients",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Biquad::getCoefficients",1,"Biquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Biquad,0))){
    SWIG_fail_ptr("Biquad_getCoefficients",1,SWIGTYPE_p_Biquad);
  }
  
  result = (DspFloatType *)(arg1)->getCoefficients();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_getStateArray(lua_State* L) {
  int SWIG_arg = 0;
  Biquad *arg1 = (Biquad *) 0 ;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("Biquad::getStateArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Biquad::getStateArray",1,"Biquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Biquad,0))){
    SWIG_fail_ptr("Biquad_getStateArray",1,SWIGTYPE_p_Biquad);
  }
  
  result = (DspFloatType *)(arg1)->getStateArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_getG_value(lua_State* L) {
  int SWIG_arg = 0;
  Biquad *arg1 = (Biquad *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Biquad::getG_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Biquad::getG_value",1,"Biquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Biquad,0))){
    SWIG_fail_ptr("Biquad_getG_value",1,SWIGTYPE_p_Biquad);
  }
  
  result = (DspFloatType)(arg1)->getG_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_getS_value(lua_State* L) {
  int SWIG_arg = 0;
  Biquad *arg1 = (Biquad *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Biquad::getS_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Biquad::getS_value",1,"Biquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Biquad,0))){
    SWIG_fail_ptr("Biquad_getS_value",1,SWIGTYPE_p_Biquad);
  }
  
  result = (DspFloatType)(arg1)->getS_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Biquad(void *obj) {
Biquad *arg1 = (Biquad *) obj;
delete arg1;
}
static int _proxy__wrap_new_Biquad(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Biquad);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Biquad_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Biquad_methods[]= {
    { "reset", _wrap_Biquad_reset},
    { "canProcessAudioFrame", _wrap_Biquad_canProcessAudioFrame},
    { "processAudioSample", _wrap_Biquad_processAudioSample},
    { "getParameters", _wrap_Biquad_getParameters},
    { "setParameters", _wrap_Biquad_setParameters},
    { "setCoefficients", _wrap_Biquad_setCoefficients},
    { "getCoefficients", _wrap_Biquad_getCoefficients},
    { "getStateArray", _wrap_Biquad_getStateArray},
    { "getG_value", _wrap_Biquad_getG_value},
    { "getS_value", _wrap_Biquad_getS_value},
    {0,0}
};
static swig_lua_method swig_Biquad_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Biquad_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Biquad_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Biquad_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Biquad_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Biquad_Sf_SwigStatic = {
    "Biquad",
    swig_Biquad_Sf_SwigStatic_methods,
    swig_Biquad_Sf_SwigStatic_attributes,
    swig_Biquad_Sf_SwigStatic_constants,
    swig_Biquad_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Biquad_bases[] = {0,0};
static const char *swig_Biquad_base_names[] = {"IAudioSignalProcessor *",0};
static swig_lua_class _wrap_class_Biquad = { "Biquad", "Biquad", &SWIGTYPE_p_Biquad,_proxy__wrap_new_Biquad, swig_delete_Biquad, swig_Biquad_methods, swig_Biquad_attributes, &swig_Biquad_Sf_SwigStatic, swig_Biquad_meta, swig_Biquad_bases, swig_Biquad_base_names };

static int _wrap_new_AudioFilterParameters(lua_State* L) {
  int SWIG_arg = 0;
  AudioFilterParameters *result = 0 ;
  
  SWIG_check_num_args("AudioFilterParameters::AudioFilterParameters",0,0)
  result = (AudioFilterParameters *)new AudioFilterParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioFilterParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioFilterParameters_algorithm_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioFilterParameters *arg1 = (AudioFilterParameters *) 0 ;
  filterAlgorithm arg2 ;
  
  SWIG_check_num_args("AudioFilterParameters::algorithm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioFilterParameters::algorithm",1,"AudioFilterParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioFilterParameters::algorithm",2,"filterAlgorithm");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioFilterParameters,0))){
    SWIG_fail_ptr("AudioFilterParameters_algorithm_set",1,SWIGTYPE_p_AudioFilterParameters);
  }
  
  arg2 = (filterAlgorithm)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->algorithm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioFilterParameters_algorithm_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioFilterParameters *arg1 = (AudioFilterParameters *) 0 ;
  filterAlgorithm result;
  
  SWIG_check_num_args("AudioFilterParameters::algorithm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioFilterParameters::algorithm",1,"AudioFilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioFilterParameters,0))){
    SWIG_fail_ptr("AudioFilterParameters_algorithm_get",1,SWIGTYPE_p_AudioFilterParameters);
  }
  
  result = (filterAlgorithm) ((arg1)->algorithm);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioFilterParameters_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioFilterParameters *arg1 = (AudioFilterParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("AudioFilterParameters::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioFilterParameters::fc",1,"AudioFilterParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioFilterParameters::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioFilterParameters,0))){
    SWIG_fail_ptr("AudioFilterParameters_fc_set",1,SWIGTYPE_p_AudioFilterParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioFilterParameters_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioFilterParameters *arg1 = (AudioFilterParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("AudioFilterParameters::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioFilterParameters::fc",1,"AudioFilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioFilterParameters,0))){
    SWIG_fail_ptr("AudioFilterParameters_fc_get",1,SWIGTYPE_p_AudioFilterParameters);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioFilterParameters_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioFilterParameters *arg1 = (AudioFilterParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("AudioFilterParameters::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioFilterParameters::Q",1,"AudioFilterParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioFilterParameters::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioFilterParameters,0))){
    SWIG_fail_ptr("AudioFilterParameters_Q_set",1,SWIGTYPE_p_AudioFilterParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioFilterParameters_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioFilterParameters *arg1 = (AudioFilterParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("AudioFilterParameters::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioFilterParameters::Q",1,"AudioFilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioFilterParameters,0))){
    SWIG_fail_ptr("AudioFilterParameters_Q_get",1,SWIGTYPE_p_AudioFilterParameters);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioFilterParameters_boostCut_dB_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioFilterParameters *arg1 = (AudioFilterParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("AudioFilterParameters::boostCut_dB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioFilterParameters::boostCut_dB",1,"AudioFilterParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioFilterParameters::boostCut_dB",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioFilterParameters,0))){
    SWIG_fail_ptr("AudioFilterParameters_boostCut_dB_set",1,SWIGTYPE_p_AudioFilterParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->boostCut_dB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioFilterParameters_boostCut_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioFilterParameters *arg1 = (AudioFilterParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("AudioFilterParameters::boostCut_dB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioFilterParameters::boostCut_dB",1,"AudioFilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioFilterParameters,0))){
    SWIG_fail_ptr("AudioFilterParameters_boostCut_dB_get",1,SWIGTYPE_p_AudioFilterParameters);
  }
  
  result = (DspFloatType) ((arg1)->boostCut_dB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AudioFilterParameters(void *obj) {
AudioFilterParameters *arg1 = (AudioFilterParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_AudioFilterParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AudioFilterParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AudioFilterParameters_attributes[] = {
    { "algorithm", _wrap_AudioFilterParameters_algorithm_get, _wrap_AudioFilterParameters_algorithm_set },
    { "fc", _wrap_AudioFilterParameters_fc_get, _wrap_AudioFilterParameters_fc_set },
    { "Q", _wrap_AudioFilterParameters_Q_get, _wrap_AudioFilterParameters_Q_set },
    { "boostCut_dB", _wrap_AudioFilterParameters_boostCut_dB_get, _wrap_AudioFilterParameters_boostCut_dB_set },
    {0,0,0}
};
static swig_lua_method swig_AudioFilterParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_AudioFilterParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AudioFilterParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AudioFilterParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AudioFilterParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AudioFilterParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AudioFilterParameters_Sf_SwigStatic = {
    "AudioFilterParameters",
    swig_AudioFilterParameters_Sf_SwigStatic_methods,
    swig_AudioFilterParameters_Sf_SwigStatic_attributes,
    swig_AudioFilterParameters_Sf_SwigStatic_constants,
    swig_AudioFilterParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AudioFilterParameters_bases[] = {0};
static const char *swig_AudioFilterParameters_base_names[] = {0};
static swig_lua_class _wrap_class_AudioFilterParameters = { "AudioFilterParameters", "AudioFilterParameters", &SWIGTYPE_p_AudioFilterParameters,_proxy__wrap_new_AudioFilterParameters, swig_delete_AudioFilterParameters, swig_AudioFilterParameters_methods, swig_AudioFilterParameters_attributes, &swig_AudioFilterParameters_Sf_SwigStatic, swig_AudioFilterParameters_meta, swig_AudioFilterParameters_bases, swig_AudioFilterParameters_base_names };

static int _wrap_new_AudioFilter(lua_State* L) {
  int SWIG_arg = 0;
  AudioFilter *result = 0 ;
  
  SWIG_check_num_args("AudioFilter::AudioFilter",0,0)
  result = (AudioFilter *)new AudioFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  AudioFilter *arg1 = (AudioFilter *) 0 ;
  DspFloatType arg2 ;
  bool result;
  
  SWIG_check_num_args("AudioFilter::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioFilter::reset",1,"AudioFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioFilter::reset",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioFilter,0))){
    SWIG_fail_ptr("AudioFilter_reset",1,SWIGTYPE_p_AudioFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioFilter_canProcessAudioFrame(lua_State* L) {
  int SWIG_arg = 0;
  AudioFilter *arg1 = (AudioFilter *) 0 ;
  bool result;
  
  SWIG_check_num_args("AudioFilter::canProcessAudioFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioFilter::canProcessAudioFrame",1,"AudioFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioFilter,0))){
    SWIG_fail_ptr("AudioFilter_canProcessAudioFrame",1,SWIGTYPE_p_AudioFilter);
  }
  
  result = (bool)(arg1)->canProcessAudioFrame();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioFilter_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  AudioFilter *arg1 = (AudioFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("AudioFilter::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioFilter::processAudioSample",1,"AudioFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioFilter::processAudioSample",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioFilter,0))){
    SWIG_fail_ptr("AudioFilter_processAudioSample",1,SWIGTYPE_p_AudioFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioFilter_setSampleRate(lua_State* L) {
  int SWIG_arg = 0;
  AudioFilter *arg1 = (AudioFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("AudioFilter::setSampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioFilter::setSampleRate",1,"AudioFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioFilter::setSampleRate",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioFilter,0))){
    SWIG_fail_ptr("AudioFilter_setSampleRate",1,SWIGTYPE_p_AudioFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setSampleRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioFilter_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  AudioFilter *arg1 = (AudioFilter *) 0 ;
  AudioFilterParameters result;
  
  SWIG_check_num_args("AudioFilter::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioFilter::getParameters",1,"AudioFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioFilter,0))){
    SWIG_fail_ptr("AudioFilter_getParameters",1,SWIGTYPE_p_AudioFilter);
  }
  
  result = (arg1)->getParameters();
  {
    AudioFilterParameters * resultptr = new AudioFilterParameters((const AudioFilterParameters &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioFilterParameters,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioFilter_setParameters(lua_State* L) {
  int SWIG_arg = 0;
  AudioFilter *arg1 = (AudioFilter *) 0 ;
  AudioFilterParameters *arg2 = 0 ;
  
  SWIG_check_num_args("AudioFilter::setParameters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioFilter::setParameters",1,"AudioFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioFilter::setParameters",2,"AudioFilterParameters const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioFilter,0))){
    SWIG_fail_ptr("AudioFilter_setParameters",1,SWIGTYPE_p_AudioFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioFilterParameters,0))){
    SWIG_fail_ptr("AudioFilter_setParameters",2,SWIGTYPE_p_AudioFilterParameters);
  }
  
  (arg1)->setParameters((AudioFilterParameters const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioFilter_getG_value(lua_State* L) {
  int SWIG_arg = 0;
  AudioFilter *arg1 = (AudioFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("AudioFilter::getG_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioFilter::getG_value",1,"AudioFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioFilter,0))){
    SWIG_fail_ptr("AudioFilter_getG_value",1,SWIGTYPE_p_AudioFilter);
  }
  
  result = (DspFloatType)(arg1)->getG_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioFilter_getS_value(lua_State* L) {
  int SWIG_arg = 0;
  AudioFilter *arg1 = (AudioFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("AudioFilter::getS_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioFilter::getS_value",1,"AudioFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioFilter,0))){
    SWIG_fail_ptr("AudioFilter_getS_value",1,SWIGTYPE_p_AudioFilter);
  }
  
  result = (DspFloatType)(arg1)->getS_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AudioFilter(void *obj) {
AudioFilter *arg1 = (AudioFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_AudioFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AudioFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AudioFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AudioFilter_methods[]= {
    { "reset", _wrap_AudioFilter_reset},
    { "canProcessAudioFrame", _wrap_AudioFilter_canProcessAudioFrame},
    { "processAudioSample", _wrap_AudioFilter_processAudioSample},
    { "setSampleRate", _wrap_AudioFilter_setSampleRate},
    { "getParameters", _wrap_AudioFilter_getParameters},
    { "setParameters", _wrap_AudioFilter_setParameters},
    { "getG_value", _wrap_AudioFilter_getG_value},
    { "getS_value", _wrap_AudioFilter_getS_value},
    {0,0}
};
static swig_lua_method swig_AudioFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AudioFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AudioFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AudioFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AudioFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AudioFilter_Sf_SwigStatic = {
    "AudioFilter",
    swig_AudioFilter_Sf_SwigStatic_methods,
    swig_AudioFilter_Sf_SwigStatic_attributes,
    swig_AudioFilter_Sf_SwigStatic_constants,
    swig_AudioFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AudioFilter_bases[] = {0,0};
static const char *swig_AudioFilter_base_names[] = {"IAudioSignalProcessor *",0};
static swig_lua_class _wrap_class_AudioFilter = { "AudioFilter", "AudioFilter", &SWIGTYPE_p_AudioFilter,_proxy__wrap_new_AudioFilter, swig_delete_AudioFilter, swig_AudioFilter_methods, swig_AudioFilter_attributes, &swig_AudioFilter_Sf_SwigStatic, swig_AudioFilter_meta, swig_AudioFilter_bases, swig_AudioFilter_base_names };

static int _wrap_new_FilterBankOutput(lua_State* L) {
  int SWIG_arg = 0;
  FilterBankOutput *result = 0 ;
  
  SWIG_check_num_args("FilterBankOutput::FilterBankOutput",0,0)
  result = (FilterBankOutput *)new FilterBankOutput();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FilterBankOutput,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBankOutput_LFOut_set(lua_State* L) {
  int SWIG_arg = 0;
  FilterBankOutput *arg1 = (FilterBankOutput *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("FilterBankOutput::LFOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterBankOutput::LFOut",1,"FilterBankOutput *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterBankOutput::LFOut",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterBankOutput,0))){
    SWIG_fail_ptr("FilterBankOutput_LFOut_set",1,SWIGTYPE_p_FilterBankOutput);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->LFOut = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBankOutput_LFOut_get(lua_State* L) {
  int SWIG_arg = 0;
  FilterBankOutput *arg1 = (FilterBankOutput *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterBankOutput::LFOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterBankOutput::LFOut",1,"FilterBankOutput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterBankOutput,0))){
    SWIG_fail_ptr("FilterBankOutput_LFOut_get",1,SWIGTYPE_p_FilterBankOutput);
  }
  
  result = (DspFloatType) ((arg1)->LFOut);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBankOutput_HFOut_set(lua_State* L) {
  int SWIG_arg = 0;
  FilterBankOutput *arg1 = (FilterBankOutput *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("FilterBankOutput::HFOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterBankOutput::HFOut",1,"FilterBankOutput *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterBankOutput::HFOut",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterBankOutput,0))){
    SWIG_fail_ptr("FilterBankOutput_HFOut_set",1,SWIGTYPE_p_FilterBankOutput);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->HFOut = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBankOutput_HFOut_get(lua_State* L) {
  int SWIG_arg = 0;
  FilterBankOutput *arg1 = (FilterBankOutput *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterBankOutput::HFOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterBankOutput::HFOut",1,"FilterBankOutput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterBankOutput,0))){
    SWIG_fail_ptr("FilterBankOutput_HFOut_get",1,SWIGTYPE_p_FilterBankOutput);
  }
  
  result = (DspFloatType) ((arg1)->HFOut);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FilterBankOutput(void *obj) {
FilterBankOutput *arg1 = (FilterBankOutput *) obj;
delete arg1;
}
static int _proxy__wrap_new_FilterBankOutput(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FilterBankOutput);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FilterBankOutput_attributes[] = {
    { "LFOut", _wrap_FilterBankOutput_LFOut_get, _wrap_FilterBankOutput_LFOut_set },
    { "HFOut", _wrap_FilterBankOutput_HFOut_get, _wrap_FilterBankOutput_HFOut_set },
    {0,0,0}
};
static swig_lua_method swig_FilterBankOutput_methods[]= {
    {0,0}
};
static swig_lua_method swig_FilterBankOutput_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FilterBankOutput_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FilterBankOutput_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FilterBankOutput_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FilterBankOutput_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FilterBankOutput_Sf_SwigStatic = {
    "FilterBankOutput",
    swig_FilterBankOutput_Sf_SwigStatic_methods,
    swig_FilterBankOutput_Sf_SwigStatic_attributes,
    swig_FilterBankOutput_Sf_SwigStatic_constants,
    swig_FilterBankOutput_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FilterBankOutput_bases[] = {0};
static const char *swig_FilterBankOutput_base_names[] = {0};
static swig_lua_class _wrap_class_FilterBankOutput = { "FilterBankOutput", "FilterBankOutput", &SWIGTYPE_p_FilterBankOutput,_proxy__wrap_new_FilterBankOutput, swig_delete_FilterBankOutput, swig_FilterBankOutput_methods, swig_FilterBankOutput_attributes, &swig_FilterBankOutput_Sf_SwigStatic, swig_FilterBankOutput_meta, swig_FilterBankOutput_bases, swig_FilterBankOutput_base_names };

static int _wrap_new_LRFilterBankParameters(lua_State* L) {
  int SWIG_arg = 0;
  LRFilterBankParameters *result = 0 ;
  
  SWIG_check_num_args("LRFilterBankParameters::LRFilterBankParameters",0,0)
  result = (LRFilterBankParameters *)new LRFilterBankParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LRFilterBankParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LRFilterBankParameters_splitFrequency_set(lua_State* L) {
  int SWIG_arg = 0;
  LRFilterBankParameters *arg1 = (LRFilterBankParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("LRFilterBankParameters::splitFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LRFilterBankParameters::splitFrequency",1,"LRFilterBankParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LRFilterBankParameters::splitFrequency",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LRFilterBankParameters,0))){
    SWIG_fail_ptr("LRFilterBankParameters_splitFrequency_set",1,SWIGTYPE_p_LRFilterBankParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->splitFrequency = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LRFilterBankParameters_splitFrequency_get(lua_State* L) {
  int SWIG_arg = 0;
  LRFilterBankParameters *arg1 = (LRFilterBankParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("LRFilterBankParameters::splitFrequency",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LRFilterBankParameters::splitFrequency",1,"LRFilterBankParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LRFilterBankParameters,0))){
    SWIG_fail_ptr("LRFilterBankParameters_splitFrequency_get",1,SWIGTYPE_p_LRFilterBankParameters);
  }
  
  result = (DspFloatType) ((arg1)->splitFrequency);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LRFilterBankParameters(void *obj) {
LRFilterBankParameters *arg1 = (LRFilterBankParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_LRFilterBankParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LRFilterBankParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LRFilterBankParameters_attributes[] = {
    { "splitFrequency", _wrap_LRFilterBankParameters_splitFrequency_get, _wrap_LRFilterBankParameters_splitFrequency_set },
    {0,0,0}
};
static swig_lua_method swig_LRFilterBankParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_LRFilterBankParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LRFilterBankParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LRFilterBankParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LRFilterBankParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LRFilterBankParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LRFilterBankParameters_Sf_SwigStatic = {
    "LRFilterBankParameters",
    swig_LRFilterBankParameters_Sf_SwigStatic_methods,
    swig_LRFilterBankParameters_Sf_SwigStatic_attributes,
    swig_LRFilterBankParameters_Sf_SwigStatic_constants,
    swig_LRFilterBankParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LRFilterBankParameters_bases[] = {0};
static const char *swig_LRFilterBankParameters_base_names[] = {0};
static swig_lua_class _wrap_class_LRFilterBankParameters = { "LRFilterBankParameters", "LRFilterBankParameters", &SWIGTYPE_p_LRFilterBankParameters,_proxy__wrap_new_LRFilterBankParameters, swig_delete_LRFilterBankParameters, swig_LRFilterBankParameters_methods, swig_LRFilterBankParameters_attributes, &swig_LRFilterBankParameters_Sf_SwigStatic, swig_LRFilterBankParameters_meta, swig_LRFilterBankParameters_bases, swig_LRFilterBankParameters_base_names };

static int _wrap_new_LRFilterBank(lua_State* L) {
  int SWIG_arg = 0;
  LRFilterBank *result = 0 ;
  
  SWIG_check_num_args("LRFilterBank::LRFilterBank",0,0)
  result = (LRFilterBank *)new LRFilterBank();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LRFilterBank,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LRFilterBank_reset(lua_State* L) {
  int SWIG_arg = 0;
  LRFilterBank *arg1 = (LRFilterBank *) 0 ;
  DspFloatType arg2 ;
  bool result;
  
  SWIG_check_num_args("LRFilterBank::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LRFilterBank::reset",1,"LRFilterBank *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LRFilterBank::reset",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LRFilterBank,0))){
    SWIG_fail_ptr("LRFilterBank_reset",1,SWIGTYPE_p_LRFilterBank);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LRFilterBank_canProcessAudioFrame(lua_State* L) {
  int SWIG_arg = 0;
  LRFilterBank *arg1 = (LRFilterBank *) 0 ;
  bool result;
  
  SWIG_check_num_args("LRFilterBank::canProcessAudioFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LRFilterBank::canProcessAudioFrame",1,"LRFilterBank *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LRFilterBank,0))){
    SWIG_fail_ptr("LRFilterBank_canProcessAudioFrame",1,SWIGTYPE_p_LRFilterBank);
  }
  
  result = (bool)(arg1)->canProcessAudioFrame();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LRFilterBank_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  LRFilterBank *arg1 = (LRFilterBank *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("LRFilterBank::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LRFilterBank::processAudioSample",1,"LRFilterBank *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LRFilterBank::processAudioSample",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LRFilterBank,0))){
    SWIG_fail_ptr("LRFilterBank_processAudioSample",1,SWIGTYPE_p_LRFilterBank);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LRFilterBank_processFilterBank(lua_State* L) {
  int SWIG_arg = 0;
  LRFilterBank *arg1 = (LRFilterBank *) 0 ;
  DspFloatType arg2 ;
  FilterBankOutput result;
  
  SWIG_check_num_args("LRFilterBank::processFilterBank",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LRFilterBank::processFilterBank",1,"LRFilterBank *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LRFilterBank::processFilterBank",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LRFilterBank,0))){
    SWIG_fail_ptr("LRFilterBank_processFilterBank",1,SWIGTYPE_p_LRFilterBank);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (arg1)->processFilterBank(arg2);
  {
    FilterBankOutput * resultptr = new FilterBankOutput((const FilterBankOutput &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FilterBankOutput,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LRFilterBank_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  LRFilterBank *arg1 = (LRFilterBank *) 0 ;
  LRFilterBankParameters result;
  
  SWIG_check_num_args("LRFilterBank::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LRFilterBank::getParameters",1,"LRFilterBank *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LRFilterBank,0))){
    SWIG_fail_ptr("LRFilterBank_getParameters",1,SWIGTYPE_p_LRFilterBank);
  }
  
  result = (arg1)->getParameters();
  {
    LRFilterBankParameters * resultptr = new LRFilterBankParameters((const LRFilterBankParameters &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LRFilterBankParameters,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LRFilterBank_setParameters(lua_State* L) {
  int SWIG_arg = 0;
  LRFilterBank *arg1 = (LRFilterBank *) 0 ;
  LRFilterBankParameters *arg2 = 0 ;
  
  SWIG_check_num_args("LRFilterBank::setParameters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LRFilterBank::setParameters",1,"LRFilterBank *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LRFilterBank::setParameters",2,"LRFilterBankParameters const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LRFilterBank,0))){
    SWIG_fail_ptr("LRFilterBank_setParameters",1,SWIGTYPE_p_LRFilterBank);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LRFilterBankParameters,0))){
    SWIG_fail_ptr("LRFilterBank_setParameters",2,SWIGTYPE_p_LRFilterBankParameters);
  }
  
  (arg1)->setParameters((LRFilterBankParameters const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LRFilterBank(void *obj) {
LRFilterBank *arg1 = (LRFilterBank *) obj;
delete arg1;
}
static int _proxy__wrap_new_LRFilterBank(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LRFilterBank);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LRFilterBank_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LRFilterBank_methods[]= {
    { "reset", _wrap_LRFilterBank_reset},
    { "canProcessAudioFrame", _wrap_LRFilterBank_canProcessAudioFrame},
    { "processAudioSample", _wrap_LRFilterBank_processAudioSample},
    { "processFilterBank", _wrap_LRFilterBank_processFilterBank},
    { "getParameters", _wrap_LRFilterBank_getParameters},
    { "setParameters", _wrap_LRFilterBank_setParameters},
    {0,0}
};
static swig_lua_method swig_LRFilterBank_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LRFilterBank_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LRFilterBank_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LRFilterBank_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LRFilterBank_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LRFilterBank_Sf_SwigStatic = {
    "LRFilterBank",
    swig_LRFilterBank_Sf_SwigStatic_methods,
    swig_LRFilterBank_Sf_SwigStatic_attributes,
    swig_LRFilterBank_Sf_SwigStatic_constants,
    swig_LRFilterBank_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LRFilterBank_bases[] = {0,0};
static const char *swig_LRFilterBank_base_names[] = {"IAudioSignalProcessor *",0};
static swig_lua_class _wrap_class_LRFilterBank = { "LRFilterBank", "LRFilterBank", &SWIGTYPE_p_LRFilterBank,_proxy__wrap_new_LRFilterBank, swig_delete_LRFilterBank, swig_LRFilterBank_methods, swig_LRFilterBank_attributes, &swig_LRFilterBank_Sf_SwigStatic, swig_LRFilterBank_meta, swig_LRFilterBank_bases, swig_LRFilterBank_base_names };

static int _wrap_new_PhaseShifterParameters(lua_State* L) {
  int SWIG_arg = 0;
  PhaseShifterParameters *result = 0 ;
  
  SWIG_check_num_args("PhaseShifterParameters::PhaseShifterParameters",0,0)
  result = (PhaseShifterParameters *)new PhaseShifterParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PhaseShifterParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseShifterParameters_lfoRate_Hz_set(lua_State* L) {
  int SWIG_arg = 0;
  PhaseShifterParameters *arg1 = (PhaseShifterParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("PhaseShifterParameters::lfoRate_Hz",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PhaseShifterParameters::lfoRate_Hz",1,"PhaseShifterParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PhaseShifterParameters::lfoRate_Hz",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PhaseShifterParameters,0))){
    SWIG_fail_ptr("PhaseShifterParameters_lfoRate_Hz_set",1,SWIGTYPE_p_PhaseShifterParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->lfoRate_Hz = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseShifterParameters_lfoRate_Hz_get(lua_State* L) {
  int SWIG_arg = 0;
  PhaseShifterParameters *arg1 = (PhaseShifterParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("PhaseShifterParameters::lfoRate_Hz",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PhaseShifterParameters::lfoRate_Hz",1,"PhaseShifterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PhaseShifterParameters,0))){
    SWIG_fail_ptr("PhaseShifterParameters_lfoRate_Hz_get",1,SWIGTYPE_p_PhaseShifterParameters);
  }
  
  result = (DspFloatType) ((arg1)->lfoRate_Hz);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseShifterParameters_lfoDepth_Pct_set(lua_State* L) {
  int SWIG_arg = 0;
  PhaseShifterParameters *arg1 = (PhaseShifterParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("PhaseShifterParameters::lfoDepth_Pct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PhaseShifterParameters::lfoDepth_Pct",1,"PhaseShifterParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PhaseShifterParameters::lfoDepth_Pct",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PhaseShifterParameters,0))){
    SWIG_fail_ptr("PhaseShifterParameters_lfoDepth_Pct_set",1,SWIGTYPE_p_PhaseShifterParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->lfoDepth_Pct = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseShifterParameters_lfoDepth_Pct_get(lua_State* L) {
  int SWIG_arg = 0;
  PhaseShifterParameters *arg1 = (PhaseShifterParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("PhaseShifterParameters::lfoDepth_Pct",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PhaseShifterParameters::lfoDepth_Pct",1,"PhaseShifterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PhaseShifterParameters,0))){
    SWIG_fail_ptr("PhaseShifterParameters_lfoDepth_Pct_get",1,SWIGTYPE_p_PhaseShifterParameters);
  }
  
  result = (DspFloatType) ((arg1)->lfoDepth_Pct);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseShifterParameters_intensity_Pct_set(lua_State* L) {
  int SWIG_arg = 0;
  PhaseShifterParameters *arg1 = (PhaseShifterParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("PhaseShifterParameters::intensity_Pct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PhaseShifterParameters::intensity_Pct",1,"PhaseShifterParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PhaseShifterParameters::intensity_Pct",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PhaseShifterParameters,0))){
    SWIG_fail_ptr("PhaseShifterParameters_intensity_Pct_set",1,SWIGTYPE_p_PhaseShifterParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->intensity_Pct = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseShifterParameters_intensity_Pct_get(lua_State* L) {
  int SWIG_arg = 0;
  PhaseShifterParameters *arg1 = (PhaseShifterParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("PhaseShifterParameters::intensity_Pct",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PhaseShifterParameters::intensity_Pct",1,"PhaseShifterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PhaseShifterParameters,0))){
    SWIG_fail_ptr("PhaseShifterParameters_intensity_Pct_get",1,SWIGTYPE_p_PhaseShifterParameters);
  }
  
  result = (DspFloatType) ((arg1)->intensity_Pct);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseShifterParameters_quadPhaseLFO_set(lua_State* L) {
  int SWIG_arg = 0;
  PhaseShifterParameters *arg1 = (PhaseShifterParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("PhaseShifterParameters::quadPhaseLFO",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PhaseShifterParameters::quadPhaseLFO",1,"PhaseShifterParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("PhaseShifterParameters::quadPhaseLFO",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PhaseShifterParameters,0))){
    SWIG_fail_ptr("PhaseShifterParameters_quadPhaseLFO_set",1,SWIGTYPE_p_PhaseShifterParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->quadPhaseLFO = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseShifterParameters_quadPhaseLFO_get(lua_State* L) {
  int SWIG_arg = 0;
  PhaseShifterParameters *arg1 = (PhaseShifterParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("PhaseShifterParameters::quadPhaseLFO",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PhaseShifterParameters::quadPhaseLFO",1,"PhaseShifterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PhaseShifterParameters,0))){
    SWIG_fail_ptr("PhaseShifterParameters_quadPhaseLFO_get",1,SWIGTYPE_p_PhaseShifterParameters);
  }
  
  result = (bool) ((arg1)->quadPhaseLFO);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PhaseShifterParameters(void *obj) {
PhaseShifterParameters *arg1 = (PhaseShifterParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_PhaseShifterParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PhaseShifterParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PhaseShifterParameters_attributes[] = {
    { "lfoRate_Hz", _wrap_PhaseShifterParameters_lfoRate_Hz_get, _wrap_PhaseShifterParameters_lfoRate_Hz_set },
    { "lfoDepth_Pct", _wrap_PhaseShifterParameters_lfoDepth_Pct_get, _wrap_PhaseShifterParameters_lfoDepth_Pct_set },
    { "intensity_Pct", _wrap_PhaseShifterParameters_intensity_Pct_get, _wrap_PhaseShifterParameters_intensity_Pct_set },
    { "quadPhaseLFO", _wrap_PhaseShifterParameters_quadPhaseLFO_get, _wrap_PhaseShifterParameters_quadPhaseLFO_set },
    {0,0,0}
};
static swig_lua_method swig_PhaseShifterParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_PhaseShifterParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PhaseShifterParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PhaseShifterParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PhaseShifterParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PhaseShifterParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PhaseShifterParameters_Sf_SwigStatic = {
    "PhaseShifterParameters",
    swig_PhaseShifterParameters_Sf_SwigStatic_methods,
    swig_PhaseShifterParameters_Sf_SwigStatic_attributes,
    swig_PhaseShifterParameters_Sf_SwigStatic_constants,
    swig_PhaseShifterParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PhaseShifterParameters_bases[] = {0};
static const char *swig_PhaseShifterParameters_base_names[] = {0};
static swig_lua_class _wrap_class_PhaseShifterParameters = { "PhaseShifterParameters", "PhaseShifterParameters", &SWIGTYPE_p_PhaseShifterParameters,_proxy__wrap_new_PhaseShifterParameters, swig_delete_PhaseShifterParameters, swig_PhaseShifterParameters_methods, swig_PhaseShifterParameters_attributes, &swig_PhaseShifterParameters_Sf_SwigStatic, swig_PhaseShifterParameters_meta, swig_PhaseShifterParameters_bases, swig_PhaseShifterParameters_base_names };

static int _wrap_PHASER_STAGES_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("PHASER_STAGES",0,0)
  result = (unsigned int)(unsigned int)PHASER_STAGES;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_apf0_minF_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("apf0_minF",0,0)
  result = (DspFloatType)(DspFloatType)apf0_minF;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_apf0_maxF_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("apf0_maxF",0,0)
  result = (DspFloatType)(DspFloatType)apf0_maxF;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_apf1_minF_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("apf1_minF",0,0)
  result = (DspFloatType)(DspFloatType)apf1_minF;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_apf1_maxF_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("apf1_maxF",0,0)
  result = (DspFloatType)(DspFloatType)apf1_maxF;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_apf2_minF_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("apf2_minF",0,0)
  result = (DspFloatType)(DspFloatType)apf2_minF;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_apf2_maxF_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("apf2_maxF",0,0)
  result = (DspFloatType)(DspFloatType)apf2_maxF;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_apf3_minF_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("apf3_minF",0,0)
  result = (DspFloatType)(DspFloatType)apf3_minF;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_apf3_maxF_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("apf3_maxF",0,0)
  result = (DspFloatType)(DspFloatType)apf3_maxF;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_apf4_minF_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("apf4_minF",0,0)
  result = (DspFloatType)(DspFloatType)apf4_minF;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_apf4_maxF_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("apf4_maxF",0,0)
  result = (DspFloatType)(DspFloatType)apf4_maxF;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_apf5_minF_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("apf5_minF",0,0)
  result = (DspFloatType)(DspFloatType)apf5_minF;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_apf5_maxF_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("apf5_maxF",0,0)
  result = (DspFloatType)(DspFloatType)apf5_maxF;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhaseShifter(lua_State* L) {
  int SWIG_arg = 0;
  PhaseShifter *result = 0 ;
  
  SWIG_check_num_args("PhaseShifter::PhaseShifter",0,0)
  result = (PhaseShifter *)new PhaseShifter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PhaseShifter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseShifter_reset(lua_State* L) {
  int SWIG_arg = 0;
  PhaseShifter *arg1 = (PhaseShifter *) 0 ;
  DspFloatType arg2 ;
  bool result;
  
  SWIG_check_num_args("PhaseShifter::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PhaseShifter::reset",1,"PhaseShifter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PhaseShifter::reset",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PhaseShifter,0))){
    SWIG_fail_ptr("PhaseShifter_reset",1,SWIGTYPE_p_PhaseShifter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseShifter_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  PhaseShifter *arg1 = (PhaseShifter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("PhaseShifter::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PhaseShifter::processAudioSample",1,"PhaseShifter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PhaseShifter::processAudioSample",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PhaseShifter,0))){
    SWIG_fail_ptr("PhaseShifter_processAudioSample",1,SWIGTYPE_p_PhaseShifter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseShifter_canProcessAudioFrame(lua_State* L) {
  int SWIG_arg = 0;
  PhaseShifter *arg1 = (PhaseShifter *) 0 ;
  bool result;
  
  SWIG_check_num_args("PhaseShifter::canProcessAudioFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PhaseShifter::canProcessAudioFrame",1,"PhaseShifter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PhaseShifter,0))){
    SWIG_fail_ptr("PhaseShifter_canProcessAudioFrame",1,SWIGTYPE_p_PhaseShifter);
  }
  
  result = (bool)(arg1)->canProcessAudioFrame();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseShifter_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  PhaseShifter *arg1 = (PhaseShifter *) 0 ;
  PhaseShifterParameters result;
  
  SWIG_check_num_args("PhaseShifter::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PhaseShifter::getParameters",1,"PhaseShifter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PhaseShifter,0))){
    SWIG_fail_ptr("PhaseShifter_getParameters",1,SWIGTYPE_p_PhaseShifter);
  }
  
  result = (arg1)->getParameters();
  {
    PhaseShifterParameters * resultptr = new PhaseShifterParameters((const PhaseShifterParameters &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_PhaseShifterParameters,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseShifter_setParameters(lua_State* L) {
  int SWIG_arg = 0;
  PhaseShifter *arg1 = (PhaseShifter *) 0 ;
  PhaseShifterParameters *arg2 = 0 ;
  
  SWIG_check_num_args("PhaseShifter::setParameters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PhaseShifter::setParameters",1,"PhaseShifter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("PhaseShifter::setParameters",2,"PhaseShifterParameters const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PhaseShifter,0))){
    SWIG_fail_ptr("PhaseShifter_setParameters",1,SWIGTYPE_p_PhaseShifter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_PhaseShifterParameters,0))){
    SWIG_fail_ptr("PhaseShifter_setParameters",2,SWIGTYPE_p_PhaseShifterParameters);
  }
  
  (arg1)->setParameters((PhaseShifterParameters const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PhaseShifter(void *obj) {
PhaseShifter *arg1 = (PhaseShifter *) obj;
delete arg1;
}
static int _proxy__wrap_new_PhaseShifter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PhaseShifter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PhaseShifter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PhaseShifter_methods[]= {
    { "reset", _wrap_PhaseShifter_reset},
    { "processAudioSample", _wrap_PhaseShifter_processAudioSample},
    { "canProcessAudioFrame", _wrap_PhaseShifter_canProcessAudioFrame},
    { "getParameters", _wrap_PhaseShifter_getParameters},
    { "setParameters", _wrap_PhaseShifter_setParameters},
    {0,0}
};
static swig_lua_method swig_PhaseShifter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PhaseShifter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PhaseShifter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PhaseShifter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PhaseShifter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PhaseShifter_Sf_SwigStatic = {
    "PhaseShifter",
    swig_PhaseShifter_Sf_SwigStatic_methods,
    swig_PhaseShifter_Sf_SwigStatic_attributes,
    swig_PhaseShifter_Sf_SwigStatic_constants,
    swig_PhaseShifter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PhaseShifter_bases[] = {0,0};
static const char *swig_PhaseShifter_base_names[] = {"IAudioSignalProcessor *",0};
static swig_lua_class _wrap_class_PhaseShifter = { "PhaseShifter", "PhaseShifter", &SWIGTYPE_p_PhaseShifter,_proxy__wrap_new_PhaseShifter, swig_delete_PhaseShifter, swig_PhaseShifter_methods, swig_PhaseShifter_attributes, &swig_PhaseShifter_Sf_SwigStatic, swig_PhaseShifter_meta, swig_PhaseShifter_bases, swig_PhaseShifter_base_names };

static int _wrap_new_SimpleLPFParameters(lua_State* L) {
  int SWIG_arg = 0;
  SimpleLPFParameters *result = 0 ;
  
  SWIG_check_num_args("SimpleLPFParameters::SimpleLPFParameters",0,0)
  result = (SimpleLPFParameters *)new SimpleLPFParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleLPFParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleLPFParameters_g_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleLPFParameters *arg1 = (SimpleLPFParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("SimpleLPFParameters::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleLPFParameters::g",1,"SimpleLPFParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleLPFParameters::g",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleLPFParameters,0))){
    SWIG_fail_ptr("SimpleLPFParameters_g_set",1,SWIGTYPE_p_SimpleLPFParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleLPFParameters_g_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleLPFParameters *arg1 = (SimpleLPFParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("SimpleLPFParameters::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleLPFParameters::g",1,"SimpleLPFParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleLPFParameters,0))){
    SWIG_fail_ptr("SimpleLPFParameters_g_get",1,SWIGTYPE_p_SimpleLPFParameters);
  }
  
  result = (DspFloatType) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SimpleLPFParameters(void *obj) {
SimpleLPFParameters *arg1 = (SimpleLPFParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_SimpleLPFParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SimpleLPFParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SimpleLPFParameters_attributes[] = {
    { "g", _wrap_SimpleLPFParameters_g_get, _wrap_SimpleLPFParameters_g_set },
    {0,0,0}
};
static swig_lua_method swig_SimpleLPFParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_SimpleLPFParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SimpleLPFParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SimpleLPFParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SimpleLPFParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SimpleLPFParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SimpleLPFParameters_Sf_SwigStatic = {
    "SimpleLPFParameters",
    swig_SimpleLPFParameters_Sf_SwigStatic_methods,
    swig_SimpleLPFParameters_Sf_SwigStatic_attributes,
    swig_SimpleLPFParameters_Sf_SwigStatic_constants,
    swig_SimpleLPFParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SimpleLPFParameters_bases[] = {0};
static const char *swig_SimpleLPFParameters_base_names[] = {0};
static swig_lua_class _wrap_class_SimpleLPFParameters = { "SimpleLPFParameters", "SimpleLPFParameters", &SWIGTYPE_p_SimpleLPFParameters,_proxy__wrap_new_SimpleLPFParameters, swig_delete_SimpleLPFParameters, swig_SimpleLPFParameters_methods, swig_SimpleLPFParameters_attributes, &swig_SimpleLPFParameters_Sf_SwigStatic, swig_SimpleLPFParameters_meta, swig_SimpleLPFParameters_bases, swig_SimpleLPFParameters_base_names };

static int _wrap_new_SimpleLPF(lua_State* L) {
  int SWIG_arg = 0;
  SimpleLPF *result = 0 ;
  
  SWIG_check_num_args("SimpleLPF::SimpleLPF",0,0)
  result = (SimpleLPF *)new SimpleLPF();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleLPF,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleLPF_reset(lua_State* L) {
  int SWIG_arg = 0;
  SimpleLPF *arg1 = (SimpleLPF *) 0 ;
  DspFloatType arg2 ;
  bool result;
  
  SWIG_check_num_args("SimpleLPF::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleLPF::reset",1,"SimpleLPF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleLPF::reset",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleLPF,0))){
    SWIG_fail_ptr("SimpleLPF_reset",1,SWIGTYPE_p_SimpleLPF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleLPF_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  SimpleLPF *arg1 = (SimpleLPF *) 0 ;
  SimpleLPFParameters result;
  
  SWIG_check_num_args("SimpleLPF::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleLPF::getParameters",1,"SimpleLPF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleLPF,0))){
    SWIG_fail_ptr("SimpleLPF_getParameters",1,SWIGTYPE_p_SimpleLPF);
  }
  
  result = (arg1)->getParameters();
  {
    SimpleLPFParameters * resultptr = new SimpleLPFParameters((const SimpleLPFParameters &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleLPFParameters,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleLPF_setParameters(lua_State* L) {
  int SWIG_arg = 0;
  SimpleLPF *arg1 = (SimpleLPF *) 0 ;
  SimpleLPFParameters *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleLPF::setParameters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleLPF::setParameters",1,"SimpleLPF *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleLPF::setParameters",2,"SimpleLPFParameters const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleLPF,0))){
    SWIG_fail_ptr("SimpleLPF_setParameters",1,SWIGTYPE_p_SimpleLPF);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleLPFParameters,0))){
    SWIG_fail_ptr("SimpleLPF_setParameters",2,SWIGTYPE_p_SimpleLPFParameters);
  }
  
  (arg1)->setParameters((SimpleLPFParameters const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleLPF_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  SimpleLPF *arg1 = (SimpleLPF *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("SimpleLPF::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleLPF::processAudioSample",1,"SimpleLPF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleLPF::processAudioSample",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleLPF,0))){
    SWIG_fail_ptr("SimpleLPF_processAudioSample",1,SWIGTYPE_p_SimpleLPF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleLPF_canProcessAudioFrame(lua_State* L) {
  int SWIG_arg = 0;
  SimpleLPF *arg1 = (SimpleLPF *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleLPF::canProcessAudioFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleLPF::canProcessAudioFrame",1,"SimpleLPF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleLPF,0))){
    SWIG_fail_ptr("SimpleLPF_canProcessAudioFrame",1,SWIGTYPE_p_SimpleLPF);
  }
  
  result = (bool)(arg1)->canProcessAudioFrame();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SimpleLPF(void *obj) {
SimpleLPF *arg1 = (SimpleLPF *) obj;
delete arg1;
}
static int _proxy__wrap_new_SimpleLPF(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SimpleLPF);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SimpleLPF_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SimpleLPF_methods[]= {
    { "reset", _wrap_SimpleLPF_reset},
    { "getParameters", _wrap_SimpleLPF_getParameters},
    { "setParameters", _wrap_SimpleLPF_setParameters},
    { "processAudioSample", _wrap_SimpleLPF_processAudioSample},
    { "canProcessAudioFrame", _wrap_SimpleLPF_canProcessAudioFrame},
    {0,0}
};
static swig_lua_method swig_SimpleLPF_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SimpleLPF_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SimpleLPF_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SimpleLPF_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SimpleLPF_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SimpleLPF_Sf_SwigStatic = {
    "SimpleLPF",
    swig_SimpleLPF_Sf_SwigStatic_methods,
    swig_SimpleLPF_Sf_SwigStatic_attributes,
    swig_SimpleLPF_Sf_SwigStatic_constants,
    swig_SimpleLPF_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SimpleLPF_bases[] = {0,0};
static const char *swig_SimpleLPF_base_names[] = {"IAudioSignalProcessor *",0};
static swig_lua_class _wrap_class_SimpleLPF = { "SimpleLPF", "SimpleLPF", &SWIGTYPE_p_SimpleLPF,_proxy__wrap_new_SimpleLPF, swig_delete_SimpleLPF, swig_SimpleLPF_methods, swig_SimpleLPF_attributes, &swig_SimpleLPF_Sf_SwigStatic, swig_SimpleLPF_meta, swig_SimpleLPF_bases, swig_SimpleLPF_base_names };

static int _wrap_new_ZVAFilterParameters(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilterParameters *result = 0 ;
  
  SWIG_check_num_args("ZVAFilterParameters::ZVAFilterParameters",0,0)
  result = (ZVAFilterParameters *)new ZVAFilterParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ZVAFilterParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZVAFilterParameters_filterAlgorithm_set(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilterParameters *arg1 = (ZVAFilterParameters *) 0 ;
  vaFilterAlgorithm arg2 ;
  
  SWIG_check_num_args("ZVAFilterParameters::filterAlgorithm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZVAFilterParameters::filterAlgorithm",1,"ZVAFilterParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ZVAFilterParameters::filterAlgorithm",2,"vaFilterAlgorithm");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ZVAFilterParameters,0))){
    SWIG_fail_ptr("ZVAFilterParameters_filterAlgorithm_set",1,SWIGTYPE_p_ZVAFilterParameters);
  }
  
  arg2 = (vaFilterAlgorithm)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->filterAlgorithm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZVAFilterParameters_filterAlgorithm_get(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilterParameters *arg1 = (ZVAFilterParameters *) 0 ;
  vaFilterAlgorithm result;
  
  SWIG_check_num_args("ZVAFilterParameters::filterAlgorithm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZVAFilterParameters::filterAlgorithm",1,"ZVAFilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ZVAFilterParameters,0))){
    SWIG_fail_ptr("ZVAFilterParameters_filterAlgorithm_get",1,SWIGTYPE_p_ZVAFilterParameters);
  }
  
  result = (vaFilterAlgorithm) ((arg1)->filterAlgorithm);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZVAFilterParameters_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilterParameters *arg1 = (ZVAFilterParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("ZVAFilterParameters::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZVAFilterParameters::fc",1,"ZVAFilterParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ZVAFilterParameters::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ZVAFilterParameters,0))){
    SWIG_fail_ptr("ZVAFilterParameters_fc_set",1,SWIGTYPE_p_ZVAFilterParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZVAFilterParameters_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilterParameters *arg1 = (ZVAFilterParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("ZVAFilterParameters::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZVAFilterParameters::fc",1,"ZVAFilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ZVAFilterParameters,0))){
    SWIG_fail_ptr("ZVAFilterParameters_fc_get",1,SWIGTYPE_p_ZVAFilterParameters);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZVAFilterParameters_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilterParameters *arg1 = (ZVAFilterParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("ZVAFilterParameters::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZVAFilterParameters::Q",1,"ZVAFilterParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ZVAFilterParameters::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ZVAFilterParameters,0))){
    SWIG_fail_ptr("ZVAFilterParameters_Q_set",1,SWIGTYPE_p_ZVAFilterParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZVAFilterParameters_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilterParameters *arg1 = (ZVAFilterParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("ZVAFilterParameters::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZVAFilterParameters::Q",1,"ZVAFilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ZVAFilterParameters,0))){
    SWIG_fail_ptr("ZVAFilterParameters_Q_get",1,SWIGTYPE_p_ZVAFilterParameters);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZVAFilterParameters_filterOutputGain_dB_set(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilterParameters *arg1 = (ZVAFilterParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("ZVAFilterParameters::filterOutputGain_dB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZVAFilterParameters::filterOutputGain_dB",1,"ZVAFilterParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ZVAFilterParameters::filterOutputGain_dB",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ZVAFilterParameters,0))){
    SWIG_fail_ptr("ZVAFilterParameters_filterOutputGain_dB_set",1,SWIGTYPE_p_ZVAFilterParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->filterOutputGain_dB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZVAFilterParameters_filterOutputGain_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilterParameters *arg1 = (ZVAFilterParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("ZVAFilterParameters::filterOutputGain_dB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZVAFilterParameters::filterOutputGain_dB",1,"ZVAFilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ZVAFilterParameters,0))){
    SWIG_fail_ptr("ZVAFilterParameters_filterOutputGain_dB_get",1,SWIGTYPE_p_ZVAFilterParameters);
  }
  
  result = (DspFloatType) ((arg1)->filterOutputGain_dB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZVAFilterParameters_enableGainComp_set(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilterParameters *arg1 = (ZVAFilterParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ZVAFilterParameters::enableGainComp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZVAFilterParameters::enableGainComp",1,"ZVAFilterParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ZVAFilterParameters::enableGainComp",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ZVAFilterParameters,0))){
    SWIG_fail_ptr("ZVAFilterParameters_enableGainComp_set",1,SWIGTYPE_p_ZVAFilterParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->enableGainComp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZVAFilterParameters_enableGainComp_get(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilterParameters *arg1 = (ZVAFilterParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("ZVAFilterParameters::enableGainComp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZVAFilterParameters::enableGainComp",1,"ZVAFilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ZVAFilterParameters,0))){
    SWIG_fail_ptr("ZVAFilterParameters_enableGainComp_get",1,SWIGTYPE_p_ZVAFilterParameters);
  }
  
  result = (bool) ((arg1)->enableGainComp);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZVAFilterParameters_matchAnalogNyquistLPF_set(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilterParameters *arg1 = (ZVAFilterParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ZVAFilterParameters::matchAnalogNyquistLPF",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZVAFilterParameters::matchAnalogNyquistLPF",1,"ZVAFilterParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ZVAFilterParameters::matchAnalogNyquistLPF",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ZVAFilterParameters,0))){
    SWIG_fail_ptr("ZVAFilterParameters_matchAnalogNyquistLPF_set",1,SWIGTYPE_p_ZVAFilterParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->matchAnalogNyquistLPF = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZVAFilterParameters_matchAnalogNyquistLPF_get(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilterParameters *arg1 = (ZVAFilterParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("ZVAFilterParameters::matchAnalogNyquistLPF",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZVAFilterParameters::matchAnalogNyquistLPF",1,"ZVAFilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ZVAFilterParameters,0))){
    SWIG_fail_ptr("ZVAFilterParameters_matchAnalogNyquistLPF_get",1,SWIGTYPE_p_ZVAFilterParameters);
  }
  
  result = (bool) ((arg1)->matchAnalogNyquistLPF);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZVAFilterParameters_selfOscillate_set(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilterParameters *arg1 = (ZVAFilterParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ZVAFilterParameters::selfOscillate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZVAFilterParameters::selfOscillate",1,"ZVAFilterParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ZVAFilterParameters::selfOscillate",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ZVAFilterParameters,0))){
    SWIG_fail_ptr("ZVAFilterParameters_selfOscillate_set",1,SWIGTYPE_p_ZVAFilterParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->selfOscillate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZVAFilterParameters_selfOscillate_get(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilterParameters *arg1 = (ZVAFilterParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("ZVAFilterParameters::selfOscillate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZVAFilterParameters::selfOscillate",1,"ZVAFilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ZVAFilterParameters,0))){
    SWIG_fail_ptr("ZVAFilterParameters_selfOscillate_get",1,SWIGTYPE_p_ZVAFilterParameters);
  }
  
  result = (bool) ((arg1)->selfOscillate);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZVAFilterParameters_enableNLP_set(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilterParameters *arg1 = (ZVAFilterParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ZVAFilterParameters::enableNLP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZVAFilterParameters::enableNLP",1,"ZVAFilterParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ZVAFilterParameters::enableNLP",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ZVAFilterParameters,0))){
    SWIG_fail_ptr("ZVAFilterParameters_enableNLP_set",1,SWIGTYPE_p_ZVAFilterParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->enableNLP = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZVAFilterParameters_enableNLP_get(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilterParameters *arg1 = (ZVAFilterParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("ZVAFilterParameters::enableNLP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZVAFilterParameters::enableNLP",1,"ZVAFilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ZVAFilterParameters,0))){
    SWIG_fail_ptr("ZVAFilterParameters_enableNLP_get",1,SWIGTYPE_p_ZVAFilterParameters);
  }
  
  result = (bool) ((arg1)->enableNLP);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ZVAFilterParameters(void *obj) {
ZVAFilterParameters *arg1 = (ZVAFilterParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_ZVAFilterParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ZVAFilterParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ZVAFilterParameters_attributes[] = {
    { "filterAlgorithm", _wrap_ZVAFilterParameters_filterAlgorithm_get, _wrap_ZVAFilterParameters_filterAlgorithm_set },
    { "fc", _wrap_ZVAFilterParameters_fc_get, _wrap_ZVAFilterParameters_fc_set },
    { "Q", _wrap_ZVAFilterParameters_Q_get, _wrap_ZVAFilterParameters_Q_set },
    { "filterOutputGain_dB", _wrap_ZVAFilterParameters_filterOutputGain_dB_get, _wrap_ZVAFilterParameters_filterOutputGain_dB_set },
    { "enableGainComp", _wrap_ZVAFilterParameters_enableGainComp_get, _wrap_ZVAFilterParameters_enableGainComp_set },
    { "matchAnalogNyquistLPF", _wrap_ZVAFilterParameters_matchAnalogNyquistLPF_get, _wrap_ZVAFilterParameters_matchAnalogNyquistLPF_set },
    { "selfOscillate", _wrap_ZVAFilterParameters_selfOscillate_get, _wrap_ZVAFilterParameters_selfOscillate_set },
    { "enableNLP", _wrap_ZVAFilterParameters_enableNLP_get, _wrap_ZVAFilterParameters_enableNLP_set },
    {0,0,0}
};
static swig_lua_method swig_ZVAFilterParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_ZVAFilterParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ZVAFilterParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ZVAFilterParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ZVAFilterParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ZVAFilterParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ZVAFilterParameters_Sf_SwigStatic = {
    "ZVAFilterParameters",
    swig_ZVAFilterParameters_Sf_SwigStatic_methods,
    swig_ZVAFilterParameters_Sf_SwigStatic_attributes,
    swig_ZVAFilterParameters_Sf_SwigStatic_constants,
    swig_ZVAFilterParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ZVAFilterParameters_bases[] = {0};
static const char *swig_ZVAFilterParameters_base_names[] = {0};
static swig_lua_class _wrap_class_ZVAFilterParameters = { "ZVAFilterParameters", "ZVAFilterParameters", &SWIGTYPE_p_ZVAFilterParameters,_proxy__wrap_new_ZVAFilterParameters, swig_delete_ZVAFilterParameters, swig_ZVAFilterParameters_methods, swig_ZVAFilterParameters_attributes, &swig_ZVAFilterParameters_Sf_SwigStatic, swig_ZVAFilterParameters_meta, swig_ZVAFilterParameters_bases, swig_ZVAFilterParameters_base_names };

static int _wrap_new_ZVAFilter(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilter *result = 0 ;
  
  SWIG_check_num_args("ZVAFilter::ZVAFilter",0,0)
  result = (ZVAFilter *)new ZVAFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ZVAFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZVAFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilter *arg1 = (ZVAFilter *) 0 ;
  DspFloatType arg2 ;
  bool result;
  
  SWIG_check_num_args("ZVAFilter::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZVAFilter::reset",1,"ZVAFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ZVAFilter::reset",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ZVAFilter,0))){
    SWIG_fail_ptr("ZVAFilter_reset",1,SWIGTYPE_p_ZVAFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZVAFilter_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilter *arg1 = (ZVAFilter *) 0 ;
  ZVAFilterParameters result;
  
  SWIG_check_num_args("ZVAFilter::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZVAFilter::getParameters",1,"ZVAFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ZVAFilter,0))){
    SWIG_fail_ptr("ZVAFilter_getParameters",1,SWIGTYPE_p_ZVAFilter);
  }
  
  result = (arg1)->getParameters();
  {
    ZVAFilterParameters * resultptr = new ZVAFilterParameters((const ZVAFilterParameters &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ZVAFilterParameters,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZVAFilter_setParameters(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilter *arg1 = (ZVAFilter *) 0 ;
  ZVAFilterParameters *arg2 = 0 ;
  
  SWIG_check_num_args("ZVAFilter::setParameters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZVAFilter::setParameters",1,"ZVAFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ZVAFilter::setParameters",2,"ZVAFilterParameters const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ZVAFilter,0))){
    SWIG_fail_ptr("ZVAFilter_setParameters",1,SWIGTYPE_p_ZVAFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ZVAFilterParameters,0))){
    SWIG_fail_ptr("ZVAFilter_setParameters",2,SWIGTYPE_p_ZVAFilterParameters);
  }
  
  (arg1)->setParameters((ZVAFilterParameters const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZVAFilter_canProcessAudioFrame(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilter *arg1 = (ZVAFilter *) 0 ;
  bool result;
  
  SWIG_check_num_args("ZVAFilter::canProcessAudioFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZVAFilter::canProcessAudioFrame",1,"ZVAFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ZVAFilter,0))){
    SWIG_fail_ptr("ZVAFilter_canProcessAudioFrame",1,SWIGTYPE_p_ZVAFilter);
  }
  
  result = (bool)(arg1)->canProcessAudioFrame();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZVAFilter_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilter *arg1 = (ZVAFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("ZVAFilter::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZVAFilter::processAudioSample",1,"ZVAFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ZVAFilter::processAudioSample",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ZVAFilter,0))){
    SWIG_fail_ptr("ZVAFilter_processAudioSample",1,SWIGTYPE_p_ZVAFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZVAFilter_calculateFilterCoeffs(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilter *arg1 = (ZVAFilter *) 0 ;
  
  SWIG_check_num_args("ZVAFilter::calculateFilterCoeffs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZVAFilter::calculateFilterCoeffs",1,"ZVAFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ZVAFilter,0))){
    SWIG_fail_ptr("ZVAFilter_calculateFilterCoeffs",1,SWIGTYPE_p_ZVAFilter);
  }
  
  (arg1)->calculateFilterCoeffs();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZVAFilter_setBeta(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilter *arg1 = (ZVAFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("ZVAFilter::setBeta",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZVAFilter::setBeta",1,"ZVAFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ZVAFilter::setBeta",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ZVAFilter,0))){
    SWIG_fail_ptr("ZVAFilter_setBeta",1,SWIGTYPE_p_ZVAFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setBeta(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZVAFilter_getBeta(lua_State* L) {
  int SWIG_arg = 0;
  ZVAFilter *arg1 = (ZVAFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("ZVAFilter::getBeta",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZVAFilter::getBeta",1,"ZVAFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ZVAFilter,0))){
    SWIG_fail_ptr("ZVAFilter_getBeta",1,SWIGTYPE_p_ZVAFilter);
  }
  
  result = (DspFloatType)(arg1)->getBeta();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ZVAFilter(void *obj) {
ZVAFilter *arg1 = (ZVAFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ZVAFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ZVAFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ZVAFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ZVAFilter_methods[]= {
    { "reset", _wrap_ZVAFilter_reset},
    { "getParameters", _wrap_ZVAFilter_getParameters},
    { "setParameters", _wrap_ZVAFilter_setParameters},
    { "canProcessAudioFrame", _wrap_ZVAFilter_canProcessAudioFrame},
    { "processAudioSample", _wrap_ZVAFilter_processAudioSample},
    { "calculateFilterCoeffs", _wrap_ZVAFilter_calculateFilterCoeffs},
    { "setBeta", _wrap_ZVAFilter_setBeta},
    { "getBeta", _wrap_ZVAFilter_getBeta},
    {0,0}
};
static swig_lua_method swig_ZVAFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ZVAFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ZVAFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ZVAFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ZVAFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ZVAFilter_Sf_SwigStatic = {
    "ZVAFilter",
    swig_ZVAFilter_Sf_SwigStatic_methods,
    swig_ZVAFilter_Sf_SwigStatic_attributes,
    swig_ZVAFilter_Sf_SwigStatic_constants,
    swig_ZVAFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ZVAFilter_bases[] = {0,0};
static const char *swig_ZVAFilter_base_names[] = {"IAudioSignalProcessor *",0};
static swig_lua_class _wrap_class_ZVAFilter = { "ZVAFilter", "ZVAFilter", &SWIGTYPE_p_ZVAFilter,_proxy__wrap_new_ZVAFilter, swig_delete_ZVAFilter, swig_ZVAFilter_methods, swig_ZVAFilter_attributes, &swig_ZVAFilter_Sf_SwigStatic, swig_ZVAFilter_meta, swig_ZVAFilter_bases, swig_ZVAFilter_base_names };

static int _wrap_new_EnvelopeFollowerParameters(lua_State* L) {
  int SWIG_arg = 0;
  EnvelopeFollowerParameters *result = 0 ;
  
  SWIG_check_num_args("EnvelopeFollowerParameters::EnvelopeFollowerParameters",0,0)
  result = (EnvelopeFollowerParameters *)new EnvelopeFollowerParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_EnvelopeFollowerParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeFollowerParameters_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  EnvelopeFollowerParameters *arg1 = (EnvelopeFollowerParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("EnvelopeFollowerParameters::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EnvelopeFollowerParameters::fc",1,"EnvelopeFollowerParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("EnvelopeFollowerParameters::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EnvelopeFollowerParameters,0))){
    SWIG_fail_ptr("EnvelopeFollowerParameters_fc_set",1,SWIGTYPE_p_EnvelopeFollowerParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeFollowerParameters_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  EnvelopeFollowerParameters *arg1 = (EnvelopeFollowerParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("EnvelopeFollowerParameters::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EnvelopeFollowerParameters::fc",1,"EnvelopeFollowerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EnvelopeFollowerParameters,0))){
    SWIG_fail_ptr("EnvelopeFollowerParameters_fc_get",1,SWIGTYPE_p_EnvelopeFollowerParameters);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeFollowerParameters_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  EnvelopeFollowerParameters *arg1 = (EnvelopeFollowerParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("EnvelopeFollowerParameters::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EnvelopeFollowerParameters::Q",1,"EnvelopeFollowerParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("EnvelopeFollowerParameters::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EnvelopeFollowerParameters,0))){
    SWIG_fail_ptr("EnvelopeFollowerParameters_Q_set",1,SWIGTYPE_p_EnvelopeFollowerParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeFollowerParameters_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  EnvelopeFollowerParameters *arg1 = (EnvelopeFollowerParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("EnvelopeFollowerParameters::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EnvelopeFollowerParameters::Q",1,"EnvelopeFollowerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EnvelopeFollowerParameters,0))){
    SWIG_fail_ptr("EnvelopeFollowerParameters_Q_get",1,SWIGTYPE_p_EnvelopeFollowerParameters);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeFollowerParameters_attackTime_mSec_set(lua_State* L) {
  int SWIG_arg = 0;
  EnvelopeFollowerParameters *arg1 = (EnvelopeFollowerParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("EnvelopeFollowerParameters::attackTime_mSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EnvelopeFollowerParameters::attackTime_mSec",1,"EnvelopeFollowerParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("EnvelopeFollowerParameters::attackTime_mSec",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EnvelopeFollowerParameters,0))){
    SWIG_fail_ptr("EnvelopeFollowerParameters_attackTime_mSec_set",1,SWIGTYPE_p_EnvelopeFollowerParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->attackTime_mSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeFollowerParameters_attackTime_mSec_get(lua_State* L) {
  int SWIG_arg = 0;
  EnvelopeFollowerParameters *arg1 = (EnvelopeFollowerParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("EnvelopeFollowerParameters::attackTime_mSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EnvelopeFollowerParameters::attackTime_mSec",1,"EnvelopeFollowerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EnvelopeFollowerParameters,0))){
    SWIG_fail_ptr("EnvelopeFollowerParameters_attackTime_mSec_get",1,SWIGTYPE_p_EnvelopeFollowerParameters);
  }
  
  result = (DspFloatType) ((arg1)->attackTime_mSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeFollowerParameters_releaseTime_mSec_set(lua_State* L) {
  int SWIG_arg = 0;
  EnvelopeFollowerParameters *arg1 = (EnvelopeFollowerParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("EnvelopeFollowerParameters::releaseTime_mSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EnvelopeFollowerParameters::releaseTime_mSec",1,"EnvelopeFollowerParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("EnvelopeFollowerParameters::releaseTime_mSec",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EnvelopeFollowerParameters,0))){
    SWIG_fail_ptr("EnvelopeFollowerParameters_releaseTime_mSec_set",1,SWIGTYPE_p_EnvelopeFollowerParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->releaseTime_mSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeFollowerParameters_releaseTime_mSec_get(lua_State* L) {
  int SWIG_arg = 0;
  EnvelopeFollowerParameters *arg1 = (EnvelopeFollowerParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("EnvelopeFollowerParameters::releaseTime_mSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EnvelopeFollowerParameters::releaseTime_mSec",1,"EnvelopeFollowerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EnvelopeFollowerParameters,0))){
    SWIG_fail_ptr("EnvelopeFollowerParameters_releaseTime_mSec_get",1,SWIGTYPE_p_EnvelopeFollowerParameters);
  }
  
  result = (DspFloatType) ((arg1)->releaseTime_mSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeFollowerParameters_threshold_dB_set(lua_State* L) {
  int SWIG_arg = 0;
  EnvelopeFollowerParameters *arg1 = (EnvelopeFollowerParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("EnvelopeFollowerParameters::threshold_dB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EnvelopeFollowerParameters::threshold_dB",1,"EnvelopeFollowerParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("EnvelopeFollowerParameters::threshold_dB",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EnvelopeFollowerParameters,0))){
    SWIG_fail_ptr("EnvelopeFollowerParameters_threshold_dB_set",1,SWIGTYPE_p_EnvelopeFollowerParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->threshold_dB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeFollowerParameters_threshold_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  EnvelopeFollowerParameters *arg1 = (EnvelopeFollowerParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("EnvelopeFollowerParameters::threshold_dB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EnvelopeFollowerParameters::threshold_dB",1,"EnvelopeFollowerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EnvelopeFollowerParameters,0))){
    SWIG_fail_ptr("EnvelopeFollowerParameters_threshold_dB_get",1,SWIGTYPE_p_EnvelopeFollowerParameters);
  }
  
  result = (DspFloatType) ((arg1)->threshold_dB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeFollowerParameters_sensitivity_set(lua_State* L) {
  int SWIG_arg = 0;
  EnvelopeFollowerParameters *arg1 = (EnvelopeFollowerParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("EnvelopeFollowerParameters::sensitivity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EnvelopeFollowerParameters::sensitivity",1,"EnvelopeFollowerParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("EnvelopeFollowerParameters::sensitivity",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EnvelopeFollowerParameters,0))){
    SWIG_fail_ptr("EnvelopeFollowerParameters_sensitivity_set",1,SWIGTYPE_p_EnvelopeFollowerParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sensitivity = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeFollowerParameters_sensitivity_get(lua_State* L) {
  int SWIG_arg = 0;
  EnvelopeFollowerParameters *arg1 = (EnvelopeFollowerParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("EnvelopeFollowerParameters::sensitivity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EnvelopeFollowerParameters::sensitivity",1,"EnvelopeFollowerParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EnvelopeFollowerParameters,0))){
    SWIG_fail_ptr("EnvelopeFollowerParameters_sensitivity_get",1,SWIGTYPE_p_EnvelopeFollowerParameters);
  }
  
  result = (DspFloatType) ((arg1)->sensitivity);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EnvelopeFollowerParameters(void *obj) {
EnvelopeFollowerParameters *arg1 = (EnvelopeFollowerParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_EnvelopeFollowerParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_EnvelopeFollowerParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_EnvelopeFollowerParameters_attributes[] = {
    { "fc", _wrap_EnvelopeFollowerParameters_fc_get, _wrap_EnvelopeFollowerParameters_fc_set },
    { "Q", _wrap_EnvelopeFollowerParameters_Q_get, _wrap_EnvelopeFollowerParameters_Q_set },
    { "attackTime_mSec", _wrap_EnvelopeFollowerParameters_attackTime_mSec_get, _wrap_EnvelopeFollowerParameters_attackTime_mSec_set },
    { "releaseTime_mSec", _wrap_EnvelopeFollowerParameters_releaseTime_mSec_get, _wrap_EnvelopeFollowerParameters_releaseTime_mSec_set },
    { "threshold_dB", _wrap_EnvelopeFollowerParameters_threshold_dB_get, _wrap_EnvelopeFollowerParameters_threshold_dB_set },
    { "sensitivity", _wrap_EnvelopeFollowerParameters_sensitivity_get, _wrap_EnvelopeFollowerParameters_sensitivity_set },
    {0,0,0}
};
static swig_lua_method swig_EnvelopeFollowerParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_EnvelopeFollowerParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EnvelopeFollowerParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EnvelopeFollowerParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EnvelopeFollowerParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EnvelopeFollowerParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EnvelopeFollowerParameters_Sf_SwigStatic = {
    "EnvelopeFollowerParameters",
    swig_EnvelopeFollowerParameters_Sf_SwigStatic_methods,
    swig_EnvelopeFollowerParameters_Sf_SwigStatic_attributes,
    swig_EnvelopeFollowerParameters_Sf_SwigStatic_constants,
    swig_EnvelopeFollowerParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EnvelopeFollowerParameters_bases[] = {0};
static const char *swig_EnvelopeFollowerParameters_base_names[] = {0};
static swig_lua_class _wrap_class_EnvelopeFollowerParameters = { "EnvelopeFollowerParameters", "EnvelopeFollowerParameters", &SWIGTYPE_p_EnvelopeFollowerParameters,_proxy__wrap_new_EnvelopeFollowerParameters, swig_delete_EnvelopeFollowerParameters, swig_EnvelopeFollowerParameters_methods, swig_EnvelopeFollowerParameters_attributes, &swig_EnvelopeFollowerParameters_Sf_SwigStatic, swig_EnvelopeFollowerParameters_meta, swig_EnvelopeFollowerParameters_bases, swig_EnvelopeFollowerParameters_base_names };

static int _wrap_new_EnvelopeFollower(lua_State* L) {
  int SWIG_arg = 0;
  EnvelopeFollower *result = 0 ;
  
  SWIG_check_num_args("EnvelopeFollower::EnvelopeFollower",0,0)
  result = (EnvelopeFollower *)new EnvelopeFollower();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_EnvelopeFollower,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeFollower_reset(lua_State* L) {
  int SWIG_arg = 0;
  EnvelopeFollower *arg1 = (EnvelopeFollower *) 0 ;
  DspFloatType arg2 ;
  bool result;
  
  SWIG_check_num_args("EnvelopeFollower::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EnvelopeFollower::reset",1,"EnvelopeFollower *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("EnvelopeFollower::reset",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EnvelopeFollower,0))){
    SWIG_fail_ptr("EnvelopeFollower_reset",1,SWIGTYPE_p_EnvelopeFollower);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeFollower_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  EnvelopeFollower *arg1 = (EnvelopeFollower *) 0 ;
  EnvelopeFollowerParameters result;
  
  SWIG_check_num_args("EnvelopeFollower::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EnvelopeFollower::getParameters",1,"EnvelopeFollower *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EnvelopeFollower,0))){
    SWIG_fail_ptr("EnvelopeFollower_getParameters",1,SWIGTYPE_p_EnvelopeFollower);
  }
  
  result = (arg1)->getParameters();
  {
    EnvelopeFollowerParameters * resultptr = new EnvelopeFollowerParameters((const EnvelopeFollowerParameters &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_EnvelopeFollowerParameters,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeFollower_setParameters(lua_State* L) {
  int SWIG_arg = 0;
  EnvelopeFollower *arg1 = (EnvelopeFollower *) 0 ;
  EnvelopeFollowerParameters *arg2 = 0 ;
  
  SWIG_check_num_args("EnvelopeFollower::setParameters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EnvelopeFollower::setParameters",1,"EnvelopeFollower *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("EnvelopeFollower::setParameters",2,"EnvelopeFollowerParameters const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EnvelopeFollower,0))){
    SWIG_fail_ptr("EnvelopeFollower_setParameters",1,SWIGTYPE_p_EnvelopeFollower);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_EnvelopeFollowerParameters,0))){
    SWIG_fail_ptr("EnvelopeFollower_setParameters",2,SWIGTYPE_p_EnvelopeFollowerParameters);
  }
  
  (arg1)->setParameters((EnvelopeFollowerParameters const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeFollower_canProcessAudioFrame(lua_State* L) {
  int SWIG_arg = 0;
  EnvelopeFollower *arg1 = (EnvelopeFollower *) 0 ;
  bool result;
  
  SWIG_check_num_args("EnvelopeFollower::canProcessAudioFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EnvelopeFollower::canProcessAudioFrame",1,"EnvelopeFollower *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EnvelopeFollower,0))){
    SWIG_fail_ptr("EnvelopeFollower_canProcessAudioFrame",1,SWIGTYPE_p_EnvelopeFollower);
  }
  
  result = (bool)(arg1)->canProcessAudioFrame();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvelopeFollower_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  EnvelopeFollower *arg1 = (EnvelopeFollower *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("EnvelopeFollower::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EnvelopeFollower::processAudioSample",1,"EnvelopeFollower *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("EnvelopeFollower::processAudioSample",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EnvelopeFollower,0))){
    SWIG_fail_ptr("EnvelopeFollower_processAudioSample",1,SWIGTYPE_p_EnvelopeFollower);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EnvelopeFollower(void *obj) {
EnvelopeFollower *arg1 = (EnvelopeFollower *) obj;
delete arg1;
}
static int _proxy__wrap_new_EnvelopeFollower(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_EnvelopeFollower);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_EnvelopeFollower_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EnvelopeFollower_methods[]= {
    { "reset", _wrap_EnvelopeFollower_reset},
    { "getParameters", _wrap_EnvelopeFollower_getParameters},
    { "setParameters", _wrap_EnvelopeFollower_setParameters},
    { "canProcessAudioFrame", _wrap_EnvelopeFollower_canProcessAudioFrame},
    { "processAudioSample", _wrap_EnvelopeFollower_processAudioSample},
    {0,0}
};
static swig_lua_method swig_EnvelopeFollower_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EnvelopeFollower_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EnvelopeFollower_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EnvelopeFollower_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EnvelopeFollower_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EnvelopeFollower_Sf_SwigStatic = {
    "EnvelopeFollower",
    swig_EnvelopeFollower_Sf_SwigStatic_methods,
    swig_EnvelopeFollower_Sf_SwigStatic_attributes,
    swig_EnvelopeFollower_Sf_SwigStatic_constants,
    swig_EnvelopeFollower_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EnvelopeFollower_bases[] = {0,0};
static const char *swig_EnvelopeFollower_base_names[] = {"IAudioSignalProcessor *",0};
static swig_lua_class _wrap_class_EnvelopeFollower = { "EnvelopeFollower", "EnvelopeFollower", &SWIGTYPE_p_EnvelopeFollower,_proxy__wrap_new_EnvelopeFollower, swig_delete_EnvelopeFollower, swig_EnvelopeFollower_methods, swig_EnvelopeFollower_attributes, &swig_EnvelopeFollower_Sf_SwigStatic, swig_EnvelopeFollower_meta, swig_EnvelopeFollower_bases, swig_EnvelopeFollower_base_names };

static int _wrap_new_TwoBandShelvingFilterParameters(lua_State* L) {
  int SWIG_arg = 0;
  TwoBandShelvingFilterParameters *result = 0 ;
  
  SWIG_check_num_args("TwoBandShelvingFilterParameters::TwoBandShelvingFilterParameters",0,0)
  result = (TwoBandShelvingFilterParameters *)new TwoBandShelvingFilterParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TwoBandShelvingFilterParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoBandShelvingFilterParameters_lowShelf_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  TwoBandShelvingFilterParameters *arg1 = (TwoBandShelvingFilterParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("TwoBandShelvingFilterParameters::lowShelf_fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TwoBandShelvingFilterParameters::lowShelf_fc",1,"TwoBandShelvingFilterParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TwoBandShelvingFilterParameters::lowShelf_fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TwoBandShelvingFilterParameters,0))){
    SWIG_fail_ptr("TwoBandShelvingFilterParameters_lowShelf_fc_set",1,SWIGTYPE_p_TwoBandShelvingFilterParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->lowShelf_fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoBandShelvingFilterParameters_lowShelf_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  TwoBandShelvingFilterParameters *arg1 = (TwoBandShelvingFilterParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("TwoBandShelvingFilterParameters::lowShelf_fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TwoBandShelvingFilterParameters::lowShelf_fc",1,"TwoBandShelvingFilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TwoBandShelvingFilterParameters,0))){
    SWIG_fail_ptr("TwoBandShelvingFilterParameters_lowShelf_fc_get",1,SWIGTYPE_p_TwoBandShelvingFilterParameters);
  }
  
  result = (DspFloatType) ((arg1)->lowShelf_fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoBandShelvingFilterParameters_lowShelfBoostCut_dB_set(lua_State* L) {
  int SWIG_arg = 0;
  TwoBandShelvingFilterParameters *arg1 = (TwoBandShelvingFilterParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("TwoBandShelvingFilterParameters::lowShelfBoostCut_dB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TwoBandShelvingFilterParameters::lowShelfBoostCut_dB",1,"TwoBandShelvingFilterParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TwoBandShelvingFilterParameters::lowShelfBoostCut_dB",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TwoBandShelvingFilterParameters,0))){
    SWIG_fail_ptr("TwoBandShelvingFilterParameters_lowShelfBoostCut_dB_set",1,SWIGTYPE_p_TwoBandShelvingFilterParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->lowShelfBoostCut_dB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoBandShelvingFilterParameters_lowShelfBoostCut_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  TwoBandShelvingFilterParameters *arg1 = (TwoBandShelvingFilterParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("TwoBandShelvingFilterParameters::lowShelfBoostCut_dB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TwoBandShelvingFilterParameters::lowShelfBoostCut_dB",1,"TwoBandShelvingFilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TwoBandShelvingFilterParameters,0))){
    SWIG_fail_ptr("TwoBandShelvingFilterParameters_lowShelfBoostCut_dB_get",1,SWIGTYPE_p_TwoBandShelvingFilterParameters);
  }
  
  result = (DspFloatType) ((arg1)->lowShelfBoostCut_dB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoBandShelvingFilterParameters_highShelf_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  TwoBandShelvingFilterParameters *arg1 = (TwoBandShelvingFilterParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("TwoBandShelvingFilterParameters::highShelf_fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TwoBandShelvingFilterParameters::highShelf_fc",1,"TwoBandShelvingFilterParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TwoBandShelvingFilterParameters::highShelf_fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TwoBandShelvingFilterParameters,0))){
    SWIG_fail_ptr("TwoBandShelvingFilterParameters_highShelf_fc_set",1,SWIGTYPE_p_TwoBandShelvingFilterParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->highShelf_fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoBandShelvingFilterParameters_highShelf_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  TwoBandShelvingFilterParameters *arg1 = (TwoBandShelvingFilterParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("TwoBandShelvingFilterParameters::highShelf_fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TwoBandShelvingFilterParameters::highShelf_fc",1,"TwoBandShelvingFilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TwoBandShelvingFilterParameters,0))){
    SWIG_fail_ptr("TwoBandShelvingFilterParameters_highShelf_fc_get",1,SWIGTYPE_p_TwoBandShelvingFilterParameters);
  }
  
  result = (DspFloatType) ((arg1)->highShelf_fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoBandShelvingFilterParameters_highShelfBoostCut_dB_set(lua_State* L) {
  int SWIG_arg = 0;
  TwoBandShelvingFilterParameters *arg1 = (TwoBandShelvingFilterParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("TwoBandShelvingFilterParameters::highShelfBoostCut_dB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TwoBandShelvingFilterParameters::highShelfBoostCut_dB",1,"TwoBandShelvingFilterParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TwoBandShelvingFilterParameters::highShelfBoostCut_dB",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TwoBandShelvingFilterParameters,0))){
    SWIG_fail_ptr("TwoBandShelvingFilterParameters_highShelfBoostCut_dB_set",1,SWIGTYPE_p_TwoBandShelvingFilterParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->highShelfBoostCut_dB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoBandShelvingFilterParameters_highShelfBoostCut_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  TwoBandShelvingFilterParameters *arg1 = (TwoBandShelvingFilterParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("TwoBandShelvingFilterParameters::highShelfBoostCut_dB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TwoBandShelvingFilterParameters::highShelfBoostCut_dB",1,"TwoBandShelvingFilterParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TwoBandShelvingFilterParameters,0))){
    SWIG_fail_ptr("TwoBandShelvingFilterParameters_highShelfBoostCut_dB_get",1,SWIGTYPE_p_TwoBandShelvingFilterParameters);
  }
  
  result = (DspFloatType) ((arg1)->highShelfBoostCut_dB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TwoBandShelvingFilterParameters(void *obj) {
TwoBandShelvingFilterParameters *arg1 = (TwoBandShelvingFilterParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_TwoBandShelvingFilterParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TwoBandShelvingFilterParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TwoBandShelvingFilterParameters_attributes[] = {
    { "lowShelf_fc", _wrap_TwoBandShelvingFilterParameters_lowShelf_fc_get, _wrap_TwoBandShelvingFilterParameters_lowShelf_fc_set },
    { "lowShelfBoostCut_dB", _wrap_TwoBandShelvingFilterParameters_lowShelfBoostCut_dB_get, _wrap_TwoBandShelvingFilterParameters_lowShelfBoostCut_dB_set },
    { "highShelf_fc", _wrap_TwoBandShelvingFilterParameters_highShelf_fc_get, _wrap_TwoBandShelvingFilterParameters_highShelf_fc_set },
    { "highShelfBoostCut_dB", _wrap_TwoBandShelvingFilterParameters_highShelfBoostCut_dB_get, _wrap_TwoBandShelvingFilterParameters_highShelfBoostCut_dB_set },
    {0,0,0}
};
static swig_lua_method swig_TwoBandShelvingFilterParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_TwoBandShelvingFilterParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TwoBandShelvingFilterParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TwoBandShelvingFilterParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TwoBandShelvingFilterParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TwoBandShelvingFilterParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TwoBandShelvingFilterParameters_Sf_SwigStatic = {
    "TwoBandShelvingFilterParameters",
    swig_TwoBandShelvingFilterParameters_Sf_SwigStatic_methods,
    swig_TwoBandShelvingFilterParameters_Sf_SwigStatic_attributes,
    swig_TwoBandShelvingFilterParameters_Sf_SwigStatic_constants,
    swig_TwoBandShelvingFilterParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TwoBandShelvingFilterParameters_bases[] = {0};
static const char *swig_TwoBandShelvingFilterParameters_base_names[] = {0};
static swig_lua_class _wrap_class_TwoBandShelvingFilterParameters = { "TwoBandShelvingFilterParameters", "TwoBandShelvingFilterParameters", &SWIGTYPE_p_TwoBandShelvingFilterParameters,_proxy__wrap_new_TwoBandShelvingFilterParameters, swig_delete_TwoBandShelvingFilterParameters, swig_TwoBandShelvingFilterParameters_methods, swig_TwoBandShelvingFilterParameters_attributes, &swig_TwoBandShelvingFilterParameters_Sf_SwigStatic, swig_TwoBandShelvingFilterParameters_meta, swig_TwoBandShelvingFilterParameters_bases, swig_TwoBandShelvingFilterParameters_base_names };

static int _wrap_new_TwoBandShelvingFilter(lua_State* L) {
  int SWIG_arg = 0;
  TwoBandShelvingFilter *result = 0 ;
  
  SWIG_check_num_args("TwoBandShelvingFilter::TwoBandShelvingFilter",0,0)
  result = (TwoBandShelvingFilter *)new TwoBandShelvingFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TwoBandShelvingFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoBandShelvingFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  TwoBandShelvingFilter *arg1 = (TwoBandShelvingFilter *) 0 ;
  DspFloatType arg2 ;
  bool result;
  
  SWIG_check_num_args("TwoBandShelvingFilter::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TwoBandShelvingFilter::reset",1,"TwoBandShelvingFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TwoBandShelvingFilter::reset",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TwoBandShelvingFilter,0))){
    SWIG_fail_ptr("TwoBandShelvingFilter_reset",1,SWIGTYPE_p_TwoBandShelvingFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoBandShelvingFilter_canProcessAudioFrame(lua_State* L) {
  int SWIG_arg = 0;
  TwoBandShelvingFilter *arg1 = (TwoBandShelvingFilter *) 0 ;
  bool result;
  
  SWIG_check_num_args("TwoBandShelvingFilter::canProcessAudioFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TwoBandShelvingFilter::canProcessAudioFrame",1,"TwoBandShelvingFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TwoBandShelvingFilter,0))){
    SWIG_fail_ptr("TwoBandShelvingFilter_canProcessAudioFrame",1,SWIGTYPE_p_TwoBandShelvingFilter);
  }
  
  result = (bool)(arg1)->canProcessAudioFrame();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoBandShelvingFilter_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  TwoBandShelvingFilter *arg1 = (TwoBandShelvingFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("TwoBandShelvingFilter::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TwoBandShelvingFilter::processAudioSample",1,"TwoBandShelvingFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TwoBandShelvingFilter::processAudioSample",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TwoBandShelvingFilter,0))){
    SWIG_fail_ptr("TwoBandShelvingFilter_processAudioSample",1,SWIGTYPE_p_TwoBandShelvingFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoBandShelvingFilter_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  TwoBandShelvingFilter *arg1 = (TwoBandShelvingFilter *) 0 ;
  TwoBandShelvingFilterParameters result;
  
  SWIG_check_num_args("TwoBandShelvingFilter::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TwoBandShelvingFilter::getParameters",1,"TwoBandShelvingFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TwoBandShelvingFilter,0))){
    SWIG_fail_ptr("TwoBandShelvingFilter_getParameters",1,SWIGTYPE_p_TwoBandShelvingFilter);
  }
  
  result = (arg1)->getParameters();
  {
    TwoBandShelvingFilterParameters * resultptr = new TwoBandShelvingFilterParameters((const TwoBandShelvingFilterParameters &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TwoBandShelvingFilterParameters,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoBandShelvingFilter_setParameters(lua_State* L) {
  int SWIG_arg = 0;
  TwoBandShelvingFilter *arg1 = (TwoBandShelvingFilter *) 0 ;
  TwoBandShelvingFilterParameters *arg2 = 0 ;
  
  SWIG_check_num_args("TwoBandShelvingFilter::setParameters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TwoBandShelvingFilter::setParameters",1,"TwoBandShelvingFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TwoBandShelvingFilter::setParameters",2,"TwoBandShelvingFilterParameters const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TwoBandShelvingFilter,0))){
    SWIG_fail_ptr("TwoBandShelvingFilter_setParameters",1,SWIGTYPE_p_TwoBandShelvingFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TwoBandShelvingFilterParameters,0))){
    SWIG_fail_ptr("TwoBandShelvingFilter_setParameters",2,SWIGTYPE_p_TwoBandShelvingFilterParameters);
  }
  
  (arg1)->setParameters((TwoBandShelvingFilterParameters const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TwoBandShelvingFilter(void *obj) {
TwoBandShelvingFilter *arg1 = (TwoBandShelvingFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_TwoBandShelvingFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TwoBandShelvingFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TwoBandShelvingFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TwoBandShelvingFilter_methods[]= {
    { "reset", _wrap_TwoBandShelvingFilter_reset},
    { "canProcessAudioFrame", _wrap_TwoBandShelvingFilter_canProcessAudioFrame},
    { "processAudioSample", _wrap_TwoBandShelvingFilter_processAudioSample},
    { "getParameters", _wrap_TwoBandShelvingFilter_getParameters},
    { "setParameters", _wrap_TwoBandShelvingFilter_setParameters},
    {0,0}
};
static swig_lua_method swig_TwoBandShelvingFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TwoBandShelvingFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TwoBandShelvingFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TwoBandShelvingFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TwoBandShelvingFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TwoBandShelvingFilter_Sf_SwigStatic = {
    "TwoBandShelvingFilter",
    swig_TwoBandShelvingFilter_Sf_SwigStatic_methods,
    swig_TwoBandShelvingFilter_Sf_SwigStatic_attributes,
    swig_TwoBandShelvingFilter_Sf_SwigStatic_constants,
    swig_TwoBandShelvingFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TwoBandShelvingFilter_bases[] = {0,0};
static const char *swig_TwoBandShelvingFilter_base_names[] = {"IAudioSignalProcessor *",0};
static swig_lua_class _wrap_class_TwoBandShelvingFilter = { "TwoBandShelvingFilter", "TwoBandShelvingFilter", &SWIGTYPE_p_TwoBandShelvingFilter,_proxy__wrap_new_TwoBandShelvingFilter, swig_delete_TwoBandShelvingFilter, swig_TwoBandShelvingFilter_methods, swig_TwoBandShelvingFilter_attributes, &swig_TwoBandShelvingFilter_Sf_SwigStatic, swig_TwoBandShelvingFilter_meta, swig_TwoBandShelvingFilter_bases, swig_TwoBandShelvingFilter_base_names };

static int _wrap_new_TriodeClassAParameters(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassAParameters *result = 0 ;
  
  SWIG_check_num_args("TriodeClassAParameters::TriodeClassAParameters",0,0)
  result = (TriodeClassAParameters *)new TriodeClassAParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TriodeClassAParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriodeClassAParameters_waveshaper_set(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassAParameters *arg1 = (TriodeClassAParameters *) 0 ;
  distortionModel arg2 ;
  
  SWIG_check_num_args("TriodeClassAParameters::waveshaper",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriodeClassAParameters::waveshaper",1,"TriodeClassAParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TriodeClassAParameters::waveshaper",2,"distortionModel");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriodeClassAParameters,0))){
    SWIG_fail_ptr("TriodeClassAParameters_waveshaper_set",1,SWIGTYPE_p_TriodeClassAParameters);
  }
  
  arg2 = (distortionModel)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->waveshaper = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriodeClassAParameters_waveshaper_get(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassAParameters *arg1 = (TriodeClassAParameters *) 0 ;
  distortionModel result;
  
  SWIG_check_num_args("TriodeClassAParameters::waveshaper",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriodeClassAParameters::waveshaper",1,"TriodeClassAParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriodeClassAParameters,0))){
    SWIG_fail_ptr("TriodeClassAParameters_waveshaper_get",1,SWIGTYPE_p_TriodeClassAParameters);
  }
  
  result = (distortionModel) ((arg1)->waveshaper);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriodeClassAParameters_saturation_set(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassAParameters *arg1 = (TriodeClassAParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("TriodeClassAParameters::saturation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriodeClassAParameters::saturation",1,"TriodeClassAParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TriodeClassAParameters::saturation",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriodeClassAParameters,0))){
    SWIG_fail_ptr("TriodeClassAParameters_saturation_set",1,SWIGTYPE_p_TriodeClassAParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->saturation = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriodeClassAParameters_saturation_get(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassAParameters *arg1 = (TriodeClassAParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("TriodeClassAParameters::saturation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriodeClassAParameters::saturation",1,"TriodeClassAParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriodeClassAParameters,0))){
    SWIG_fail_ptr("TriodeClassAParameters_saturation_get",1,SWIGTYPE_p_TriodeClassAParameters);
  }
  
  result = (DspFloatType) ((arg1)->saturation);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriodeClassAParameters_asymmetry_set(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassAParameters *arg1 = (TriodeClassAParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("TriodeClassAParameters::asymmetry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriodeClassAParameters::asymmetry",1,"TriodeClassAParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TriodeClassAParameters::asymmetry",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriodeClassAParameters,0))){
    SWIG_fail_ptr("TriodeClassAParameters_asymmetry_set",1,SWIGTYPE_p_TriodeClassAParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->asymmetry = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriodeClassAParameters_asymmetry_get(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassAParameters *arg1 = (TriodeClassAParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("TriodeClassAParameters::asymmetry",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriodeClassAParameters::asymmetry",1,"TriodeClassAParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriodeClassAParameters,0))){
    SWIG_fail_ptr("TriodeClassAParameters_asymmetry_get",1,SWIGTYPE_p_TriodeClassAParameters);
  }
  
  result = (DspFloatType) ((arg1)->asymmetry);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriodeClassAParameters_outputGain_set(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassAParameters *arg1 = (TriodeClassAParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("TriodeClassAParameters::outputGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriodeClassAParameters::outputGain",1,"TriodeClassAParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TriodeClassAParameters::outputGain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriodeClassAParameters,0))){
    SWIG_fail_ptr("TriodeClassAParameters_outputGain_set",1,SWIGTYPE_p_TriodeClassAParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->outputGain = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriodeClassAParameters_outputGain_get(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassAParameters *arg1 = (TriodeClassAParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("TriodeClassAParameters::outputGain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriodeClassAParameters::outputGain",1,"TriodeClassAParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriodeClassAParameters,0))){
    SWIG_fail_ptr("TriodeClassAParameters_outputGain_get",1,SWIGTYPE_p_TriodeClassAParameters);
  }
  
  result = (DspFloatType) ((arg1)->outputGain);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriodeClassAParameters_invertOutput_set(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassAParameters *arg1 = (TriodeClassAParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("TriodeClassAParameters::invertOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriodeClassAParameters::invertOutput",1,"TriodeClassAParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("TriodeClassAParameters::invertOutput",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriodeClassAParameters,0))){
    SWIG_fail_ptr("TriodeClassAParameters_invertOutput_set",1,SWIGTYPE_p_TriodeClassAParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->invertOutput = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriodeClassAParameters_invertOutput_get(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassAParameters *arg1 = (TriodeClassAParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("TriodeClassAParameters::invertOutput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriodeClassAParameters::invertOutput",1,"TriodeClassAParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriodeClassAParameters,0))){
    SWIG_fail_ptr("TriodeClassAParameters_invertOutput_get",1,SWIGTYPE_p_TriodeClassAParameters);
  }
  
  result = (bool) ((arg1)->invertOutput);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriodeClassAParameters_enableHPF_set(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassAParameters *arg1 = (TriodeClassAParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("TriodeClassAParameters::enableHPF",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriodeClassAParameters::enableHPF",1,"TriodeClassAParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("TriodeClassAParameters::enableHPF",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriodeClassAParameters,0))){
    SWIG_fail_ptr("TriodeClassAParameters_enableHPF_set",1,SWIGTYPE_p_TriodeClassAParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->enableHPF = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriodeClassAParameters_enableHPF_get(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassAParameters *arg1 = (TriodeClassAParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("TriodeClassAParameters::enableHPF",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriodeClassAParameters::enableHPF",1,"TriodeClassAParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriodeClassAParameters,0))){
    SWIG_fail_ptr("TriodeClassAParameters_enableHPF_get",1,SWIGTYPE_p_TriodeClassAParameters);
  }
  
  result = (bool) ((arg1)->enableHPF);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriodeClassAParameters_enableLSF_set(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassAParameters *arg1 = (TriodeClassAParameters *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("TriodeClassAParameters::enableLSF",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriodeClassAParameters::enableLSF",1,"TriodeClassAParameters *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("TriodeClassAParameters::enableLSF",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriodeClassAParameters,0))){
    SWIG_fail_ptr("TriodeClassAParameters_enableLSF_set",1,SWIGTYPE_p_TriodeClassAParameters);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->enableLSF = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriodeClassAParameters_enableLSF_get(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassAParameters *arg1 = (TriodeClassAParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("TriodeClassAParameters::enableLSF",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriodeClassAParameters::enableLSF",1,"TriodeClassAParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriodeClassAParameters,0))){
    SWIG_fail_ptr("TriodeClassAParameters_enableLSF_get",1,SWIGTYPE_p_TriodeClassAParameters);
  }
  
  result = (bool) ((arg1)->enableLSF);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriodeClassAParameters_hpf_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassAParameters *arg1 = (TriodeClassAParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("TriodeClassAParameters::hpf_Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriodeClassAParameters::hpf_Fc",1,"TriodeClassAParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TriodeClassAParameters::hpf_Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriodeClassAParameters,0))){
    SWIG_fail_ptr("TriodeClassAParameters_hpf_Fc_set",1,SWIGTYPE_p_TriodeClassAParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->hpf_Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriodeClassAParameters_hpf_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassAParameters *arg1 = (TriodeClassAParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("TriodeClassAParameters::hpf_Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriodeClassAParameters::hpf_Fc",1,"TriodeClassAParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriodeClassAParameters,0))){
    SWIG_fail_ptr("TriodeClassAParameters_hpf_Fc_get",1,SWIGTYPE_p_TriodeClassAParameters);
  }
  
  result = (DspFloatType) ((arg1)->hpf_Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriodeClassAParameters_lsf_Fshelf_set(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassAParameters *arg1 = (TriodeClassAParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("TriodeClassAParameters::lsf_Fshelf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriodeClassAParameters::lsf_Fshelf",1,"TriodeClassAParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TriodeClassAParameters::lsf_Fshelf",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriodeClassAParameters,0))){
    SWIG_fail_ptr("TriodeClassAParameters_lsf_Fshelf_set",1,SWIGTYPE_p_TriodeClassAParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->lsf_Fshelf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriodeClassAParameters_lsf_Fshelf_get(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassAParameters *arg1 = (TriodeClassAParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("TriodeClassAParameters::lsf_Fshelf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriodeClassAParameters::lsf_Fshelf",1,"TriodeClassAParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriodeClassAParameters,0))){
    SWIG_fail_ptr("TriodeClassAParameters_lsf_Fshelf_get",1,SWIGTYPE_p_TriodeClassAParameters);
  }
  
  result = (DspFloatType) ((arg1)->lsf_Fshelf);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriodeClassAParameters_lsf_BoostCut_dB_set(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassAParameters *arg1 = (TriodeClassAParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("TriodeClassAParameters::lsf_BoostCut_dB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriodeClassAParameters::lsf_BoostCut_dB",1,"TriodeClassAParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TriodeClassAParameters::lsf_BoostCut_dB",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriodeClassAParameters,0))){
    SWIG_fail_ptr("TriodeClassAParameters_lsf_BoostCut_dB_set",1,SWIGTYPE_p_TriodeClassAParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->lsf_BoostCut_dB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriodeClassAParameters_lsf_BoostCut_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassAParameters *arg1 = (TriodeClassAParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("TriodeClassAParameters::lsf_BoostCut_dB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriodeClassAParameters::lsf_BoostCut_dB",1,"TriodeClassAParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriodeClassAParameters,0))){
    SWIG_fail_ptr("TriodeClassAParameters_lsf_BoostCut_dB_get",1,SWIGTYPE_p_TriodeClassAParameters);
  }
  
  result = (DspFloatType) ((arg1)->lsf_BoostCut_dB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TriodeClassAParameters(void *obj) {
TriodeClassAParameters *arg1 = (TriodeClassAParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_TriodeClassAParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TriodeClassAParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TriodeClassAParameters_attributes[] = {
    { "waveshaper", _wrap_TriodeClassAParameters_waveshaper_get, _wrap_TriodeClassAParameters_waveshaper_set },
    { "saturation", _wrap_TriodeClassAParameters_saturation_get, _wrap_TriodeClassAParameters_saturation_set },
    { "asymmetry", _wrap_TriodeClassAParameters_asymmetry_get, _wrap_TriodeClassAParameters_asymmetry_set },
    { "outputGain", _wrap_TriodeClassAParameters_outputGain_get, _wrap_TriodeClassAParameters_outputGain_set },
    { "invertOutput", _wrap_TriodeClassAParameters_invertOutput_get, _wrap_TriodeClassAParameters_invertOutput_set },
    { "enableHPF", _wrap_TriodeClassAParameters_enableHPF_get, _wrap_TriodeClassAParameters_enableHPF_set },
    { "enableLSF", _wrap_TriodeClassAParameters_enableLSF_get, _wrap_TriodeClassAParameters_enableLSF_set },
    { "hpf_Fc", _wrap_TriodeClassAParameters_hpf_Fc_get, _wrap_TriodeClassAParameters_hpf_Fc_set },
    { "lsf_Fshelf", _wrap_TriodeClassAParameters_lsf_Fshelf_get, _wrap_TriodeClassAParameters_lsf_Fshelf_set },
    { "lsf_BoostCut_dB", _wrap_TriodeClassAParameters_lsf_BoostCut_dB_get, _wrap_TriodeClassAParameters_lsf_BoostCut_dB_set },
    {0,0,0}
};
static swig_lua_method swig_TriodeClassAParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_TriodeClassAParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TriodeClassAParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TriodeClassAParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TriodeClassAParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TriodeClassAParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TriodeClassAParameters_Sf_SwigStatic = {
    "TriodeClassAParameters",
    swig_TriodeClassAParameters_Sf_SwigStatic_methods,
    swig_TriodeClassAParameters_Sf_SwigStatic_attributes,
    swig_TriodeClassAParameters_Sf_SwigStatic_constants,
    swig_TriodeClassAParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TriodeClassAParameters_bases[] = {0};
static const char *swig_TriodeClassAParameters_base_names[] = {0};
static swig_lua_class _wrap_class_TriodeClassAParameters = { "TriodeClassAParameters", "TriodeClassAParameters", &SWIGTYPE_p_TriodeClassAParameters,_proxy__wrap_new_TriodeClassAParameters, swig_delete_TriodeClassAParameters, swig_TriodeClassAParameters_methods, swig_TriodeClassAParameters_attributes, &swig_TriodeClassAParameters_Sf_SwigStatic, swig_TriodeClassAParameters_meta, swig_TriodeClassAParameters_bases, swig_TriodeClassAParameters_base_names };

static int _wrap_new_TriodeClassA(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassA *result = 0 ;
  
  SWIG_check_num_args("TriodeClassA::TriodeClassA",0,0)
  result = (TriodeClassA *)new TriodeClassA();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TriodeClassA,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriodeClassA_reset(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassA *arg1 = (TriodeClassA *) 0 ;
  DspFloatType arg2 ;
  bool result;
  
  SWIG_check_num_args("TriodeClassA::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriodeClassA::reset",1,"TriodeClassA *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TriodeClassA::reset",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriodeClassA,0))){
    SWIG_fail_ptr("TriodeClassA_reset",1,SWIGTYPE_p_TriodeClassA);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriodeClassA_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassA *arg1 = (TriodeClassA *) 0 ;
  TriodeClassAParameters result;
  
  SWIG_check_num_args("TriodeClassA::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriodeClassA::getParameters",1,"TriodeClassA *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriodeClassA,0))){
    SWIG_fail_ptr("TriodeClassA_getParameters",1,SWIGTYPE_p_TriodeClassA);
  }
  
  result = (arg1)->getParameters();
  {
    TriodeClassAParameters * resultptr = new TriodeClassAParameters((const TriodeClassAParameters &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TriodeClassAParameters,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriodeClassA_setParameters(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassA *arg1 = (TriodeClassA *) 0 ;
  TriodeClassAParameters *arg2 = 0 ;
  
  SWIG_check_num_args("TriodeClassA::setParameters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriodeClassA::setParameters",1,"TriodeClassA *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TriodeClassA::setParameters",2,"TriodeClassAParameters const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriodeClassA,0))){
    SWIG_fail_ptr("TriodeClassA_setParameters",1,SWIGTYPE_p_TriodeClassA);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TriodeClassAParameters,0))){
    SWIG_fail_ptr("TriodeClassA_setParameters",2,SWIGTYPE_p_TriodeClassAParameters);
  }
  
  (arg1)->setParameters((TriodeClassAParameters const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriodeClassA_canProcessAudioFrame(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassA *arg1 = (TriodeClassA *) 0 ;
  bool result;
  
  SWIG_check_num_args("TriodeClassA::canProcessAudioFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriodeClassA::canProcessAudioFrame",1,"TriodeClassA *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriodeClassA,0))){
    SWIG_fail_ptr("TriodeClassA_canProcessAudioFrame",1,SWIGTYPE_p_TriodeClassA);
  }
  
  result = (bool)(arg1)->canProcessAudioFrame();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriodeClassA_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  TriodeClassA *arg1 = (TriodeClassA *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("TriodeClassA::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriodeClassA::processAudioSample",1,"TriodeClassA *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TriodeClassA::processAudioSample",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriodeClassA,0))){
    SWIG_fail_ptr("TriodeClassA_processAudioSample",1,SWIGTYPE_p_TriodeClassA);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TriodeClassA(void *obj) {
TriodeClassA *arg1 = (TriodeClassA *) obj;
delete arg1;
}
static int _proxy__wrap_new_TriodeClassA(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TriodeClassA);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TriodeClassA_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TriodeClassA_methods[]= {
    { "reset", _wrap_TriodeClassA_reset},
    { "getParameters", _wrap_TriodeClassA_getParameters},
    { "setParameters", _wrap_TriodeClassA_setParameters},
    { "canProcessAudioFrame", _wrap_TriodeClassA_canProcessAudioFrame},
    { "processAudioSample", _wrap_TriodeClassA_processAudioSample},
    {0,0}
};
static swig_lua_method swig_TriodeClassA_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TriodeClassA_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TriodeClassA_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TriodeClassA_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TriodeClassA_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TriodeClassA_Sf_SwigStatic = {
    "TriodeClassA",
    swig_TriodeClassA_Sf_SwigStatic_methods,
    swig_TriodeClassA_Sf_SwigStatic_attributes,
    swig_TriodeClassA_Sf_SwigStatic_constants,
    swig_TriodeClassA_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TriodeClassA_bases[] = {0,0};
static const char *swig_TriodeClassA_base_names[] = {"IAudioSignalProcessor *",0};
static swig_lua_class _wrap_class_TriodeClassA = { "TriodeClassA", "TriodeClassA", &SWIGTYPE_p_TriodeClassA,_proxy__wrap_new_TriodeClassA, swig_delete_TriodeClassA, swig_TriodeClassA_methods, swig_TriodeClassA_attributes, &swig_TriodeClassA_Sf_SwigStatic, swig_TriodeClassA_meta, swig_TriodeClassA_bases, swig_TriodeClassA_base_names };

static int _wrap_NUM_TUBES_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("NUM_TUBES",0,0)
  result = (unsigned int)(unsigned int)NUM_TUBES;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ClassATubePreParameters(lua_State* L) {
  int SWIG_arg = 0;
  ClassATubePreParameters *result = 0 ;
  
  SWIG_check_num_args("ClassATubePreParameters::ClassATubePreParameters",0,0)
  result = (ClassATubePreParameters *)new ClassATubePreParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ClassATubePreParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassATubePreParameters_inputLevel_dB_set(lua_State* L) {
  int SWIG_arg = 0;
  ClassATubePreParameters *arg1 = (ClassATubePreParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("ClassATubePreParameters::inputLevel_dB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClassATubePreParameters::inputLevel_dB",1,"ClassATubePreParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClassATubePreParameters::inputLevel_dB",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClassATubePreParameters,0))){
    SWIG_fail_ptr("ClassATubePreParameters_inputLevel_dB_set",1,SWIGTYPE_p_ClassATubePreParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->inputLevel_dB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassATubePreParameters_inputLevel_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  ClassATubePreParameters *arg1 = (ClassATubePreParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("ClassATubePreParameters::inputLevel_dB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClassATubePreParameters::inputLevel_dB",1,"ClassATubePreParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClassATubePreParameters,0))){
    SWIG_fail_ptr("ClassATubePreParameters_inputLevel_dB_get",1,SWIGTYPE_p_ClassATubePreParameters);
  }
  
  result = (DspFloatType) ((arg1)->inputLevel_dB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassATubePreParameters_saturation_set(lua_State* L) {
  int SWIG_arg = 0;
  ClassATubePreParameters *arg1 = (ClassATubePreParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("ClassATubePreParameters::saturation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClassATubePreParameters::saturation",1,"ClassATubePreParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClassATubePreParameters::saturation",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClassATubePreParameters,0))){
    SWIG_fail_ptr("ClassATubePreParameters_saturation_set",1,SWIGTYPE_p_ClassATubePreParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->saturation = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassATubePreParameters_saturation_get(lua_State* L) {
  int SWIG_arg = 0;
  ClassATubePreParameters *arg1 = (ClassATubePreParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("ClassATubePreParameters::saturation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClassATubePreParameters::saturation",1,"ClassATubePreParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClassATubePreParameters,0))){
    SWIG_fail_ptr("ClassATubePreParameters_saturation_get",1,SWIGTYPE_p_ClassATubePreParameters);
  }
  
  result = (DspFloatType) ((arg1)->saturation);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassATubePreParameters_asymmetry_set(lua_State* L) {
  int SWIG_arg = 0;
  ClassATubePreParameters *arg1 = (ClassATubePreParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("ClassATubePreParameters::asymmetry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClassATubePreParameters::asymmetry",1,"ClassATubePreParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClassATubePreParameters::asymmetry",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClassATubePreParameters,0))){
    SWIG_fail_ptr("ClassATubePreParameters_asymmetry_set",1,SWIGTYPE_p_ClassATubePreParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->asymmetry = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassATubePreParameters_asymmetry_get(lua_State* L) {
  int SWIG_arg = 0;
  ClassATubePreParameters *arg1 = (ClassATubePreParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("ClassATubePreParameters::asymmetry",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClassATubePreParameters::asymmetry",1,"ClassATubePreParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClassATubePreParameters,0))){
    SWIG_fail_ptr("ClassATubePreParameters_asymmetry_get",1,SWIGTYPE_p_ClassATubePreParameters);
  }
  
  result = (DspFloatType) ((arg1)->asymmetry);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassATubePreParameters_outputLevel_dB_set(lua_State* L) {
  int SWIG_arg = 0;
  ClassATubePreParameters *arg1 = (ClassATubePreParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("ClassATubePreParameters::outputLevel_dB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClassATubePreParameters::outputLevel_dB",1,"ClassATubePreParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClassATubePreParameters::outputLevel_dB",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClassATubePreParameters,0))){
    SWIG_fail_ptr("ClassATubePreParameters_outputLevel_dB_set",1,SWIGTYPE_p_ClassATubePreParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->outputLevel_dB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassATubePreParameters_outputLevel_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  ClassATubePreParameters *arg1 = (ClassATubePreParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("ClassATubePreParameters::outputLevel_dB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClassATubePreParameters::outputLevel_dB",1,"ClassATubePreParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClassATubePreParameters,0))){
    SWIG_fail_ptr("ClassATubePreParameters_outputLevel_dB_get",1,SWIGTYPE_p_ClassATubePreParameters);
  }
  
  result = (DspFloatType) ((arg1)->outputLevel_dB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassATubePreParameters_lowShelf_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  ClassATubePreParameters *arg1 = (ClassATubePreParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("ClassATubePreParameters::lowShelf_fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClassATubePreParameters::lowShelf_fc",1,"ClassATubePreParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClassATubePreParameters::lowShelf_fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClassATubePreParameters,0))){
    SWIG_fail_ptr("ClassATubePreParameters_lowShelf_fc_set",1,SWIGTYPE_p_ClassATubePreParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->lowShelf_fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassATubePreParameters_lowShelf_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  ClassATubePreParameters *arg1 = (ClassATubePreParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("ClassATubePreParameters::lowShelf_fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClassATubePreParameters::lowShelf_fc",1,"ClassATubePreParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClassATubePreParameters,0))){
    SWIG_fail_ptr("ClassATubePreParameters_lowShelf_fc_get",1,SWIGTYPE_p_ClassATubePreParameters);
  }
  
  result = (DspFloatType) ((arg1)->lowShelf_fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassATubePreParameters_lowShelfBoostCut_dB_set(lua_State* L) {
  int SWIG_arg = 0;
  ClassATubePreParameters *arg1 = (ClassATubePreParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("ClassATubePreParameters::lowShelfBoostCut_dB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClassATubePreParameters::lowShelfBoostCut_dB",1,"ClassATubePreParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClassATubePreParameters::lowShelfBoostCut_dB",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClassATubePreParameters,0))){
    SWIG_fail_ptr("ClassATubePreParameters_lowShelfBoostCut_dB_set",1,SWIGTYPE_p_ClassATubePreParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->lowShelfBoostCut_dB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassATubePreParameters_lowShelfBoostCut_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  ClassATubePreParameters *arg1 = (ClassATubePreParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("ClassATubePreParameters::lowShelfBoostCut_dB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClassATubePreParameters::lowShelfBoostCut_dB",1,"ClassATubePreParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClassATubePreParameters,0))){
    SWIG_fail_ptr("ClassATubePreParameters_lowShelfBoostCut_dB_get",1,SWIGTYPE_p_ClassATubePreParameters);
  }
  
  result = (DspFloatType) ((arg1)->lowShelfBoostCut_dB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassATubePreParameters_highShelf_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  ClassATubePreParameters *arg1 = (ClassATubePreParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("ClassATubePreParameters::highShelf_fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClassATubePreParameters::highShelf_fc",1,"ClassATubePreParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClassATubePreParameters::highShelf_fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClassATubePreParameters,0))){
    SWIG_fail_ptr("ClassATubePreParameters_highShelf_fc_set",1,SWIGTYPE_p_ClassATubePreParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->highShelf_fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassATubePreParameters_highShelf_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  ClassATubePreParameters *arg1 = (ClassATubePreParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("ClassATubePreParameters::highShelf_fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClassATubePreParameters::highShelf_fc",1,"ClassATubePreParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClassATubePreParameters,0))){
    SWIG_fail_ptr("ClassATubePreParameters_highShelf_fc_get",1,SWIGTYPE_p_ClassATubePreParameters);
  }
  
  result = (DspFloatType) ((arg1)->highShelf_fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassATubePreParameters_highShelfBoostCut_dB_set(lua_State* L) {
  int SWIG_arg = 0;
  ClassATubePreParameters *arg1 = (ClassATubePreParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("ClassATubePreParameters::highShelfBoostCut_dB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClassATubePreParameters::highShelfBoostCut_dB",1,"ClassATubePreParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClassATubePreParameters::highShelfBoostCut_dB",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClassATubePreParameters,0))){
    SWIG_fail_ptr("ClassATubePreParameters_highShelfBoostCut_dB_set",1,SWIGTYPE_p_ClassATubePreParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->highShelfBoostCut_dB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassATubePreParameters_highShelfBoostCut_dB_get(lua_State* L) {
  int SWIG_arg = 0;
  ClassATubePreParameters *arg1 = (ClassATubePreParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("ClassATubePreParameters::highShelfBoostCut_dB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClassATubePreParameters::highShelfBoostCut_dB",1,"ClassATubePreParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClassATubePreParameters,0))){
    SWIG_fail_ptr("ClassATubePreParameters_highShelfBoostCut_dB_get",1,SWIGTYPE_p_ClassATubePreParameters);
  }
  
  result = (DspFloatType) ((arg1)->highShelfBoostCut_dB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ClassATubePreParameters(void *obj) {
ClassATubePreParameters *arg1 = (ClassATubePreParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_ClassATubePreParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ClassATubePreParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ClassATubePreParameters_attributes[] = {
    { "inputLevel_dB", _wrap_ClassATubePreParameters_inputLevel_dB_get, _wrap_ClassATubePreParameters_inputLevel_dB_set },
    { "saturation", _wrap_ClassATubePreParameters_saturation_get, _wrap_ClassATubePreParameters_saturation_set },
    { "asymmetry", _wrap_ClassATubePreParameters_asymmetry_get, _wrap_ClassATubePreParameters_asymmetry_set },
    { "outputLevel_dB", _wrap_ClassATubePreParameters_outputLevel_dB_get, _wrap_ClassATubePreParameters_outputLevel_dB_set },
    { "lowShelf_fc", _wrap_ClassATubePreParameters_lowShelf_fc_get, _wrap_ClassATubePreParameters_lowShelf_fc_set },
    { "lowShelfBoostCut_dB", _wrap_ClassATubePreParameters_lowShelfBoostCut_dB_get, _wrap_ClassATubePreParameters_lowShelfBoostCut_dB_set },
    { "highShelf_fc", _wrap_ClassATubePreParameters_highShelf_fc_get, _wrap_ClassATubePreParameters_highShelf_fc_set },
    { "highShelfBoostCut_dB", _wrap_ClassATubePreParameters_highShelfBoostCut_dB_get, _wrap_ClassATubePreParameters_highShelfBoostCut_dB_set },
    {0,0,0}
};
static swig_lua_method swig_ClassATubePreParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_ClassATubePreParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ClassATubePreParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ClassATubePreParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ClassATubePreParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ClassATubePreParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ClassATubePreParameters_Sf_SwigStatic = {
    "ClassATubePreParameters",
    swig_ClassATubePreParameters_Sf_SwigStatic_methods,
    swig_ClassATubePreParameters_Sf_SwigStatic_attributes,
    swig_ClassATubePreParameters_Sf_SwigStatic_constants,
    swig_ClassATubePreParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ClassATubePreParameters_bases[] = {0};
static const char *swig_ClassATubePreParameters_base_names[] = {0};
static swig_lua_class _wrap_class_ClassATubePreParameters = { "ClassATubePreParameters", "ClassATubePreParameters", &SWIGTYPE_p_ClassATubePreParameters,_proxy__wrap_new_ClassATubePreParameters, swig_delete_ClassATubePreParameters, swig_ClassATubePreParameters_methods, swig_ClassATubePreParameters_attributes, &swig_ClassATubePreParameters_Sf_SwigStatic, swig_ClassATubePreParameters_meta, swig_ClassATubePreParameters_bases, swig_ClassATubePreParameters_base_names };

static int _wrap_new_ClassATubePre(lua_State* L) {
  int SWIG_arg = 0;
  ClassATubePre *result = 0 ;
  
  SWIG_check_num_args("ClassATubePre::ClassATubePre",0,0)
  result = (ClassATubePre *)new ClassATubePre();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ClassATubePre,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassATubePre_reset(lua_State* L) {
  int SWIG_arg = 0;
  ClassATubePre *arg1 = (ClassATubePre *) 0 ;
  DspFloatType arg2 ;
  bool result;
  
  SWIG_check_num_args("ClassATubePre::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClassATubePre::reset",1,"ClassATubePre *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClassATubePre::reset",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClassATubePre,0))){
    SWIG_fail_ptr("ClassATubePre_reset",1,SWIGTYPE_p_ClassATubePre);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassATubePre_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  ClassATubePre *arg1 = (ClassATubePre *) 0 ;
  ClassATubePreParameters result;
  
  SWIG_check_num_args("ClassATubePre::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClassATubePre::getParameters",1,"ClassATubePre *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClassATubePre,0))){
    SWIG_fail_ptr("ClassATubePre_getParameters",1,SWIGTYPE_p_ClassATubePre);
  }
  
  result = (arg1)->getParameters();
  {
    ClassATubePreParameters * resultptr = new ClassATubePreParameters((const ClassATubePreParameters &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ClassATubePreParameters,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassATubePre_setParameters(lua_State* L) {
  int SWIG_arg = 0;
  ClassATubePre *arg1 = (ClassATubePre *) 0 ;
  ClassATubePreParameters *arg2 = 0 ;
  
  SWIG_check_num_args("ClassATubePre::setParameters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClassATubePre::setParameters",1,"ClassATubePre *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ClassATubePre::setParameters",2,"ClassATubePreParameters const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClassATubePre,0))){
    SWIG_fail_ptr("ClassATubePre_setParameters",1,SWIGTYPE_p_ClassATubePre);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ClassATubePreParameters,0))){
    SWIG_fail_ptr("ClassATubePre_setParameters",2,SWIGTYPE_p_ClassATubePreParameters);
  }
  
  (arg1)->setParameters((ClassATubePreParameters const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassATubePre_canProcessAudioFrame(lua_State* L) {
  int SWIG_arg = 0;
  ClassATubePre *arg1 = (ClassATubePre *) 0 ;
  bool result;
  
  SWIG_check_num_args("ClassATubePre::canProcessAudioFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClassATubePre::canProcessAudioFrame",1,"ClassATubePre *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClassATubePre,0))){
    SWIG_fail_ptr("ClassATubePre_canProcessAudioFrame",1,SWIGTYPE_p_ClassATubePre);
  }
  
  result = (bool)(arg1)->canProcessAudioFrame();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClassATubePre_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  ClassATubePre *arg1 = (ClassATubePre *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("ClassATubePre::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClassATubePre::processAudioSample",1,"ClassATubePre *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClassATubePre::processAudioSample",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClassATubePre,0))){
    SWIG_fail_ptr("ClassATubePre_processAudioSample",1,SWIGTYPE_p_ClassATubePre);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ClassATubePre(void *obj) {
ClassATubePre *arg1 = (ClassATubePre *) obj;
delete arg1;
}
static int _proxy__wrap_new_ClassATubePre(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ClassATubePre);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ClassATubePre_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ClassATubePre_methods[]= {
    { "reset", _wrap_ClassATubePre_reset},
    { "getParameters", _wrap_ClassATubePre_getParameters},
    { "setParameters", _wrap_ClassATubePre_setParameters},
    { "canProcessAudioFrame", _wrap_ClassATubePre_canProcessAudioFrame},
    { "processAudioSample", _wrap_ClassATubePre_processAudioSample},
    {0,0}
};
static swig_lua_method swig_ClassATubePre_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ClassATubePre_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ClassATubePre_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ClassATubePre_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ClassATubePre_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ClassATubePre_Sf_SwigStatic = {
    "ClassATubePre",
    swig_ClassATubePre_Sf_SwigStatic_methods,
    swig_ClassATubePre_Sf_SwigStatic_attributes,
    swig_ClassATubePre_Sf_SwigStatic_constants,
    swig_ClassATubePre_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ClassATubePre_bases[] = {0,0};
static const char *swig_ClassATubePre_base_names[] = {"IAudioSignalProcessor *",0};
static swig_lua_class _wrap_class_ClassATubePre = { "ClassATubePre", "ClassATubePre", &SWIGTYPE_p_ClassATubePre,_proxy__wrap_new_ClassATubePre, swig_delete_ClassATubePre, swig_ClassATubePre_methods, swig_ClassATubePre_attributes, &swig_ClassATubePre_Sf_SwigStatic, swig_ClassATubePre_meta, swig_ClassATubePre_bases, swig_ClassATubePre_base_names };

static int _wrap_new_BitCrusherParameters(lua_State* L) {
  int SWIG_arg = 0;
  BitCrusherParameters *result = 0 ;
  
  SWIG_check_num_args("BitCrusherParameters::BitCrusherParameters",0,0)
  result = (BitCrusherParameters *)new BitCrusherParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BitCrusherParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitCrusherParameters_quantizedBitDepth_set(lua_State* L) {
  int SWIG_arg = 0;
  BitCrusherParameters *arg1 = (BitCrusherParameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("BitCrusherParameters::quantizedBitDepth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitCrusherParameters::quantizedBitDepth",1,"BitCrusherParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BitCrusherParameters::quantizedBitDepth",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitCrusherParameters,0))){
    SWIG_fail_ptr("BitCrusherParameters_quantizedBitDepth_set",1,SWIGTYPE_p_BitCrusherParameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->quantizedBitDepth = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitCrusherParameters_quantizedBitDepth_get(lua_State* L) {
  int SWIG_arg = 0;
  BitCrusherParameters *arg1 = (BitCrusherParameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("BitCrusherParameters::quantizedBitDepth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitCrusherParameters::quantizedBitDepth",1,"BitCrusherParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitCrusherParameters,0))){
    SWIG_fail_ptr("BitCrusherParameters_quantizedBitDepth_get",1,SWIGTYPE_p_BitCrusherParameters);
  }
  
  result = (DspFloatType) ((arg1)->quantizedBitDepth);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BitCrusherParameters(void *obj) {
BitCrusherParameters *arg1 = (BitCrusherParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_BitCrusherParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BitCrusherParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BitCrusherParameters_attributes[] = {
    { "quantizedBitDepth", _wrap_BitCrusherParameters_quantizedBitDepth_get, _wrap_BitCrusherParameters_quantizedBitDepth_set },
    {0,0,0}
};
static swig_lua_method swig_BitCrusherParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_BitCrusherParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BitCrusherParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BitCrusherParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BitCrusherParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BitCrusherParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BitCrusherParameters_Sf_SwigStatic = {
    "BitCrusherParameters",
    swig_BitCrusherParameters_Sf_SwigStatic_methods,
    swig_BitCrusherParameters_Sf_SwigStatic_attributes,
    swig_BitCrusherParameters_Sf_SwigStatic_constants,
    swig_BitCrusherParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BitCrusherParameters_bases[] = {0};
static const char *swig_BitCrusherParameters_base_names[] = {0};
static swig_lua_class _wrap_class_BitCrusherParameters = { "BitCrusherParameters", "BitCrusherParameters", &SWIGTYPE_p_BitCrusherParameters,_proxy__wrap_new_BitCrusherParameters, swig_delete_BitCrusherParameters, swig_BitCrusherParameters_methods, swig_BitCrusherParameters_attributes, &swig_BitCrusherParameters_Sf_SwigStatic, swig_BitCrusherParameters_meta, swig_BitCrusherParameters_bases, swig_BitCrusherParameters_base_names };

static int _wrap_new_BitCrusher(lua_State* L) {
  int SWIG_arg = 0;
  BitCrusher *result = 0 ;
  
  SWIG_check_num_args("BitCrusher::BitCrusher",0,0)
  result = (BitCrusher *)new BitCrusher();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BitCrusher,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitCrusher_reset(lua_State* L) {
  int SWIG_arg = 0;
  BitCrusher *arg1 = (BitCrusher *) 0 ;
  DspFloatType arg2 ;
  bool result;
  
  SWIG_check_num_args("BitCrusher::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitCrusher::reset",1,"BitCrusher *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BitCrusher::reset",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitCrusher,0))){
    SWIG_fail_ptr("BitCrusher_reset",1,SWIGTYPE_p_BitCrusher);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (bool)(arg1)->reset(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitCrusher_getParameters(lua_State* L) {
  int SWIG_arg = 0;
  BitCrusher *arg1 = (BitCrusher *) 0 ;
  BitCrusherParameters result;
  
  SWIG_check_num_args("BitCrusher::getParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitCrusher::getParameters",1,"BitCrusher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitCrusher,0))){
    SWIG_fail_ptr("BitCrusher_getParameters",1,SWIGTYPE_p_BitCrusher);
  }
  
  result = (arg1)->getParameters();
  {
    BitCrusherParameters * resultptr = new BitCrusherParameters((const BitCrusherParameters &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BitCrusherParameters,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitCrusher_setParameters(lua_State* L) {
  int SWIG_arg = 0;
  BitCrusher *arg1 = (BitCrusher *) 0 ;
  BitCrusherParameters *arg2 = 0 ;
  
  SWIG_check_num_args("BitCrusher::setParameters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitCrusher::setParameters",1,"BitCrusher *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BitCrusher::setParameters",2,"BitCrusherParameters const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitCrusher,0))){
    SWIG_fail_ptr("BitCrusher_setParameters",1,SWIGTYPE_p_BitCrusher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BitCrusherParameters,0))){
    SWIG_fail_ptr("BitCrusher_setParameters",2,SWIGTYPE_p_BitCrusherParameters);
  }
  
  (arg1)->setParameters((BitCrusherParameters const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitCrusher_canProcessAudioFrame(lua_State* L) {
  int SWIG_arg = 0;
  BitCrusher *arg1 = (BitCrusher *) 0 ;
  bool result;
  
  SWIG_check_num_args("BitCrusher::canProcessAudioFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitCrusher::canProcessAudioFrame",1,"BitCrusher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitCrusher,0))){
    SWIG_fail_ptr("BitCrusher_canProcessAudioFrame",1,SWIGTYPE_p_BitCrusher);
  }
  
  result = (bool)(arg1)->canProcessAudioFrame();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitCrusher_processAudioSample(lua_State* L) {
  int SWIG_arg = 0;
  BitCrusher *arg1 = (BitCrusher *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("BitCrusher::processAudioSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitCrusher::processAudioSample",1,"BitCrusher *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BitCrusher::processAudioSample",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitCrusher,0))){
    SWIG_fail_ptr("BitCrusher_processAudioSample",1,SWIGTYPE_p_BitCrusher);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->processAudioSample(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BitCrusher(void *obj) {
BitCrusher *arg1 = (BitCrusher *) obj;
delete arg1;
}
static int _proxy__wrap_new_BitCrusher(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BitCrusher);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BitCrusher_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BitCrusher_methods[]= {
    { "reset", _wrap_BitCrusher_reset},
    { "getParameters", _wrap_BitCrusher_getParameters},
    { "setParameters", _wrap_BitCrusher_setParameters},
    { "canProcessAudioFrame", _wrap_BitCrusher_canProcessAudioFrame},
    { "processAudioSample", _wrap_BitCrusher_processAudioSample},
    {0,0}
};
static swig_lua_method swig_BitCrusher_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BitCrusher_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BitCrusher_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BitCrusher_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BitCrusher_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BitCrusher_Sf_SwigStatic = {
    "BitCrusher",
    swig_BitCrusher_Sf_SwigStatic_methods,
    swig_BitCrusher_Sf_SwigStatic_attributes,
    swig_BitCrusher_Sf_SwigStatic_constants,
    swig_BitCrusher_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BitCrusher_bases[] = {0,0};
static const char *swig_BitCrusher_base_names[] = {"IAudioSignalProcessor *",0};
static swig_lua_class _wrap_class_BitCrusher = { "BitCrusher", "BitCrusher", &SWIGTYPE_p_BitCrusher,_proxy__wrap_new_BitCrusher, swig_delete_BitCrusher, swig_BitCrusher_methods, swig_BitCrusher_attributes, &swig_BitCrusher_Sf_SwigStatic, swig_BitCrusher_meta, swig_BitCrusher_bases, swig_BitCrusher_base_names };

static int _wrap_new_float_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::vector",2,"float const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< float > *)new std::vector< float >(arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< float > *)new std::vector< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_float_vector",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_vector__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::vector(size_t,float const &)\n"
    "    std::vector< float >::vector(size_t)\n"
    "    std::vector< float >::vector(std::vector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("std::vector< float >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__getitem",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector___getitem",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)std_vector_Sl_float_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("std::vector< float >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__setitem",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::__setitem",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector___setitem",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  std_vector_Sl_float_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  SwigValueWrapper< std::vector_iterator< float > > result;
  
  SWIG_check_num_args("std::vector< float >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::begin",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_begin",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = std_vector_Sl_float_Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< float > * resultptr = new std::vector_iterator< float >((const std::vector_iterator< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  SwigValueWrapper< std::vector_iterator< float > > result;
  
  SWIG_check_num_args("std::vector< float >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::end",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_c_end",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = std_vector_Sl_float_Sg__end__SWIG(arg1);
  {
    std::vector_iterator< float > * resultptr = new std::vector_iterator< float >((const std::vector_iterator< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::erase",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_erase",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_float_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< float >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::erase",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_erase",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_float_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::erase(size_t)\n"
    "    std::vector< float >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::front",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_front",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::back",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("std::vector< float >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::push_back",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::push_back",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_push_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::pop_back",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_pop_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::at",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_at",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::vector< float >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::assign",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::assign",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_assign",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::data",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_data",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::size",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_size",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< float >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::empty",1,"std::vector< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_empty",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (bool)((std::vector< float > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::resize",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_resize",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::clear",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_clear",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< float >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::swap",1,"std::vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< float >::swap",2,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_swap",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_swap",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::shrink_to_fit",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::reserve",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_reserve",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::max_size",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_max_size",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::capacity",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_capacity",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_vector(void *obj) {
std::vector< float > *arg1 = (std::vector< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_vector_methods[]= {
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    { "begin", _wrap_float_vector_begin},
    { "c_end", _wrap_float_vector_c_end},
    { "erase", _wrap_float_vector_erase},
    { "front", _wrap_float_vector_front},
    { "back", _wrap_float_vector_back},
    { "push_back", _wrap_float_vector_push_back},
    { "pop_back", _wrap_float_vector_pop_back},
    { "at", _wrap_float_vector_at},
    { "assign", _wrap_float_vector_assign},
    { "data", _wrap_float_vector_data},
    { "size", _wrap_float_vector_size},
    { "empty", _wrap_float_vector_empty},
    { "resize", _wrap_float_vector_resize},
    { "clear", _wrap_float_vector_clear},
    { "swap", _wrap_float_vector_swap},
    { "shrink_to_fit", _wrap_float_vector_shrink_to_fit},
    { "reserve", _wrap_float_vector_reserve},
    { "max_size", _wrap_float_vector_max_size},
    { "capacity", _wrap_float_vector_capacity},
    {0,0}
};
static swig_lua_method swig_float_vector_meta[] = {
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_float_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_vector_Sf_SwigStatic = {
    "float_vector",
    swig_float_vector_Sf_SwigStatic_methods,
    swig_float_vector_Sf_SwigStatic_attributes,
    swig_float_vector_Sf_SwigStatic_constants,
    swig_float_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_vector_bases[] = {0};
static const char *swig_float_vector_base_names[] = {0};
static swig_lua_class _wrap_class_float_vector = { "float_vector", "float_vector", &SWIGTYPE_p_std__vectorT_float_t,_proxy__wrap_new_float_vector, swig_delete_float_vector, swig_float_vector_methods, swig_float_vector_attributes, &swig_float_vector_Sf_SwigStatic, swig_float_vector_meta, swig_float_vector_bases, swig_float_vector_base_names };

static int _wrap_new_double_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::vector",2,"double const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"std::vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("new_double_vector",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_double_vector__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_double_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector(size_t,double const &)\n"
    "    std::vector< double >::vector(size_t)\n"
    "    std::vector< double >::vector(std::vector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("std::vector< double >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__getitem",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector___getitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)std_vector_Sl_double_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("std::vector< double >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__setitem",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::__setitem",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector___setitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  std_vector_Sl_double_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SwigValueWrapper< std::vector_iterator< double > > result;
  
  SWIG_check_num_args("std::vector< double >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::begin",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_begin",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = std_vector_Sl_double_Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< double > * resultptr = new std::vector_iterator< double >((const std::vector_iterator< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SwigValueWrapper< std::vector_iterator< double > > result;
  
  SWIG_check_num_args("std::vector< double >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::end",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_c_end",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = std_vector_Sl_double_Sg__end__SWIG(arg1);
  {
    std::vector_iterator< double > * resultptr = new std::vector_iterator< double >((const std::vector_iterator< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::erase",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_erase",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_double_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< double >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::erase",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_erase",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_double_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_double_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::erase(size_t)\n"
    "    std::vector< double >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::front",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_front",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::back",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("std::vector< double >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::push_back",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::push_back",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_push_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::pop_back",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_pop_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::at",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_at",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_num_args("std::vector< double >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::assign",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::assign",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_assign",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(double const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::data",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_data",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::size",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< double >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::empty",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_empty",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)((std::vector< double > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::resize",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_resize",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::clear",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_clear",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< double >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::swap",1,"std::vector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< double >::swap",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_swap",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_swap",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::shrink_to_fit",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::reserve",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_reserve",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::max_size",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_max_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::capacity",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_capacity",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_vector(void *obj) {
std::vector< double > *arg1 = (std::vector< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_vector_methods[]= {
    { "__getitem", _wrap_double_vector___getitem},
    { "__setitem", _wrap_double_vector___setitem},
    { "begin", _wrap_double_vector_begin},
    { "c_end", _wrap_double_vector_c_end},
    { "erase", _wrap_double_vector_erase},
    { "front", _wrap_double_vector_front},
    { "back", _wrap_double_vector_back},
    { "push_back", _wrap_double_vector_push_back},
    { "pop_back", _wrap_double_vector_pop_back},
    { "at", _wrap_double_vector_at},
    { "assign", _wrap_double_vector_assign},
    { "data", _wrap_double_vector_data},
    { "size", _wrap_double_vector_size},
    { "empty", _wrap_double_vector_empty},
    { "resize", _wrap_double_vector_resize},
    { "clear", _wrap_double_vector_clear},
    { "swap", _wrap_double_vector_swap},
    { "shrink_to_fit", _wrap_double_vector_shrink_to_fit},
    { "reserve", _wrap_double_vector_reserve},
    { "max_size", _wrap_double_vector_max_size},
    { "capacity", _wrap_double_vector_capacity},
    {0,0}
};
static swig_lua_method swig_double_vector_meta[] = {
    { "__getitem", _wrap_double_vector___getitem},
    { "__setitem", _wrap_double_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_double_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_vector_Sf_SwigStatic = {
    "double_vector",
    swig_double_vector_Sf_SwigStatic_methods,
    swig_double_vector_Sf_SwigStatic_attributes,
    swig_double_vector_Sf_SwigStatic_constants,
    swig_double_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_vector_bases[] = {0};
static const char *swig_double_vector_base_names[] = {0};
static swig_lua_class _wrap_class_double_vector = { "double_vector", "double_vector", &SWIGTYPE_p_std__vectorT_double_t,_proxy__wrap_new_double_vector, swig_delete_double_vector, swig_double_vector_methods, swig_double_vector_attributes, &swig_double_vector_Sf_SwigStatic, swig_double_vector_meta, swig_double_vector_bases, swig_double_vector_base_names };

static int _wrap_new_complex_float_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::complex< float > *arg2 = 0 ;
  std::vector< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::vector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::vector",2,"std::complex< float > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("new_complex_float_vector",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (std::vector< std::complex< float > > *)new std::vector< std::complex< float > >(arg1,(std::complex< float > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_float_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< std::complex< float > > *)new std::vector< std::complex< float > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_float_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = 0 ;
  std::vector< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::vector",1,"std::vector< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("new_complex_float_vector",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (std::vector< std::complex< float > > *)new std::vector< std::complex< float > >((std::vector< std::complex< float > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_float_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_complex_float_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_complex_float_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_complex_float_vector__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_complex_float_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< float > >::vector(size_t,std::complex< float > const &)\n"
    "    std::vector< std::complex< float > >::vector(size_t)\n"
    "    std::vector< std::complex< float > >::vector(std::vector< std::complex< float > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_float_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::__getitem",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector___getitem",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = std_vector_Sl_std_complex_Sl_float_Sg__Sg____getitem__SWIG(arg1,arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > arg3 ;
  std::complex< float > *argp3 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::__setitem",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< float > >::__setitem",3,"std::complex< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector___setitem",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("complex_float_vector___setitem",3,SWIGTYPE_p_std__complexT_float_t);
  }
  arg3 = *argp3;
  
  std_vector_Sl_std_complex_Sl_float_Sg__Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::complex< float > > > result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::begin",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_begin",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = std_vector_Sl_std_complex_Sl_float_Sg__Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< std::complex< float > > * resultptr = new std::vector_iterator< std::complex< float > >((const std::vector_iterator< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::complex< float > > > result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::end",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_c_end",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = std_vector_Sl_std_complex_Sl_float_Sg__Sg__end__SWIG(arg1);
  {
    std::vector_iterator< std::complex< float > > * resultptr = new std::vector_iterator< std::complex< float > >((const std::vector_iterator< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::erase",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_erase",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_std_complex_Sl_float_Sg__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::erase",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< std::complex< float > >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_erase",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_std_complex_Sl_float_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex_float_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_complex_float_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_float_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< float > >::erase(size_t)\n"
    "    std::vector< std::complex< float > >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_float_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::front",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_front",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (std::complex< float > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::back",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_back",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (std::complex< float > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::push_back",1,"std::vector< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::push_back",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_push_back",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("complex_float_vector_push_back",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  (arg1)->push_back((std::complex< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::pop_back",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_pop_back",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::at",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_at",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::complex< float > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > *arg3 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::assign",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< float > >::assign",3,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_assign",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("complex_float_vector_assign",3,SWIGTYPE_p_std__complexT_float_t);
  }
  
  (arg1)->assign(arg2,(std::complex< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::data",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_data",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (std::complex< float > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::size",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_size",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::empty",1,"std::vector< std::complex< float > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_empty",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (bool)((std::vector< std::complex< float > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::resize",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_resize",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::clear",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_clear",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::vector< std::complex< float > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::swap",1,"std::vector< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::swap",2,"std::vector< std::complex< float > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_swap",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_swap",2,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::shrink_to_fit",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::reserve",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_reserve",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::max_size",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_max_size",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::capacity",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_capacity",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_complex_float_vector(void *obj) {
std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_complex_float_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_complex_float_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_complex_float_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_complex_float_vector_methods[]= {
    { "__getitem", _wrap_complex_float_vector___getitem},
    { "__setitem", _wrap_complex_float_vector___setitem},
    { "begin", _wrap_complex_float_vector_begin},
    { "c_end", _wrap_complex_float_vector_c_end},
    { "erase", _wrap_complex_float_vector_erase},
    { "front", _wrap_complex_float_vector_front},
    { "back", _wrap_complex_float_vector_back},
    { "push_back", _wrap_complex_float_vector_push_back},
    { "pop_back", _wrap_complex_float_vector_pop_back},
    { "at", _wrap_complex_float_vector_at},
    { "assign", _wrap_complex_float_vector_assign},
    { "data", _wrap_complex_float_vector_data},
    { "size", _wrap_complex_float_vector_size},
    { "empty", _wrap_complex_float_vector_empty},
    { "resize", _wrap_complex_float_vector_resize},
    { "clear", _wrap_complex_float_vector_clear},
    { "swap", _wrap_complex_float_vector_swap},
    { "shrink_to_fit", _wrap_complex_float_vector_shrink_to_fit},
    { "reserve", _wrap_complex_float_vector_reserve},
    { "max_size", _wrap_complex_float_vector_max_size},
    { "capacity", _wrap_complex_float_vector_capacity},
    {0,0}
};
static swig_lua_method swig_complex_float_vector_meta[] = {
    { "__getitem", _wrap_complex_float_vector___getitem},
    { "__setitem", _wrap_complex_float_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_complex_float_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_complex_float_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_complex_float_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_complex_float_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_complex_float_vector_Sf_SwigStatic = {
    "complex_float_vector",
    swig_complex_float_vector_Sf_SwigStatic_methods,
    swig_complex_float_vector_Sf_SwigStatic_attributes,
    swig_complex_float_vector_Sf_SwigStatic_constants,
    swig_complex_float_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_complex_float_vector_bases[] = {0};
static const char *swig_complex_float_vector_base_names[] = {0};
static swig_lua_class _wrap_class_complex_float_vector = { "complex_float_vector", "complex_float_vector", &SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,_proxy__wrap_new_complex_float_vector, swig_delete_complex_float_vector, swig_complex_float_vector_methods, swig_complex_float_vector_attributes, &swig_complex_float_vector_Sf_SwigStatic, swig_complex_float_vector_meta, swig_complex_float_vector_bases, swig_complex_float_vector_base_names };

static int _wrap_new_complex_double_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::complex< double > *arg2 = 0 ;
  std::vector< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::vector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::vector",2,"std::complex< double > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_complex_double_vector",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (std::vector< std::complex< double > > *)new std::vector< std::complex< double > >(arg1,(std::complex< double > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_double_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< std::complex< double > > *)new std::vector< std::complex< double > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_double_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = 0 ;
  std::vector< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::vector",1,"std::vector< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("new_complex_double_vector",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (std::vector< std::complex< double > > *)new std::vector< std::complex< double > >((std::vector< std::complex< double > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_double_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_complex_double_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_complex_double_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_complex_double_vector__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_complex_double_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< double > >::vector(size_t,std::complex< double > const &)\n"
    "    std::vector< std::complex< double > >::vector(size_t)\n"
    "    std::vector< std::complex< double > >::vector(std::vector< std::complex< double > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_double_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::__getitem",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector___getitem",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = std_vector_Sl_std_complex_Sl_double_Sg__Sg____getitem__SWIG(arg1,arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > arg3 ;
  std::complex< double > *argp3 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::__setitem",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< double > >::__setitem",3,"std::complex< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector___setitem",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_double_vector___setitem",3,SWIGTYPE_p_std__complexT_double_t);
  }
  arg3 = *argp3;
  
  std_vector_Sl_std_complex_Sl_double_Sg__Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::complex< double > > > result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::begin",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_begin",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = std_vector_Sl_std_complex_Sl_double_Sg__Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< std::complex< double > > * resultptr = new std::vector_iterator< std::complex< double > >((const std::vector_iterator< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::complex< double > > > result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::end",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_c_end",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = std_vector_Sl_std_complex_Sl_double_Sg__Sg__end__SWIG(arg1);
  {
    std::vector_iterator< std::complex< double > > * resultptr = new std::vector_iterator< std::complex< double > >((const std::vector_iterator< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::erase",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_erase",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_std_complex_Sl_double_Sg__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::erase",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< std::complex< double > >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_erase",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_std_complex_Sl_double_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex_double_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_complex_double_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_double_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< double > >::erase(size_t)\n"
    "    std::vector< std::complex< double > >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_double_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::front",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_front",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (std::complex< double > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::back",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_back",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (std::complex< double > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::push_back",1,"std::vector< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::push_back",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_push_back",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_double_vector_push_back",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->push_back((std::complex< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::pop_back",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_pop_back",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::at",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_at",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::complex< double > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > *arg3 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::assign",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< double > >::assign",3,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_assign",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_double_vector_assign",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->assign(arg2,(std::complex< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::data",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_data",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (std::complex< double > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::size",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_size",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::empty",1,"std::vector< std::complex< double > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_empty",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (bool)((std::vector< std::complex< double > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::resize",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_resize",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::clear",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_clear",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::vector< std::complex< double > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::swap",1,"std::vector< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::swap",2,"std::vector< std::complex< double > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_swap",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_swap",2,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::shrink_to_fit",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::reserve",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_reserve",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::max_size",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_max_size",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::capacity",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_capacity",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_complex_double_vector(void *obj) {
std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_complex_double_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_complex_double_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_complex_double_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_complex_double_vector_methods[]= {
    { "__getitem", _wrap_complex_double_vector___getitem},
    { "__setitem", _wrap_complex_double_vector___setitem},
    { "begin", _wrap_complex_double_vector_begin},
    { "c_end", _wrap_complex_double_vector_c_end},
    { "erase", _wrap_complex_double_vector_erase},
    { "front", _wrap_complex_double_vector_front},
    { "back", _wrap_complex_double_vector_back},
    { "push_back", _wrap_complex_double_vector_push_back},
    { "pop_back", _wrap_complex_double_vector_pop_back},
    { "at", _wrap_complex_double_vector_at},
    { "assign", _wrap_complex_double_vector_assign},
    { "data", _wrap_complex_double_vector_data},
    { "size", _wrap_complex_double_vector_size},
    { "empty", _wrap_complex_double_vector_empty},
    { "resize", _wrap_complex_double_vector_resize},
    { "clear", _wrap_complex_double_vector_clear},
    { "swap", _wrap_complex_double_vector_swap},
    { "shrink_to_fit", _wrap_complex_double_vector_shrink_to_fit},
    { "reserve", _wrap_complex_double_vector_reserve},
    { "max_size", _wrap_complex_double_vector_max_size},
    { "capacity", _wrap_complex_double_vector_capacity},
    {0,0}
};
static swig_lua_method swig_complex_double_vector_meta[] = {
    { "__getitem", _wrap_complex_double_vector___getitem},
    { "__setitem", _wrap_complex_double_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_complex_double_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_complex_double_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_complex_double_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_complex_double_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_complex_double_vector_Sf_SwigStatic = {
    "complex_double_vector",
    swig_complex_double_vector_Sf_SwigStatic_methods,
    swig_complex_double_vector_Sf_SwigStatic_attributes,
    swig_complex_double_vector_Sf_SwigStatic_constants,
    swig_complex_double_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_complex_double_vector_bases[] = {0};
static const char *swig_complex_double_vector_base_names[] = {0};
static swig_lua_class _wrap_class_complex_double_vector = { "complex_double_vector", "complex_double_vector", &SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,_proxy__wrap_new_complex_double_vector, swig_delete_complex_double_vector, swig_complex_double_vector_methods, swig_complex_double_vector_attributes, &swig_complex_double_vector_Sf_SwigStatic, swig_complex_double_vector_meta, swig_complex_double_vector_bases, swig_complex_double_vector_base_names };

static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "LPF128_882", _wrap_LPF128_882_get, _wrap_LPF128_882_set },
    { "LPF128_1764", _wrap_LPF128_1764_get, _wrap_LPF128_1764_set },
    { "LPF128_96", _wrap_LPF128_96_get, _wrap_LPF128_96_set },
    { "LPF128_192", _wrap_LPF128_192_get, _wrap_LPF128_192_set },
    { "LPF256_882", _wrap_LPF256_882_get, _wrap_LPF256_882_set },
    { "LPF256_1764", _wrap_LPF256_1764_get, _wrap_LPF256_1764_set },
    { "LPF256_96", _wrap_LPF256_96_get, _wrap_LPF256_96_set },
    { "LPF256_192", _wrap_LPF256_192_get, _wrap_LPF256_192_set },
    { "LPF512_882", _wrap_LPF512_882_get, _wrap_LPF512_882_set },
    { "LPF512_1764", _wrap_LPF512_1764_get, _wrap_LPF512_1764_set },
    { "LPF512_96", _wrap_LPF512_96_get, _wrap_LPF512_96_set },
    { "LPF512_192", _wrap_LPF512_192_get, _wrap_LPF512_192_set },
    { "LPF1024_882", _wrap_LPF1024_882_get, _wrap_LPF1024_882_set },
    { "LPF1024_1764", _wrap_LPF1024_1764_get, _wrap_LPF1024_1764_set },
    { "LPF1024_96", _wrap_LPF1024_96_get, _wrap_LPF1024_96_set },
    { "LPF1024_192", _wrap_LPF1024_192_get, _wrap_LPF1024_192_set },
    { "kSmallestPositiveFloatValue", _wrap_kSmallestPositiveFloatValue_get, SWIG_Lua_set_immutable },
    { "kSmallestNegativeFloatValue", _wrap_kSmallestNegativeFloatValue_get, SWIG_Lua_set_immutable },
    { "kSqrtTwo", _wrap_kSqrtTwo_get, SWIG_Lua_set_immutable },
    { "kMinFilterFrequency", _wrap_kMinFilterFrequency_get, SWIG_Lua_set_immutable },
    { "kMaxFilterFrequency", _wrap_kMaxFilterFrequency_get, SWIG_Lua_set_immutable },
    { "ARC4RANDOMMAX", _wrap_ARC4RANDOMMAX_get, SWIG_Lua_set_immutable },
    { "kPi", _wrap_kPi_get, SWIG_Lua_set_immutable },
    { "kTwoPi", _wrap_kTwoPi_get, SWIG_Lua_set_immutable },
    { "ENVELOPE_DETECT_MODE_PEAK", _wrap_ENVELOPE_DETECT_MODE_PEAK_get, SWIG_Lua_set_immutable },
    { "ENVELOPE_DETECT_MODE_MS", _wrap_ENVELOPE_DETECT_MODE_MS_get, SWIG_Lua_set_immutable },
    { "ENVELOPE_DETECT_MODE_RMS", _wrap_ENVELOPE_DETECT_MODE_RMS_get, SWIG_Lua_set_immutable },
    { "ENVELOPE_DETECT_MODE_NONE", _wrap_ENVELOPE_DETECT_MODE_NONE_get, SWIG_Lua_set_immutable },
    { "ENVELOPE_DIGITAL_TC", _wrap_ENVELOPE_DIGITAL_TC_get, SWIG_Lua_set_immutable },
    { "ENVELOPE_ANALOG_TC", _wrap_ENVELOPE_ANALOG_TC_get, SWIG_Lua_set_immutable },
    { "PHASER_STAGES", _wrap_PHASER_STAGES_get, SWIG_Lua_set_immutable },
    { "apf0_minF", _wrap_apf0_minF_get, SWIG_Lua_set_immutable },
    { "apf0_maxF", _wrap_apf0_maxF_get, SWIG_Lua_set_immutable },
    { "apf1_minF", _wrap_apf1_minF_get, SWIG_Lua_set_immutable },
    { "apf1_maxF", _wrap_apf1_maxF_get, SWIG_Lua_set_immutable },
    { "apf2_minF", _wrap_apf2_minF_get, SWIG_Lua_set_immutable },
    { "apf2_maxF", _wrap_apf2_maxF_get, SWIG_Lua_set_immutable },
    { "apf3_minF", _wrap_apf3_minF_get, SWIG_Lua_set_immutable },
    { "apf3_maxF", _wrap_apf3_maxF_get, SWIG_Lua_set_immutable },
    { "apf4_minF", _wrap_apf4_minF_get, SWIG_Lua_set_immutable },
    { "apf4_maxF", _wrap_apf4_maxF_get, SWIG_Lua_set_immutable },
    { "apf5_minF", _wrap_apf5_minF_get, SWIG_Lua_set_immutable },
    { "apf5_maxF", _wrap_apf5_maxF_get, SWIG_Lua_set_immutable },
    { "NUM_TUBES", _wrap_NUM_TUBES_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("fe_divbyzero", FE_DIVBYZERO)},
    {SWIG_LUA_CONSTTAB_INT("fe_inexact", FE_INEXACT)},
    {SWIG_LUA_CONSTTAB_INT("fe_invalid", FE_INVALID)},
    {SWIG_LUA_CONSTTAB_INT("fe_overflow", FE_OVERFLOW)},
    {SWIG_LUA_CONSTTAB_INT("fe_underflow", FE_UNDERFLOW)},
    {SWIG_LUA_CONSTTAB_INT("fe_all_except", FE_ALL_EXCEPT)},
    {SWIG_LUA_CONSTTAB_INT("fe_downward", FE_DOWNWARD)},
    {SWIG_LUA_CONSTTAB_INT("fe_tonearest", FE_TONEAREST)},
    {SWIG_LUA_CONSTTAB_INT("fe_towardzero", FE_TOWARDZERO)},
    {SWIG_LUA_CONSTTAB_INT("fe_upward", FE_UPWARD)},
    {SWIG_LUA_CONSTTAB_INT("fe_dfl_env", FE_DFL_ENV)},
    {SWIG_LUA_CONSTTAB_INT("char_bit", CHAR_BIT)},
    {SWIG_LUA_CONSTTAB_INT("schar_min", SCHAR_MIN)},
    {SWIG_LUA_CONSTTAB_INT("schar_max", SCHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("uchar_max", UCHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("char_min", CHAR_MIN)},
    {SWIG_LUA_CONSTTAB_INT("char_max", CHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("mb_len_max", MB_LEN_MAX)},
    {SWIG_LUA_CONSTTAB_INT("shrt_min", SHRT_MIN)},
    {SWIG_LUA_CONSTTAB_INT("shrt_max", SHRT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ushrt_max", USHRT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("int_min", INT_MIN)},
    {SWIG_LUA_CONSTTAB_INT("int_max", INT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("uint_max", UINT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("long_min", LONG_MIN)},
    {SWIG_LUA_CONSTTAB_INT("long_max", LONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ulong_max", ULONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("llong_min", LLONG_MIN)},
    {SWIG_LUA_CONSTTAB_INT("llong_max", LLONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ullong_max", ULLONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("FILTER_TAP_128", 128)},
    {SWIG_LUA_CONSTTAB_INT("FILTER_TAP_256", 256)},
    {SWIG_LUA_CONSTTAB_INT("FILTER_TAP_512", 512)},
    {SWIG_LUA_CONSTTAB_INT("FILTER_TAP_1024", 1024)},
    {SWIG_LUA_CONSTTAB_INT("NEGATIVE", 0)},
    {SWIG_LUA_CONSTTAB_INT("POSITIVE", 1)},
    {SWIG_LUA_CONSTTAB_INT("brickwallFilter_kBrickLPF", brickwallFilter::kBrickLPF)},
    {SWIG_LUA_CONSTTAB_INT("brickwallFilter_kBrickHPF", brickwallFilter::kBrickHPF)},
    {SWIG_LUA_CONSTTAB_INT("brickwallFilter_kBrickBPF", brickwallFilter::kBrickBPF)},
    {SWIG_LUA_CONSTTAB_INT("brickwallFilter_kBrickBSF", brickwallFilter::kBrickBSF)},
    {SWIG_LUA_CONSTTAB_INT("edgeTransition_kFallingEdge", edgeTransition::kFallingEdge)},
    {SWIG_LUA_CONSTTAB_INT("edgeTransition_kRisingEdge", edgeTransition::kRisingEdge)},
    {SWIG_LUA_CONSTTAB_INT("analogFilter_kLPF1", analogFilter::kLPF1)},
    {SWIG_LUA_CONSTTAB_INT("analogFilter_kHPF1", analogFilter::kHPF1)},
    {SWIG_LUA_CONSTTAB_INT("analogFilter_kLPF2", analogFilter::kLPF2)},
    {SWIG_LUA_CONSTTAB_INT("analogFilter_kHPF2", analogFilter::kHPF2)},
    {SWIG_LUA_CONSTTAB_INT("analogFilter_kBPF2", analogFilter::kBPF2)},
    {SWIG_LUA_CONSTTAB_INT("analogFilter_kBSF2", analogFilter::kBSF2)},
    {SWIG_LUA_CONSTTAB_INT("interpolation_kLinear", interpolation::kLinear)},
    {SWIG_LUA_CONSTTAB_INT("interpolation_kLagrange4", interpolation::kLagrange4)},
    {SWIG_LUA_CONSTTAB_INT("a0", a0)},
    {SWIG_LUA_CONSTTAB_INT("a1", a1)},
    {SWIG_LUA_CONSTTAB_INT("a2", a2)},
    {SWIG_LUA_CONSTTAB_INT("b1", b1)},
    {SWIG_LUA_CONSTTAB_INT("b2", b2)},
    {SWIG_LUA_CONSTTAB_INT("c0", c0)},
    {SWIG_LUA_CONSTTAB_INT("d0", d0)},
    {SWIG_LUA_CONSTTAB_INT("numCoeffs", numCoeffs)},
    {SWIG_LUA_CONSTTAB_INT("x_z1", x_z1)},
    {SWIG_LUA_CONSTTAB_INT("x_z2", x_z2)},
    {SWIG_LUA_CONSTTAB_INT("y_z1", y_z1)},
    {SWIG_LUA_CONSTTAB_INT("y_z2", y_z2)},
    {SWIG_LUA_CONSTTAB_INT("numStates", numStates)},
    {SWIG_LUA_CONSTTAB_INT("biquadAlgorithm_kDirect", biquadAlgorithm::kDirect)},
    {SWIG_LUA_CONSTTAB_INT("biquadAlgorithm_kCanonical", biquadAlgorithm::kCanonical)},
    {SWIG_LUA_CONSTTAB_INT("biquadAlgorithm_kTransposeDirect", biquadAlgorithm::kTransposeDirect)},
    {SWIG_LUA_CONSTTAB_INT("biquadAlgorithm_kTransposeCanonical", biquadAlgorithm::kTransposeCanonical)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kLPF1P", filterAlgorithm::kLPF1P)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kLPF1", filterAlgorithm::kLPF1)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kHPF1", filterAlgorithm::kHPF1)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kLPF2", filterAlgorithm::kLPF2)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kHPF2", filterAlgorithm::kHPF2)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kBPF2", filterAlgorithm::kBPF2)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kBSF2", filterAlgorithm::kBSF2)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kButterLPF2", filterAlgorithm::kButterLPF2)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kButterHPF2", filterAlgorithm::kButterHPF2)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kButterBPF2", filterAlgorithm::kButterBPF2)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kButterBSF2", filterAlgorithm::kButterBSF2)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kMMALPF2", filterAlgorithm::kMMALPF2)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kMMALPF2B", filterAlgorithm::kMMALPF2B)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kLowShelf", filterAlgorithm::kLowShelf)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kHiShelf", filterAlgorithm::kHiShelf)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kNCQParaEQ", filterAlgorithm::kNCQParaEQ)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kCQParaEQ", filterAlgorithm::kCQParaEQ)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kLWRLPF2", filterAlgorithm::kLWRLPF2)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kLWRHPF2", filterAlgorithm::kLWRHPF2)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kAPF1", filterAlgorithm::kAPF1)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kAPF2", filterAlgorithm::kAPF2)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kResonA", filterAlgorithm::kResonA)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kResonB", filterAlgorithm::kResonB)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kMatchLP2A", filterAlgorithm::kMatchLP2A)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kMatchLP2B", filterAlgorithm::kMatchLP2B)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kMatchBP2A", filterAlgorithm::kMatchBP2A)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kMatchBP2B", filterAlgorithm::kMatchBP2B)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kImpInvLP1", filterAlgorithm::kImpInvLP1)},
    {SWIG_LUA_CONSTTAB_INT("filterAlgorithm_kImpInvLP2", filterAlgorithm::kImpInvLP2)},
    {SWIG_LUA_CONSTTAB_INT("vaFilterAlgorithm_kLPF1", vaFilterAlgorithm::kLPF1)},
    {SWIG_LUA_CONSTTAB_INT("vaFilterAlgorithm_kHPF1", vaFilterAlgorithm::kHPF1)},
    {SWIG_LUA_CONSTTAB_INT("vaFilterAlgorithm_kAPF1", vaFilterAlgorithm::kAPF1)},
    {SWIG_LUA_CONSTTAB_INT("vaFilterAlgorithm_kSVF_LP", vaFilterAlgorithm::kSVF_LP)},
    {SWIG_LUA_CONSTTAB_INT("vaFilterAlgorithm_kSVF_HP", vaFilterAlgorithm::kSVF_HP)},
    {SWIG_LUA_CONSTTAB_INT("vaFilterAlgorithm_kSVF_BP", vaFilterAlgorithm::kSVF_BP)},
    {SWIG_LUA_CONSTTAB_INT("vaFilterAlgorithm_kSVF_BS", vaFilterAlgorithm::kSVF_BS)},
    {SWIG_LUA_CONSTTAB_INT("distortionModel_kSoftClip", distortionModel::kSoftClip)},
    {SWIG_LUA_CONSTTAB_INT("distortionModel_kArcTan", distortionModel::kArcTan)},
    {SWIG_LUA_CONSTTAB_INT("distortionModel_kFuzzAsym", distortionModel::kFuzzAsym)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "Huge", _wrap_Huge},
    { "Hugef", _wrap_Hugef},
    { "Infinity", _wrap_Infinity},
    { "NaN", _wrap_NaN},
    { "absf", _wrap_absf},
    { "cubef", _wrap_cubef},
    { "sqrtf", _wrap_sqrtf},
    { "expf", _wrap_expf},
    { "exp2f", _wrap_exp2f},
    { "logf", _wrap_logf},
    { "log10f", _wrap_log10f},
    { "log2f", _wrap_log2f},
    { "logbf", _wrap_logbf},
    { "powf", _wrap_powf},
    { "floorf", _wrap_floorf},
    { "acosf", _wrap_acosf},
    { "asinf", _wrap_asinf},
    { "atanf", _wrap_atanf},
    { "atan2f", _wrap_atan2f},
    { "cosf", _wrap_cosf},
    { "sinf", _wrap_sinf},
    { "tanf", _wrap_tanf},
    { "coshf", _wrap_coshf},
    { "sinhf", _wrap_sinhf},
    { "tanhf", _wrap_tanhf},
    { "lgammaf", _wrap_lgammaf},
    { "acoshf", _wrap_acoshf},
    { "asinhf", _wrap_asinhf},
    { "atanhf", _wrap_atanhf},
    { "cbrtf", _wrap_cbrtf},
    { "ceilf", _wrap_ceilf},
    { "copysignf", _wrap_copysignf},
    { "erff", _wrap_erff},
    { "erfcf", _wrap_erfcf},
    { "expm1f", _wrap_expm1f},
    { "fdimf", _wrap_fdimf},
    { "fmaf", _wrap_fmaf},
    { "fmaxf", _wrap_fmaxf},
    { "fminf", _wrap_fminf},
    { "fmodf", _wrap_fmodf},
    { "fpclassifyf", _wrap_fpclassifyf},
    { "hypotf", _wrap_hypotf},
    { "ilogbf", _wrap_ilogbf},
    { "isfinitef", _wrap_isfinitef},
    { "isgreaterf", _wrap_isgreaterf},
    { "isgreaterequalf", _wrap_isgreaterequalf},
    { "isinff", _wrap_isinff},
    { "islessf", _wrap_islessf},
    { "islessequalf", _wrap_islessequalf},
    { "isnanf", _wrap_isnanf},
    { "isnormalf", _wrap_isnormalf},
    { "isunorderedf", _wrap_isunorderedf},
    { "ldexpf", _wrap_ldexpf},
    { "llrintf", _wrap_llrintf},
    { "llroundf", _wrap_llroundf},
    { "log1pf", _wrap_log1pf},
    { "lrintf", _wrap_lrintf},
    { "lroundf", _wrap_lroundf},
    { "nanf", _wrap_nanf},
    { "nanff", _wrap_nanff},
    { "nanlf", _wrap_nanlf},
    { "nearbyintf", _wrap_nearbyintf},
    { "nextafterf", _wrap_nextafterf},
    { "nexttowardf", _wrap_nexttowardf},
    { "remainderf", _wrap_remainderf},
    { "rintf", _wrap_rintf},
    { "roundf", _wrap_roundf},
    { "scalblnf", _wrap_scalblnf},
    { "scalbnf", _wrap_scalbnf},
    { "squaref", _wrap_squaref},
    { "tgammaf", _wrap_tgammaf},
    { "truncf", _wrap_truncf},
    { "absd", _wrap_absd},
    { "sqrtd", _wrap_sqrtd},
    { "expd", _wrap_expd},
    { "exp2d", _wrap_exp2d},
    { "logd", _wrap_logd},
    { "log10d", _wrap_log10d},
    { "log2d", _wrap_log2d},
    { "logbd", _wrap_logbd},
    { "powd", _wrap_powd},
    { "floord", _wrap_floord},
    { "acosd", _wrap_acosd},
    { "asind", _wrap_asind},
    { "atand", _wrap_atand},
    { "atan2d", _wrap_atan2d},
    { "cosd", _wrap_cosd},
    { "sind", _wrap_sind},
    { "tand", _wrap_tand},
    { "coshd", _wrap_coshd},
    { "sinhd", _wrap_sinhd},
    { "tanhd", _wrap_tanhd},
    { "lgammad", _wrap_lgammad},
    { "acoshd", _wrap_acoshd},
    { "asinhd", _wrap_asinhd},
    { "atanhd", _wrap_atanhd},
    { "cbrtd", _wrap_cbrtd},
    { "ceild", _wrap_ceild},
    { "copysignd", _wrap_copysignd},
    { "erfd", _wrap_erfd},
    { "erfcd", _wrap_erfcd},
    { "expm1d", _wrap_expm1d},
    { "fdimd", _wrap_fdimd},
    { "fmad", _wrap_fmad},
    { "fmaxd", _wrap_fmaxd},
    { "fmind", _wrap_fmind},
    { "fmodd", _wrap_fmodd},
    { "fpclassifyd", _wrap_fpclassifyd},
    { "hypotd", _wrap_hypotd},
    { "ilogbd", _wrap_ilogbd},
    { "isfinited", _wrap_isfinited},
    { "isgreaterd", _wrap_isgreaterd},
    { "isgreaterequald", _wrap_isgreaterequald},
    { "isinfd", _wrap_isinfd},
    { "islessd", _wrap_islessd},
    { "islessequald", _wrap_islessequald},
    { "isnand", _wrap_isnand},
    { "isnormald", _wrap_isnormald},
    { "isunorderedd", _wrap_isunorderedd},
    { "ldexpd", _wrap_ldexpd},
    { "llrintd", _wrap_llrintd},
    { "llroundd", _wrap_llroundd},
    { "log1pd", _wrap_log1pd},
    { "lrintd", _wrap_lrintd},
    { "lroundd", _wrap_lroundd},
    { "nand", _wrap_nand},
    { "nanfd", _wrap_nanfd},
    { "nanld", _wrap_nanld},
    { "nearbyintd", _wrap_nearbyintd},
    { "nextafterd", _wrap_nextafterd},
    { "nexttowardd", _wrap_nexttowardd},
    { "remainderd", _wrap_remainderd},
    { "rintd", _wrap_rintd},
    { "roundd", _wrap_roundd},
    { "scalblnd", _wrap_scalblnd},
    { "scalbnd", _wrap_scalbnd},
    { "squared", _wrap_squared},
    { "tgammad", _wrap_tgammad},
    { "truncd", _wrap_truncd},
    { "feclearexcept", _wrap_feclearexcept},
    { "fegetexceptflag", _wrap_fegetexceptflag},
    { "feraiseexcept", _wrap_feraiseexcept},
    { "fesetexceptflag", _wrap_fesetexceptflag},
    { "fetestexcept", _wrap_fetestexcept},
    { "fegetround", _wrap_fegetround},
    { "fesetround", _wrap_fesetround},
    { "fegetenv", _wrap_fegetenv},
    { "feholdexcept", _wrap_feholdexcept},
    { "fesetenv", _wrap_fesetenv},
    { "feupdateenv", _wrap_feupdateenv},
    { "arc4random", _wrap_arc4random},
    { "checkFloatUnderflow", _wrap_checkFloatUnderflow},
    { "doLinearInterpolation", _wrap_doLinearInterpolation},
    { "doLagrangeInterpolation", _wrap_doLagrangeInterpolation},
    { "boundValue", _wrap_boundValue},
    { "doUnipolarModulationFromMin", _wrap_doUnipolarModulationFromMin},
    { "doUnipolarModulationFromMax", _wrap_doUnipolarModulationFromMax},
    { "doBipolarModulation", _wrap_doBipolarModulation},
    { "unipolarToBipolar", _wrap_unipolarToBipolar},
    { "bipolarToUnipolar", _wrap_bipolarToUnipolar},
    { "raw2dB", _wrap_raw2dB},
    { "dB2Raw", _wrap_dB2Raw},
    { "peakGainFor_Q", _wrap_peakGainFor_Q},
    { "dBPeakGainFor_Q", _wrap_dBPeakGainFor_Q},
    { "doWhiteNoise", _wrap_doWhiteNoise},
    { "sgn", _wrap_sgn},
    { "calcWSGain", _wrap_calcWSGain},
    { "atanWaveShaper", _wrap_atanWaveShaper},
    { "tanhWaveShaper", _wrap_tanhWaveShaper},
    { "softClipWaveShaper", _wrap_softClipWaveShaper},
    { "fuzzExp1WaveShaper", _wrap_fuzzExp1WaveShaper},
    { "getMagResponse", _wrap_getMagResponse},
    { "complexMultiply", _wrap_complexMultiply},
    { "calcEdgeFrequencies", _wrap_calcEdgeFrequencies},
    { "findEdgeTargetBin", _wrap_findEdgeTargetBin},
    { "getTransitionBandData", _wrap_getTransitionBandData},
    { "calculateBrickwallMagArray", _wrap_calculateBrickwallMagArray},
    { "calculateAnalogMagArray", _wrap_calculateAnalogMagArray},
    { "freqSample", _wrap_freqSample},
    { "getMagnitude", _wrap_getMagnitude},
    { "getPhase", _wrap_getPhase},
    { "principalArg", _wrap_principalArg},
    { "resample", _wrap_resample},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_gslice,
&_wrap_class_slice,
&_wrap_class_float_complex,
&_wrap_class_double_complex,
&_wrap_class_float_valarray,
&_wrap_class_float_numeric_limits,
&_wrap_class_double_numeric_limits,
&_wrap_class_int_numeric_limits,
&_wrap_class_uint_numeric_limits,
&_wrap_class_short_numeric_limits,
&_wrap_class_ushort_numeric_limits,
&_wrap_class_long_numeric_limits,
&_wrap_class_ulong_numeric_limits,
&_wrap_class_llong_numeric_limits,
&_wrap_class_ullong_numeric_limits,
&_wrap_class_ComplexNumber,
&_wrap_class_BrickwallMagData,
&_wrap_class_TransitionBandData,
&_wrap_class_AnalogMagData,
&_wrap_class_IAudioSignalProcessor,
&_wrap_class_SignalGenData,
&_wrap_class_IAudioSignalGenerator,
&_wrap_class_BiquadParameters,
&_wrap_class_Biquad,
&_wrap_class_AudioFilterParameters,
&_wrap_class_AudioFilter,
&_wrap_class_FilterBankOutput,
&_wrap_class_LRFilterBankParameters,
&_wrap_class_LRFilterBank,
&_wrap_class_PhaseShifterParameters,
&_wrap_class_PhaseShifter,
&_wrap_class_SimpleLPFParameters,
&_wrap_class_SimpleLPF,
&_wrap_class_ZVAFilterParameters,
&_wrap_class_ZVAFilter,
&_wrap_class_EnvelopeFollowerParameters,
&_wrap_class_EnvelopeFollower,
&_wrap_class_TwoBandShelvingFilterParameters,
&_wrap_class_TwoBandShelvingFilter,
&_wrap_class_TriodeClassAParameters,
&_wrap_class_TriodeClassA,
&_wrap_class_ClassATubePreParameters,
&_wrap_class_ClassATubePre,
&_wrap_class_BitCrusherParameters,
&_wrap_class_BitCrusher,
&_wrap_class_float_vector,
&_wrap_class_double_vector,
&_wrap_class_complex_float_vector,
&_wrap_class_complex_double_vector,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "fxdistortion",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_LRFilterBankTo_p_IAudioSignalProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IAudioSignalProcessor *)  ((LRFilterBank *) x));
}
static void *_p_PhaseShifterTo_p_IAudioSignalProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IAudioSignalProcessor *)  ((PhaseShifter *) x));
}
static void *_p_EnvelopeFollowerTo_p_IAudioSignalProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IAudioSignalProcessor *)  ((EnvelopeFollower *) x));
}
static void *_p_ClassATubePreTo_p_IAudioSignalProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IAudioSignalProcessor *)  ((ClassATubePre *) x));
}
static void *_p_SimpleLPFTo_p_IAudioSignalProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IAudioSignalProcessor *)  ((SimpleLPF *) x));
}
static void *_p_BitCrusherTo_p_IAudioSignalProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IAudioSignalProcessor *)  ((BitCrusher *) x));
}
static void *_p_AudioFilterTo_p_IAudioSignalProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IAudioSignalProcessor *)  ((AudioFilter *) x));
}
static void *_p_ZVAFilterTo_p_IAudioSignalProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IAudioSignalProcessor *)  ((ZVAFilter *) x));
}
static void *_p_TwoBandShelvingFilterTo_p_IAudioSignalProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IAudioSignalProcessor *)  ((TwoBandShelvingFilter *) x));
}
static void *_p_TriodeClassATo_p_IAudioSignalProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IAudioSignalProcessor *)  ((TriodeClassA *) x));
}
static void *_p_BiquadTo_p_IAudioSignalProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IAudioSignalProcessor *)  ((Biquad *) x));
}
static swig_type_info _swigt__p_AnalogMagData = {"_p_AnalogMagData", "AnalogMagData *", 0, 0, (void*)&_wrap_class_AnalogMagData, 0};
static swig_type_info _swigt__p_AudioFilter = {"_p_AudioFilter", "AudioFilter *", 0, 0, (void*)&_wrap_class_AudioFilter, 0};
static swig_type_info _swigt__p_AudioFilterParameters = {"_p_AudioFilterParameters", "AudioFilterParameters *", 0, 0, (void*)&_wrap_class_AudioFilterParameters, 0};
static swig_type_info _swigt__p_Biquad = {"_p_Biquad", "Biquad *", 0, 0, (void*)&_wrap_class_Biquad, 0};
static swig_type_info _swigt__p_BiquadParameters = {"_p_BiquadParameters", "BiquadParameters *", 0, 0, (void*)&_wrap_class_BiquadParameters, 0};
static swig_type_info _swigt__p_BitCrusher = {"_p_BitCrusher", "BitCrusher *", 0, 0, (void*)&_wrap_class_BitCrusher, 0};
static swig_type_info _swigt__p_BitCrusherParameters = {"_p_BitCrusherParameters", "BitCrusherParameters *", 0, 0, (void*)&_wrap_class_BitCrusherParameters, 0};
static swig_type_info _swigt__p_BrickwallMagData = {"_p_BrickwallMagData", "BrickwallMagData *", 0, 0, (void*)&_wrap_class_BrickwallMagData, 0};
static swig_type_info _swigt__p_ClassATubePre = {"_p_ClassATubePre", "ClassATubePre *", 0, 0, (void*)&_wrap_class_ClassATubePre, 0};
static swig_type_info _swigt__p_ClassATubePreParameters = {"_p_ClassATubePreParameters", "ClassATubePreParameters *", 0, 0, (void*)&_wrap_class_ClassATubePreParameters, 0};
static swig_type_info _swigt__p_ComplexNumber = {"_p_ComplexNumber", "ComplexNumber *", 0, 0, (void*)&_wrap_class_ComplexNumber, 0};
static swig_type_info _swigt__p_EnvelopeFollower = {"_p_EnvelopeFollower", "EnvelopeFollower *", 0, 0, (void*)&_wrap_class_EnvelopeFollower, 0};
static swig_type_info _swigt__p_EnvelopeFollowerParameters = {"_p_EnvelopeFollowerParameters", "EnvelopeFollowerParameters *", 0, 0, (void*)&_wrap_class_EnvelopeFollowerParameters, 0};
static swig_type_info _swigt__p_FilterBankOutput = {"_p_FilterBankOutput", "FilterBankOutput *", 0, 0, (void*)&_wrap_class_FilterBankOutput, 0};
static swig_type_info _swigt__p_IAudioSignalGenerator = {"_p_IAudioSignalGenerator", "IAudioSignalGenerator *", 0, 0, (void*)&_wrap_class_IAudioSignalGenerator, 0};
static swig_type_info _swigt__p_IAudioSignalProcessor = {"_p_IAudioSignalProcessor", "IAudioSignalProcessor *", 0, 0, (void*)&_wrap_class_IAudioSignalProcessor, 0};
static swig_type_info _swigt__p_LRFilterBank = {"_p_LRFilterBank", "LRFilterBank *", 0, 0, (void*)&_wrap_class_LRFilterBank, 0};
static swig_type_info _swigt__p_LRFilterBankParameters = {"_p_LRFilterBankParameters", "LRFilterBankParameters *", 0, 0, (void*)&_wrap_class_LRFilterBankParameters, 0};
static swig_type_info _swigt__p_PhaseShifter = {"_p_PhaseShifter", "PhaseShifter *", 0, 0, (void*)&_wrap_class_PhaseShifter, 0};
static swig_type_info _swigt__p_PhaseShifterParameters = {"_p_PhaseShifterParameters", "PhaseShifterParameters *", 0, 0, (void*)&_wrap_class_PhaseShifterParameters, 0};
static swig_type_info _swigt__p_SignalGenData = {"_p_SignalGenData", "SignalGenData *", 0, 0, (void*)&_wrap_class_SignalGenData, 0};
static swig_type_info _swigt__p_SimpleLPF = {"_p_SimpleLPF", "SimpleLPF *", 0, 0, (void*)&_wrap_class_SimpleLPF, 0};
static swig_type_info _swigt__p_SimpleLPFParameters = {"_p_SimpleLPFParameters", "SimpleLPFParameters *", 0, 0, (void*)&_wrap_class_SimpleLPFParameters, 0};
static swig_type_info _swigt__p_TransitionBandData = {"_p_TransitionBandData", "TransitionBandData *", 0, 0, (void*)&_wrap_class_TransitionBandData, 0};
static swig_type_info _swigt__p_TriodeClassA = {"_p_TriodeClassA", "TriodeClassA *", 0, 0, (void*)&_wrap_class_TriodeClassA, 0};
static swig_type_info _swigt__p_TriodeClassAParameters = {"_p_TriodeClassAParameters", "TriodeClassAParameters *", 0, 0, (void*)&_wrap_class_TriodeClassAParameters, 0};
static swig_type_info _swigt__p_TwoBandShelvingFilter = {"_p_TwoBandShelvingFilter", "TwoBandShelvingFilter *", 0, 0, (void*)&_wrap_class_TwoBandShelvingFilter, 0};
static swig_type_info _swigt__p_TwoBandShelvingFilterParameters = {"_p_TwoBandShelvingFilterParameters", "TwoBandShelvingFilterParameters *", 0, 0, (void*)&_wrap_class_TwoBandShelvingFilterParameters, 0};
static swig_type_info _swigt__p_ZVAFilter = {"_p_ZVAFilter", "ZVAFilter *", 0, 0, (void*)&_wrap_class_ZVAFilter, 0};
static swig_type_info _swigt__p_ZVAFilterParameters = {"_p_ZVAFilterParameters", "ZVAFilterParameters *", 0, 0, (void*)&_wrap_class_ZVAFilterParameters, 0};
static swig_type_info _swigt__p_double = {"_p_double", "f64 *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_float__float = {"_p_f_float__float", "float (*)(float)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_q_const__float__float = {"_p_f_r_q_const__float__float", "float (*)(float const &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fenv_t = {"_p_fenv_t", "fenv_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fexcept_t = {"_p_fexcept_t", "fexcept_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "DspFloatType *|f32 *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *|i32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "ilong *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *|i64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|i16 *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|i8 *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "std::complex< double > *", 0, 0, (void*)&_wrap_class_double_complex, 0};
static swig_type_info _swigt__p_std__complexT_float_t = {"_p_std__complexT_float_t", "std::complex< float > *", 0, 0, (void*)&_wrap_class_float_complex, 0};
static swig_type_info _swigt__p_std__gslice = {"_p_std__gslice", "std::gslice *", 0, 0, (void*)&_wrap_class_gslice, 0};
static swig_type_info _swigt__p_std__gslice_arrayT_float_t = {"_p_std__gslice_arrayT_float_t", "std::gslice_array< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__indirect_arrayT_float_t = {"_p_std__indirect_arrayT_float_t", "std::indirect_array< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mask_arrayT_float_t = {"_p_std__mask_arrayT_float_t", "std::mask_array< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_double_t = {"_p_std__numeric_limitsT_double_t", "std::numeric_limits< double > *", 0, 0, (void*)&_wrap_class_double_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_float_t = {"_p_std__numeric_limitsT_float_t", "std::numeric_limits< float > *", 0, 0, (void*)&_wrap_class_float_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_int_t = {"_p_std__numeric_limitsT_int_t", "std::numeric_limits< int > *", 0, 0, (void*)&_wrap_class_int_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_long_long_t = {"_p_std__numeric_limitsT_long_long_t", "std::numeric_limits< long long > *", 0, 0, (void*)&_wrap_class_llong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_long_t = {"_p_std__numeric_limitsT_long_t", "std::numeric_limits< long > *", 0, 0, (void*)&_wrap_class_long_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_short_t = {"_p_std__numeric_limitsT_short_t", "std::numeric_limits< short > *", 0, 0, (void*)&_wrap_class_short_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_int_t = {"_p_std__numeric_limitsT_unsigned_int_t", "std::numeric_limits< unsigned int > *", 0, 0, (void*)&_wrap_class_uint_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_long_long_t = {"_p_std__numeric_limitsT_unsigned_long_long_t", "std::numeric_limits< unsigned long long > *", 0, 0, (void*)&_wrap_class_ullong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_long_t = {"_p_std__numeric_limitsT_unsigned_long_t", "std::numeric_limits< unsigned long > *", 0, 0, (void*)&_wrap_class_ulong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_short_t = {"_p_std__numeric_limitsT_unsigned_short_t", "std::numeric_limits< unsigned short > *", 0, 0, (void*)&_wrap_class_ushort_numeric_limits, 0};
static swig_type_info _swigt__p_std__slice = {"_p_std__slice", "std::slice *", 0, 0, (void*)&_wrap_class_slice, 0};
static swig_type_info _swigt__p_std__slice_arrayT_float_t = {"_p_std__slice_arrayT_float_t", "std::slice_array< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__valarrayT_float_t = {"_p_std__valarrayT_float_t", "std::valarray< float > *", 0, 0, (void*)&_wrap_class_float_valarray, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< double > *", 0, 0, (void*)&_wrap_class_double_vector, 0};
static swig_type_info _swigt__p_std__vectorT_float_t = {"_p_std__vectorT_float_t", "std::vector< float > *", 0, 0, (void*)&_wrap_class_float_vector, 0};
static swig_type_info _swigt__p_std__vectorT_std__complexT_double_t_t = {"_p_std__vectorT_std__complexT_double_t_t", "std::vector< std::complex< double > > *", 0, 0, (void*)&_wrap_class_complex_double_vector, 0};
static swig_type_info _swigt__p_std__vectorT_std__complexT_float_t_t = {"_p_std__vectorT_std__complexT_float_t_t", "std::vector< std::complex< float > > *", 0, 0, (void*)&_wrap_class_complex_float_vector, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_double_t = {"_p_std__vector_iteratorT_double_t", "std::vector_iterator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_float_t = {"_p_std__vector_iteratorT_float_t", "std::vector_iterator< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_std__complexT_double_t_t = {"_p_std__vector_iteratorT_std__complexT_double_t_t", "std::vector_iterator< std::complex< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_std__complexT_float_t_t = {"_p_std__vector_iteratorT_std__complexT_float_t_t", "std::vector_iterator< std::complex< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "u8 *|unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|u32 *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "ulong *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|u64 *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|u16 *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AnalogMagData,
  &_swigt__p_AudioFilter,
  &_swigt__p_AudioFilterParameters,
  &_swigt__p_Biquad,
  &_swigt__p_BiquadParameters,
  &_swigt__p_BitCrusher,
  &_swigt__p_BitCrusherParameters,
  &_swigt__p_BrickwallMagData,
  &_swigt__p_ClassATubePre,
  &_swigt__p_ClassATubePreParameters,
  &_swigt__p_ComplexNumber,
  &_swigt__p_EnvelopeFollower,
  &_swigt__p_EnvelopeFollowerParameters,
  &_swigt__p_FilterBankOutput,
  &_swigt__p_IAudioSignalGenerator,
  &_swigt__p_IAudioSignalProcessor,
  &_swigt__p_LRFilterBank,
  &_swigt__p_LRFilterBankParameters,
  &_swigt__p_PhaseShifter,
  &_swigt__p_PhaseShifterParameters,
  &_swigt__p_SignalGenData,
  &_swigt__p_SimpleLPF,
  &_swigt__p_SimpleLPFParameters,
  &_swigt__p_TransitionBandData,
  &_swigt__p_TriodeClassA,
  &_swigt__p_TriodeClassAParameters,
  &_swigt__p_TwoBandShelvingFilter,
  &_swigt__p_TwoBandShelvingFilterParameters,
  &_swigt__p_ZVAFilter,
  &_swigt__p_ZVAFilterParameters,
  &_swigt__p_double,
  &_swigt__p_f_float__float,
  &_swigt__p_f_r_q_const__float__float,
  &_swigt__p_fenv_t,
  &_swigt__p_fexcept_t,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_long_long,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__complexT_float_t,
  &_swigt__p_std__gslice,
  &_swigt__p_std__gslice_arrayT_float_t,
  &_swigt__p_std__indirect_arrayT_float_t,
  &_swigt__p_std__mask_arrayT_float_t,
  &_swigt__p_std__numeric_limitsT_double_t,
  &_swigt__p_std__numeric_limitsT_float_t,
  &_swigt__p_std__numeric_limitsT_int_t,
  &_swigt__p_std__numeric_limitsT_long_long_t,
  &_swigt__p_std__numeric_limitsT_long_t,
  &_swigt__p_std__numeric_limitsT_short_t,
  &_swigt__p_std__numeric_limitsT_unsigned_int_t,
  &_swigt__p_std__numeric_limitsT_unsigned_long_long_t,
  &_swigt__p_std__numeric_limitsT_unsigned_long_t,
  &_swigt__p_std__numeric_limitsT_unsigned_short_t,
  &_swigt__p_std__slice,
  &_swigt__p_std__slice_arrayT_float_t,
  &_swigt__p_std__valarrayT_float_t,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_float_t,
  &_swigt__p_std__vectorT_std__complexT_double_t_t,
  &_swigt__p_std__vectorT_std__complexT_float_t_t,
  &_swigt__p_std__vector_iteratorT_double_t,
  &_swigt__p_std__vector_iteratorT_float_t,
  &_swigt__p_std__vector_iteratorT_std__complexT_double_t_t,
  &_swigt__p_std__vector_iteratorT_std__complexT_float_t_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_AnalogMagData[] = {  {&_swigt__p_AnalogMagData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioFilter[] = {  {&_swigt__p_AudioFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioFilterParameters[] = {  {&_swigt__p_AudioFilterParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Biquad[] = {  {&_swigt__p_Biquad, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BiquadParameters[] = {  {&_swigt__p_BiquadParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BitCrusher[] = {  {&_swigt__p_BitCrusher, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BitCrusherParameters[] = {  {&_swigt__p_BitCrusherParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BrickwallMagData[] = {  {&_swigt__p_BrickwallMagData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ClassATubePre[] = {  {&_swigt__p_ClassATubePre, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ClassATubePreParameters[] = {  {&_swigt__p_ClassATubePreParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ComplexNumber[] = {  {&_swigt__p_ComplexNumber, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EnvelopeFollower[] = {  {&_swigt__p_EnvelopeFollower, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EnvelopeFollowerParameters[] = {  {&_swigt__p_EnvelopeFollowerParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FilterBankOutput[] = {  {&_swigt__p_FilterBankOutput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IAudioSignalGenerator[] = {  {&_swigt__p_IAudioSignalGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IAudioSignalProcessor[] = {  {&_swigt__p_LRFilterBank, _p_LRFilterBankTo_p_IAudioSignalProcessor, 0, 0},  {&_swigt__p_PhaseShifter, _p_PhaseShifterTo_p_IAudioSignalProcessor, 0, 0},  {&_swigt__p_EnvelopeFollower, _p_EnvelopeFollowerTo_p_IAudioSignalProcessor, 0, 0},  {&_swigt__p_ClassATubePre, _p_ClassATubePreTo_p_IAudioSignalProcessor, 0, 0},  {&_swigt__p_Biquad, _p_BiquadTo_p_IAudioSignalProcessor, 0, 0},  {&_swigt__p_SimpleLPF, _p_SimpleLPFTo_p_IAudioSignalProcessor, 0, 0},  {&_swigt__p_BitCrusher, _p_BitCrusherTo_p_IAudioSignalProcessor, 0, 0},  {&_swigt__p_AudioFilter, _p_AudioFilterTo_p_IAudioSignalProcessor, 0, 0},  {&_swigt__p_ZVAFilter, _p_ZVAFilterTo_p_IAudioSignalProcessor, 0, 0},  {&_swigt__p_TwoBandShelvingFilter, _p_TwoBandShelvingFilterTo_p_IAudioSignalProcessor, 0, 0},  {&_swigt__p_TriodeClassA, _p_TriodeClassATo_p_IAudioSignalProcessor, 0, 0},  {&_swigt__p_IAudioSignalProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LRFilterBank[] = {  {&_swigt__p_LRFilterBank, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LRFilterBankParameters[] = {  {&_swigt__p_LRFilterBankParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PhaseShifter[] = {  {&_swigt__p_PhaseShifter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PhaseShifterParameters[] = {  {&_swigt__p_PhaseShifterParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SignalGenData[] = {  {&_swigt__p_SignalGenData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleLPF[] = {  {&_swigt__p_SimpleLPF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleLPFParameters[] = {  {&_swigt__p_SimpleLPFParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TransitionBandData[] = {  {&_swigt__p_TransitionBandData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TriodeClassA[] = {  {&_swigt__p_TriodeClassA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TriodeClassAParameters[] = {  {&_swigt__p_TriodeClassAParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TwoBandShelvingFilter[] = {  {&_swigt__p_TwoBandShelvingFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TwoBandShelvingFilterParameters[] = {  {&_swigt__p_TwoBandShelvingFilterParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ZVAFilter[] = {  {&_swigt__p_ZVAFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ZVAFilterParameters[] = {  {&_swigt__p_ZVAFilterParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_float__float[] = {  {&_swigt__p_f_float__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_q_const__float__float[] = {  {&_swigt__p_f_r_q_const__float__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fenv_t[] = {  {&_swigt__p_fenv_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fexcept_t[] = {  {&_swigt__p_fexcept_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_float_t[] = {  {&_swigt__p_std__complexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__gslice[] = {  {&_swigt__p_std__gslice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__gslice_arrayT_float_t[] = {  {&_swigt__p_std__gslice_arrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__indirect_arrayT_float_t[] = {  {&_swigt__p_std__indirect_arrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mask_arrayT_float_t[] = {  {&_swigt__p_std__mask_arrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_double_t[] = {  {&_swigt__p_std__numeric_limitsT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_float_t[] = {  {&_swigt__p_std__numeric_limitsT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_int_t[] = {  {&_swigt__p_std__numeric_limitsT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_long_long_t[] = {  {&_swigt__p_std__numeric_limitsT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_long_t[] = {  {&_swigt__p_std__numeric_limitsT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_short_t[] = {  {&_swigt__p_std__numeric_limitsT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_int_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_long_long_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_long_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_short_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__slice[] = {  {&_swigt__p_std__slice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__slice_arrayT_float_t[] = {  {&_swigt__p_std__slice_arrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__valarrayT_float_t[] = {  {&_swigt__p_std__valarrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_t[] = {  {&_swigt__p_std__vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__complexT_double_t_t[] = {  {&_swigt__p_std__vectorT_std__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__complexT_float_t_t[] = {  {&_swigt__p_std__vectorT_std__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_double_t[] = {  {&_swigt__p_std__vector_iteratorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_float_t[] = {  {&_swigt__p_std__vector_iteratorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_std__complexT_double_t_t[] = {  {&_swigt__p_std__vector_iteratorT_std__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_std__complexT_float_t_t[] = {  {&_swigt__p_std__vector_iteratorT_std__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AnalogMagData,
  _swigc__p_AudioFilter,
  _swigc__p_AudioFilterParameters,
  _swigc__p_Biquad,
  _swigc__p_BiquadParameters,
  _swigc__p_BitCrusher,
  _swigc__p_BitCrusherParameters,
  _swigc__p_BrickwallMagData,
  _swigc__p_ClassATubePre,
  _swigc__p_ClassATubePreParameters,
  _swigc__p_ComplexNumber,
  _swigc__p_EnvelopeFollower,
  _swigc__p_EnvelopeFollowerParameters,
  _swigc__p_FilterBankOutput,
  _swigc__p_IAudioSignalGenerator,
  _swigc__p_IAudioSignalProcessor,
  _swigc__p_LRFilterBank,
  _swigc__p_LRFilterBankParameters,
  _swigc__p_PhaseShifter,
  _swigc__p_PhaseShifterParameters,
  _swigc__p_SignalGenData,
  _swigc__p_SimpleLPF,
  _swigc__p_SimpleLPFParameters,
  _swigc__p_TransitionBandData,
  _swigc__p_TriodeClassA,
  _swigc__p_TriodeClassAParameters,
  _swigc__p_TwoBandShelvingFilter,
  _swigc__p_TwoBandShelvingFilterParameters,
  _swigc__p_ZVAFilter,
  _swigc__p_ZVAFilterParameters,
  _swigc__p_double,
  _swigc__p_f_float__float,
  _swigc__p_f_r_q_const__float__float,
  _swigc__p_fenv_t,
  _swigc__p_fexcept_t,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_long_long,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__complexT_float_t,
  _swigc__p_std__gslice,
  _swigc__p_std__gslice_arrayT_float_t,
  _swigc__p_std__indirect_arrayT_float_t,
  _swigc__p_std__mask_arrayT_float_t,
  _swigc__p_std__numeric_limitsT_double_t,
  _swigc__p_std__numeric_limitsT_float_t,
  _swigc__p_std__numeric_limitsT_int_t,
  _swigc__p_std__numeric_limitsT_long_long_t,
  _swigc__p_std__numeric_limitsT_long_t,
  _swigc__p_std__numeric_limitsT_short_t,
  _swigc__p_std__numeric_limitsT_unsigned_int_t,
  _swigc__p_std__numeric_limitsT_unsigned_long_long_t,
  _swigc__p_std__numeric_limitsT_unsigned_long_t,
  _swigc__p_std__numeric_limitsT_unsigned_short_t,
  _swigc__p_std__slice,
  _swigc__p_std__slice_arrayT_float_t,
  _swigc__p_std__valarrayT_float_t,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_float_t,
  _swigc__p_std__vectorT_std__complexT_double_t_t,
  _swigc__p_std__vectorT_std__complexT_float_t_t,
  _swigc__p_std__vector_iteratorT_double_t,
  _swigc__p_std__vector_iteratorT_float_t,
  _swigc__p_std__vector_iteratorT_std__complexT_double_t_t,
  _swigc__p_std__vector_iteratorT_std__complexT_float_t_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

